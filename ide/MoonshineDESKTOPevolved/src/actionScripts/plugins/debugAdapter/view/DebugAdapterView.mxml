<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 Prominic.NET, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// Author: Prominic.NET, Inc.
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
////////////////////////////////////////////////////////////////////////////////
-->
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:containers="spark.containers.*"
		 xmlns:local="actionScripts.plugins.debugAdapter.view.*"
		 implements="actionScripts.interfaces.IViewWithTitle"
		 horizontalGap="2"
		 width="100%" height="100%" backgroundColor="0x444444">
	<mx:Metadata>
		[Event(name="loadVariables",type="actionScripts.plugins.debugAdapter.events.LoadVariablesEvent")]
	</mx:Metadata>

	<mx:Script><![CDATA[
		import mx.collections.IHierarchicalData;
		import mx.events.AdvancedDataGridEvent;
		import mx.events.ListEvent;
		import actionScripts.plugins.debugAdapter.events.LoadVariablesEvent;
		import actionScripts.plugins.debugAdapter.events.StackFrameEvent;
		import actionScripts.debugAdapter.vo.BaseVariablesReference;
		import actionScripts.debugAdapter.vo.StackFrame;
		import actionScripts.debugAdapter.vo.Variable;
		import actionScripts.events.DebugActionEvent;
		import flash.events.MouseEvent;
		import mx.collections.ICollectionView;
		import mx.collections.ArrayCollection;
		import actionScripts.debugAdapter.vo.Thread;

		[Bindable]
		public var threadsAndStackFrames:IHierarchicalData;

		[Bindable]
		public var scopesAndVars:IHierarchicalData;

		[Bindable]
		public var pausedThreads:ArrayCollection;

		[Bindable]
		public var active:Boolean = false;

		public function get title():String
		{
			return "Debug";
		}

		public function isThreadPaused(thread:Thread):Boolean
		{
			if(!thread)
			{
				return false;
			}
			return this.pausedThreads.getItemIndex(thread.id) != -1;
		}

		private function variablesValueLabelFunction(item:Object, column:AdvancedDataGridColumn = null):String
		{
			if(item is Variable)
			{
				return Variable(item).value;
			}
			return "";
		}

		private function lineLabelFunction(item:Object, column:AdvancedDataGridColumn = null):String
		{
			if(item is StackFrame)
			{
				var stackFrame:StackFrame = StackFrame(item);
				if(stackFrame.source)
				{
					return stackFrame.line.toString();
				}
			}
			return "";
		}

		private function nameDataTipFunction(item:Object):String
		{
			if(item is StackFrame)
			{
				var stackFrame:StackFrame = StackFrame(item);
				var result:String = stackFrame.name;
				if(stackFrame.source)
				{
					result += " (" + stackFrame.line + "," + stackFrame.column + ")";
					result += "\n" + stackFrame.source.path;
				}
				return result;
			}
			return "";
		}

		private function variablesTree_itemOpenHandler(event:AdvancedDataGridEvent):void
		{
			var item:BaseVariablesReference = BaseVariablesReference(event.item);
			if(this.scopesAndVars.hasChildren(item))
			{
				this.dispatchEvent(new LoadVariablesEvent(LoadVariablesEvent.LOAD_VARIABLES, item));
			}
		}

		private function threadsList_itemClickHandler(event:ListEvent):void
		{
			var stackFrame:StackFrame = event.itemRenderer.data as StackFrame;
			if(!stackFrame)
			{
				return;
			}
			this.dispatchEvent(new StackFrameEvent(StackFrameEvent.GOTO_STACK_FRAME, stackFrame));
		}

		private function playButton_clickHandler(event:MouseEvent):void
		{
			this.dispatchEvent(new DebugActionEvent(DebugActionEvent.DEBUG_RESUME));
		}

		private function pauseButton_clickHandler(event:MouseEvent):void
		{
			this.dispatchEvent(new DebugActionEvent(DebugActionEvent.DEBUG_PAUSE))
		}

		private function stopButton_clickHandler(event:MouseEvent):void
		{
			this.dispatchEvent(new DebugActionEvent(DebugActionEvent.DEBUG_STOP));
		}

		private function stepOverButton_clickHandler(event:MouseEvent):void
		{
			this.dispatchEvent(new DebugActionEvent(DebugActionEvent.DEBUG_STEP_OVER));
		}

		private function stepOutButton_clickHandler(event:MouseEvent):void
		{
			this.dispatchEvent(new DebugActionEvent(DebugActionEvent.DEBUG_STEP_OUT));
		}

		private function stepIntoButton_clickHandler(event:MouseEvent):void
		{
			this.dispatchEvent(new DebugActionEvent(DebugActionEvent.DEBUG_STEP_INTO));
		}

		]]></mx:Script>
	
	<mx:Style>
		.variablesOrThreadsTreeHeaderStyles
		{
			color: #e0e0e0;
			horizontalAlign: left;
			horizontalGap: 0;
		}
	</mx:Style>

	<s:VGroup gap="4" horizontalAlign="center" verticalAlign="top"
	          percentHeight="100" width="35" paddingTop="4">
		<s:Button id="playButton" styleName="debugPlayButton" toolTip="Play"
			enabled="{active &amp;&amp; pausedThreads.length > 0}" click="playButton_clickHandler(event)"/>
		<s:Button id="pauseButton" styleName="debugPauseButton" toolTip="Pause"
			enabled="{active &amp;&amp; pausedThreads.length == 0}" click="pauseButton_clickHandler(event)"/>
		<s:Button id="stepOverButton" styleName="debugStepOverButton" toolTip="Step Over"
			enabled="{active &amp;&amp; pausedThreads.length > 0}" click="stepOverButton_clickHandler(event)"/>
		<s:Button id="stepIntoButton" styleName="debugStepIntoButton" toolTip="Step Into"
			enabled="{active &amp;&amp; pausedThreads.length > 0}" click="stepIntoButton_clickHandler(event)"/>
		<s:Button id="stepOutButton" styleName="debugStepOutButton" toolTip="Step Out"
			enabled="{active &amp;&amp; pausedThreads.length > 0}" click="stepOutButton_clickHandler(event)"/>
		<s:Button id="stopButton" styleName="debugStopButton" toolTip="Stop"
			enabled="{active}" click="stopButton_clickHandler(event)"/>
	</s:VGroup>

	<containers:HDividerGroup gap="1" percentWidth="100" percentHeight="100">
		<mx:AdvancedDataGrid id="variablesTree"
			percentWidth="50" percentHeight="100"
			draggableColumns="false"
			sortableColumns="false"
			color="0xe0e0e0"
			fontSize="11"
			verticalScrollBarStyleName="black"
			contentBackgroundColor="0x0"
			textRollOverColor="0xFFFFFF"
			rollOverColor="0x393939"
			selectionColor="0x393939"
			alternatingItemColors="[0x444444, 0x4d4c4c]"
			textSelectedColor="0xe0e0e0"
			borderVisible="false"
			useRollOver="true"
			headerColors="[0x6a6a6a,0x303030]"
			headerStyleName="variablesOrThreadsTreeHeaderStyles"
			sortExpertMode="true"
			headerSortSeparatorSkin="mx.skins.ProgrammaticSkin"
			sortItemRenderer="mx.core.UIComponent"
			chromeColor="#393939"
			dataProvider="{scopesAndVars}"
			itemOpen="variablesTree_itemOpenHandler(event)">
			<mx:columns>
				<mx:AdvancedDataGridColumn headerText="Variables"
					dataField="name" headerWordWrap=""
					showDataTips="true" dataTipField="type"/>
				<mx:AdvancedDataGridColumn headerText="Values"
					labelFunction="{variablesValueLabelFunction}"
					showDataTips="true" dataTipFunction="{variablesValueLabelFunction}"/>
			</mx:columns>
		</mx:AdvancedDataGrid>
		<mx:AdvancedDataGrid id="threadsList"
			percentWidth="50" percentHeight="100"
			draggableColumns="false"
			sortableColumns="false"
			color="0xe0e0e0"
			fontSize="11"
			verticalScrollBarStyleName="black"
			contentBackgroundColor="0x0"
			textRollOverColor="0xFFFFFF"
			rollOverColor="0x393939"
			selectionColor="0x393939"
			alternatingItemColors="[0x444444, 0x4d4c4c]"
			textSelectedColor="0xe0e0e0"
			borderVisible="false"
			useRollOver="true"
			headerColors="[0x6a6a6a,0x303030]"
			headerStyleName="variablesOrThreadsTreeHeaderStyles"
			sortExpertMode="true"
			headerSortSeparatorSkin="mx.skins.ProgrammaticSkin"
			sortItemRenderer="mx.core.UIComponent"
			chromeColor="#393939"
			dataProvider="{threadsAndStackFrames}"
			displayItemsExpanded="true"
			itemClick="threadsList_itemClickHandler(event)">
			<mx:columns>
				<mx:AdvancedDataGridColumn headerText="Stack" dataField="name"
									dataTipField="source" dataTipFunction="{nameDataTipFunction}" showDataTips="true"/>
				<mx:AdvancedDataGridColumn headerText="Line"
					labelFunction="{lineLabelFunction}" width="50">
					<mx:itemRenderer>
						<mx:Component>
							<local:DebugAdapterThreadRenderer
								dispatcher="{outerDocument}"
								playEnabled="{outerDocument.active &amp;&amp; outerDocument.isThreadPaused(this.data as Thread)}"
								pauseEnabled="{outerDocument.active &amp;&amp; !outerDocument.isThreadPaused(this.data as Thread)}"
								stepEnabled="{outerDocument.active &amp;&amp; outerDocument.isThreadPaused(this.data as Thread)}">
								<mx:Script><![CDATA[
									import actionScripts.debugAdapter.vo.Thread;
								]]></mx:Script>
							</local:DebugAdapterThreadRenderer>
						</mx:Component>
					</mx:itemRenderer>
				</mx:AdvancedDataGridColumn>
			</mx:columns>
		</mx:AdvancedDataGrid>
	</containers:HDividerGroup>
</mx:HBox>