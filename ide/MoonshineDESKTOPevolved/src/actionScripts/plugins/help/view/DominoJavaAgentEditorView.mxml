<?xml version="1.0"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->

<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
    width="100%" height="100%"
    creationComplete="onComplete()"
    xmlns:suportclasses="view.suportClasses.*"
    xmlns:collapsiblehdivider="components.collapsibleHDivider.*"
	skinClass="skins.PropertyEditorContainerSkin" xmlns:view="view.*">        

    
 <collapsiblehdivider:CollapsibleEdgeContainersHDividerGroup percentWidth="100" percentHeight="100" bottom="0" top="0" gap="0" minWidth="250">
	   
    
    <s:Scroller width="90%" height="100%" minWidth="700" minHeight="600">
        <s:Group id="codeContentGroup" creationComplete="onContentGroupCreationComplete(event)">
        </s:Group>
    </s:Scroller>

    <s:Group  width="10%"  minWidth="250" minHeight="600" height="100%">
        <s:VGroup horizontalAlign="left" verticalAlign="top" percentHeight="100" percentWidth="100"
		   paddingLeft="0" paddingRight="0">
              <view:PropertyEditorHeader id="propertyEditorHeader" width="100%" />
          
                <s:FormItem  skinClass="skins.FormItemSkin" width="100%">
                    <s:HGroup width="100%" verticalAlign="middle">
                
                    <s:Label text="Title" width="50" direction="rtl"/>
                    <s:Label text="" width="50" id="textInput" direction="rtl"/>
                   
                    <!-- <s:TextInput id="textInput"
                                text=""  width="100" maxChars="100" 
                                enter="textInput_changeHandler(event)" focusOut="textInput_changeHandler(event)" skinClass="skins.TextInputSkin" prompt="This is title for the action"/>
                         -->
                    
                    </s:HGroup>
                </s:FormItem>

                <s:FormItem  skinClass="skins.FormItemSkin" width="100%">
                    <s:HGroup width="100%" verticalAlign="middle">
                
                    <s:Label text="Run on behalf of " width="50" direction="rtl"/>
                    <s:TextInput id="runbehaltof"
                                text="0"  width="20" maxChars="100" 
                                enter="textInput_changeHandler(event)" focusOut="textInput_changeHandler(event)" skinClass="skins.TextInputSkin" prompt="Name of the person for whom the agent is being run. Restricted signers can run agents only under the same authority as their own. Unrestricted signers can run agents on behalf of anyone."/>
                        
                    
                    </s:HGroup>
                </s:FormItem>    


            <s:FormItem label="Run as web user" skinClass="skins.FormItemSkin">
            <s:CheckBox id="runaswebuser"
                    selected="{runaswebuser}"
                    change="check_changeHandler(event)"/>
            </s:FormItem>

             <s:FormItem label="Enabled" skinClass="skins.FormItemSkin">
            <s:CheckBox id="agentenabled"
                    selected="{showinbar}"
                    change="check_changeHandler(event)"/>
            </s:FormItem>

        </s:VGroup>   
	</s:Group>
</collapsiblehdivider:CollapsibleEdgeContainersHDividerGroup>
<fx:Script><![CDATA[
    
    import mx.core.IVisualElement;
    import mx.events.FlexEvent;
    import flash.events.Event;
    import actionScripts.plugins.ui.editor.DominoJavaAgentEditor;

    import mx.controls.Alert;
    import actionScripts.ui.FeathersUIWrapper;
    import actionScripts.locator.IDEModel;

    private var _codeEditor:IVisualElement;

    private var showinmenu:Boolean ;
    private var showinbar:Boolean ;
    private var actionTitle:String="";

    private var model:IDEModel = IDEModel.getInstance();
    private var editor:DominoJavaAgentEditor = null;
       


    public function onComplete():void {

        propertyEditorHeader.componentName = "Domino Java Agent"
        editor=model.activeEditor as DominoJavaAgentEditor;
        
       
    }
    
    public function set codeEditor(value:IVisualElement):void
    {
        _codeEditor = value;
    }

    private function onContentGroupCreationComplete(event:FlexEvent):void
    {
        codeContentGroup.addElement(_codeEditor);
    }

    private function textInput_changeHandler(event:Event):void
    {

        if(editor!=null){
            if(event.target){
                if(event.target.hasOwnProperty("text")){
                     //editor.updateTitle(event.target.text);
                }
            }
        }
  }

    private function check_changeHandler(event:Event):void
    {

         if(editor!=null){
             if(event.target){
               
               
            }
         }
       
    }

]]></fx:Script> 
</s:BorderContainer>
   
       