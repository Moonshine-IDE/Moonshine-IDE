<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="100%" height="100%"
		  paddingLeft="15" paddingTop="15" paddingRight="15" paddingBottom="15"
		  visible="true" creationComplete="init()">
	
	<fx:Script>
		<![CDATA[
			import actionScripts.plugins.vagrant.settings.LinkedInstancesSetting;
			import actionScripts.plugins.vagrant.utils.VagrantUtil;
			import actionScripts.plugins.vagrant.vo.VagrantInstanceVO;

			import components.popup.CreateNewVagrantInstancePopup;

			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;

			import mx.managers.PopUpManager;

			[Bindable] public var setting:LinkedInstancesSetting;

			private var popupNewInstance:CreateNewVagrantInstancePopup;
			
			private function init():void
			{
				VagrantUtil.checkStates(setting.vagrantInstances);
			}

			private function onNewInstance(event:MouseEvent):void
			{
				itemAddEdit();
			}

			private function itemAddEdit(value:VagrantInstanceVO = null):void
			{
				if (!popupNewInstance)
				{
					popupNewInstance = PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, CreateNewVagrantInstancePopup, true) as CreateNewVagrantInstancePopup;
					popupNewInstance.instance = value;
					popupNewInstance.addEventListener(CreateNewVagrantInstancePopup.EVENT_ADD_UPDATE_INSTANCE, onInstanceAddUpdate);
					popupNewInstance.addEventListener(CloseEvent.CLOSE, onPopupNewInstanceClose);
					PopUpManager.centerPopUp(popupNewInstance);
				}
			}

			private function onPopupNewInstanceClose(event:CloseEvent):void
			{
				popupNewInstance.removeEventListener(CreateNewVagrantInstancePopup.EVENT_ADD_UPDATE_INSTANCE, onInstanceAddUpdate);
				popupNewInstance.removeEventListener(CloseEvent.CLOSE, onPopupNewInstanceClose);
				popupNewInstance = null;
			}

			private function onInstanceAddUpdate(event:Event):void
			{
				var instance:VagrantInstanceVO = popupNewInstance.instance;
				if (setting.vagrantInstances.getItemIndex(instance) == -1)
				{
					setting.vagrantInstances.addItem(instance);
				}

				VagrantUtil.saveVagrantInstances(setting.vagrantInstances);
			}

			private function capabilitiesLabelFunction(item:VagrantInstanceVO, column:GridColumn):String
			{
				if (item.capabilities) return item.capabilities.join(", ");
				return "";
			}

			public function onItemDoubleClicked(event:Event):void
			{
				itemAddEdit(dgVagrantInstances.selectedItem as VagrantInstanceVO);
			}

			private function onInstanceRemove(event:MouseEvent):void
			{
				setting.vagrantInstances.removeItem(dgVagrantInstances.selectedItem);
			}

			private function onInstanceEdit(event:MouseEvent):void
			{
				onItemDoubleClicked(null);
			}

		]]>
	</fx:Script>

	<s:HGroup width="100%" verticalAlign="middle">
		<s:Label styleName="uiTextSettingsLabel"
				 text="Linked Instances" />
		<mx:Spacer width="100%"/>
		<s:Label styleName="smallText" fontStyle="italic"
				 text="Double-click to edit" />
	</s:HGroup>

	<s:DataGrid id="dgVagrantInstances"
				width="100%" height="100%"
				sortableColumns="true" variableRowHeight="true" borderVisible="false"
				contentBackgroundColor="0xe0e0e0" selectionColor="0xf6f6f6"
				dataProvider="{setting.vagrantInstances}"
				doubleClick="onItemDoubleClicked(event)" doubleClickEnabled="true">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn headerText="Status" dataField="state" width="100" minWidth="100">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer width="100%">
								<fx:Script>
									<![CDATA[
									import actionScripts.plugins.vagrant.vo.VagrantInstanceState;

									override public function set data(value:Object):void
										{
											if (value)
											{
												super.data = value;
											}
										}
									]]>
								</fx:Script>
								<s:Image source="@Embed(source='/elements/images/icoTickSmall.png')"
									visible="{data.state == VagrantInstanceState.READY}" includeInLayout="{data.state == VagrantInstanceState.READY}"
									toolTip="{data.state}" horizontalCenter="0" verticalCenter="0"/>
								<s:Image source="@Embed(source='/elements/images/iconExclamationRed.png')"
										 visible="{data.state == VagrantInstanceState.UNREACHABLE}" includeInLayout="{data.state == VagrantInstanceState.UNREACHABLE}"
										 toolTip="{data.state}" horizontalCenter="0" verticalCenter="0"/>
								<s:Image source="@Embed(source='/elements/images/exclamation.png')"
										 visible="{(data.state != VagrantInstanceState.READY) &amp;&amp; (data.state != VagrantInstanceState.UNREACHABLE)}"
										 includeInLayout="{(data.state != VagrantInstanceState.READY) &amp;&amp; (data.state != VagrantInstanceState.UNREACHABLE)}"
										 toolTip="{data.state}" horizontalCenter="0" verticalCenter="0"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn headerText="Name" dataField="title"/>
				<s:GridColumn headerText="URL" dataField="url"/>
				<s:GridColumn headerText="Capabilities" dataField="roles" labelFunction="capabilitiesLabelFunction"/>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>

	<s:HGroup width="100%" verticalAlign="middle" gap="4">
		<s:Button label="+"
				  styleName="lightButton"
					click="onNewInstance(event)"/>
		<s:Button label="-"
				  enabled="{dgVagrantInstances.selectedItem}"
				  styleName="lightButton"
					click="onInstanceRemove(event)"/>
	</s:HGroup>
</s:VGroup>