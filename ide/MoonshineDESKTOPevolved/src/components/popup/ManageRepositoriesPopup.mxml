<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 Prominic.NET, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// Author: Prominic.NET, Inc.
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
////////////////////////////////////////////////////////////////////////////////
-->
<resizableTitleWindow:ResizableTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
										   xmlns:s="library://ns.adobe.com/flex/spark"
										   xmlns:resizableTitleWindow="actionScripts.ui.resizableTitleWindow.*"
										   backgroundColor="0xf5f5f5" 
										   minHeight="300" minWidth="300"
										   skinClass="components.skins.ResizableTitleWindowSkin"
										   xmlns:containers="components.containers.*"
										   creationComplete="onCreationCompletes(event)">
	<resizableTitleWindow:layout>
		<s:VerticalLayout paddingLeft="12" paddingBottom="6" paddingTop="9"
						  horizontalAlign="left" paddingRight="12"/>
	</resizableTitleWindow:layout>
	<fx:Script>
		<![CDATA[
		import actionScripts.events.SettingsEvent;
		import actionScripts.plugin.console.ConsoleOutputEvent;
		import actionScripts.utils.UtilsCore;

		import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;

			import spark.events.GridEvent;
			import spark.events.GridSelectionEvent;
			
			import actionScripts.events.GlobalEventDispatcher;
			import actionScripts.events.ProjectEvent;
			import actionScripts.plugins.git.GitHubPlugin;
			import actionScripts.plugins.svn.SVNPlugin;
			import actionScripts.plugins.versionControl.VersionControlUtils;
			import actionScripts.plugins.versionControl.event.VersionControlEvent;
			import actionScripts.utils.FileUtils;
			import actionScripts.utils.SharedObjectUtil;
			import actionScripts.valueObjects.ConstantsCoreVO;
			import actionScripts.valueObjects.RepositoryItemVO;
			import actionScripts.valueObjects.VersionControlTypes;
	
			[Bindable] public var repositories:ArrayCollection;

			private var dispatcher:GlobalEventDispatcher = GlobalEventDispatcher.getInstance();
			
			protected function onCreationCompletes(event:FlexEvent):void
			{
				if (repositories && !ConstantsCoreVO.IS_DEFAULT_REPOSITORIES_POPULATED)
				{
					VersionControlUtils.REPOSITORIES.addAllAt(VersionControlUtils.getDefaultRepositories(), 0);
					SharedObjectUtil.saveRepositoriesToSO(VersionControlUtils.REPOSITORIES);
					ConstantsCoreVO.IS_DEFAULT_REPOSITORIES_POPULATED = true;
				}
			}

			protected function onItemEdit():void
			{
				// let's open item-edit window
				dispatcher.dispatchEvent(new VersionControlEvent(VersionControlEvent.OPEN_ADD_REPOSITORY, dgRepositories.selectedItem));
			}
			
			protected function onNewRepositoryRequest(event:MouseEvent):void
			{
				dispatcher.dispatchEvent(new VersionControlEvent(VersionControlEvent.OPEN_ADD_REPOSITORY));
			}
			
			protected function onRepositoryDelete(event:MouseEvent):void
			{
				repositories.removeItem(dgRepositories.selectedItem);
				SharedObjectUtil.saveRepositoriesToSO(repositories);
			}
			
			protected function updateRepositoriesBeforeBrowse(selectedRepository:RepositoryItemVO=null):void
			{
				// check and update dependency repositories
				VersionControlUtils.updateDependentRepositories(selectedRepository);
				if (selectedRepository) selectedRepository.isUpdating = false;
				
				// continue to browsing
				onBrowseRepository(selectedRepository);
			}
			
			protected function onBrowseRepository(selectedRepository:RepositoryItemVO=null):void
			{
				currentState = "browse";
				this.title = "Browse";
				
				repoBrowser.setRepositories(selectedRepository ? new ArrayCollection([selectedRepository]) : repositories);
			}
			
			protected function onBack(event:MouseEvent):void
			{
				repoBrowser.onBackEvent();
				currentState = "default";
				this.title = "Manage Repositories";
			}
			
			protected function onCheckoutRequest(event:MouseEvent):void
			{
				var repositoryItem:Object = (currentState == "default") ? dgRepositories.selectedItem : repoBrowser.selectedItem;
				var repoType:String = repositoryItem.type;
				
				// in case of XML/dependency type, we need to find 'type' 
				// of its root/dependent repository
				if (repositoryItem.type == VersionControlTypes.XML)
				{
					var ownerRepository:RepositoryItemVO = repositoryItem as RepositoryItemVO;
					if (ownerRepository && ownerRepository.pathToDownloaded)
					{
						// test the path existence
						if (!FileUtils.isPathExists(ownerRepository.pathToDownloaded)) 
						{
							Alert.show("Project '"+ ownerRepository.pathToDownloaded +"' not found. Remove this entry if the project has been deleted.", "Error!");
						}
						else
						{
							dispatcher.dispatchEvent(new ProjectEvent(ProjectEvent.SEARCH_PROJECTS_IN_DIRECTORIES, new File(ownerRepository.pathToDownloaded)));
						}
					}
				}
				else if (repoType == VersionControlTypes.GIT) dispatcher.dispatchEvent(new VersionControlEvent(GitHubPlugin.CLONE_REQUEST, repositoryItem));
				else dispatcher.dispatchEvent(new VersionControlEvent(SVNPlugin.CHECKOUT_REQUEST, repositoryItem));
			}
			
			protected function onItemDoubleClicked(event:GridEvent):void
			{
				updateRepositoriesBeforeBrowse(dgRepositories.selectedItem as RepositoryItemVO);
			}
			
			private function repoNameLabelFunction(item:Object, column:GridColumn):String
			{
				if (item.label) return item.label +" ("+ item.url +")";
				return item.url;
			}
			
			protected function onSelectionChange(event:GridSelectionEvent):void
			{
				if (dgRepositories.selectedItem.type == VersionControlTypes.GIT) btnCloneCheckout.label = "Clone";
				else if (dgRepositories.selectedItem.type == VersionControlTypes.XML) btnCloneCheckout.label = "Open Project";
				else btnCloneCheckout.label = "Checkout";
			}
			
		]]>
	</fx:Script>
	
	<resizableTitleWindow:states>
		<s:State name="default"/>
		<s:State name="browse"/>
	</resizableTitleWindow:states>
	
	<s:VGroup width="100%" height="100%"
			  gap="10" includeIn="default">
		<s:Label text="Add a repository or select one to manage:"/>
		<s:DataGrid id="dgRepositories"
					width="100%" height="100%"
					sortableColumns="false" variableRowHeight="true"
					dataProvider="{repositories}"
					doubleClickMode="row" doubleClickEnabled="true"
					gridDoubleClick="onItemDoubleClicked(event)"
					selectionChange="onSelectionChange(event)"
					rowHeight="24">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn headerText="Repository" labelFunction="repoNameLabelFunction"/>
					<s:GridColumn dataField="type" headerText="Type" width="50">
						<s:itemRenderer>
							<fx:Component>
								<s:GridItemRenderer width="100%">
									<fx:Script>
										<![CDATA[
											import actionScripts.valueObjects.ConstantsCoreVO;
											override public function set data(value:Object):void
											{
												if (data != value && imgIcon)
												{
													super.data = value;
													imgIcon.source = new ConstantsCoreVO[data.type +"LabelIcon"];
												}
											}
										]]>
									</fx:Script>
									<s:Image id="imgIcon"
											 horizontalCenter="0" verticalCenter="0"/>
								</s:GridItemRenderer>
							</fx:Component>
						</s:itemRenderer>
					</s:GridColumn>
					<s:GridColumn dataField="userName" headerText="User" width="100"/>
					<s:GridColumn dataField="notes" headerText="Notes"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
	</s:VGroup>
	
	<containers:RepositoryBrowser id="repoBrowser" 
								  width="100%" height="100%"
								  includeIn="browse"/>
	
	<resizableTitleWindow:controlBarContent>
		<s:HGroup width="100%" verticalAlign="middle"
				  includeIn="default">
			<s:Button label="+"
					  styleName="darkButton"
					  click="onNewRepositoryRequest(event)"/>
			<s:Button label="-"
					  enabled="{dgRepositories.selectedItem &amp;&amp; !dgRepositories.selectedItem.isDefault}"
					  styleName="darkButton"
					  click="onRepositoryDelete(event)"/>
			<s:Button label="Edit"
					  enabled="{dgRepositories.selectedItem &amp;&amp; dgRepositories.selectedItem.type != VersionControlTypes.XML &amp;&amp; !dgRepositories.selectedItem.isDefault}"
					  styleName="darkButton"
					  click="onItemEdit()"/>
			<s:Button id="btnCloneCheckout" 
					  label="Checkout"
					  enabled="{dgRepositories.selectedItem}" 
					  styleName="darkButton"
					  click="onCheckoutRequest(event)"/>
			<s:Button label="Browse"
					  enabled="{dgRepositories.selectedItem}" 
					  styleName="darkButton"
					  click="updateRepositoriesBeforeBrowse(dgRepositories.selectedItem as RepositoryItemVO)"/>
			<s:Spacer width="100%"/>
			<s:Button label="Browse All"
					  styleName="darkButton"
					  click="updateRepositoriesBeforeBrowse()"/>
		</s:HGroup>
		<s:HGroup width="100%" verticalAlign="middle"
				  includeIn="browse">
			<s:Button label="Back"
					  styleName="darkButton"
					  click="onBack(event)"/>
			<s:Spacer width="100%"/>
			<s:Button label="{(repoBrowser.selectedItem &amp;&amp; repoBrowser.selectedItem.type == VersionControlTypes.GIT) ? 
					  'Clone' : 'Checkout'}"
					  styleName="darkButton"
					  enabled="{repoBrowser.selectedItem &amp;&amp; 
					  	(repoBrowser.selectedItem.type != VersionControlTypes.XML) &amp;&amp; 
					  	(repoBrowser.selectedItem.type == VersionControlTypes.GIT || repoBrowser.selectedItem.children || repoBrowser.selectedItem.isDownloadable)}"
					  click="onCheckoutRequest(event)"/>
		</s:HGroup>
	</resizableTitleWindow:controlBarContent>
</resizableTitleWindow:ResizableTitleWindow>