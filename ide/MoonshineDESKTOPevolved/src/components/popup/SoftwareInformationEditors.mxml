<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 Prominic.NET, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
//
// Author: Prominic.NET, Inc. 
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
////////////////////////////////////////////////////////////////////////////////
-->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  autoLayout="true"
		  implements="actionScripts.interfaces.ISoftwareInformationView">
	<fx:Metadata>
		[Event(name="complete", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
		import mx.collections.ArrayCollection;
		import mx.events.FlexEvent;
		
		import actionScripts.locator.IDEModel;
		import actionScripts.plugins.externalEditors.ExternalEditorsPlugin;
		import actionScripts.plugins.externalEditors.vo.ExternalEditorVO;
		import actionScripts.utils.SoftwareVersionChecker;

			[Bindable]
			private var model:IDEModel = IDEModel.getInstance();
			[Bindable]
			private var components:ArrayCollection;

			private var versionChecker:SoftwareVersionChecker = new SoftwareVersionChecker();

			/**
			 * On creation completes
			 */
			public function startCheck():void
			{
				versionChecker.addEventListener(Event.COMPLETE, onRetrievalComplete, false, 0, true);
				versionChecker.versionCheckType = SoftwareVersionChecker.VERSION_CHECK_TYPE_EDITOR;
				versionChecker.retrieveEditorsInformation(ExternalEditorsPlugin.editors);
			}

			public function getAllVersions():String
			{
				var versions:String = "Configured External Editors in Moonshine:\n===========================================\n\n";
				for each (var component:ExternalEditorVO in ExternalEditorsPlugin.editors)
				{
					versions += component.title +": "+ (component.version ? component.version : "Not Installed") +" ["+ (component.isEnabled ? "Enabled" : "Disabled") +"]\n";
				}

				return versions;
			}

			public function dispose():void
			{
				versionChecker.dispose();
			}

			private function onRetrievalComplete(event:Event):void
			{
				versionChecker.removeEventListener(Event.COMPLETE, onRetrievalComplete);
				dispatchEvent(event);
			}
		]]>
	</fx:Script>

	<s:DataGrid id="dgEditors"
				width="100%" height="100%"
				sortableColumns="false" variableRowHeight="true"
				dataProvider="{ExternalEditorsPlugin.editors}" borderVisible="false"
				creationComplete="dgEditors.columnHeaderGroup.visible =
				dgEditors.columnHeaderGroup.includeInLayout = false">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="title"/>
				<s:GridColumn width="300">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer width="100%">
								<fx:Script>
									<![CDATA[
										import actionScripts.events.SettingsEvent;
										import actionScripts.events.GlobalEventDispatcher;
										import actionScripts.plugins.externalEditors.ExternalEditorsPlugin;

										override public function set data(value:Object):void
										{
											if (value)
											{
												super.data = value;
											}
										}
										
										protected function onFixRequest(event:MouseEvent):void
										{
											GlobalEventDispatcher.getInstance().dispatchEvent(new SettingsEvent(SettingsEvent.EVENT_OPEN_SETTINGS, ExternalEditorsPlugin.NAMESPACE));
										}
										
									]]>
								</fx:Script>
								<s:layout>
									<s:HorizontalLayout verticalAlign="middle"
														padding="8"/>
								</s:layout>
								<s:Image source="@Embed('/elements/images/tick_circle_frame.png')"
										 toolTip="Enabled"
										 visible="{data.isEnabled}" includeInLayout="{data.isEnabled}"/>
								<s:Image source="@Embed('/elements/images/cross_circle_frame.png')"
										 toolTip="Disabled"
										 visible="{!data.isEnabled}" includeInLayout="{!data.isEnabled}"/>
								<s:Label id="lblVersion"
										 text="{data.version}" 
										 visible="{data.version}" includeInLayout="{data.version}"/>
								<s:Label id="lblNI" 
										 text="Not Installed." 
										 visible="{!data.version}" includeInLayout="{!data.version}"/>
								<s:Label id="lblNE" 
										 text="(Disabled)" 
										 visible="{!data.isEnabled &amp;&amp; data.isValid}" includeInLayout="{!data.isEnabled &amp;&amp; data.isValid}"/>
								<s:Label id="lblFix" 
										 text="Fix this" color="0x8a2a2a"
										 textDecoration="underline" buttonMode="true"
										 click="onFixRequest(event)"
										 visible="{!data.isValid}" includeInLayout="{!data.isValid}"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
</s:VGroup>