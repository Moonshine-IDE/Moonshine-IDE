<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 Prominic.NET, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
//
// Author: Prominic.NET, Inc. 
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
////////////////////////////////////////////////////////////////////////////////
-->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  autoLayout="true"
		  creationComplete="onSoftwareInfoCreationComplete(event)">
	<fx:Metadata>
		[Event(name="complete", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
		import actionScripts.interfaces.ISoftwareInformationView;
		import actionScripts.ui.tabNavigator.TabNavigatorWithOrientation;

			import mx.events.FlexEvent;

			import spark.components.NavigatorContent;

			private var tabNavigator:TabNavigatorWithOrientation;
			private var sdks:SoftwareInformationSDKs;
			private var editors:SoftwareInformationEditors;
			private var versionSectionsCount:int;
			private var versionRetrievedSections:int;

			/**
			 * On creation completes
			 */
			public function onSoftwareInfoCreationComplete(event:FlexEvent):void
			{
				tabNavigator = new TabNavigatorWithOrientation();
				tabNavigator.orientation = "bottom";
				tabNavigator.percentWidth = tabNavigator.percentHeight = 100;
				this.addElement(tabNavigator);

				var navContent:NavigatorContent = new NavigatorContent();
				navContent.label = "Configured SDKs";
				sdks = new SoftwareInformationSDKs();
				sdks.addEventListener(Event.COMPLETE, onAllVersionRetrieved, false, 0, true);
				sdks.percentWidth = sdks.percentHeight = 100;
				navContent.addElement(sdks);
				tabNavigator.addElement(navContent);
				versionSectionsCount++;

				navContent = new NavigatorContent();
				navContent.label = "External Editors";
				editors = new SoftwareInformationEditors();
				editors.addEventListener(Event.COMPLETE, onAllVersionRetrieved, false, 0, true);
				editors.percentWidth = editors.percentHeight = 100;
				navContent.addElement(editors);
				tabNavigator.addElement(navContent);
				versionSectionsCount++;

				tabNavigator.selectedIndex = 0;
				tabNavigator.tabBar.setStyle("closeButtonVisible", false);

				// initiate the check task in all tabs
				for (var i:int; i < versionSectionsCount; i++)
				{
					var softwareTab:ISoftwareInformationView = (tabNavigator.getElementAt(i) as NavigatorContent).contentGroup.getElementAt(0) as ISoftwareInformationView;
					if (softwareTab) softwareTab.startCheck();
				}
			}

			public function getAllVersions():String
			{
				var details:String = sdks.getAllVersions();
				if (editors)
				{
					details += "\n\n"+ editors.getAllVersions();
				}
				return details;
			}

			public function dispose():void
			{
				sdks.dispose();
				if (editors)
					editors.dispose();
				sdks = null;
				editors = null;
			}

			private function onAllVersionRetrieved(event:Event):void
			{
				versionRetrievedSections++;
				if (versionRetrievedSections == versionSectionsCount)
				{
					dispatchEvent(event);
				}
			}

		]]>
	</fx:Script>
</s:VGroup>