<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 Prominic.NET, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// Author: Prominic.NET, Inc.
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
////////////////////////////////////////////////////////////////////////////////
-->
<resizableTitleWindow:ResizableTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
										   xmlns:s="library://ns.adobe.com/flex/spark"
										   backgroundColor="0xf5f5f5"
										   width="500" minWidth="400" minHeight="100" autoLayout="true"
										   xmlns:view="actionScripts.plugin.findreplace.view.*" xmlns:resizableTitleWindow="actionScripts.ui.resizableTitleWindow.*"
										   skinClass="components.skins.ResizableTitleWindowSkin" creationComplete="onCreationCompletes()" xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Script>
		<![CDATA[
			import com.adobe.utils.StringUtil;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.validators.Validator;
			
			import spark.components.BusyIndicator;
			import spark.events.TextOperationEvent;
			
			import actionScripts.events.GlobalEventDispatcher;
			import actionScripts.locator.IDEModel;
			import actionScripts.plugins.versionControl.VersionControlUtils;
			import actionScripts.plugins.versionControl.event.VersionControlEvent;
			import actionScripts.utils.SharedObjectUtil;
			import actionScripts.valueObjects.RepositoryItemVO;
			import actionScripts.valueObjects.VersionControlTypes;
			
			[Bindable] public var isGitAvailable:Boolean;
			[Bindable] public var type:String;
			
			public var editingRepository:RepositoryItemVO;
			public var submitObject:Object;
			public var isTrustServerCertificate:Boolean;
			
			[Bindable] private var isValidURL:Boolean;
			[Bindable] private var isPathMapped:Boolean;
			[Bindable] private var completionMessage:String;
			[Bindable] private var initialContentHeight:Number;
			[Bindable] private var isDestinationPathExists:Boolean;
			
			private var busyIndicator:BusyIndicator;
			private var mappedPath:String
			private var isFolderNameManuallyChanged:Boolean;
			private var isFolderNameManuallyEmpty:Boolean;
			private var model:IDEModel = IDEModel.getInstance();
			private var dispatcher:GlobalEventDispatcher = GlobalEventDispatcher.getInstance();
			
			public function notifySVNCheckoutError():void
			{
				Alert.show("Oops! There is something wrong!\nPlease check console for details.", "Error!");
				btnSubmit.enabled = true;
			}
			
			override protected function closeByCrossSign(event:Event):void
			{
				dispatcher.removeEventListener(VersionControlEvent.CLONE_CHECKOUT_COMPLETED, onCloneCheckoutCompleted);
				dispatcher.removeEventListener(VersionControlEvent.REPOSITORY_AUTH_CANCELLED, onAuthRequestCancelled);
				super.closeByCrossSign(event);
			}
			
			private function onCheckoutRequest():void
			{
				var tmpArr:Array = new Array(fnValidator);
				if (Validator.validateAll(tmpArr).length != 0)
				{
					return;
				}
				
				editingRepository.isRequireAuthentication = cbLogin.selected;
				editingRepository.userName = editingRepository.isRequireAuthentication ? 
					((StringUtil.trim(txtLogin.text).length != 0) ? txtLogin.text : null) : 
					null;
				
				updateRepository();
				
				submitObject = new Object();
				submitObject.url = txtSource.text;
				submitObject.target = mappedPath;
				submitObject.targetFolder = txtFolderName.text;
				submitObject.repository = editingRepository;

				dispatcher.addEventListener(VersionControlEvent.CLONE_CHECKOUT_COMPLETED, onCloneCheckoutCompleted, false, 0, true);
				dispatchEvent(new VersionControlEvent(VersionControlEvent.CLONE_CHECKOUT_REQUESTED));
				currentState = "progress";
				addRemoveBusyIndicator();
			}
			
			private function updateRepository():void
			{
				SharedObjectUtil.saveRepositoriesToSO(VersionControlUtils.REPOSITORIES);
			}
			
			private function browse():void
			{
				model.fileCore.browseForDirectory("Select Parent Directory", onDirectorySelected, null, isPathMapped ? mappedPath : null);
			}
			
			private function onDirectorySelected(fileObj:Object):void
			{
				mappedPath = VersionControlUtils.LAST_CHECKOUT_BROWSED_LOCATION = (fileObj as File).nativePath;
				
				VersionControlUtils.IS_CHECKOUT_BROWSED_ONCE = true;
				isPathMapped = true;
				validateURLInput();
			}
			
			private function validateURLInput():void
			{
				var autoFolderName:String;
				var searchRegExp:RegExp;
				var results:Array;
				if (type == VersionControlTypes.GIT)
				{
					// expected format is https://github.com/{organization/author}/{project}
					searchRegExp = new RegExp("(?:https?|git|ssh)\://.*/.*/([^/]+)(?:\\.git)?", "i");
					results = searchRegExp.exec(txtSource.text);
					if (results != null)
					{
						isValidURL = true;
						txtTarget.text = (isPathMapped) ? mappedPath : "";
						if (!isPathMapped) txtTarget.prompt = "Parent directory";
						moveCursorToTargetEnd();
						autoFolderName = results[0].split("/").pop();
						if (!isFolderNameManuallyChanged || isFolderNameManuallyEmpty)
						{
							txtFolderName.text = autoFolderName;
							isFolderNameManuallyChanged = isFolderNameManuallyEmpty = false;
						}
						
						validateTargetPath();
						return;
					}
				}
				else
				{
					searchRegExp = new RegExp(".*://.*/.*.$", "i");
					results = searchRegExp.exec(txtSource.text);
					if (results != null)
					{
						isGitAvailable = isValidURL = true;
						txtTarget.text = (isPathMapped) ? mappedPath : "";
						if (!isPathMapped) txtTarget.prompt = "Parent directory";
						moveCursorToTargetEnd();
						txtFolderName.text = (txtFolderName.text != "") ? txtFolderName.text : txtSource.text.split("/").pop();
						
						validateTargetPath();
						return;
					}
				}
				
				if (!results && !isFolderNameManuallyChanged) txtFolderName.text = "";
				isValidURL = false;
			}
			
			private function validateTargetPath():void
			{
				isDestinationPathExists = model.fileCore.isPathExists(txtTarget.text + model.fileCore.separator + txtFolderName.text);
			}
			
			protected function onCreationCompletes():void
			{
				if (editingRepository) 
				{
					txtSource.text = editingRepository.url;
					if (editingRepository.isRequireAuthentication)
					{
						cbLogin.selected = true;
						txtLogin.text = editingRepository.userName;
					}
				}
				if (VersionControlUtils.IS_CHECKOUT_BROWSED_ONCE)
				{
					mappedPath = VersionControlUtils.LAST_CHECKOUT_BROWSED_LOCATION;
					isPathMapped = true;
				}
				else if (model.lastSelectedProjectPath)
				{
					mappedPath = model.lastSelectedProjectPath;
					isPathMapped = true;
				}
				else
				{
					mappedPath = model.fileCore.documentsDirectory.nativePath;
					isPathMapped = true;
				}
				
				lblSeparator.text = File.separator;
				txtSource.setFocus();
				validateURLInput();

				dispatcher.addEventListener(VersionControlEvent.REPOSITORY_AUTH_CANCELLED, onAuthRequestCancelled, false, 0, true);
			}
			
			protected function onFolderNameChanged(event:TextOperationEvent):void
			{
				if (StringUtil.trim(txtFolderName.text).length == 0)
				{
					isValidURL = false;
					isFolderNameManuallyEmpty = true;
					isFolderNameManuallyChanged = false;
				}
				else
				{
					isFolderNameManuallyEmpty = false;
					isFolderNameManuallyChanged = true;
					validateURLInput();
				}
			}
			
			private function moveCursorToTargetEnd():void
			{
				if (isPathMapped)
				{
					// this will move the cursor to the end
					txtTarget.appendText('');
				}
			}
			
			private function onCloneCheckoutCompleted(event:VersionControlEvent):void
			{
				GlobalEventDispatcher.getInstance().removeEventListener(VersionControlEvent.CLONE_CHECKOUT_COMPLETED, onCloneCheckoutCompleted);
				addRemoveBusyIndicator();
				this.currentState = "complete";
				
				// check the completion type/status/message
				if (event.value && event.value.hasError)
				{
					completionMessage = event.value.message;
					txtCompletionMessage.setStyle("color", 0xff0000);
				}
				else
				{
					completionMessage = (type == VersionControlTypes.GIT) ? "Clone complete!" : "Checkout complete!";
					completionMessage += "\nRepository downloaded at:\n"+ mappedPath + File.separator + txtFolderName.text;
					txtCompletionMessage.setStyle("color", 0x000);
				}
			}

			private function onAuthRequestCancelled(event:VersionControlEvent):void
			{
				currentState = "default";
				addRemoveBusyIndicator();
			}
			
			private function addRemoveBusyIndicator():void
			{
				if (!busyIndicator)
				{
					busyIndicator = new BusyIndicator();
					vgProgress.addElementAt(busyIndicator, 0);
				}
				else
				{
					vgProgress.removeElement(busyIndicator);
					busyIndicator = null;
				}
			}
			
			protected function resetForm(event:MouseEvent):void
			{
				this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
			private function onCloseAll():void
			{
				// this should let versionControlPlugin close
				// all its opened windows
				GlobalEventDispatcher.getInstance().dispatchEvent(new VersionControlEvent(VersionControlEvent.CLOSE_MANAGE_REPOSITORIES));
				this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:StringValidator id="fnValidator" source="{txtFolderName}" property="text" trigger="{btnSubmit}" triggerEvent="click"/>
		<mx:StringValidator id="eValidator" source="{txtLogin}" property="text" trigger="{btnSubmit}" triggerEvent="click"/>
	</fx:Declarations>
	<resizableTitleWindow:states>
		<s:State name="default"/>
		<s:State name="progress"/>
		<s:State name="complete"/>
	</resizableTitleWindow:states>
	
	<s:VGroup height="100%" width="100%" 
			  paddingLeft="12" paddingBottom="12" paddingTop="9" paddingRight="12"
			  includeIn="default" creationComplete="initialContentHeight=event.target.height">
		<view:PromptTextInput id="txtSource"
							  width="100%" styleName="textInput"
							  prompt="Repository URL" change="validateURLInput()"/>
		<s:HGroup verticalAlign="middle" width="100%">
			<view:PromptTextInput id="txtTarget" 
								  prompt="Where to download" width="60%" styleName="textInput"
								  tabIndex="2" editable="false"/>
			<s:Button icon="@Embed('/elements/images/icoFolderBlue.png')"
					  styleName="darkButton" toolTip="Choose Parent Directory"
					  height="{btnSubmit.height}"
					  click="browse()"/>
			<s:Label id="lblSeparator"/>
			<view:PromptTextInput id="txtFolderName"
								  prompt="Target folder name" width="40%"
								  styleName="textInput" restrict="0-9A-Za-z_"
								  change="onFolderNameChanged(event)"/>
		</s:HGroup>
		<s:Label text="You need Git installed on your system to continue."
				 width="100%" textAlign="center" color="0xff0000"
				 visible="{!isGitAvailable &amp;&amp; type == VersionControlTypes.GIT}" includeInLayout="{!isGitAvailable &amp;&amp; type == VersionControlTypes.GIT}"/>
		<s:Label text="Destination path is already exists."
				 width="100%" textAlign="center" color="0xff0000"
				 visible="{isDestinationPathExists}" includeInLayout="{isDestinationPathExists}"/>
		<s:HGroup width="100%" verticalAlign="middle"
				  includeInLayout="false" visible="false">
			<s:CheckBox id="cbLogin"
						label="Need Authentication" selected="false"/>
			<s:CheckBox id="cbTrustCert" label="Trust Server Certificate"
						enabled="{type == VersionControlTypes.SVN}"/>
		</s:HGroup>
		<s:VGroup width="100%"
				  visible="{cbLogin.selected}" includeInLayout="{cbLogin.selected}">
			<view:PromptTextInput
				id="txtLogin" 
				prompt="User Name"
				width="100%"
				styleName="textInput"/>
			<s:Label text="Password will be prompted when needed by version control software"
					 color="0x444444"/>
		</s:VGroup>
	</s:VGroup>
	
	<s:VGroup id="vgProgress" 
			  width="100%" height="{initialContentHeight}"
			  includeIn="progress"
			  horizontalAlign="center" verticalAlign="middle">
		<s:Label text="In progress.."
				 styleName="uiTextSettingsLabel" color="0x000"/>
	</s:VGroup>
	
	<s:VGroup width="100%" height="{initialContentHeight}"
			  includeIn="complete" verticalAlign="middle" horizontalAlign="center">
		<s:Label id="txtCompletionMessage" 
				 text="{completionMessage}"
				 styleName="smallText" 
				 textAlign="center" width="100%"
				 paddingLeft="20" paddingRight="20"
				 maxDisplayedLines="5"/>
	</s:VGroup>
	
	<resizableTitleWindow:controlBarContent>
		<s:HGroup width="100%" verticalAlign="middle"
				  includeIn="default">
			<s:Spacer width="100%"/>
			<s:Button id="btnSubmit" 
					  label="{(type == VersionControlTypes.GIT) ? 'Clone' : 'Checkout'}" styleName="darkButton" 
					  enabled="{isGitAvailable &amp;&amp; isValidURL &amp;&amp; isPathMapped &amp;&amp; !isDestinationPathExists}"
					  click="onCheckoutRequest()"/>
		</s:HGroup>
		<s:Spacer height="31" includeIn="progress"/>
		<s:HGroup width="100%" verticalAlign="middle"
				  includeIn="complete">
			<s:Spacer width="100%"/>
			<s:Button label="{(type == VersionControlTypes.GIT) ? 'Clone Another' : 'Checkout Another'}" styleName="darkButton"
					  click="resetForm(event)"/>
			<s:Button label="Close All" styleName="darkButton"
					  click="onCloseAll()"/>
		</s:HGroup>
	</resizableTitleWindow:controlBarContent>
</resizableTitleWindow:ResizableTitleWindow>