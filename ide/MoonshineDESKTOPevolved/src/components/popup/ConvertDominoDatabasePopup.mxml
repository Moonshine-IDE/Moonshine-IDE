<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 Prominic.NET, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// Author: Prominic.NET, Inc.
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
////////////////////////////////////////////////////////////////////////////////
-->
<resizableTitleWindow:ResizableTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
										   xmlns:s="library://ns.adobe.com/flex/spark"
										   xmlns:mx="library://ns.adobe.com/flex/mx"
										   xmlns:resizableTitleWindow="actionScripts.ui.resizableTitleWindow.*"
										   xmlns:view="actionScripts.plugin.findreplace.view.*"
										   xmlns:controls="components.controls.*"
										   backgroundColor="0xf5f5f5" title="Convert Domino Database"
										   width="600" minWidth="400" autoLayout="true"
										   skinClass="components.skins.ResizableTitleWindowSkin"
										   creationComplete="onCreationCompletes(event)">
	<fx:Script>
		<![CDATA[
			import actionScripts.events.FileUploaderEvent;
			import actionScripts.events.SettingsEvent;
			import actionScripts.locator.IDEModel;
			import actionScripts.plugin.console.ConsoleOutputEvent;
			import actionScripts.plugins.vagrant.VagrantPlugin;
			import actionScripts.plugins.vagrant.utils.VagrantUtil;
			import actionScripts.plugins.vagrant.vo.VagrantInstanceState;
			import actionScripts.plugins.vagrant.vo.VagrantInstanceVO;
			import actionScripts.utils.FileUploader;
			import actionScripts.utils.FileUtils;

			import mx.collections.ArrayCollection;

			import mx.events.FlexEvent;

			import actionScripts.events.GlobalEventDispatcher;

			import mx.validators.Validator;

			import spark.components.Alert;

			public static const EVENT_START_CONVERSION:String = "eventStartConversion";

			public var instances:ArrayCollection;

			[Bindable] private var nsfConverterInstances:ArrayCollection;

			private var dispatcher:GlobalEventDispatcher = GlobalEventDispatcher.getInstance();
			private var fileUploader:FileUploader;
			private var instanceStateCheckCount:int;

			private var _uploadRequestReturn:Object;
			public function get uploadRequestReturn():Object
			{
				return _uploadRequestReturn;
			}

			public function get destinationFolder():File
			{
				var tmpFileSplilt:Array = txtFile.text.split(".");
				tmpFileSplilt.pop();
				var targetDirectoryName:String = tmpFileSplilt.join(".");
				targetDirectoryName = targetDirectoryName.replace(/ /g, "");

				return (new File(txtDownloadDir.text).resolvePath(targetDirectoryName));
			}

			public function get selectedInstance():VagrantInstanceVO
			{
				return ddlInstances.selectedItem;
			}

			override protected function closeThis():void
			{
				dispatcher.removeEventListener(VagrantUtil.EVENT_INSTANCE_STATE_CHECK_COMPLETES, onIndividualInstanceChecked);
				super.closeThis();
			}

			protected function onCreationCompletes(event:FlexEvent):void
			{
				fileUploader = new FileUploader();
				fileUploader.isSingleUpload = true;
				fileUploader.uploadField = "file";
				fileUploader.addEventListener(FileUploaderEvent.EVENT_UPLOAD_LOADED, onFilesLoaded, false, 0, true);
				fileUploader.addEventListener(FileUploaderEvent.EVENT_UPLOAD_COMPLETE_DATA, onFileUploadedData, false, 0, true);
				fileUploader.addEventListener(FileUploaderEvent.EVENT_UPLOAD_ERROR, onFileUploadError, false, 0, true);

				disableUI();
				dispatcher.addEventListener(VagrantUtil.EVENT_INSTANCE_STATE_CHECK_COMPLETES, onIndividualInstanceChecked, false, 0, true);
				VagrantUtil.checkStates(instances);
			}

			private function onIndividualInstanceChecked(event:Event):void
			{
				instanceStateCheckCount++;
				if (instances && (instances.length == instanceStateCheckCount))
				{
					enableUI();
					nsfConverterInstances = new ArrayCollection();
					for each (var instance:VagrantInstanceVO in instances)
					{
						if (instance.capabilities && (instance.capabilities.indexOf("nsfconverter") != -1) &&
								(instance.state == VagrantInstanceState.READY))
						{
							nsfConverterInstances.addItem(instance);
						}
					}
				}
			}

			private function onConfigure():void
			{
				dispatcher.dispatchEvent(new SettingsEvent(SettingsEvent.EVENT_OPEN_SETTINGS, VagrantPlugin.NAMESPACE));
			}

			private function onNSFBrowse():void
			{
				fileUploader.addFiles([new FileFilter('Database .nsf File', '*.nsf')]);
			}

			private function onDownloadDirBrowse():void
			{
				IDEModel.getInstance().fileCore.browseForDirectory("Select Download Folder", onDownloadDirBrowsed);
			}

			private function onDownloadDirBrowsed(location:File):void
			{
				txtDownloadDir.text = location.nativePath;
			}

			private function onFilesLoaded(event:FileUploaderEvent):void
			{
				txtFile.text = event.value as String;
			}

			private function onFileUploadedData(event:FileUploaderEvent):void
			{
				if (event.value && ((event.value as String) != ""))
				{
					_uploadRequestReturn = JSON.parse(event.value as String);
					dispatchEvent(new Event(EVENT_START_CONVERSION));
					closeThis();
				}
			}

			private function onFileUploadError(event:FileUploaderEvent):void
			{
				enableUI();
				dispatcher.dispatchEvent(
						new ConsoleOutputEvent(
								ConsoleOutputEvent.CONSOLE_PRINT,
								"Failed to upload file on server:\n"+ (event.value as String),
								false, false, ConsoleOutputEvent.TYPE_ERROR
						)
				);
			}

			private function onSubmit():void
			{
				// validations
				var tmpArr:Array = new Array(svPath, svDownloadDir);
				if (Validator.validateAll(tmpArr).length != 0)
				{
					return;
				}

				Alert.OK_LABEL = "OK";
				if (!ddlInstances.selectedItem)
				{
					Alert.show("A valid NSF Converter is missing.", "Error!");
					return;
				}

				var destinationFolder:File = this.destinationFolder;
				if (destinationFolder.exists)
				{
					if (destinationFolder.getDirectoryListing().length > 0)
					{
						Alert.show(destinationFolder.nativePath +" should be empty.", "Error!");
						return;
					}
				}

				dispatcher.dispatchEvent(
						new ConsoleOutputEvent(
								ConsoleOutputEvent.CONSOLE_PRINT,
								"Trying to upload request to: "+ (ddlInstances.selectedItem as VagrantInstanceVO).url +"/file/upload. This may take some time..",
								true
						)
				);

				disableUI();
				fileUploader.uploadUrl = (ddlInstances.selectedItem as VagrantInstanceVO).url +"/file/upload";
				fileUploader.startUpload();
			}

			private function disableUI():void
			{
				btnBrowse.enabled = btnBrowseDestination.enabled = false;
				btnSubmit.enabled = false;
				ddlInstances.enabled = false;
			}

			private function enableUI():void
			{
				btnBrowse.enabled = btnBrowseDestination.enabled = true;
				btnSubmit.enabled = true;
				ddlInstances.enabled = true;
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:StringValidator id="svPath" source="{txtFile}" property="text" trigger="{btnSubmit}"/>
		<mx:StringValidator id="svDownloadDir" source="{txtDownloadDir}" property="text" trigger="{btnSubmit}"/>
	</fx:Declarations>

	<resizableTitleWindow:layout>
		<s:VerticalLayout paddingLeft="12" paddingBottom="12" paddingTop="9" paddingRight="12"/>
	</resizableTitleWindow:layout>

	<s:Label text="Select a Database (*.nsf):"/>
	<s:HGroup width="100%" verticalAlign="middle">
		<view:PromptTextInput id="txtFile"
							  width="100%" styleName="textInput" prompt="Select path.." editable="false"/>
		<s:Button id="btnBrowse"
				  label="Browse" click="onNSFBrowse()" styleName="darkButton"/>
	</s:HGroup>

	<s:Label text="Select Parent Directory to Download:"/>
	<s:HGroup width="100%" verticalAlign="middle">
		<view:PromptTextInput id="txtDownloadDir"
							  width="100%" styleName="textInput" prompt="Select path.." editable="false"/>
		<s:Button id="btnBrowseDestination"
				  label="Browse" click="onDownloadDirBrowse()" styleName="darkButton"/>
	</s:HGroup>

	<s:RichText lineBreak="toFit" width="100%" paddingBottom="10" color="0x333333">
		<s:content>
			<s:p fontStyle="italic">Requirements:</s:p>
			<s:list>
				<s:li>The database should be design-only copy (not required)</s:li>
				<s:li>The database must not locally encrypted</s:li>
				<s:li>The ACL must grant at least Designer access to the -Default- entry</s:li>
				<s:li>The database must not be hidden</s:li>
			</s:list>
		</s:content>
	</s:RichText>

	<s:Label text="NSF Converter:"/>
	<s:HGroup width="100%" verticalAlign="middle">
		<s:DropDownList id="ddlInstances"
						width="100%" height="26"
						dataProvider="{nsfConverterInstances}" labelField="title" requireSelection="true"/>
		<s:Button label="Configure" styleName="darkButton"
				  click="onConfigure()"/>
	</s:HGroup>

	<resizableTitleWindow:controlBarContent>
		<s:Spacer width="100%"/>
		<s:Button id="btnSubmit"
				  label="Submit" styleName="darkButton"
					click="onSubmit()"/>
	</resizableTitleWindow:controlBarContent>
</resizableTitleWindow:ResizableTitleWindow>