<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<resizableTitleWindow:ResizableTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
										   xmlns:s="library://ns.adobe.com/flex/spark"
										   xmlns:mx="library://ns.adobe.com/flex/mx"
										   xmlns:resizableTitleWindow="actionScripts.ui.resizableTitleWindow.*"
										   xmlns:view="actionScripts.plugin.findreplace.view.*"
										   backgroundColor="0xf5f5f5" title="New Domino Server"
										   width="500" minWidth="400" autoLayout="true"
										   skinClass="components.skins.ResizableTitleWindowSkin"
										   creationComplete="onCreationCompletes(event)">
	<fx:Script>
		<![CDATA[
		import actionScripts.controllers.DataAgent;
		import actionScripts.events.ProjectEvent;
		import actionScripts.locator.IDEModel;
		import actionScripts.plugin.console.ConsoleOutputEvent;
		import actionScripts.plugins.vagrant.vo.VagrantInstanceState;
		import actionScripts.plugins.vagrant.vo.VagrantInstanceVO;
		import actionScripts.utils.FileUtils;

		import mx.events.FlexEvent;

			import actionScripts.events.GlobalEventDispatcher;

			import mx.validators.Validator;

			public static const EVENT_ADD_UPDATE_INSTANCE:String = "eventAddUpdateVagrantInstance";

			[Bindable] public var instance:VagrantInstanceVO;

			private var dispatcher:GlobalEventDispatcher = GlobalEventDispatcher.getInstance();
			private var model:IDEModel = IDEModel.getInstance();
			private var isValidURL:Boolean;
			private var loader:DataAgent;
			
			protected function onCreationCompletes(event:FlexEvent):void
			{
				if (instance)
				{
					txtLabel.text = instance.title;
					txtBrowsedPath.text = instance.localPath;

					getVagrantInfo();
				}
			}

			private function onBrowse():void
			{
				model.fileCore.browseForDirectory("Select Path", onPathSelected);
			}

			private function onPathSelected(file:Object):void
			{
				txtBrowsedPath.text = file.nativePath;
			}

			private function onSubmit():void
			{
				var tmpArr:Array = new Array(svLabel);
				if ((Validator.validateAll(tmpArr).length != 0) || !isValidURL)
				{
					return;
				}

				if (!instance) instance = new VagrantInstanceVO();
				instance.title = txtLabel.text;
				instance.localPath = txtBrowsedPath.text;
				if (instance.state == "")
				{
					instance.state = VagrantInstanceState.UNREACHABLE;
				}
				dispatchEvent(new Event(EVENT_ADD_UPDATE_INSTANCE));
				closeThis();
			}

			private function getVagrantInfo():void
			{
				//loader = new DataAgent(txtURL.text +"/info", onServerInfoLoaded, onServerInfoFault, null, DataAgent.GETEVENT, 0, false);
			}

			private function onServerInfoLoaded(value:Object, message:String=null):void
			{
				var infoObject:Object = JSON.parse(value as String);
				//txtState.text = ("status" in infoObject) ? infoObject["status"] : VagrantInstanceState.UNREACHABLE;

				loader = null;
			}
	
			private function onServerInfoFault(message:String):void
			{
				loader = null;
				//txtState.text = VagrantInstanceState.UNREACHABLE;
			}

			private function onOpenRequest():void
			{
				if (FileUtils.isPathExists(txtBrowsedPath.text))
				{
					dispatcher.dispatchEvent(
							new ConsoleOutputEvent(ConsoleOutputEvent.CONSOLE_PRINT, "Trying to open project from: "+ txtBrowsedPath.text)
					);
					dispatcher.dispatchEvent(
							new ProjectEvent(ProjectEvent.EVENT_IMPORT_PROJECT_NO_BROWSE_DIALOG, new File(txtBrowsedPath.text))
					);
				}
				else
				{
					dispatcher.dispatchEvent(
							new ConsoleOutputEvent(
									ConsoleOutputEvent.CONSOLE_PRINT,
									"Unable to open from: "+ txtBrowsedPath.text,
									false, false, ConsoleOutputEvent.TYPE_ERROR
							)
					);
				}
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:StringValidator id="svLabel" source="{txtLabel}" property="text" trigger="{btnSubmit}"/>
	</fx:Declarations>

	<resizableTitleWindow:layout>
		<s:VerticalLayout paddingLeft="12" paddingBottom="12" paddingTop="9" paddingRight="12"/>
	</resizableTitleWindow:layout>

	<s:Label text="Title:"/>
	<view:PromptTextInput id="txtLabel"
						  width="100%" styleName="textInput"
						  prompt="ID file name"/>
	<s:Label text="ID File:"/>
	<s:HGroup width="100%" verticalAlign="middle">
		<view:PromptTextInput id="txtBrowsedPath"
							  prompt="Select path.." width="100%" styleName="textInput" editable="false"/>
		<s:Button label="Browse" styleName="darkButton"
			click="onBrowse()"/>
		<s:Button label="Open" styleName="darkButton"
			enabled="{txtBrowsedPath.text != ''}"
			click="onOpenRequest()"/>
	</s:HGroup>
	<s:HGroup id="hgError"
			  width="100%" verticalAlign="middle" horizontalAlign="center"
				visible="false" includeInLayout="false">
		<s:Image source="@Embed('/elements/images/iconExclamationRed.png')"/>
		<s:Label text="Invalid URL format. Expected format is http(s)://address:port"/>
	</s:HGroup>

	<resizableTitleWindow:controlBarContent>
		<s:Spacer width="100%"/>
		<s:Button id="btnSubmit"
				  label="Save" styleName="darkButton"
					click="onSubmit()"/>
	</resizableTitleWindow:controlBarContent>
</resizableTitleWindow:ResizableTitleWindow>