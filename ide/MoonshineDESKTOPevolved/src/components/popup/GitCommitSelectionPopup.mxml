<?xml version="1.0" encoding="utf-8"?>
<resizableTitleWindow:ResizableTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 width="600" height="400" minWidth="300" minHeight="200"
		 skinClass="components.skins.ResizableTitleWindowSkin" xmlns:resizableTitleWindow="actionScripts.ui.resizableTitleWindow.*" xmlns:marker="actionScripts.ui.marker.*" xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="onCreationCompletes(event)" xmlns:ns="library://ns.adobe.com/flashx/textLayout">
	<fx:Script>
		<![CDATA[
			import flash.net.navigateToURL;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.validators.Validator;
			
			import actionScripts.plugins.git.model.GitFileVO;
			import actionScripts.plugins.git.model.GitProjectVO;
			import actionScripts.plugins.git.model.GitTypesVO;
			import actionScripts.valueObjects.VersionControlTypes;
			
			public static const GET_AUTHOR:String = "getGitAuthor";
			
			[Bindable] public var filesCount:int;
			[Bindable] public var isGitAvailable:Boolean;
			[Bindable] public var commitDiffCollection:ArrayCollection;
			[Bindable] public var windowType:String = VersionControlTypes.GIT;
			
			public var type:String = GitTypesVO.TYPE_COMMIT;
			public var isSubmit:Boolean;
			public var commitMessage:String;
			
			public function onGitAuthorDetection(value:GitProjectVO):void
			{
				lblAuthor.text = "Author: "+ (value.sessionUserName ? value.sessionUserName : "<Default>") +" ("+ (value.sessionUserEmail ? value.sessionUserEmail : "<Default>") +")";
			}
			
			public function set isReadyToUse(value:Boolean):void
			{
				if (value)
				{
					hgTitle.removeElement(biBusy);
					btnCommit.enabled = true;
				}
			}
			
			private function onCreationCompletes(event:FlexEvent):void
			{
				btnCommit.label = (type == GitTypesVO.TYPE_COMMIT) ? "Commit Selected" : "Revert Selected";
				if (type == GitTypesVO.TYPE_REVERT)
				{
					lstFiles.percentHeight = 100;
					txtMessage.includeInLayout = txtMessage.visible = false;
					lblMessage.includeInLayout = lblMessage.visible = false;
					hgAuthor.includeInLayout = hgAuthor.visible = false;
				}
			}
			
			private function onSubmit():void
			{
				// check if any selection exists 
				if (!hasSelectionToChanges())
				{
					Alert.show("There is nothing to commit.", "Note!");
					return;
				}
				
				if (type == GitTypesVO.TYPE_COMMIT)
				{
					var tmpArr : Array = new Array(sValidator);
					if (Validator.validateAll(tmpArr).length != 0)
					{
						return;
					}
				}
				
				isSubmit = true;
				commitMessage = txtMessage.text;
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
			protected function onSelectAllChange(event:Event):void
			{
				var isSelected:Boolean = event.target.selected;
				for each (var i:GitFileVO in commitDiffCollection)
				{
					i.isSelected = isSelected;
				}
			}
			
			protected function hasSelectionToChanges():Boolean
			{
				for each (var i:GitFileVO in commitDiffCollection)
				{
					if (i.isSelected) return true;
				}
				
				return false;
			}
			
			protected function onAuthorSetMessage(value:Boolean):void
			{
				bodyInstruction.includeInLayout = bodyInstruction.visible = value;
			}
			
			private function openSetAuthorInsLink():void
			{
				navigateToURL(new URLRequest("https://help.github.com/articles/setting-your-commit-email-address-in-git/"), "blank");
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:StringValidator id="sValidator" source="{txtMessage}" property="text" trigger="{btnCommit}" triggerEvent="click"/>
	</fx:Declarations>
	
	<s:VGroup height="100%" width="100%" 
			  paddingLeft="12" paddingBottom="9" paddingTop="9" paddingRight="13">
		<s:HGroup id="hgTitle"
				  width="100%" verticalAlign="middle">
			<s:Label id="lblMessage" 
					 text="Select file(s) to continue:"
					 paddingBottom="4"/>
			<s:Spacer width="100%"/>
			<s:BusyIndicator id="biBusy"/>
		</s:HGroup>
		<s:List id="lstFiles"
				width="100%" height="70%" styleName="multiLineList"
				dataProvider="{commitDiffCollection}"
				requireSelection="true">
			<s:itemRenderer>
				<fx:Component>
					<s:ItemRenderer height="22">
						<fx:Script>
							<![CDATA[
								import actionScripts.plugins.git.model.GitFileVO;
								override public function set data(value:Object):void
								{
									if (value) 
									{
										super.data = value;
										labelDisplay.text = data.path;
										switch(data.status)
										{
											case GitFileVO.GIT_STATUS_FILE_DELETED:
											{
												lblStatus.text = data.rawStatus;
												labelDisplay.setStyle("color", 0xff6666);
												lblStatus.setStyle("color", 0xff6666);
												break;
											}
											case GitFileVO.GIT_STATUS_FILE_NEW:
											case GitFileVO.GIT_STATUS_FILE_NEW_NONVERSIONED:
											{
												lblStatus.text = data.rawStatus;
												labelDisplay.setStyle("color", 0x33cc33);
												lblStatus.setStyle("color", 0x33cc33);
												break;
											}
											default:
											{
												lblStatus.text = data.rawStatus;
												labelDisplay.setStyle("color", 0xffffff);
												lblStatus.setStyle("color", 0xffffff);
												break;
											}
										}
									}
								}
								
							]]>
						</fx:Script>
						
						<s:layout>
							<s:HorizontalLayout verticalAlign="middle" paddingLeft="4" paddingRight="6" gap="2"/>
						</s:layout>
						
						<s:Label id="lblStatus"
								 width="30" textAlign="center"/>
						<s:CheckBox id="cbSelect"
									change="data.isSelected = cbSelect.selected" selected="{data.isSelected}"
									enabled="{data.isSelectable}"/>
						<s:Label id="labelDisplay"
								 paddingLeft="8"/>
					</s:ItemRenderer>
				</fx:Component>
			</s:itemRenderer>
		</s:List>
		<s:HGroup id="hgAuthor" 
				  width="100%"
				  verticalAlign="middle" paddingTop="4"
				  clipAndEnableScrolling="false"
				  includeInLayout="{windowType == VersionControlTypes.GIT}" visible="{windowType == VersionControlTypes.GIT}">
			<s:Label id="lblAuthor"/>
			<s:Label text="How can I change this?"
					 creationComplete="event.target.setStyle('textDecoration', 'underline')" buttonMode="true"
					 color="0x811b38" click="onAuthorSetMessage(true)"/>
		</s:HGroup>
		<s:TextArea id="txtMessage"
					width="100%" height="30%"
					prompt="Commit message.." restrict="a-zA-Z0-9`!@#$%()_ +={}';,.?\-\/\\\?\&quot;"/>
	</s:VGroup>
	
	<s:BorderContainer id="bodyInstruction" 
					   width="500" height="200" autoLayout="true"
					   cornerRadius="6" borderColor="0x2d2d2d"
					   horizontalCenter="0" verticalCenter="0"
					   includeInLayout="false" visible="false">
		<s:backgroundFill>
			<s:SolidColor color="0xa0a0a0"/>
		</s:backgroundFill>
		<s:Group width="100%" height="100%">
			<s:RichEditableText editable="false" focusEnabled="false"
								width="90%" fontSize="13"
								horizontalCenter="0" verticalCenter="-20">
				<s:textFlow>
					<s:TextFlow>
						<s:p>See <s:a click='openSetAuthorInsLink()'>this page</s:a> for instructions on changing the user name and email for your commit.<s:br/><s:br/>NOTE: The macOS version of Moonshine does not have access to the global configuration file for <ns:span fontStyle="italic">git</ns:span>. You will need to define your name and email for each project.</s:p>
					</s:TextFlow>
				</s:textFlow>
			</s:RichEditableText>
			<!-- Button bar -->
			<mx:HRule id="buttonBarLine"
					  width="100%"
					  bottom="41"
					  strokeWidth="1"
					  strokeColor="0x303030" />
			<mx:HBox id="buttonBar"
					 width="100%"
					 height="41"
					 bottom="0"
					 backgroundColor="0x444444"
					 paddingRight="10"
					 paddingTop="0"
					 horizontalAlign="center"
					 verticalAlign="middle"
					 ><mx:filters>
						  <mx:DropShadowFilter 
							  alpha=".5" 
							  angle="90" 
							  blurX="0" 
							  blurY="7" 
							  strength="1"
							  distance="1"
							  inner="true" />
					  </mx:filters>
				<mx:HBox autoLayout="true">
					<s:Button label="OK" styleName="darkButton"
							  click="onAuthorSetMessage(false)"/>
				</mx:HBox>
			</mx:HBox>
		</s:Group>
	</s:BorderContainer>
	
	<resizableTitleWindow:controlBarContent>
		<s:CheckBox label="Select/Deselect All"
					color="0xffffff"
					change="onSelectAllChange(event)"/>
		<s:Spacer width="100%"/>
		<s:Button id="btnCommit" label="Commit Selected"
				  styleName="darkButton" click="onSubmit()"
				  enabled="false"/>
	</resizableTitleWindow:controlBarContent>
</resizableTitleWindow:ResizableTitleWindow>