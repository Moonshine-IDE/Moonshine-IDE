<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 Prominic.NET, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
//
// Author: Prominic.NET, Inc. 
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
////////////////////////////////////////////////////////////////////////////////
-->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  autoLayout="true"
		  creationComplete="onSoftwareInfoCreationComplete(event)">
	<fx:Metadata>
		[Event(name="complete", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
		import actionScripts.valueObjects.ConstantsCoreVO;

		import feathers.data.ArrayCollection;

		import mx.collections.ArrayCollection;
		import mx.events.FlexEvent;
		import mx.utils.ObjectUtil;

		import actionScripts.locator.HelperModel;
		import actionScripts.locator.IDEModel;
		import actionScripts.utils.FileUtils;
		import actionScripts.utils.SDKUtils;
		import actionScripts.utils.SoftwareVersionChecker;
		import actionScripts.valueObjects.ComponentTypes;
		import actionScripts.valueObjects.ComponentVO;
		import actionScripts.valueObjects.SDKReferenceVO;

		[Bindable]
		private var flexSDKPath:String = "- Not Installed -";
		[Bindable]
		private var AntPath:String = "- Not Installed -";
		[Bindable]
		private var model:IDEModel = IDEModel.getInstance();
		[Bindable]
		private var components:mx.collections.ArrayCollection;

		private var versionChecker:SoftwareVersionChecker = new SoftwareVersionChecker();

		/**
		 * On creation completes
		 */
		public function onSoftwareInfoCreationComplete(event:FlexEvent):void
		{
			// we need to parse this to Flex ArrayCollection to have it use
			// with datagrid
			components = new mx.collections.ArrayCollection();
			for each (var component:ComponentVO in HelperModel.getInstance().components.array)
			{
				var clonedComponent:ComponentVO;
				registerClassAlias("actionScripts.valueObjects.ComponentVO", ComponentVO);
				registerClassAlias("feathers.data.ArrayCollection", feathers.data.ArrayCollection);
				clonedComponent = ObjectUtil.copy(component) as ComponentVO;
				components.addItem(clonedComponent);
			}

			updateWithMoonshinePaths();

			var tmpAddition:ComponentVO = new ComponentVO();
			tmpAddition.title = "Default SDK";
			if (model.defaultSDK && model.defaultSDK.fileBridge.exists)
			{
				var sdkReference:SDKReferenceVO = SDKUtils.getSDKFromSavedList(model.defaultSDK.fileBridge.nativePath);
				tmpAddition.type = sdkReference.type;
				tmpAddition.installToPath = sdkReference.path;
			}
			components.addItemAt(tmpAddition, 0);

			versionChecker.addEventListener(Event.COMPLETE, onRetrievalComplete, false, 0, true);
			versionChecker.retrieveAboutInformation(components);
		}

		public function getAllVersions():String
		{
			var versions:String = "";
			for each (var component:ComponentVO in components)
			{
				versions += component.title +": "+ (component.version ? component.version : "Not Installed") +"\n";
			}

			return versions;
		}

		private function updateWithMoonshinePaths():void
		{
			var sdkReference:SDKReferenceVO;
			for each (var component:ComponentVO in components)
			{
				sdkReference = null;
				component.installToPath = null;
				switch (component.type)
				{
					case ComponentTypes.TYPE_FLEX:
					case ComponentTypes.TYPE_FLEX_HARMAN:
					case ComponentTypes.TYPE_FEATHERS:
					case ComponentTypes.TYPE_ROYALE:
					case ComponentTypes.TYPE_FLEXJS:
						sdkReference = SDKUtils.checkSDKTypeInSDKList(component.type);
						component.installToPath = sdkReference ? sdkReference.path : null;
						break;
					case ComponentTypes.TYPE_OPENJAVA:
						if (model.javaPathForTypeAhead && model.javaPathForTypeAhead.fileBridge.exists)
							component.installToPath = model.javaPathForTypeAhead.fileBridge.nativePath;
						break;
					case ComponentTypes.TYPE_OPENJAVA_V8:
						if (model.java8Path && model.java8Path.fileBridge.exists)
							component.installToPath = model.java8Path.fileBridge.nativePath;
						break;
					case ComponentTypes.TYPE_GIT:
						if (model.gitPath && FileUtils.isPathExists(model.gitPath))
							component.installToPath = model.gitPath;
						break;
					case ComponentTypes.TYPE_MAVEN:
						if (model.mavenPath && FileUtils.isPathExists(model.mavenPath))
							component.installToPath = model.mavenPath;
						break;
					case ComponentTypes.TYPE_SVN:
						if (model.svnPath && FileUtils.isPathExists(model.svnPath))
							component.installToPath = model.svnPath;
						break;
					case ComponentTypes.TYPE_GRADLE:
						if (model.gradlePath && FileUtils.isPathExists(model.gradlePath))
							component.installToPath = model.gradlePath;
						break;
					case ComponentTypes.TYPE_GRAILS:
						if (model.grailsPath && FileUtils.isPathExists(model.grailsPath))
							component.installToPath = model.grailsPath;
						break;
					case ComponentTypes.TYPE_ANT:
						if (model.antHomePath && model.antHomePath.fileBridge.exists)
							component.installToPath = model.antHomePath.fileBridge.nativePath;
						break;
					case ComponentTypes.TYPE_NODEJS:
						if (model.nodePath && FileUtils.isPathExists(model.nodePath))
							component.installToPath = model.nodePath;
						break;
					case ComponentTypes.TYPE_NOTES:
						if (model.notesPath && FileUtils.isPathExists(model.notesPath))
							component.installToPath = model.notesPath;
						break;
					case ComponentTypes.TYPE_VAGRANT:
						if (model.vagrantPath && FileUtils.isPathExists(model.vagrantPath))
							component.installToPath = model.vagrantPath;
						break;
					case ComponentTypes.TYPE_MACPORTS:
						if (ConstantsCoreVO.IS_MACOS && model.macportsPath && FileUtils.isPathExists(model.macportsPath))
							component.installToPath = model.macportsPath;
						break;
					case ComponentTypes.TYPE_HAXE:
						if (model.haxePath && FileUtils.isPathExists(model.haxePath))
							component.installToPath = model.haxePath;
						break;
					case ComponentTypes.TYPE_NEKO:
						if (model.nekoPath && FileUtils.isPathExists(model.nekoPath))
							component.installToPath = model.nekoPath;
						break;
				}

				component.version = null;
			}
		}

		private function onRetrievalComplete(event:Event):void
		{
			versionChecker.removeEventListener(Event.COMPLETE, onRetrievalComplete);
			dispatchEvent(event);
		}
		]]>
	</fx:Script>
	
	<s:Label text="Configured SDKs in Moonshine:" color="0x333333"
			 paddingLeft="8"/>
	<s:DataGrid id="dgComponents"
				width="100%" height="100%"
				sortableColumns="false" variableRowHeight="true"
				dataProvider="{components}" requestedMaxRowCount="{components.length}"
				initialize="dgComponents.columnHeaderGroup.visible =
				dgComponents.columnHeaderGroup.includeInLayout = false">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="title"/>
				<s:GridColumn width="300">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer width="100%">
								<fx:Script>
									<![CDATA[
										import actionScripts.plugins.startup.StartupHelperPlugin;
										import actionScripts.events.GlobalEventDispatcher;
										override public function set data(value:Object):void
										{
											if (value)
											{
												super.data = value;
												if (value.version) 
												{
													//lblVersion.text = value.version;
													lblVersion.visible = lblVersion.includeInLayout = true;
													lblNI.visible = lblNI.includeInLayout = lblFix.visible = 
														lblFix.includeInLayout = false;
												}
												else
												{
													lblVersion.visible = lblVersion.includeInLayout = false;
													lblNI.visible = lblNI.includeInLayout = lblFix.visible = 
														lblFix.includeInLayout = true;
												}
											}
										}
										
										protected function onFixRequest(event:MouseEvent):void
										{
											GlobalEventDispatcher.getInstance().dispatchEvent(new Event(StartupHelperPlugin.EVENT_GETTING_STARTED));
										}
										
									]]>
								</fx:Script>
								<s:layout>
									<s:HorizontalLayout verticalAlign="middle"
														padding="8"/>
								</s:layout>
								<s:Label id="lblVersion"
										 width="100%"
										 includeInLayout="false" visible="false"
										 text="{data.version}"/>
								<s:Label id="lblNI" 
										 text="Not Installed."/>
								<s:Label id="lblFix" 
										 text="Fix this" color="0x8a2a2a"
										 textDecoration="underline" buttonMode="true"
										 click="onFixRequest(event)"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
</s:VGroup>