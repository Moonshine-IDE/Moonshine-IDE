<?xml version="1.0" encoding="utf-8"?>
<resizableTitleWindow:ResizableTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
                                           xmlns:s="library://ns.adobe.com/flex/spark"
                                           width="600" height="400" minWidth="300" minHeight="200"
                                           skinClass="components.skins.ResizableTitleWindowSkin"
                                           xmlns:resizableTitleWindow="actionScripts.ui.resizableTitleWindow.*"
                                           creationComplete="onCreationCompletes(event)">
    <fx:Script>
		<![CDATA[
        import actionScripts.events.GeneralEvent;
        import actionScripts.events.GlobalEventDispatcher;
        import actionScripts.plugins.git.commands.GetCurrentBranchCommand;
        import actionScripts.plugins.git.commands.GitSwitchBranchCommand;
        import actionScripts.plugins.git.model.GitConstantsVO;
        import actionScripts.plugins.versionControl.event.VersionControlEvent;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.events.CloseEvent;
        import mx.events.FlexEvent;

        import spark.components.BusyIndicator;

        [Bindable]
        public var isGitAvailable:Boolean;
        public var isSubmit:Boolean;

        [Bindable]
        private var branchCollection:ArrayCollection;
        private var dispatcher:GlobalEventDispatcher = GlobalEventDispatcher.getInstance();
        private var busyIndicator:BusyIndicator;

        protected function onCreationCompletes(event:FlexEvent):void
        {
            addRemoveBusyIndicator(true);
			if (GitConstantsVO.LAST_SELECTED_BRANCH_LISTING_TYPE == GitSwitchBranchCommand.BRANCH_TYPE_LOCAL) rbLocalBranch.selected = true;
			else rbRemoteBranch.selected = true;

            dispatcher.addEventListener(VersionControlEvent.REPOSITORY_AUTH_CANCELLED, onAuthRequestCancelled, false, 0, true);
            dispatcher.addEventListener(GetCurrentBranchCommand.GIT_REMOTE_BRANCH_LIST_RECEIVED, onGitRemoteBranchListReceived, false, 0, true);
            new GitSwitchBranchCommand(GitConstantsVO.LAST_SELECTED_BRANCH_LISTING_TYPE);
        }

        override protected function closeByCrossSign(event:Event):void
        {
            dispatcher.removeEventListener(GetCurrentBranchCommand.GIT_REMOTE_BRANCH_LIST_RECEIVED, onGitRemoteBranchListReceived);
            dispatcher.removeEventListener(VersionControlEvent.REPOSITORY_AUTH_CANCELLED, onAuthRequestCancelled);
            super.closeByCrossSign(event);
        }

        private function onTypeChanged(event:Event):void
        {
            branchCollection = null;
            addRemoveBusyIndicator(true);
            if (rbgBranchTypes.selection == rbLocalBranch)
            {
                new GitSwitchBranchCommand(GitConstantsVO.LAST_SELECTED_BRANCH_LISTING_TYPE = GitSwitchBranchCommand.BRANCH_TYPE_LOCAL);
            } else
            {
                new GitSwitchBranchCommand(GitConstantsVO.LAST_SELECTED_BRANCH_LISTING_TYPE = GitSwitchBranchCommand.BRANCH_TYPE_REMOTE);
            }
        }

        private function onAuthRequestCancelled(event:VersionControlEvent):void
        {
            currentState = "default";
            addRemoveBusyIndicator(false);
        }

        private function onGitRemoteBranchListReceived(event:GeneralEvent):void
        {
            addRemoveBusyIndicator(false);
            branchCollection = event.value as ArrayCollection;
        }

        private function onSubmit():void
        {
            if (lstBranches.selectedItem.isSelected)
            {
                Alert.show("Selected item is already set as current branch.", "Error!");
                return;
            }

            isSubmit = true;
            // for now - testing
            dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
        }

        private function addRemoveBusyIndicator(isAdd:Boolean):void
        {
            if (isAdd && currentState != "progress")
            {
                currentState = "progress";
                busyIndicator = new BusyIndicator();
                busyIndicator.horizontalCenter = busyIndicator.verticalCenter = 0;
                grpProgress.addElement(busyIndicator);
            } else if (!isAdd && currentState == "progress")
            {
                currentState = "default";
                grpProgress.removeElement(busyIndicator);
                busyIndicator = null;
            }
        }
        ]]>
	</fx:Script>
    <fx:Declarations>
        <s:RadioButtonGroup id="rbgBranchTypes"
                            change="onTypeChanged(event)"/>
    </fx:Declarations>
    <resizableTitleWindow:states>
        <s:State name="default"/>
        <s:State name="progress"/>
    </resizableTitleWindow:states>

    <s:VGroup height="100%" width="100%"
              paddingLeft="12" paddingBottom="9" paddingTop="9" paddingRight="13">
        <s:Label text="Showing Branch Type:"/>
        <s:HGroup width="100%" verticalAlign="middle" paddingBottom="4">
            <s:RadioButton id="rbLocalBranch"
                           groupName="rbgBranchTypes"
                           label="Local Branches"/>
            <s:RadioButton id="rbRemoteBranch"
                           groupName="rbgBranchTypes"
                           label="Remote Branches"/>
        </s:HGroup>
        <s:Label text="Select a branch to switch to:"/>
        <s:List id="lstBranches"
                width="100%" height="100%" styleName="multiLineList"
                dataProvider="{branchCollection}" labelField="data"
                requireSelection="true" doubleClickEnabled="true" doubleClick="onSubmit()">
            <s:itemRenderer>
                <fx:Component>
                    <s:ItemRenderer width="100%" height="22">
                        <fx:Script>
							<![CDATA[
                            override public function set data(value:Object):void
                            {
                                if (value)
                                {
                                    super.data = value;
                                    labelDisplay.setStyle("fontWeight", data.isSelected ? "bold" : "normal");
                                    labelDisplay.setStyle("color", data.isSelected ? 0x33cc33 : 0xffffff);
                                    if (data.isSelected) labelDisplay.text = "* " + labelDisplay.text;
                                }
                            }
                            ]]>
						</fx:Script>

                        <s:Label id="labelDisplay"
                                 left="4" right="6" verticalCenter="0"/>
                    </s:ItemRenderer>
                </fx:Component>
            </s:itemRenderer>
        </s:List>
        <s:Label text="You need Git installed on your system to continue."
                 width="100%" textAlign="center" color="0xff0000"
                 visible="{!isGitAvailable}" includeInLayout="{!isGitAvailable}"/>
    </s:VGroup>

    <s:Group id="grpProgress"
             includeIn="progress" width="100%" height="100%"/>

    <resizableTitleWindow:controlBarContent>
        <s:Button id="btnCommit" label="Checkout Branch"
                  styleName="darkButton" click="onSubmit()"
                  enabled="{lstBranches.selectedItem}"/>
    </resizableTitleWindow:controlBarContent>
</resizableTitleWindow:ResizableTitleWindow>