<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 Prominic.NET, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// Author: Prominic.NET, Inc.
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
////////////////////////////////////////////////////////////////////////////////
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:containers="spark.containers.*"
		 implements="actionScripts.interfaces.IViewWithTitle"
		 horizontalGap="2" paddingTop="10" paddingLeft="6" paddingRight="6" paddingBottom="4"
		 width="100%" height="100%" backgroundColor="0x444444">
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import spark.components.Alert;
			
			import actionScripts.events.GeneralEvent;
			import actionScripts.plugins.git.model.GitFileVO;
			
			public static const OPEN_CONFLICT_FILES:String = "openConflictFilesInEditors";
			public static const OPEN_CONFLICT_FILE:String = "openConflictFileInEditor";
			public static const MARK_RESOLVE_CONFLICT_FILES:String = "markResolveFilesInConflict";
			
			[Bindable] public var conflicts:ArrayCollection;
			
			public function get title():String
			{
				return "Conflicts";
			}
			
			protected function onResolveRequest(event:MouseEvent):void
			{
				if (testIfItemHasSelection())
				{
					dispatchEvent(new Event(MARK_RESOLVE_CONFLICT_FILES));
				}
			}
			
			protected function onOpenInEditorRequest(event:MouseEvent):void
			{
				if (testIfItemHasSelection())
				{
					dispatchEvent(new Event(OPEN_CONFLICT_FILES));
				}
			}
			
			protected function testIfItemHasSelection():Boolean
			{
				var hasItemSelected:Boolean = conflicts.source.some(function(element:GitFileVO, index:int, arr:Array):Boolean
				{
					return element.isSelected;
				});
				
				if (!hasItemSelected) Alert.show("Select an item to proceed.", "Note!");
				return hasItemSelected;
			}
			
			protected function onItemDoubleClicked(event:MouseEvent):void
			{
				dispatchEvent(new GeneralEvent(OPEN_CONFLICT_FILE, lstConflicts.selectedItem));
			}
			
		]]>
	</mx:Script>
	
	<s:HGroup width="100%" verticalAlign="middle">
		<s:Label text="Conflicts by: C:\MyWork\MyGitProjectRepository" fontSize="11" color="0xFFBF0F"/>
		<s:Spacer width="100%"/>
		<s:Button label="Open file(s)" styleName="darkButton"
				  click="onOpenInEditorRequest(event)"/>
		<s:Button label="Mark as Resolved" styleName="darkButton"
				  click="onResolveRequest(event)"/>
	</s:HGroup>
	
	<s:List id="lstConflicts" 
			width="100%" height="100%" 
			dataProvider="{conflicts}" styleName="multiLineList"
			doubleClickEnabled="true" doubleClick="onItemDoubleClicked(event)">
		<s:itemRenderer>
			<mx:Component>
				<s:ItemRenderer height="22">
					<mx:Script>
						<![CDATA[
							override public function set data(value:Object):void
							{
								if (value) 
								{
									super.data = value;
									labelDisplay.text = value.path;
								}
							}
						]]>
					</mx:Script>
					
					<s:layout>
						<s:HorizontalLayout verticalAlign="middle" paddingLeft="4" paddingRight="20" gap="2"/>
					</s:layout>
					
					<s:Label id="labelDisplay"
							 paddingLeft="8" width="100%"/>
					<s:CheckBox id="cbSelect"
								change="data.isSelected = cbSelect.selected" selected="{data.isSelected}"/>
				</s:ItemRenderer>
			</mx:Component>
		</s:itemRenderer>
	</s:List>
</mx:VBox>