<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 Prominic.NET, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// Author: Prominic.NET, Inc.
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
// test commit at 'master' - ignore
////////////////////////////////////////////////////////////////////////////////
-->
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   frameRate="60" height="768" minWidth="1024" applicationDPI="120"
					   preinitialize="onPreinit(event)" initialize="onInitialized()" creationComplete="onComplete()" xmlns:containers="components.containers.*" xmlns:nativeApplicationUpdater="actionScripts.extResources.riaspace.nativeApplicationUpdater.*">
	<fx:Metadata>
		[ResourceBundle("resources")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import actionScripts.events.GlobalEventDispatcher;
			import actionScripts.events.LayoutEvent;
			import actionScripts.factory.FileLocation;
			import actionScripts.impls.IAboutBridgeImp;
			import actionScripts.impls.IClipboardBridgeImp;
			import actionScripts.impls.IContextMenuBridgeImp;
			import actionScripts.impls.IFileBridgeImp;
			import actionScripts.impls.IFlexCoreBridgeImp;
			import actionScripts.impls.IGroovyBridgeImpl;
			import actionScripts.impls.IHaxeBridgeImpl;
			import actionScripts.impls.IJavaBridgeImpl;
			import actionScripts.impls.ILanguageServerBridgeImp;
			import actionScripts.impls.INativeMenuItemBridgeImp;
			import actionScripts.impls.IOSXBookmarkerBridgeImp;
			import actionScripts.impls.IOnDiskBridgeImpl;
			import actionScripts.impls.IVisualEditorProjectBridgeImpl;
			import actionScripts.locator.IDEModel;
			import actionScripts.ui.LayoutModifier;
			import actionScripts.ui.menu.MenuPlugin;
			import actionScripts.utils.OSXBookmarkerNotifiers;
			import actionScripts.utils.SDKUtils;
			import actionScripts.valueObjects.ConstantsCoreVO;
			
			import components.MainEntryPoint;
			
			import no.doomsday.console.ConsoleUtil;

			//--------------------------------------------------------------------------
			//
			//  PRIVATE STATIC
			//
			//--------------------------------------------------------------------------
	
			private static const NEEDED_FOR_COMPILATION:IFileBridgeImp = null;
			private static const NEEDED_FOR_COMPILATION2:IContextMenuBridgeImp = null;
			private static const NEEDED_FOR_COMPILATION3:IFlexCoreBridgeImp = null;
			private static const NEEDED_FOR_COMPILATION4:INativeMenuItemBridgeImp = null;
			private static const NEEDED_FOR_COMPILATION5:IAboutBridgeImp = null;
	        private static const NEEDED_FOR_COMPILATION6:IVisualEditorProjectBridgeImpl = null;
	        private static const NEEDED_FOR_COMPILATION7:IClipboardBridgeImp = null;
	        private static const NEEDED_FOR_COMPILATION8:IJavaBridgeImpl = null;
	        private static const NEEDED_FOR_COMPILATION9:ILanguageServerBridgeImp = null;
	        private static const NEEDED_FOR_COMPILATION10:IGroovyBridgeImpl = null;
			private static const NEEDED_FOR_COMPILATION11:IOSXBookmarkerBridgeImp = null;
			private static const NEEDED_FOR_COMPILATION12:IHaxeBridgeImpl = null;
			private static const NEEDED_FOR_COMPILATION13:IOnDiskBridgeImpl = null;
			
			//--------------------------------------------------------------------------
			//
			//  PUBLIC API
			//
			//--------------------------------------------------------------------------
	
			/**
			 * Returns MainEntryPoint to caller
			 */
			public function getMainElement():MainEntryPoint
			{
				return getElementAt(0) as MainEntryPoint;
			}
	
			//--------------------------------------------------------------------------
			//
			//  PRIVATE API
			//
			//--------------------------------------------------------------------------
	
			/**
			 * On preinitialilzation
			 */
			private function onPreinit(event:FlexEvent):void
			{
				// application version
				var appDescriptor:XML = nativeApplication.applicationDescriptor;
				var xmlns:Namespace = new Namespace(appDescriptor.namespace());
				IDEModel.getInstance().version = appDescriptor.xmlns::versionNumber;
				ConstantsCoreVO.IS_DEVELOPMENT_MODE = (appDescriptor.xmlns::id == ConstantsCoreVO.MOONSHINE_PROD_ID) ? false : true;
			}
	
			/**
			 * On initialization
			 */
			private function onInitialized():void
			{
				// sets the application runs in which platform
				ConstantsCoreVO.IS_MACOS = !NativeApplication.supportsSystemTrayIcon;
	
				// attach main view
				var mCore:MainEntryPoint = new MainEntryPoint();
				addElementAt(mCore, 0);
	
				// check if it's osx and packaged with bundled sdk
				SDKUtils.checkBundledSDKPresence();
				if (!ConstantsCoreVO.IS_BUNDLED_SDK_PRESENT) SDKUtils.checkHelperDownloadedSDKPresence();
	
				// addedToStage
				addEventListener(Event.ADDED_TO_STAGE, initStage);
				nativeWindow.addEventListener(Event.CLOSING, onApplicationClosing);
	
				IDEModel.getInstance().refreshIdeBuildVersion();
			}
	
			/**
			 * On creation completes
			 */
			private function onComplete():void
			{
				// opens scope bookmarked urls
				CONFIG::OSX
				{
					setTimeout(function():void
					{
						OSXBookmarkerNotifiers.availableBookmarkedPaths = IDEModel.getInstance().fileCore.getSSBInterface().restoreAccessedPaths();
						//Alert.show(OSXBookmarkerNotifiers.availableBookmarkedPaths);
					}, 1000);
				}
	
				/*if (fileFrom.exists)
	            {
	                Alert.show(fileFrom.nativePath);
	                var fileTo:File = new File("/Users/<userName>/Desktop/testSomething");
	
	                var shellInfo:NativeProcessStartupInfo = new NativeProcessStartupInfo();
	                var processArgs:Vector.<String> = new Vector.<String>;
	                processArgs.push("-c");
	                processArgs.push("unzip '"+fileFrom.nativePath+"' -d '"+fileTo.nativePath+"'");
	                shellInfo.arguments = processArgs;
	                shellInfo.executable = new File("/bin/bash");
	                var fcsh:NativeProcess = new NativeProcess();
	                fcsh.start(shellInfo);
	            }*/
				
				// verify if an App Store version
				if (ConstantsCoreVO.IS_MACOS && !ConstantsCoreVO.IS_DEVELOPMENT_MODE)
				{
					var tmpConfiguration:FileLocation = IDEModel.getInstance().fileCore.resolveApplicationDirectoryPath("elements/InstallConfig.xml");
					if (tmpConfiguration.fileBridge.exists)
					{
						var tmpXML:XML = new XML(tmpConfiguration.fileBridge.read());
						if (String(tmpXML.isAppStoreVersion) != "false")
						{
							ConstantsCoreVO.IS_APP_STORE_VERSION = true;
						}
					}
				}
				
				// continue to update check
				updater.updateURL = "https://moonshine-ide.com/wp-content/uploads/updater.xml";
				updater.initialize();
			}
	
			public function onHelperAppInstallationCompletes():void
			{
				Alert.show("Download completed");
			}
	
			//--------------------------------------------------------------------------
			//
			//  LISTENERS API
			//
			//--------------------------------------------------------------------------
	
			/**
			 * On added to stage
			 */
			private function initStage(e:Event):void
			{
				//this.stage.nativeWindow.maximize();
				if (Screen.mainScreen.bounds.height >= 768 && Screen.mainScreen.bounds.height <= 800)
				{
					// subtract the taskbar height
					stage.nativeWindow.height = Screen.mainScreen.visibleBounds.height;
				}
	
				stage.nativeWindow.x = (Screen.mainScreen.visibleBounds.width - stage.nativeWindow.width)/2;
				stage.nativeWindow.y = (Screen.mainScreen.visibleBounds.height - stage.nativeWindow.height)/2;
				removeEventListener(Event.ADDED_TO_STAGE, initStage);
				ConsoleUtil.setKeyStroke([117]);
				stage.addChild(ConsoleUtil.getInstance());
				
				// listening to maximi/restore state
				nativeWindow.addEventListener(NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE, onNativeWindowDisplayChanged, false, 0, true);
			}
	
			/**
			 * On maximize/restore etc.
			 */
			private function onNativeWindowDisplayChanged(event:NativeWindowDisplayStateEvent):void
			{
				LayoutModifier.isAppMaximized = (event.afterDisplayState == NativeWindowDisplayState.MAXIMIZED);
				
				if (event.afterDisplayState == NativeWindowDisplayState.MAXIMIZED && event.beforeDisplayState != NativeWindowDisplayState.MINIMIZED)
				{
					GlobalEventDispatcher.getInstance().dispatchEvent(new LayoutEvent(LayoutEvent.WINDOW_MAXIMIZED));
				}
				else if (event.afterDisplayState == NativeWindowDisplayState.NORMAL && event.beforeDisplayState != NativeWindowDisplayState.MINIMIZED)
				{
					GlobalEventDispatcher.getInstance().dispatchEvent(new LayoutEvent(LayoutEvent.WINDOW_NORMAL));
				}
			}
	
			protected function onApplicationClosing(event:Event):void
			{
				var internalClosingEvent:Event = new Event(MenuPlugin.MENU_QUIT_EVENT, false, true);
				GlobalEventDispatcher.getInstance().dispatchEvent(internalClosingEvent);
	
				event.stopImmediatePropagation();
				event.preventDefault();
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<nativeApplicationUpdater:NativeApplicationUpdater id="updater"
														   initialized="updater_initializedHandler(event)"
														   updateStatus="updater_updateStatusHandler(event)"
														   error="updater_errorHandler(event)"
														   downloadError="updater_errorHandler(event)"
														   updateError="updater_errorHandler(event)"/>
	</fx:Declarations>
	<fx:Style source="/elements/style/style.css"/>
	<fx:Style source="/assets/styles/InstallApacheFlexStyle.css"/>
	<fx:Style source="/assets/styles/awaybuilder_defaults.css"/>

	<fx:Script source="actionScripts/utils/AutoUpdater.as"/>
	<containers:UpdaterView width="100%" height="100%"
							includeInLayout="{isUpdater}" visible="{isUpdater}"
							updater="{updater}" downlaoding="{downlaoding}" isAppStoreVersion="{ConstantsCoreVO.IS_APP_STORE_VERSION}"
							UPDATEYES="btnYes_clickHandler(event)" UPDATENO="btnNo_clickHandler(event)" UPDATECANCEL="btnCancel_clickHandler(event)"/>
</s:WindowedApplication>