<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
// 
////////////////////////////////////////////////////////////////////////////////
-->
<s:VGroup 
	xmlns:fx="http://ns.adobe.com/mxml/2009"
  	xmlns:s="library://ns.adobe.com/flex/spark"
  	width="100%"
  	paddingTop="15"
  	paddingBottom="15"
  	paddingLeft="15"
  	paddingRight="15" creationComplete="init()">
	
	<fx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;
			import mx.core.IVisualElement;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			import spark.events.IndexChangeEvent;
			import spark.primitives.Line;
			
			import actionScripts.events.GeneralEvent;
			import actionScripts.events.GlobalEventDispatcher;
			import actionScripts.plugin.actionscript.as3project.vo.BuildOptions;
			import actionScripts.plugin.run.RunMobileSetting;
			import actionScripts.plugin.settings.vo.ISetting;
			import actionScripts.plugin.settings.vo.MultiOptionSetting;
			import actionScripts.plugin.settings.vo.NameValuePair;
			import actionScripts.plugin.settings.vo.PathSetting;
			import actionScripts.plugin.settings.vo.StringSetting;
			import actionScripts.valueObjects.ConstantsCoreVO;
			
			[Bindable] public var setting:RunMobileSetting;
			
			[Bindable] private var isAndroidDevice:Boolean;
			
			private var deviceConfiguration:DeviceConfiguration;
			private var lastSelectedItem:Object;
			private var deviceSettings:Vector.<ISetting>;
			
			private function init():void
			{
				var buildOptions:BuildOptions = setting.provider as BuildOptions;
				cmbOption.selectedIndex = buildOptions.isMobileRunOnSimulator ? 0 : 1;
				updateDevices(buildOptions.targetPlatform);
				setting.stringValue = "nil";
				
				cmbModelOption.callLater(function():void
				{
					if (buildOptions.isMobileHasSimulatedDevice && buildOptions.isMobileHasSimulatedDevice.name != "null")
					{
						for (var i:int=0; i < cmbModelOption.dataProvider.length; i++)
						{
							if (BuildOptions(setting.provider).isMobileHasSimulatedDevice.name == cmbModelOption.dataProvider[i].name)
							{
								cmbModelOption.selectedIndex = i;
								lastSelectedItem = cmbModelOption.dataProvider[i];
								break;
							}
						}
					}
				});
			}
			
			public function updateDevices(forPlatform:String):void
			{
				currentState = (cmbOption.selectedIndex == 0) ? "simulator" : "device";
				
				cmbModelOption.dataProvider = (!forPlatform || forPlatform != "iOS") ? ConstantsCoreVO.TEMPLATES_ANDROID_DEVICES : ConstantsCoreVO.TEMPLATES_IOS_DEVICES;
				isAndroidDevice = (forPlatform == "iOS") ? false : true;
				cmbModelOption.callLater(function():void
				{
					lastSelectedItem = cmbModelOption.selectedItem;
				});
				
				// generate content for device debugging
				if (deviceContent && currentState == "device")
				{
					var connectTypeSetting:MultiOptionSetting = new MultiOptionSetting(setting.provider, 'isMobileConnectType', "Connection Type", 
						Vector.<NameValuePair>([
							new NameValuePair("USB", BuildOptions.CONNECT_TYPE_USB),
							new NameValuePair("Wi-Fi", BuildOptions.CONNECT_TYPE_WIFI)
						])
					);
					if (isAndroidDevice)
					{
						deviceSettings = Vector.<ISetting>([
							connectTypeSetting,
							new PathSetting(setting.provider, "certAndroid", "Certificate", false, setting.provider["certAndroid"], false),
							new StringSetting(setting.provider, "certAndroidPassword", "Certificate Password")
						]);
					}
					else
					{
						deviceSettings = Vector.<ISetting>([
							connectTypeSetting,
							new MultiOptionSetting(setting.provider, 'iosPackagingMode', "Packaging Mode", 
								Vector.<NameValuePair>([
									new NameValuePair("Standard", BuildOptions.IOS_PACKAGING_STANDARD),
									new NameValuePair("Fast", BuildOptions.IOS_PACKAGING_FAST)
								])
							),
							new PathSetting(setting.provider, "certIos", "Certificate", false, setting.provider["certIos"], false),
							new StringSetting(setting.provider, "certIosPassword", "Certificate Password"),
							new PathSetting(setting.provider, "certIosProvisioning", "Provisioning Profile", false, setting.provider["certIosProvisioning"], false)
						]);
					}
					
					deviceContent.removeAllElements();
					
					var line:Line;
					var rdr:IVisualElement;
					var index:int = 1;
					for each (var value:ISetting in deviceSettings)
					{	
						rdr = value.renderer;
						rdr["paddingLeft"] = rdr["paddingRight"] = 0;
						deviceContent.addElement(rdr);
						
						// don't add the line for last item
						if (index != deviceSettings.length)
						{
							index ++;
							line = new Line();
							line.percentWidth = 100;
							line.height = 1;
							line.stroke = new SolidColorStroke(0xdadada);
							deviceContent.addElement(line);
						}
					}
				}
			}
			
			public function commitChanges():void
			{
				if (deviceContent && currentState == "device")
				{
					for each(var setting:ISetting in deviceSettings)
					{
						if (setting.valueChanged())
						{
							setting.commitChanges();
						}
					}
				}
			}
			
			protected function cmbOption_changeHandler(event:IndexChangeEvent):void
			{
				BuildOptions(setting.provider).isMobileRunOnSimulator = (cmbOption.selectedIndex == 0);
				BuildOptions(setting.provider).isMobileHasSimulatedDevice = cmbModelOption.selectedItem;
				
				lastSelectedItem = cmbModelOption.selectedItem;
				updateDevices(isAndroidDevice ? "Android" : "iOS");
			}
			
			protected function onConfigureDevices(event:MouseEvent):void
			{
				if (!deviceConfiguration)
				{
					deviceConfiguration = PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, DeviceConfiguration, true) as DeviceConfiguration;
					deviceConfiguration.addEventListener(Event.CHANGE, onDeviceUpdated);
					deviceConfiguration.addEventListener(CloseEvent.CLOSE, onConfigurationPopupClosed);
					PopUpManager.centerPopUp(deviceConfiguration);
				}
			}
			
			private function onConfigurationPopupClosed(event:CloseEvent):void
			{
				deviceConfiguration.removeEventListener(CloseEvent.CLOSE, onConfigurationPopupClosed);
				deviceConfiguration.removeEventListener(Event.CHANGE, onDeviceUpdated);
				deviceConfiguration = null;
			}
			
			private function onDeviceUpdated(event:Event):void
			{
				if (cmbModelOption.dataProvider.getItemIndex(lastSelectedItem) != -1) cmbModelOption.selectedItem = lastSelectedItem;
				
				GlobalEventDispatcher.getInstance().dispatchEvent(new GeneralEvent(GeneralEvent.DEVICE_UPDATED));
			}
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="simulator"/>
		<s:State name="device"/>
	</s:states>
	
	<s:Label 
		text="{setting.label}"
		styleName="uiTextSettingsLabel"/>
	<s:DropDownList id="cmbOption"
					width="100%" height="24" 
					change="cmbOption_changeHandler(event)" 
					requireSelection="true" contentBackgroundColor="#FFFFFF">
	<!--<s:ComboBox id="cmbOption"
				width="100%" alternatingItemColors="[#FFFFFF, #FFFFFF]" selectionColor="#cccccc" rollOverColor="#eeeeee"
				selectedIndex="0" change="cmbOption_changeHandler(event)">-->
		<s:dataProvider>
			<s:ArrayList>
				<fx:String>AIR Simulator</fx:String>
				<fx:String>Device</fx:String>
			</s:ArrayList>
		</s:dataProvider>
	</s:DropDownList>
	<s:Spacer height="3"/>
	<s:Rect width="100%"
			alpha="1">
		<s:stroke>
			<s:SolidColorStroke weight="1" color="0xdadada"/>
		</s:stroke>
	</s:Rect>
	<s:VGroup width="100%" includeIn="simulator">
		<s:Label 
			text="Device Model"
			styleName="uiTextSettingsLabel" paddingTop="13"/>
		<s:HGroup width="100%" verticalAlign="middle">
			<s:DropDownList id="cmbModelOption"
							width="100%" height="24" 
							change="cmbOption_changeHandler(event)" labelField="name" 
							requireSelection="true" contentBackgroundColor="#FFFFFF"/>
			<s:Button label="Configure"
					  click="onConfigureDevices(event)"
					  height="24"/>
		</s:HGroup>
		<s:Spacer height="3"/>
	</s:VGroup>
	<s:VGroup id="deviceContent" 
			  width="100%" includeIn="device" gap="0"/>
</s:VGroup>