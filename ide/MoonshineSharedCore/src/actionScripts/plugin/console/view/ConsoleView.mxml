<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
// 
////////////////////////////////////////////////////////////////////////////////
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:s="library://ns.adobe.com/flex/spark" xmlns:ui="actionScripts.ui.*"
	width="100%" 
	height="25"
	minHeight="25"
	backgroundColor="0x373737"
	backgroundAlpha="1" percentHeight="100"
	clipContent="false" updateComplete="consoleView_updateCompleteHandler(event)"
	creationComplete="init()" xmlns:view="actionScripts.plugin.console.view.*"
    implements="actionScripts.interfaces.IViewWithTitle" label="Console">
	<mx:Script>
		<![CDATA[
		import flash.text.engine.ElementFormat;
		import flash.text.engine.FontDescription;
		import flash.text.engine.FontLookup;

		import mx.events.FlexEvent;
		import mx.managers.CursorManager;
		import mx.managers.CursorManagerPriority;

		import spark.components.RichEditableText;

		import actionScripts.locator.IDEModel;
		import actionScripts.plugin.console.ConsoleCommandEvent;
		import actionScripts.plugin.console.ConsoleStyle;

		[Bindable] public var showCommandLine:Boolean = true;

		public var displayContextMenuAbout:Boolean = true;
		public var displayContextMenuHide:Boolean = true;
		public var displayContextMenuHelp:Boolean = true;
		public var displayContextMenuExit:Boolean = true;

		private var _consolePopOver:Boolean;
		[Bindable]
		private var historyContainerHeight:int = 0;
		private var cm:ContextMenu;
		protected var model:IDEModel = IDEModel.getInstance();

		public function get title():String
		{
			return this.label;
		}

		public function get consolePopOver():Boolean
		{
			return _consolePopOver;
		}

		public function set consolePopOver(value:Boolean):void
		{
			_consolePopOver = value;

			if (!historyContainer) return;

			//divider.y = -1;

			if (value)
			{
				height = minHeight;
				historyContainer.setStyle('top', null);
				historyContainer.setStyle('bottom', null);
				//historyContainer.y = divider.y;
			}
			else
			{
				historyContainer.setStyle('top', 0);
				historyContainer.setStyle('bottom', 25);
			}

		}

		private function init():void
		{
			consolePopOver = _consolePopOver;
			cm = new ContextMenu();
			var clear:ContextMenuItem = new ContextMenuItem('Clear', false, true, true);
			clear.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, clearHandler);
			cm.customItems.push(clear);
			cm.clipboardMenu = true;
			history.contextMenu = cm;
			(history.textDisplay as RichEditableText).contextMenu = cm;

			if (displayContextMenuAbout)
			{
				var about:ContextMenuItem = new ContextMenuItem('About', false, true, true);
				about.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, aboutHandler);
				cm.customItems.push(about);
			}
			if (displayContextMenuHide)
			{
				var hide:ContextMenuItem = new ContextMenuItem('Hide', false, true, true);
				hide.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, hideHandler);
				cm.customItems.push(hide);
			}
			if (displayContextMenuExit)
			{
				var exit:ContextMenuItem = new ContextMenuItem('Exit', false, true, true);
				exit.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, exitHandler);
				cm.customItems.push(exit);
			}
			if (displayContextMenuHelp)
			{
				var help:ContextMenuItem = new ContextMenuItem('Help', false, true, true);
				help.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, helpHandler);
				cm.customItems.push(help);
			}
		}

		private var cursorID:int = CursorManager.NO_CURSOR;

		[Embed(source="Assets.swf", symbol="mx.skins.cursor.VBoxDivider")]
		private var cursor:Class;

		private function mouseOverDivider():void
		{
			cursorID = cursorManager.setCursor(cursor, CursorManagerPriority.HIGH, 0, 0);
		}

		private function mouseOutDivider():void
		{
			if (cursorID != CursorManager.NO_CURSOR)
			{
				cursorManager.removeCursor(cursorID);
				cursorID = CursorManager.NO_CURSOR;
			}
		}

		private function mouseUpDivider(event:Event = null):void
		{
			parent.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveDivider);
			stage.removeEventListener(MouseEvent.MOUSE_UP, mouseUpDivider);
		}

		private function mouseMoveDivider(event:MouseEvent):void
		{
			historyContainerHeight = parent.height - parent.mouseY - minHeight;
		}

		private function clearHandler(e:Event):void
		{
			commandLine.dispatchEvent(new ConsoleCommandEvent("clear", null));
		}

		private function aboutHandler(e:Event):void
		{
			commandLine.dispatchEvent(new ConsoleCommandEvent("about", null));
		}

		private function hideHandler(e:Event):void
		{
			commandLine.dispatchEvent(new ConsoleCommandEvent("hide", null));
		}

		private function exitHandler(e:Event):void
		{
			commandLine.dispatchEvent(new ConsoleCommandEvent("exit", null));
		}

		private function helpHandler(e:Event):void
		{
			commandLine.dispatchEvent(new ConsoleCommandEvent("help", null));
		}

		protected function consoleView_updateCompleteHandler(event:FlexEvent):void
		{
			// TODO Auto-generated method stub
			if (!_consolePopOver)
				historyContainerHeight = this.height;
		}
		]]>
	</mx:Script>
	
	<mx:VBox id="historyContainer"
			 width="100%"
			 backgroundAlpha="0.9"
			 backgroundColor="0x373737">
		<view:ConsoleViewTextArea id="history"
								  editable="false" selectable="true" horizontalScrollPolicy="auto" verticalScrollPolicy="auto"
								  height="100%" width="100%" lineBreak="toFit" color="0xffffff" styleName="consoleFixedWidthTexts" fontSize="12" focusedTextSelectionColor="0x676767"/>
		<mx:Canvas width="100%">
			<mx:HRule 
				width="100%" 
				height="1"
				strokeColor="0x343434"
				/>
			
			<mx:Canvas id="glowOverlay"
					   width="100%"
					   height="100%"
					   bottom="0"
					   backgroundColor="0xFFFFFF"
					   backgroundAlpha="0.1"
					   includeInLayout="false"
					   mouseChildren="false"
					   mouseEnabled="false"
					   mouseFocusEnabled="false" 
					   />
			<mx:HBox width="100%" height="100%" paddingTop="3"
					 horizontalGap="0"
					 backgroundAlpha="1"
					 backgroundColor="0x373737" bottom="0">
				<mx:filters>
					<mx:DropShadowFilter color="0x0" alpha="0.2" angle="90" blurX="24" blurY="24" distance="12" inner="true"/>
					<mx:GlowFilter color="0xFFFFFF" alpha="0.05" blurX="24" blurY="24" inner="true" />
				</mx:filters>
				<s:Label id="commandPrefix"
						  paddingRight="2"
						  paddingTop="6"
						  paddingBottom="3"
						  fontSize="12"
						  text=" >"
						  color="0xdddddd" visible="{showCommandLine}" />
				<ui:FeathersUIWrapper width="100%" height="100%" visible="{showCommandLine}">
					<view:CommandLineEditor id="commandLine"/>
				</ui:FeathersUIWrapper>
			</mx:HBox>
		</mx:Canvas>
   </mx:VBox>
</mx:Canvas>