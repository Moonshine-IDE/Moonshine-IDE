<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
// 
////////////////////////////////////////////////////////////////////////////////
-->
<s:VGroup
		xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		width="100%"
		paddingLeft="15"
		paddingTop="15"
		paddingRight="15"
		paddingBottom="15"
		creationComplete="onPathRendererCreationComplete(event)"
		removedFromStage="onPathRendererRemovedFromStage(event)">
	<fx:Script>
		<![CDATA[
		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		import mx.core.FlexGlobals;
		import mx.events.CloseEvent;
		import mx.events.FlexEvent;
		import mx.managers.PopUpManager;

		import spark.events.IndexChangeEvent;

		import actionScripts.events.GlobalEventDispatcher;
		import actionScripts.events.ProjectEvent;
		import actionScripts.factory.FileLocation;
		import actionScripts.locator.IDEModel;
		import actionScripts.plugin.settings.vo.AbstractSetting;
		import actionScripts.plugin.settings.vo.PathSetting;
		import actionScripts.utils.SDKUtils;
		import actionScripts.utils.UtilsCore;
		import actionScripts.valueObjects.SDKReferenceVO;

		import components.popup.SDKDefinePopup;
		import components.popup.SDKSelectorPopup;

		[Bindable]
		public var setting:PathSetting;
		[Bindable]
		public var isSDKPath:Boolean;
		[Bindable]
		public var isDropDown:Boolean;
		[Bindable]
		public var dropdownListItems:ArrayCollection;

		[Bindable]
		private var model:IDEModel = IDEModel.getInstance();

		private var sdkPopup:SDKSelectorPopup;
		private var sdkPathPopup:SDKDefinePopup;

		private var message:String;
		private var messageType:String;

		public function setMessage(value:String, type:String):void
		{
			this.message = value;
			this.messageType = type;

			if(!lblMessage)
			{
				return;
			}
			if (!this.message)
			{
				lblMessage.text = "";
				lblMessage.includeInLayout = lblMessage.visible = false;
			}

			lblMessage.includeInLayout = lblMessage.visible = true;
			if(isDropDown && dropdownListItems && dropdownListItems.length == 0)
			{
				value = "Select path to continue";
				type = AbstractSetting.MESSAGE_CRITICAL;
			}

			switch (type)
			{
				case AbstractSetting.MESSAGE_CRITICAL:
					lblMessage.setStyle("color", 0xff0000);
					break;
				case AbstractSetting.MESSAGE_IMPORTANT:
					lblMessage.setStyle("color", 0x0099ff);
					break;
				default:
					lblMessage.setStyle("color", 0x666666);
					break;
			}

			lblMessage.text = value;
		}

		private function selectPath():void
		{
			// opens only if sdkpop not opens already
			if(isSDKPath)
			{
				if(!sdkPopup)
				{
					sdkPopup = PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, SDKSelectorPopup, true) as SDKSelectorPopup;
					sdkPopup.addEventListener(ProjectEvent.FLEX_SDK_UDPATED, onFlexSDKUpdated);
					sdkPopup.addEventListener(CloseEvent.CLOSE, onSDKPopupClosed);
					PopUpManager.centerPopUp(sdkPopup);
				}
			}
			else
			{
				var location:FileLocation = new FileLocation(setting.stringValue);
				var startFromLocation:String = setting.defaultPath;
				if (location.fileBridge.isPathExists(setting.stringValue))
				{
					startFromLocation = location.fileBridge.nativePath;
				}

				if(setting.directory)
				{
					model.fileCore.browseForDirectory("Select directory", openFile, null, startFromLocation);
				}
				else
				{
					model.fileCore.browseForOpen("Select file", openFile, null, setting.fileFilters, startFromLocation);
				} // for Balsmiq project we need only .xml file to get selected.
			}
		}

		private function clearPath():void
		{
			setting.stringValue = "";
			lblMessage.text = "";
			
			setting.dispatchEvent(new Event(AbstractSetting.PATH_REMOVED));
		}

		private function onFlexSDKUpdated(event:ProjectEvent):void
		{
			// in case user deleted the entry
			setting.stringValue = event.anObject.path;
			lblValue.text = event.anObject.name;
			if(event.anObject.status == SDKUtils.BUNDLED) lblValue.text += " (Bundled)";
			hideDefineSDKLink(event.anObject.name);
			onSDKPopupClosed(null);
			
			setting.dispatchEvent(new Event(AbstractSetting.PATH_SELECTED));
		}

		private function onSDKPopupClosed(event:CloseEvent):void
		{
			sdkPopup.removeEventListener(CloseEvent.CLOSE, onSDKPopupClosed);
			sdkPopup.removeEventListener(ProjectEvent.FLEX_SDK_UDPATED, onFlexSDKUpdated);
			sdkPopup = null;
		}

		private function openFile(fileDir:Object):void
		{
			setting.stringValue = fileDir.nativePath;
			if(isDropDown) dropdownListItems.addItem(fileDir.nativePath);

			cmbPath.selectedItem = setting.stringValue;
			setting.dispatchEvent(new Event(AbstractSetting.PATH_SELECTED));

		}

		protected function onPathRendererCreationComplete(event:FlexEvent):void
		{
			dropdownListItems = setting.dropdownListItems;

			// process this following only in case of project's custom SDK
			if(isSDKPath && setting.stringValue)
			{
				// check if sdk is available to the user
				var isFound:SDKReferenceVO = UtilsCore.getUserDefinedSDK(setting.stringValue, "path");
				if(!isFound)
				{
					hgUndefinedSDK.visible = hgUndefinedSDK.includeInLayout = true;
				} else
				{
					hideDefineSDKLink(isFound.name);
					lblValue.text = isFound.name;
					if(isFound.status == SDKUtils.BUNDLED) lblValue.text += " (Bundled)";
				}
			}

			if(isDropDown)
			{
				cmbPath.setStyle("contentBackgroundColor", "#FFFFFF");
				cmbPath.selectedItem = setting.provider[setting.name];
			}

			setting.dispatchEvent(new Event(AbstractSetting.PATH_SELECTED));

			// validate path
			if(!isSDKPath && setting.stringValue && !isDropDown)
			{
				if(!(new FileLocation(setting.stringValue).fileBridge.exists))
					setMessage("Path is not accessible.", AbstractSetting.MESSAGE_CRITICAL);
			} else
			{
				setMessage(this.message, this.messageType);
			}
		}

		private function hideDefineSDKLink(withSDKName:String):void
		{
			if(hgUndefinedSDK.visible)
			{
				hgUndefinedSDK.visible = hgUndefinedSDK.includeInLayout = false;

				// updates to project custom SDK values
				if(setting.provider.hasOwnProperty("buildOptions"))
				{
					setting.provider.buildOptions.customSDKPath = withSDKName;
					setting.provider.swfOutput.swfVersion = SDKUtils.getSdkSwfMajorVersion(withSDKName);
				}
				// application default sdk
				else
				{
					setting.provider.hasOwnProperty(setting.name)
					{
						setting.provider[setting.name] = withSDKName;
					}
				}
			}
		}

		protected function onSDKAddition(event:MouseEvent):void
		{
			if(!sdkPathPopup)
			{
				sdkPathPopup = PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, SDKDefinePopup, false) as SDKDefinePopup;
				sdkPathPopup.addEventListener(CloseEvent.CLOSE, onSDKPathPopupClosed);
				sdkPathPopup.addEventListener(ProjectEvent.FLEX_SDK_UDPATED, onFlexSDKPathUpdated);
				PopUpManager.centerPopUp(sdkPathPopup);
			} else
			{
				PopUpManager.bringToFront(sdkPathPopup);
			}
		}

		protected function onSDKPathPopupClosed(event:CloseEvent):void
		{
			if(!sdkPathPopup) return;
			sdkPathPopup.removeEventListener(CloseEvent.CLOSE, onSDKPathPopupClosed);
			sdkPathPopup.removeEventListener(ProjectEvent.FLEX_SDK_UDPATED, onFlexSDKPathUpdated);
			sdkPathPopup = null;
		}

		protected function onFlexSDKPathUpdated(event:ProjectEvent):void
		{
			onSDKPathPopupClosed(null);
			// add sdk
			// don't add if said sdk already added
			var isAlreadyAdded:SDKReferenceVO = UtilsCore.getUserDefinedSDK(event.anObject.path, "path");
			if(!isAlreadyAdded)
			{
				var tmp:SDKReferenceVO = new SDKReferenceVO();
				tmp.name = event.anObject.label;
				tmp.path = event.anObject.path;
				model.userSavedSDKs.addItem(tmp);
				GlobalEventDispatcher.getInstance().dispatchEvent(new ProjectEvent(ProjectEvent.FLEX_SDK_UDPATED));
			}
			// check if newly added matches with customSDKpath
			// in a project's environment case
			if(setting.stringValue)
			{
				if(event.anObject.label != setting.stringValue)
				{
					Alert.show("New SDK is different than the defined one. Use it anyway?", "Confirm!", Alert.YES | Alert.NO, null, onSDKChooseConfirmed);
				} else
				{
					onSDKChooseConfirmed(null);
				}
			}

			/*
            * @local
            * we need this to be local
            */
			function onSDKChooseConfirmed(evnt:CloseEvent):void
			{
				if(!evnt || evnt.detail == Alert.YES)
				{
					setting.stringValue = event.anObject.path;
					lblValue.text = event.anObject.label;
					hideDefineSDKLink(setting.stringValue);
				}
			}
		}

		private function onFocusIn(event:FocusEvent):void
		{
			event.currentTarget.text = "";
		}

		protected function onDropDownListPathChange(event:IndexChangeEvent):void
		{
			setting.stringValue = cmbPath.selectedItem;
			setting.dispatchEvent(new Event(AbstractSetting.PATH_SELECTED));
		}

		protected function onPathRendererRemovedFromStage(event:Event):void
		{
			// in case of MXMLC Compiler Plugin
			onSDKPathPopupClosed(null);
		}
		]]>
	</fx:Script>

	<s:HGroup width="100%">
		<s:Label styleName="uiTextSettingsLabel"
				 text="{setting.label}" />

		<mx:Spacer width="100%"/>

		<s:Button label="Clear"
				  skinClass="{LinkButtonSkin}"
				  click="clearPath()" />

		<s:Button label="Change"
				  skinClass="{LinkButtonSkin}"
				  click="selectPath()" />
	</s:HGroup>

	<s:Label id="lblValue"
			 styleName="uiTextSettingsValue"
			 paddingTop="10" width="98%"
			 text="{setting.stringValue? setting.stringValue : 'Not Set' }" visible="{!isDropDown}" includeInLayout="{!isDropDown}"  />
	<s:DropDownList id="cmbPath"
					width="100%" height="24"
					dataProvider="{dropdownListItems}"
					visible="{isDropDown}" includeInLayout="{isDropDown}"
					requireSelection="true"
					change="onDropDownListPathChange(event)"/>
	<s:Label id="lblMessage"
			 styleName="uiTextSettingsLabel" color="#666666" width="100%" maxDisplayedLines="3"
			 fontSize="12" includeInLayout="false" visible="false"/>
	<s:HGroup id="hgUndefinedSDK"
			  width="100%" verticalAlign="middle" gap="4"
			  visible="false" includeInLayout="false">
		<s:Label text="This SDK is not defined."
				 styleName="uiTextSettingsLabel" color="#ff0000" fontSize="12"/>
		<s:Button label="Define it now"
				  skinClass="{LinkButtonSkin}" useHandCursor="true" buttonMode="true"
				  click="onSDKAddition(event)"/>
	</s:HGroup>
</s:VGroup>