<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
// 
////////////////////////////////////////////////////////////////////////////////
-->
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
				 xmlns:s="library://ns.adobe.com/flex/spark"
				 implements="actionScripts.ui.IContentWindow"
				 width="100%" height="100%"
				 backgroundColor="0x444444" creationComplete="onSettingsViewCreationComplete(event)">
	<s:layout>
		<s:HorizontalLayout gap="0"/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			import mx.graphics.SolidColorStroke;
			
			import spark.components.Button;
			import spark.components.Label;
			import spark.components.List;
			import spark.primitives.Line;
			
			import __AS3__.vec.Vector;
			
			import actionScripts.events.GeneralEvent;
			import actionScripts.events.GlobalEventDispatcher;
			import actionScripts.events.SettingsEvent;
			import actionScripts.factory.FileLocation;
			import actionScripts.locator.IDEModel;
			import actionScripts.plugin.actionscript.as3project.vo.AS3ProjectVO;
			import actionScripts.plugin.groovy.grailsproject.vo.GrailsProjectVO;
			import actionScripts.plugin.haxe.hxproject.vo.HaxeProjectVO;
			import actionScripts.plugin.ondiskproj.vo.OnDiskProjectVO;
			import actionScripts.plugin.settings.vo.ISetting;
			import actionScripts.plugin.settings.vo.PluginSettingsWrapper;
			import actionScripts.plugin.settings.vo.SettingsWrapper;
			import actionScripts.valueObjects.ProjectVO;

			public static const EVENT_SAVE:String = "saveSettingsEvent";
			public static const EVENT_CLOSE:String = "closeSettingsEvent";
	
			private var categories:Dictionary = new Dictionary(true);
			private var forceClose:Boolean;
	
			public var buttons:Array = [];
			public var isNewProjectSettings:Boolean;
	
			public var showDefaultButtons:Boolean = true;
			public var defaultSaveLabel:String = "Save";
			public var defaultCancelLabel:String = "Cancel";
			public var defaultCloseLabel:String = "Close";
			public var currentRequestedSelectedItem:IHasSettings;
			public var isSaved:Boolean;
			public var exportProject:ProjectVO;
	
			private var currentSelectedItem:IHasSettings;
			private var _label:String = "Settings";
	
			public function set label(value:String):void
			{
				_label = value;
			}
	
			public function get label():String
			{
				return _label;
			}
	
			public function get longLabel():String
			{
				return "Settings";
			}
	
			public function isChanged():Boolean
			{
				// Allow tab to be closed without asking to save
				if (forceClose) return false;
	
				var setting:IHasSettings;
				for each(var categoryItems:Array in categories)
				{
					for each(setting in categoryItems)
					{
						if (setting.hasChanged()) return true;
					}
				}
	
				return false;
			}
	
			public function isEmpty():Boolean
			{
				return false;
			}
	
			public function save():void
			{
				// Iterate all settings we have & commit changed ones.
				var settings:Vector.<SettingsWrapper> = getSettingsForAllCategories();
				for each (var setting:SettingsWrapper in settings)
				{
					if (setting.hasChanged())
					{
						setting.commitChanges();
					}
				}
	
				// when calls by default sdk save settings
				if (!associatedData)
				{
					saveAndNotify();
					return;
				}
	
				// Moon-106 fix:
				// @ modified devsena
				// to determine if this a new project creation call and to check if
				// same named folder or same named project is not exists to given path
				// @ note
				// a project's folder name can differ to it's named .as3proj file,
				// also a Flash Builder project not suppose to have any .as3proj file as well;
				// in that case project name contains in it's .project file
				//
				// Since in either Flash Builder or Moonshine project type, Moonshine always saves
				// it's saved data to .as3proj file only, we should check the .as3proj file existence first
				var projectPath:String = associatedData.folderLocation.fileBridge.nativePath + associatedData.folderLocation.fileBridge.separator + associatedData.projectName;
				if ((associatedData is AS3ProjectVO) && (associatedData as AS3ProjectVO).isVisualEditorProject)
				{
					projectPath += ".veditorproj";
				}
				else if(associatedData is GrailsProjectVO)
				{
					projectPath += ".grailsproj";
				}
				else if(associatedData is HaxeProjectVO)
				{
					projectPath += ".hxproj";
				}
				else if(associatedData is OnDiskProjectVO)
				{
					projectPath += ".ondiskproj";
				}
				else
				{
					projectPath += ".as3proj";
				}

				/*if(project is AS3ProjectVO)
				{
					var as3Project:AS3ProjectVO = AS3ProjectVO(project);
					projectPath += as3Project.isVisualEditorProject ? ".veditorproj" : ".as3proj";
				}*/

				var projectFile:FileLocation = new FileLocation(projectPath);
				if (projectFile.fileBridge.exists)
				{
					saveAndNotify();
				}
				else
				{
					// this should be the case in new project creation when .as3proj file not exists
					// or a same named project exists but it may not have .as3proj file - mainly when Flash Builder project
	
					// checking .project file existence and it's name in case of Flash Builder project
					if (!isNewProjectSettings)
					{
						projectFile = new FileLocation(associatedData.folderLocation.fileBridge.nativePath + associatedData.folderLocation.fileBridge.separator + ".project");
						if (projectFile.fileBridge.exists)
						{
							saveAndNotify();
						}
					}
					else
					{
						saveAndNotify();
					}
				}
			}
	
			public var associatedData:*;
	
			private var _dataProvider:Object;
			[Bindable]
			public function get dataProvider():*
			{
				return _dataProvider;
			}
	
			public function set dataProvider(v:*):void
			{
				_dataProvider = v;
			}
	
			[Bindable]
			private var _Width:int = 250;
			public function set Width(v:int):void
			{
				_Width = v;
			}
	
			public function getSettingsForAllCategories():Vector.<SettingsWrapper>
			{
				var settings:Array = [];
	
				for (var cat:String in categories)
				{
					settings = settings.concat(categories[cat]);
				}
	
				return Vector.<SettingsWrapper>(settings);
			}
	
			public function addCategory(name:String):void
			{
				categories[name] = [];
			}
	
			public function getSettings(forCategory:String):Array
			{
				return (categories[forCategory]) ? categories[forCategory] : [];
			}
	
			public function addSetting(settingsObject:IHasSettings, forCategory:String):void
			{
				categories[forCategory].push(settingsObject);
			}
	
			public function close(force:Boolean = false):void
			{
				if (force) forceClose = true;
				
				if (isNewProjectSettings)
				{
					GlobalEventDispatcher.getInstance().removeEventListener(GeneralEvent.SCROLL_TO_TOP, onNewProjectScrollChange);
				}
				GlobalEventDispatcher.getInstance().removeEventListener(SettingsEvent.EVENT_REFRESH_CURRENT_SETTINGS, handleRefreshSettings);
				dispatchEvent(new Event(EVENT_CLOSE));
			}
	
			public function forceSelectItem(byQualifiedClassName:String):void
			{
				var list:List;
				for (var i:int; i < listView.numElements; i++)
				{
					if (listView.getElementAt(i) is List)
					{
						list = listView.getElementAt(i) as List;
						break;
					}
				}
	
				if (list && list.dataProvider.length > 0)
				{
					for each(var j:Object in list.dataProvider)
					{
						if (j.qualifiedClassName == byQualifiedClassName)
						{
							list.selectedItem = j;
							currentSelectedItem = j as IHasSettings;
							buildSettings(currentSelectedItem.getSettingsList());
							if (IDEModel.getInstance().userSavedTempSDKPath && byQualifiedClassName == "actionScripts.plugins.as3project.mxmlc::MXMLCPlugin")
							{
								callLater(forceUpdateMXMLCompilerPlugin);
							}
							break;
						}
					}
				}
			}

			protected function saveAndNotify():void
			{
				isSaved = true;
				dispatchEvent(new Event(EVENT_SAVE));
				close(true);
			}

			private function forceUpdateMXMLCompilerPlugin():void
			{
				var settings:Vector.<SettingsWrapper> = getSettingsForAllCategories();
				for each (var setting:PluginSettingsWrapper in settings)
				{
					if (setting.qualifiedClassName == "actionScripts.plugins.as3project.mxmlc::MXMLCPlugin")
					{
						var mxmlcSettings:Vector.<ISetting> = setting.getSettingsList();
						for each (var mxmlcSetting:ISetting in mxmlcSettings)
						{
							if (mxmlcSetting.name == "defaultFlexSDK")
							{
								mxmlcSetting.stringValue = IDEModel.getInstance().userSavedTempSDKPath;
								return;
							}
						}
					}
				}
			}
	
			private function onSettingsViewCreationComplete(event:FlexEvent):void
			{
				var first:IHasSettings;
	
				for (var category:String in categories)
				{
					var label:Label = new Label();
					label.percentWidth = 100;
					label.text = category;
					label.styleName = "uiText";
					label.setStyle('paddingLeft', 15);
					label.setStyle('paddingTop', 20);
					label.setStyle('paddingBottom', 1);
					label.setStyle('fontSize', 13);
					label.setStyle('color', 0xdb5fce);
					label.setStyle('backgroundColor', 0x444444);
	
					listView.addElement(label);
	
					var list:List = new List();
					list.width = 251;
					list.x = -1;
					list.setStyle('paddingTop', -5);
					list.setStyle('contentBackgroundColor', 0x444444);
					list.setStyle('borderVisible', false);
					list.setStyle('rollOverColor', 0x555555);
					list.setStyle('gap', 0);
					list.labelField = 'name';
					list.requireSelection = true;
					list.focusEnabled = false;
					list.itemRenderer = new ClassFactory(SettingsCategoryItemRenderer);
	
					list.dataProvider = new ArrayCollection(categories[category]);
					listView.addElement(list);
					list.addEventListener(Event.CHANGE, handleItemClick);
	
					if (!first && list.dataProvider.length > 0)
					{
						if (currentRequestedSelectedItem)
						{
							first = list.dataProvider.getItemAt(list.dataProvider.getItemIndex(currentRequestedSelectedItem)) as IHasSettings;
							list.selectedItem = first;
						}
						else
						{
							first = list.dataProvider[0];
							list.selectedItem = first;
						}
					}
				}
	
				// Get list for first settings item
				if (first)
				{
					currentSelectedItem = first;
					buildSettings(first.getSettingsList());
				}
				//Moon-105 update handled here
				if (currentSelectedItem && currentSelectedItem.name == "Templating Plugin")
				{
					updateButtons(true, false, false);
				}
				else
				{
					updateButtons(false, true, true);
				}
				
				if (isNewProjectSettings) GlobalEventDispatcher.getInstance().addEventListener(GeneralEvent.SCROLL_TO_TOP, onNewProjectScrollChange, false, 0, true);
				GlobalEventDispatcher.getInstance().addEventListener(SettingsEvent.EVENT_REFRESH_CURRENT_SETTINGS, handleRefreshSettings, false, 0, true);
			}
			
			private function onCurrentSettingsRefreshRequest(event:SettingsEvent):void
			{
				handleRefreshSettings(event);
			}
	
			private function handleItemClick(event:Event):void
			{
				var list:List = event.target as List;
				var setting:IHasSettings = list.selectedItem;
				if (setting)
				{
					buildSettings(setting.getSettingsList());
					currentSelectedItem = setting;
	
					//Moon-105 update handled here
					if (currentSelectedItem.name == "Templating Plugin")
						updateButtons(true, false, false);
					else
						updateButtons(false, true, true);
				}
			}
			
			private function onNewProjectScrollChange(event:GeneralEvent):void
			{
				if (anim && anim.isPlaying) anim.stop();
				if (settingsContent.layout.verticalScrollPosition > 140)
				{
					pth.valueTo = 140;
					anim.play([settingsContent.layout]);
				}
			}
	
			private function buildSettings(settingsList:Vector.<ISetting>):void
			{
				settingsContent.removeAllElements();
	
				var line:Line;
				var rdr:IVisualElement;
				for each (var setting:ISetting in settingsList)
				{
					rdr = setting.renderer;
					rdr.addEventListener('refresh', handleRefreshSettings, false, 0, true);
	
					settingsContent.addElement(rdr);
	
					line = new Line();
					line.percentWidth = 100;
					line.height = 1;
					line.stroke = new SolidColorStroke(0xdadada);
					settingsContent.addElement(line);
				}
	
				settingsContent.validateNow();
				settingsContentScroller.viewport.verticalScrollPosition += 1;
			}
	
			private function handleRefreshSettings(event:Event):void
			{
				if (currentSelectedItem)
				{
					buildSettings(currentSelectedItem.getSettingsList());
				}
			}
	
			private function updateButtons(isClose:Boolean, isSave:Boolean, isCancel:Boolean):void
			{
				var buttonBarElement:IVisualElement = buttonBar.getElementAt(2);
				buttonBarElement.visible = buttonBarElement.includeInLayout = isClose;
	
				buttonBarElement = buttonBar.getElementAt(1);
				buttonBarElement.visible = buttonBarElement.includeInLayout = isCancel;
	
				buttonBarElement = buttonBar.getElementAt(0);
				buttonBarElement.visible = buttonBarElement.includeInLayout = isSave;
			}
	
			protected function addButtons():void
			{
				if (!showDefaultButtons && buttons.length == 0)
				{
					buttonBar.visible = buttonBar.includeInLayout = false;
					buttonBarLine.visible = buttonBarLine.includeInLayout = false;
					settingsContentScroller.bottom = 0;
				}
				else if (showDefaultButtons && buttons.length == 0)
				{
					var save:Button = new Button();
					save.label = defaultSaveLabel;
					save.addEventListener(MouseEvent.CLICK, handleSaveClicked);
					save.styleName = "darkButton";
					buttonBar.addElement(save);
	
	
					var cancel:Button = new Button();
					cancel.label = defaultCancelLabel;
					cancel.addEventListener(MouseEvent.CLICK, handleCancelClicked);
					cancel.styleName = "darkButton";
					buttonBar.addElement(cancel);
	
					//Moon-105 update handled here
					var close:Button = new Button();
					close.label = defaultCloseLabel;
					close.addEventListener(MouseEvent.CLICK, handleCancelClicked);
					close.styleName = "darkButton";
					buttonBar.addElement(close);
	
				}
	
			}
	
			private function handleSaveClicked(event:MouseEvent):void
			{
				IDEModel.getInstance().userSavedTempSDKPath = null;
				save();
			}
	
			private function handleCancelClicked(event:MouseEvent):void
			{
				IDEModel.getInstance().userSavedTempSDKPath = null;
				close(true);
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:Animate id="anim" duration="500">
			<s:motionPaths>
				<s:SimpleMotionPath id="pth" property="verticalScrollPosition" />
			</s:motionPaths>
		</s:Animate>
	</fx:Declarations>
	
	<!-- Left side list old width = 250 -->
	<s:Scroller 
		id="leftPanel"
		width="{_Width}"
		height="100%"
		horizontalScrollPolicy="off"
		contentBackgroundColor="0x444444">
		<s:VGroup id="listView" gap="0" focusEnabled="false"/>
	</s:Scroller>

	<!-- Settings list -->
	<s:BorderContainer id="settingsContainer" width="100%" height="100%" backgroundColor="#FFFFFF">
		<!-- BUG: Horizontal scrollbar always shows when vertical scrollbar shows. Why? -->
		<s:Scroller id="settingsContentScroller" width="100%"
					horizontalScrollPolicy="off" minWidth="450" bottom="41"
					contentBackgroundColor="0x444444" top="0" height="100%">
			<s:VGroup id="settingsContent" verticalAlign="top"
					  paddingLeft="20" paddingRight="20" paddingTop="20"/>
		</s:Scroller>

		<s:Line id="buttonBarLine" width="100%" bottom="41">
			<s:stroke>
				<s:SolidColorStroke color="0x303030" weight="1"/>
			</s:stroke>
		</s:Line>
	
		<s:BorderContainer id="buttonBar"
						   width="100%" height="41"
					       bottom="0" backgroundColor="0x444444"
					       creationComplete="addButtons()">
			<s:layout>
				<s:HorizontalLayout paddingRight="10" paddingTop="0"
									horizontalAlign="right" verticalAlign="middle"/>
			</s:layout>
		</s:BorderContainer>
	</s:BorderContainer>
</s:BorderContainer>
