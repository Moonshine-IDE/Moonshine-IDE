<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 creationComplete="onCreation()">
	<fx:Script>
		<![CDATA[
			import actionScripts.events.GlobalEventDispatcher;
			import actionScripts.events.StatusBarEvent;
			import actionScripts.plugin.core.compiler.ActionScriptBuildEvent;
			import actionScripts.events.DebugActionEvent;
			
			private var dispatcher:GlobalEventDispatcher = GlobalEventDispatcher.getInstance();
			private var loaderBar:loadingBar;
			private var languageServerLoaderBar:loadingBar;
			private var projectToStatus:Object = {};
			private var lastProjectName:String = null;
			
			private function onCreation():void
			{
				dispatcher.addEventListener(StatusBarEvent.PROJECT_BUILD_STARTED, onProjectBuildStarted, false, 0, true);
				dispatcher.addEventListener(StatusBarEvent.PROJECT_BUILD_ENDED, onProjectBuildEnded, false, 0, true);
				dispatcher.addEventListener(StatusBarEvent.PROJECT_DEBUG_STARTED, onProjectDebugStarted, false, 0, true);
				dispatcher.addEventListener(StatusBarEvent.PROJECT_DEBUG_ENDED, onProjectDebugEnded, false, 0, true);
				dispatcher.addEventListener(StatusBarEvent.LANGUAGE_SERVER_STATUS, onLanguageServerStatus, false, 0, true);
			}

			private function onLanguageServerStatus(event:StatusBarEvent):void
			{
				var message:String = event.notificationSuffix;
				if(event.projectName)
				{
					if(message == null || message.length == 0)
					{
						delete projectToStatus[event.projectName];
					}
					else
					{
						projectToStatus[event.projectName] = message;
						lastProjectName = event.projectName;
					}
				}
				if(!message && lastProjectName == event.projectName)
				{
					//if we're clearing the current message, try to display one
					//of the messages from another project, if any are available
					lastProjectName = null;
					for(var projectName:String in projectToStatus)
					{
						message = projectToStatus[projectName];
						lastProjectName = projectName;
						break;
					}
				}
				lblLanguageServer.text = lastProjectName + ": " + message;
				hgLanguageServer.visible = message != null && message.length > 0;
				if(hgLanguageServer.visible && !languageServerLoaderBar)
				{
					languageServerLoaderBar = new loadingBar();
					languageServerLoader.addChild(languageServerLoaderBar);
				}
				else if(!hgLanguageServer.visible && languageServerLoaderBar)
				{
					languageServerLoaderBar.parent.removeChild(languageServerLoaderBar);
					languageServerLoaderBar = null;
				}
			}
			
			private function onProjectBuildStarted(event:StatusBarEvent):void
			{
				if (!loaderBar)
				{
					lblBuilding.text = (event.notificationSuffix ? event.notificationSuffix : "") + 
						(event.projectName ? event.projectName : "" );
					btnStop.includeInLayout = btnStop.visible = event.isShowStopButton;
					
					loaderBar = new loadingBar();
					baseLoader.addChild(loaderBar);
					
					hgProjectBuild.visible = true;
				}
			}
			
			private function onProjectBuildEnded(event:StatusBarEvent):void
			{
				if (loaderBar)
				{
					loaderBar.parent.removeChild(loaderBar);
					loaderBar = null;
					hgProjectBuild.visible = false;
				}
			}
			
			private function onProjectDebugStarted(event:StatusBarEvent):void
			{
				var debugText:String = event.projectName;
				if(event.notificationSuffix)
				{
					debugText = event.notificationSuffix + debugText;
				}
				lblDebugging.text = debugText;
				hgProjectDebug.visible = true;
			}
			
			private function onProjectDebugEnded(event:StatusBarEvent):void
			{
				hgProjectDebug.visible = false;
			}
			
			protected function onTerminateBuild(event:MouseEvent):void
			{
				dispatcher.dispatchEvent(new StatusBarEvent(StatusBarEvent.PROJECT_BUILD_TERMINATE));
			}
			
			protected function onTerminateDebug(event:MouseEvent):void
			{
				dispatcher.dispatchEvent(new DebugActionEvent(DebugActionEvent.DEBUG_STOP));
			}
			
		]]>
	</fx:Script>
	
	<s:HGroup id="hgLanguageServer" 
			  left="10" verticalAlign="middle" verticalCenter="0"
			  autoLayout="true" gap="6"
			  visible="false">
		<s:SpriteVisualElement id="languageServerLoader"
							   width="32" height="12"/>
		<s:Label id="lblLanguageServer"
				 fontSize="11" paddingTop="3"
				 color="#333333"/>
	</s:HGroup>
	
	<s:HGroup id="hgProjectBuild" 
			  right="10" verticalAlign="middle" verticalCenter="0"
			  autoLayout="true" gap="6"
			  visible="false">
		<s:Label id="lblBuilding"
				 fontSize="11" paddingTop="3"
				 color="#333333"/>
		<s:SpriteVisualElement id="baseLoader"
							   width="32" height="12"/>
		<s:Image id="btnStop" 
				 source="@Embed('/elements/images/icoStop.png')"
				 click="onTerminateBuild(event)"/>
	</s:HGroup>
	
	<s:HGroup id="hgProjectDebug" 
			  right="10" verticalAlign="middle" verticalCenter="0"
			  autoLayout="true" gap="6"
			  visible="false">
		<s:Label id="lblDebugging"
				 fontSize="11" paddingTop="3"
				 color="#333333"/>
		<s:Image source="@Embed('/elements/images/icoStop.png')"
				 click="onTerminateDebug(event)"/>
	</s:HGroup>
</s:Group>