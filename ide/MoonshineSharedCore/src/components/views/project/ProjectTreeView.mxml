<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns:ui="actionScripts.ui.*"
		 xmlns:utils="actionScripts.utils.*"
		 implements="actionScripts.ui.IPanelWindow"
		 width="100%"
		 height="100%"
		 backgroundColor="0x444444"
		 verticalGap="0" xmlns:project="actionScripts.ui.project.*"
		 preinitialize="onPreinitialize()"
		 remove="onRemoval()">

	<mx:Script>
		<![CDATA[
			import actionScripts.data.FileWrapperHierarchicalCollection;
			import actionScripts.events.DeleteFileEvent;
			import actionScripts.events.DuplicateEvent;
			import actionScripts.events.FileCopyPasteEvent;
			import actionScripts.events.FilePluginEvent;
			import actionScripts.events.GlobalEventDispatcher;
			import actionScripts.events.HiddenFilesEvent;
			import actionScripts.events.NewFileEvent;
			import actionScripts.events.OpenFileEvent;
			import actionScripts.events.PreviewPluginEvent;
			import actionScripts.events.ProjectEvent;
			import actionScripts.events.RefreshVisualEditorSourcesEvent;
			import actionScripts.events.RenameApplicationEvent;
			import actionScripts.events.RenameEvent;
			import actionScripts.events.RunANTScriptEvent;
			import actionScripts.events.ShowSettingsEvent;
			import actionScripts.events.TreeMenuItemEvent;
			import actionScripts.factory.FileLocation;
			import actionScripts.locator.IDEModel;
			import actionScripts.plugin.actionscript.as3project.vo.AS3ProjectVO;
			import actionScripts.plugin.core.compiler.ProjectActionEvent;
			import actionScripts.plugin.java.javaproject.vo.JavaProjectVO;
			import actionScripts.plugin.templating.TemplatingHelper;
			import actionScripts.ui.LayoutModifier;
			import actionScripts.ui.editor.BasicTextEditor;
			import actionScripts.ui.renderers.FileWrapperHierarchicalItemRenderer;
			import actionScripts.ui.tabview.TabViewTab;
			import actionScripts.utils.FileCoreUtil;
			import actionScripts.utils.SharedObjectUtil;
			import actionScripts.utils.UtilsCore;
			import actionScripts.valueObjects.ConstantsCoreVO;
			import actionScripts.valueObjects.FileWrapper;
			import actionScripts.valueObjects.ProjectVO;
			import actionScripts.valueObjects.URLDescriptorVO;

			import components.popup.NewFolderPopup;

			import feathers.controls.TreeView;
			import feathers.events.FeathersEvent;
			import feathers.events.TreeViewEvent;
			import feathers.utils.DisplayObjectRecycler;

			import flash.display.DisplayObject;

			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.managers.PopUpManager;

			private static const PROPERTY_NAME_KEY:String = "name";
			private static const PROPERTY_NAME_KEY_VALUE:String = "nativePath";

			[Bindable]
			private var model:IDEModel = IDEModel.getInstance();

			private var newFolderWindow:NewFolderPopup;

			private var dispatcher:GlobalEventDispatcher = GlobalEventDispatcher.getInstance();
	
			// Creating new file
			private var creatingItemIn:FileWrapper;
			private var templateToCreate:FileLocation;
	
			//For sorting
			private var deleteFileWrapper:FileWrapper;
			private var fileCollection:Array;
	
			private var _projects:ArrayCollection;
			private var _refreshActiveProjectTimeout:uint = uint.MAX_VALUE;

			[Bindable]
			private var _feathersTreeView:feathers.controls.TreeView;

			private var _ignoreTreeBranchChanges:Boolean = false;

			private var _oldActiveEditorFileWrapper:FileWrapper;

			public function get selectedItem():FileWrapper
			{
				if (!_feathersTreeView)
				{
					return null;
				}
				return FileWrapper(_feathersTreeView.selectedItem);
			}

			public function set selectedItem(value:FileWrapper):void
			{
				if (!_feathersTreeView)
				{
					return;
				}
				_feathersTreeView.selectedItem = findTreeViewItem(value);
			}

			[Bindable]
			public function get projects():ArrayCollection
			{
				return _projects;
			}
	
			public function set projects(value:ArrayCollection):void
			{
				if(projects)
				{
					projects.removeEventListener(CollectionEvent.COLLECTION_CHANGE, handleProjectsChange);
				}
	
				_projects = value;
				_projects.addEventListener(CollectionEvent.COLLECTION_CHANGE, handleProjectsChange);
	
				// Scrape up all .projectFolders in here
				var pdirs:Array = [];
				for (var i:int = 0; i < value.length; i++)
				{
					var project:ProjectVO = value[i];
					pdirs.push(project.projectFolder);
				}

				model.selectedprojectFolders.removeAll();

				var dataSortField:SortField = new SortField("name", true);
				var dataSort:Sort = new Sort();
				dataSort.fields = [dataSortField];
				model.selectedprojectFolders.sort = dataSort;
				
				model.selectedprojectFolders.refresh();

				
			}

			public function isItemVisible(item:Object):*
			{
				if (!_feathersTreeView)
				{
					return false;
				}
				var itemRenderer:DisplayObject = _feathersTreeView.itemToItemRenderer(item);
				if (!itemRenderer)
				{
					return false;
				}
				// TODO: Check if item renderer is in view port (it might be
				// just outside of the view port and not actually visible)
				return true;
			}
			
			public function getParentItem(item:FileWrapper):FileWrapper
			{
				if (!_feathersTreeView || !item)
				{
					return null;
				}

				var location:Array = _feathersTreeView.dataProvider.locationOf(item);
				if (!location)
				{
					return null;
				}

				location.pop();

				if (location.length == 0)
				{
					return null;
				}

				return FileWrapper(_feathersTreeView.dataProvider.get(location));
			}

			public function scrollToItem(item:Object):void
			{
				if (!_feathersTreeView)
				{
					return;
				}

				var location:Array = _feathersTreeView.dataProvider.locationOf(item);
				if (!location)
				{
					return;
				}
				_feathersTreeView.scrollToLocation(location);
			}
			
			public function sortChildren(wrapper:FileWrapper):void
			{
				if (!wrapper) return;

				if (_feathersTreeView.dataProvider.isBranch(wrapper))
				{
					wrapper.sortChildren();
				}
				else
				{
					var location:Array = _feathersTreeView.dataProvider.locationOf(wrapper);
					if (!location) return;

					location.pop();
					if (location.length == 0) return;

					var parentWrapper:FileWrapper = _feathersTreeView.dataProvider.get(location) as FileWrapper;
					if (!parentWrapper) return;

					parentWrapper.sortChildren();
				}
			}

			public function expandItem(item:FileWrapper, open:Boolean):void
			{
				// get the actual FileWrapper instance used by the collection
				// because the one passed in may have the same path, but be a
				// different instance
				var location:Array = _feathersTreeView.dataProvider.locationOf(item);
				if (location == null)
				{
					return;
				}
				item = _feathersTreeView.dataProvider.get(location) as FileWrapper;
				if (item == null)
				{
					return;
				}
				if (!_feathersTreeView.dataProvider.isBranch(item))
				{
					// nothing to expand
					return;
				}

				var oldIgnoreTreeBranchChanges:Boolean = _ignoreTreeBranchChanges;
				_ignoreTreeBranchChanges = true;
				_feathersTreeView.toggleBranch(item, open);
				_ignoreTreeBranchChanges = oldIgnoreTreeBranchChanges;
				if (open)
				{
					// Flex Tree dispatches an add event when opening a
					// branch, but Feathers does not, so we force it here
					reopenPreviouslyClosedItems(CollectionEventKind.ADD, item.children.slice());
				}
			}

			public function expandChildrenByName(itemPropertyName:String, childrenForOpen:Array):void
			{
				var location:Array = [];
				var childrenForOpenCount:int = childrenForOpen.length;
				for (var i:int = 0; i < childrenForOpenCount; i++)
				{
					var item:Object = childrenForOpen[i];
					var dataProviderCount:int = _feathersTreeView.dataProvider.getLength(location);
					for (var j:int = 0; j < dataProviderCount; j++)
					{
						location.push(j);
						var childForOpen:FileWrapper = FileWrapper(_feathersTreeView.dataProvider.get(location));

						var folderLastSeparator:int = childForOpen.nativePath.lastIndexOf(childForOpen.file.fileBridge.separator);
						var folder:String = childForOpen.nativePath.substring(folderLastSeparator + 1);

						if ((childForOpen.hasOwnProperty(itemPropertyName) && childForOpen[itemPropertyName] == item) || folder == item)
						{
							if (_feathersTreeView.dataProvider.isBranch(childForOpen)
									&& !_feathersTreeView.isBranchOpen(childForOpen))
							{
								saveItemForOpen(childrenForOpen);
								expandItem(childForOpen as FileWrapper, true);
							}

							// break to the outer loop, and keep looking with a deeper location
							break;
						}
						location.pop();
					}
				}
			}

			public function saveItemForOpen(item:Object):void
			{
				SharedObjectUtil.saveProjectTreeItemForOpen(item, PROPERTY_NAME_KEY, PROPERTY_NAME_KEY_VALUE);
			}

			public function removeFromOpenedItems(item:Object):void
			{
				SharedObjectUtil.removeProjectTreeItemFromOpenedItems(item, PROPERTY_NAME_KEY, PROPERTY_NAME_KEY_VALUE);
			}
	
			private function refreshFileFolder(fileWrapper:FileWrapper, project:ProjectVO = null):void
			{
				if(!project) project = UtilsCore.getProjectFromProjectFolder(fileWrapper);
	
				if(!ConstantsCoreVO.IS_AIR)
				{
					refreshProjectFromServer(fileWrapper, project);
					return;
				}
	
				if((project is AS3ProjectVO) && (project as AS3ProjectVO).isVisualEditorProject)
				{
					dispatcher.dispatchEvent(
							new RefreshVisualEditorSourcesEvent(RefreshVisualEditorSourcesEvent.REFRESH_VISUALEDITOR_SRC,
									fileWrapper, (project as AS3ProjectVO))
					);
				} else if(fileWrapper)
				{
					refreshByWrapperItem(fileWrapper);
				}
			}
	
			private function refreshByWrapperItem(fileWrapper:FileWrapper):void
			{
				if(!fileWrapper.file.fileBridge.isDirectory)
				{
					refresh(fileWrapper.file.fileBridge.parent, fileWrapper.isDeleting);
				}
				else
				{
					refreshItem(fileWrapper);
				}
	
				if(fileWrapper.sourceController)
				{
					fileWrapper.sourceController.refresh(fileWrapper.file);
				}

				if (fileWrapper.file.fileBridge.isDirectory) 
				{
					sortChildren(fileWrapper);
				}
			}

			public function refresh(dir:FileLocation, markAsDeletion:Boolean = false):void
			{
				var wrappersToSort:Vector.<FileWrapper> = new <FileWrapper>[];
				for each (var fw:FileWrapper in model.selectedprojectFolders)
				{
					if(ConstantsCoreVO.IS_AIR)
					{
						if((dir.fileBridge.nativePath + dir.fileBridge.separator).indexOf(fw.nativePath + dir.fileBridge.separator) != -1)
						{
							var tmpFW:FileWrapper = UtilsCore.findFileWrapperAgainstFileLocation(fw, dir);
							if(tmpFW)
							{
								if(_feathersTreeView.selectedItem)
								{
									var lastSelectedItem:FileWrapper = _feathersTreeView.selectedItem as FileWrapper;
									if(tmpFW.nativePath == lastSelectedItem.nativePath || lastSelectedItem.nativePath.indexOf(tmpFW.nativePath + tmpFW.file.fileBridge.separator) != -1)
										_feathersTreeView.selectedItem.isDeleting = markAsDeletion;
								}
								refreshItem(tmpFW);
								wrappersToSort.push(tmpFW);
							}
							break;
						}
					}
					else
					{
						tmpFW = UtilsCore.findFileWrapperAgainstFileLocation(fw, dir);
						refreshItem(tmpFW);
						wrappersToSort.push(tmpFW);
					}
				}

				while(wrappersToSort.length > 0)
				{
					tmpFW = wrappersToSort.shift();
					sortChildren(tmpFW);
					var children:Array = tmpFW.children;
					if (children)
					{
						var childCount:int = children.length;
						for(var i:int = 0; i < childCount; i++)
						{
							var child:FileWrapper = FileWrapper(children[i]);
							if (_feathersTreeView.dataProvider.isBranch(child) && _feathersTreeView.isBranchOpen(child))
							{
								// when calling refreshItem(), all children are
								// replaced with new FileWrapper instances, so their
								// children will need to be sorted too
								wrappersToSort.push(child);
							}
						}
					}
				}
			}
	
			private function onPreinitialize():void
			{
				dispatcher.addEventListener(ProjectEvent.TREE_DATA_UPDATES, onProjectTreeUpdates, false, 0, true);
				dispatcher.addEventListener(ProjectEvent.PROJECT_FILES_UPDATES, onProjectFilesUpdates, false, 0, true);
				dispatcher.addEventListener(TreeMenuItemEvent.NEW_FILE_CREATED, onFileNewFolderCreationRequested, false, 0, true);
				dispatcher.addEventListener(TreeMenuItemEvent.NEW_FILES_FOLDERS_COPIED, onNewFilesFoldersCopied, false, 0, true);
				dispatcher.addEventListener(RenameApplicationEvent.RENAME_APPLICATION_FOLDER, onProjectRenameRequest, false, 0, true);
				dispatcher.addEventListener(ProjectEvent.CLOSE_PROJECT, onCloseProjectRequest, false, 0, true);
				
				addEventListener(TreeMenuItemEvent.RIGHT_CLICK_ITEM_SELECTED, handleNativeMenuItemClick);

				ChangeWatcher.watch(model, 'activeEditor', onActiveEditorChange);

				_feathersTreeView = new feathers.controls.TreeView();
				_feathersTreeView.variant = feathers.controls.TreeView.VARIANT_BORDERLESS;
				_feathersTreeView.itemToText = function(item:Object):String {
					if ((item is ProjectVO)) {
						var project:ProjectVO = ProjectVO(item);
						return project.projectFolder.name;
					}
					if ((item is FileWrapper)) {
						var file:FileWrapper = FileWrapper(item);
						return file.name;
					}
					return null;
				}
				_feathersTreeView.allowMultipleSelection = true;
				_feathersTreeView.itemRendererRecycler = DisplayObjectRecycler.withFunction(function():DisplayObject {
					var itemRenderer:FileWrapperHierarchicalItemRenderer = new FileWrapperHierarchicalItemRenderer();
					itemRenderer.doubleClickEnabled = true;
					return itemRenderer;
				});
				_feathersTreeView.addEventListener(TreeViewEvent.BRANCH_OPENING, function(event:TreeViewEvent):void {
					if (_ignoreTreeBranchChanges) {
						// if a branch is opening programmatically from within
						// this class, ignore this event.
						// we're specifically interested in branches opening
						// outside of the control of this component, such as
						// from user interaction.
						return;
					}
					var fileWrapper:FileWrapper = event.state.data as FileWrapper;
					if (fileWrapper == null) {
						return;
					}
					refreshItem(fileWrapper);
				});
				_feathersTreeView.addEventListener(TreeViewEvent.BRANCH_OPEN, onTreeViewBranchOpen);
				_feathersTreeView.addEventListener(TreeViewEvent.BRANCH_CLOSE, onTreeViewBranchClose);
				_feathersTreeView.addEventListener(TreeViewEvent.ITEM_TRIGGER, fileSingleClickedInTreeView);
				_feathersTreeView.addEventListener(TreeViewEvent.ITEM_DOUBLE_CLICK, fileDoubleClickedInTreeView);

				setFeathersTreeViewData(model.selectedprojectFolders);
				model.selectedprojectFolders.addEventListener(CollectionEvent.COLLECTION_CHANGE, onSelectedProjectFoldersChange);
			}

			private function onSelectedProjectFoldersChange(event:CollectionEvent):void
			{
				setFeathersTreeViewData(model.selectedprojectFolders);
			}

			private function setFeathersTreeViewData(folders:ArrayCollection):void
			{
				var roots:Array = folders.source.slice();
				_feathersTreeView.dataProvider = new FileWrapperHierarchicalCollection(roots);
				reopenPreviouslyClosedItems(CollectionEventKind.RESET, model.selectedprojectFolders.source.slice());
			}
	
			private function onRemoval():void
			{
				dispatcher.removeEventListener(ProjectEvent.TREE_DATA_UPDATES, onProjectTreeUpdates);
				dispatcher.removeEventListener(ProjectEvent.PROJECT_FILES_UPDATES, onProjectFilesUpdates);
				dispatcher.removeEventListener(TreeMenuItemEvent.NEW_FILE_CREATED, onFileNewFolderCreationRequested);
				dispatcher.removeEventListener(TreeMenuItemEvent.NEW_FILES_FOLDERS_COPIED, onNewFilesFoldersCopied);
				dispatcher.removeEventListener(RenameApplicationEvent.RENAME_APPLICATION_FOLDER, onProjectRenameRequest);
				dispatcher.removeEventListener(ProjectEvent.CLOSE_PROJECT, onCloseProjectRequest);
			}
	
			private function refreshProjectFromServer(fw:FileWrapper, project:ProjectVO):void
			{
				// determine to which project fileWrapper is belongs to
				var projectIndex:int = -1;
				if(model.selectedprojectFolders.length > 1)
				{
					for (var i:int = 0; i < model.selectedprojectFolders.length; i++)
					{
						if(model.selectedprojectFolders[i] == fw)
						{
							projectIndex = i;
							break;
						}
					}
				} else
				{
					projectIndex = 0;
				}

				model.selectedprojectFolders[projectIndex].isWorking = true;
				var projectPath:String = project.projectFolder.nativePath;
				var tmpProjectVO:ProjectVO = new ProjectVO(new FileLocation(URLDescriptorVO.PROJECT_DIR + projectPath), model.selectedprojectFolders[projectIndex].name, false);
				tmpProjectVO.projectRemotePath = project.projectFolder.nativePath;
				tmpProjectVO.addEventListener(ProjectVO.PROJECTS_DATA_UPDATED, onTmpProjectUpdated, false, 0, true);
				tmpProjectVO.addEventListener(ProjectVO.PROJECTS_DATA_FAULT, onTmpProjectUpdateFault, false, 0, true);
	
				function onTmpProjectUpdated(event:Event):void
				{
					onTmpProjectUpdateFault(null);
	
					projects[projectIndex] = tmpProjectVO;
					model.selectedprojectFolders[projectIndex] = tmpProjectVO.projectFolder;
					refreshItem(model.selectedprojectFolders[projectIndex]);
				}
	
				function onTmpProjectUpdateFault(event:Event):void
				{
					tmpProjectVO.removeEventListener(ProjectVO.PROJECTS_DATA_UPDATED, onTmpProjectUpdated);
					tmpProjectVO.removeEventListener(ProjectVO.PROJECTS_DATA_FAULT, onTmpProjectUpdateFault);
					model.selectedprojectFolders[projectIndex].isWorking = false;
				}
			}

			private function updateChildrenAndOpenItems(fw:FileWrapper, openItems:Array, newItems:Array):void
			{
				var location:Array = _feathersTreeView.dataProvider.locationOf(fw);
				if (location == null)
				{
					return;
				}
				_feathersTreeView.dataProvider.updateAt(location);
				var length:int = _feathersTreeView.dataProvider.getLength(location);
				for (var i:int = 0; i < length; i++)
				{
					location.push(i);
					var child:FileWrapper = FileWrapper(_feathersTreeView.dataProvider.get(location));
					location.pop();
					for(var j:int = 0; j < openItems.length; j++)
					{
						var openItem:FileWrapper = openItems[j];
						if(openItem.nativePath == child.nativePath && openItem != child)
						{
							openItems[j] = child;
							newItems.push(child);
							break;
						}
					}
				}
			}
	
			private function refreshItem(fw:FileWrapper):void
			{
				var location:Array = _feathersTreeView.dataProvider.locationOf(fw);
				if (location == null)
				{
					return;
				}

				_feathersTreeView.dataProvider.updateAt(location);
				fw = _feathersTreeView.dataProvider.get(location) as FileWrapper;

				if (fw == null)
				{
					return;
				}

				var lastSelectedItem:Object = _feathersTreeView.selectedItem;
				var lastSelectedLocation:Array = _feathersTreeView.selectedLocation;
				var openItems:Array = _feathersTreeView.getOpenBranches();
				var items:Array = [fw];
				var newItems:Array = [];
				do
				{
					for each(var item:FileWrapper in items)
					{
						updateChildrenAndOpenItems(item, openItems, newItems);
					}
					items.length = 0;
					var temp:Array = items;
					items = newItems;
					newItems = temp;
				}
				while(items.length > 0);
				var oldIgnoreTreeBranchChanges:Boolean = _ignoreTreeBranchChanges;
				_ignoreTreeBranchChanges = true;
				for each (item in openItems)
				{
					if (_feathersTreeView.dataProvider.contains(item))
					{
						_feathersTreeView.toggleBranch(item, true);
						// Flex Tree dispatches an add event when opening a
						// branch, but Feathers does not, so we force it here
						reopenPreviouslyClosedItems(CollectionEventKind.ADD, item.children.slice());
					}
				}
				_ignoreTreeBranchChanges = oldIgnoreTreeBranchChanges;
	
				_feathersTreeView.selectedItem = findTreeViewItem(lastSelectedItem as FileWrapper);
	
				// if still there has no selection to the tree
				if(!_feathersTreeView.selectedItem && lastSelectedLocation && _feathersTreeView.dataProvider.contains(lastSelectedItem))
				{
					_feathersTreeView.selectedLocation = lastSelectedLocation;
				}
			}
	
			private function setSelectedItem(fw:FileWrapper):void
			{
				var filew:FileWrapper;
				if(model.selectedprojectFolders.length > 1)
				{
					for (var i:int = 0; i < model.selectedprojectFolders.length; i++)
					{
						if(fw.nativePath.indexOf((model.selectedprojectFolders[i] as FileWrapper).nativePath) >= 0)
						{
							filew = model.selectedprojectFolders[i] as FileWrapper;
							break;
						}
					}
				}
				else
				{
					filew = model.selectedprojectFolders[0] as FileWrapper;
				}
	
				_feathersTreeView.selectedItem = findTreeViewItem(filew);
			}

			private function findTreeViewItem(itemToFind:FileWrapper):FileWrapper
			{
				if (itemToFind == null)
				{
					return null;
				}
				// locationOf does not check for the exact object. it checks for
				// an object that has the same native path. this allows us to
				// convert into the object that's actually in the data provider.
				var location:Array = _feathersTreeView.dataProvider.locationOf(itemToFind);
				if (location == null)
				{
					return null;
				}
				// this may return the item to find, or it might return a
				// different object that has the same native path
				return _feathersTreeView.dataProvider.get(location) as FileWrapper;
			}
	
			public function handleProjectsChange(event:CollectionEvent):void
			{
				var project:ProjectVO = null;
				var timeoutValue:uint;
				switch (event.kind)
				{
					case CollectionEventKind.REMOVE:
					{
						project = event.items[0] as ProjectVO;
						// after a project renaming, and updating its internal fields
						// direct search (i.e. getItemIndex) of fileWrapper object in the collection
						// returns -1 even the fileWrapper object and object inside the collection has same
						// instance id. Thus a different approach it needs to parse by its uid value
						var lastSelectedItem:Object = _feathersTreeView.selectedItem;
						var tmpFWIndex:int = UtilsCore.findFileWrapperIndexByID(project.projectFolder, model.selectedprojectFolders);
						model.selectedprojectFolders.removeItemAt(tmpFWIndex);
						timeoutValue = setTimeout(function ():void
						{
							if(isItemVisible(lastSelectedItem))
							{
								_feathersTreeView.selectedItem = lastSelectedItem;
							} else if(model.selectedprojectFolders.length != 0)
							{
								try
								{
									_feathersTreeView.selectedItem = (--tmpFWIndex != -1) ? model.selectedprojectFolders[tmpFWIndex] : model.selectedprojectFolders[++tmpFWIndex];
								}
								catch (e:Error) {}
							}
							clearTimeout(timeoutValue);
							refreshActiveProject(_feathersTreeView.selectedItem as FileWrapper);
						}, 100);
						break;
					}
					case CollectionEventKind.ADD:
					{
						project = projects.getItemAt(event.location) as ProjectVO;
						model.selectedprojectFolders.addItemAt(project.projectFolder, 0);
						
						if (((project is AS3ProjectVO) && (project as AS3ProjectVO).isVisualEditorProject))
						{
							refreshFileFolder(project.projectFolder, project);
						}
						
						timeoutValue = setTimeout(function ():void
						{
							_feathersTreeView.selectedItem = findTreeViewItem(project.projectFolder);
							clearTimeout(timeoutValue);
							refreshActiveProject(_feathersTreeView.selectedItem as FileWrapper);
							if(ConstantsCoreVO.STARTUP_PROJECT_OPEN_QUEUE_LEFT > 0) ConstantsCoreVO.STARTUP_PROJECT_OPEN_QUEUE_LEFT--;
						}, 1000);

						break;
					}
				}
			}
	
			private function onProjectTreeUpdates(event:ProjectEvent):void
			{
				model.selectedprojectFolders.addItemAt(event.project.projectFolder, 0);
	
				// I don't know why the heck projectFolders having null value from where
				// is a fix to the probelm for now
				if(!ConstantsCoreVO.IS_AIR)
				{
					for (var i:int = 0; i < model.selectedprojectFolders.length; i++)
					{
						if(model.selectedprojectFolders[i] == null)
						{
							model.selectedprojectFolders.removeItemAt(i);
							i--;
						}
					}
				}
			}
	
			private function onProjectFilesUpdates(event:ProjectEvent):void
			{
				refreshItem(event.anObject as FileWrapper);
			}
	
			private function initHeader():void
			{
				header.addEventListener(TabViewTab.EVENT_TAB_CLOSE, handleClose);
			}
	
			private function handleClose(event:Event):void
			{
				if(stage) LayoutModifier.removeFromSidebar(this);
			}
	
			private function handleNativeMenuItemClick(event:TreeMenuItemEvent):void
			{
				// Might be some sub-menu provider we're dealing with
				if(!(event.data is FileWrapper)) return;
	
				var project:ProjectVO;
				var fileWrapper:FileWrapper = FileWrapper(event.data);
				var isMultiSelection:Boolean;
				var fw:FileWrapper;
	
				if((_feathersTreeView.selectedItems.length > 1)
						&& (_feathersTreeView.selectedItems.indexOf(fileWrapper) != -1)) isMultiSelection = true;
	
				switch (event.menuLabel)
				{
					case FileWrapperHierarchicalItemRenderer.SETTINGS:
					case FileWrapperHierarchicalItemRenderer.PROJECT_SETUP:
					{
						project = UtilsCore.getProjectFromProjectFolder(fileWrapper);
						dispatcher.dispatchEvent(
								new ShowSettingsEvent(project)
						)
						break;
					}
					case FileWrapperHierarchicalItemRenderer.OPEN:
					case FileWrapperHierarchicalItemRenderer.OPEN_FILE_FOLDER:
					{
						if(isMultiSelection)
						{
							openFileFolder(_feathersTreeView.selectedItems);
						}
						else
						{
							openFileFolder([fileWrapper]);
						}
						break;
					}
					case FileWrapperHierarchicalItemRenderer.CLOSE:
					{
						onFileDeletedOnServer([fileWrapper], event.menuLabel);
						refreshActiveProject(fileWrapper);
						break;
					}
					case FileWrapperHierarchicalItemRenderer.DELETE:
					case FileWrapperHierarchicalItemRenderer.DELETE_PROJECT:
					case FileWrapperHierarchicalItemRenderer.DELETE_FILE_FOLDER:
					{
						if(isMultiSelection && isMultiSelectionIsValid())
						{
							Alert.show("Are you sure you want to delete all selected files and folders from the file system?", "Confirm", Alert.YES | Alert.CANCEL, null, onFileDeleteConfirm);
							return;
						} else if(!isMultiSelection)
						{
							if(fileWrapper.isWorking) return;
							if(!fileWrapper.isRoot && fileWrapper.file.fileBridge.exists)
							{
								Alert.show("Are you sure you want to delete '" + fileWrapper.file.fileBridge.name + "' from the file system?", "Confirm", Alert.YES | Alert.CANCEL, null, onFileDeleteConfirm);
							} else
							{
								onFileDeleteConfirm(null);
							}
						}
						break;
					}
					case FileWrapperHierarchicalItemRenderer.RENAME:
					{
						renameFileFolder(event.renderer);
						break;
					}
					case FileWrapperHierarchicalItemRenderer.DUPLICATE_FILE:
					{
						dispatcher.dispatchEvent(new DuplicateEvent(DuplicateEvent.EVENT_OPEN_DUPLICATE_FILE_VIEW, fileWrapper));
						break;
					}
					case FileWrapperHierarchicalItemRenderer.COPY_FILE:
					{
						dispatcher.dispatchEvent(new FileCopyPasteEvent(FileCopyPasteEvent.EVENT_COPY_FILE, isMultiSelection ? _feathersTreeView.selectedItems : [fileWrapper]));
						break;
					}
					case FileWrapperHierarchicalItemRenderer.PASTE_FILE:
					{
						dispatcher.dispatchEvent(new FileCopyPasteEvent(FileCopyPasteEvent.EVENT_PASTE_FILES, fileWrapper.file.fileBridge.isDirectory ? [fileWrapper] : [FileWrapper(getParentItem(fileWrapper))]));
						break;
					}
					case FileWrapperHierarchicalItemRenderer.SET_AS_DEFAULT_APPLICATION:
					{
						if(model.activeProject is AS3ProjectVO)
						{
							TemplatingHelper.setFileAsDefaultApplication(fileWrapper, FileWrapper(getParentItem(fileWrapper)));
						} else if(model.activeProject is JavaProjectVO)
						{
							dispatcher.dispatchEvent(new ProjectActionEvent(ProjectActionEvent.SET_DEFAULT_APPLICATION, fileWrapper.file));
						}
						break;
					}
					case FileWrapperHierarchicalItemRenderer.REFRESH:
					{
						refreshFileFolder(fileWrapper);
						break;
					}
					case FileWrapperHierarchicalItemRenderer.NEW:
					{
						// Right-clicking a directory creates the file in the dir,
						// otherwise create in same dir as clicked file
						creatingItemIn = (fileWrapper.file.fileBridge.isDirectory || !fileWrapper.file.fileBridge.exists) ?
								fileWrapper : FileWrapper(getParentItem(fileWrapper));
						if(!creatingItemIn.file.fileBridge.checkFileExistenceAndReport())
						{
							return;
						}
	
						// for new file type creation
						if(event.extra != FileWrapperHierarchicalItemRenderer.NEW_FOLDER)
						{
							var newFileEvent:NewFileEvent = new NewFileEvent(event.extra, creatingItemIn.file.fileBridge.nativePath, null, creatingItemIn);
							newFileEvent.ofProject = UtilsCore.getProjectFromProjectFolder(fileWrapper);
	
							dispatcher.dispatchEvent(newFileEvent);
						} else
						{
							if(!newFolderWindow)
							{
								newFolderWindow = PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, NewFolderPopup, true) as NewFolderPopup;
								newFolderWindow.addEventListener(CloseEvent.CLOSE, handleNewFolderPopupClose);
								newFolderWindow.addEventListener(NewFileEvent.EVENT_NEW_FOLDER, onFileNewFolderCreationRequested);
								newFolderWindow.wrapperOfFolderLocation = creatingItemIn;
								newFolderWindow.wrapperBelongToProject = UtilsCore.getProjectFromProjectFolder(fileWrapper);
	
								PopUpManager.centerPopUp(newFolderWindow);
							}
						}
	
						break;
					}
					case FileWrapperHierarchicalItemRenderer.OPEN_WITH:
					{
						if (event.extra == FileWrapperHierarchicalItemRenderer.CONFIGURE_EXTERNAL_EDITORS ||
								event.extra == FileWrapperHierarchicalItemRenderer.CONFIGURE_VAGRANT)
						{
							dispatcher.dispatchEvent(new Event(event.extra));
						}
						else
						{
							dispatcher.dispatchEvent(new FilePluginEvent(event.extra, fileWrapper.file));
						}
						break;
					}
					case FileWrapperHierarchicalItemRenderer.VAGRANT_GROUP:
					{
						dispatcher.dispatchEvent(new FilePluginEvent(event.extra, fileWrapper.file));
						break;
					}
					case FileWrapperHierarchicalItemRenderer.RUN_ANT_SCRIPT:
					{
						model.antScriptFile = new FileLocation(fileWrapper.file.fileBridge.nativePath);
						dispatcher.dispatchEvent(new RunANTScriptEvent(RunANTScriptEvent.ANT_BUILD));
						break;
					}
					case FileWrapperHierarchicalItemRenderer.COPY_PATH:
					{
						FileCoreUtil.copyPathToClipboard(fileWrapper.file);
						break;
					}
					case FileWrapperHierarchicalItemRenderer.OPEN_PATH_IN_TERMINAL:
					{
						if (ConstantsCoreVO.IS_MACOS)
						{
							dispatcher.dispatchEvent(new FilePluginEvent(event.extra, fileWrapper.file));
						}
						else
						{
							dispatcher.dispatchEvent(new FilePluginEvent(FilePluginEvent.EVENT_OPEN_PATH_IN_TERMINAL, fileWrapper.file));
						}
						break;
					}
					case FileWrapperHierarchicalItemRenderer.OPEN_PATH_IN_POWERSHELL:
					{
						dispatcher.dispatchEvent(new FilePluginEvent(FilePluginEvent.EVENT_OPEN_PATH_IN_POWERSHELL, fileWrapper.file));
						break;
					}
					case FileWrapperHierarchicalItemRenderer.SHOW_IN_EXPLORER:
					case FileWrapperHierarchicalItemRenderer.SHOW_IN_FINDER:
					{
						FileCoreUtil.showInExplorer(fileWrapper.file);
						break;
					}
					case FileWrapperHierarchicalItemRenderer.MARK_AS_VISIBLE:
						dispatcher.dispatchEvent(new HiddenFilesEvent(HiddenFilesEvent.MARK_FILES_AS_VISIBLE, fileWrapper));
						break;
					case FileWrapperHierarchicalItemRenderer.MARK_AS_HIDDEN:
						dispatcher.dispatchEvent(new HiddenFilesEvent(HiddenFilesEvent.MARK_FILES_AS_HIDDEN, fileWrapper));
						break;
					case FileWrapperHierarchicalItemRenderer.PREVIEW:
						dispatcher.dispatchEvent(new PreviewPluginEvent(PreviewPluginEvent.START_VISUALEDITOR_PREVIEW, fileWrapper));
						break;
				}
	
				/*
	            * @local
	            * file delete
	            */
				function onFileDeleteConfirm(event2:CloseEvent):void
				{
					if(!event2 || event2.detail == Alert.YES)
					{
						var parentFileWrapper:FileWrapper = getParentItem(fileWrapper);
						var projectAssociatedWithFile:ProjectVO = UtilsCore.getProjectFromProjectFolder(_feathersTreeView.selectedItems[0] as FileWrapper);
						dispatcher.dispatchEvent(new DeleteFileEvent(fileWrapper.file, isMultiSelection ? _feathersTreeView.selectedItems : [fileWrapper], onFileDeletedOnServer, event.showAlert, projectAssociatedWithFile));
						//Alert.show("delete file:"+fileWrapper.file.fileBridge.nativePath);
						var parentFolder:String=fileWrapper.file.fileBridge.parent.fileBridge.nativePath;
						//Alert.show("parentFolder file:"+parentFolder);
						if(UtilsCore.endsWith(parentFolder,"nsfs/nsf-moonshine/odp/Forms")){
							var projectPath:String=parentFolder.substring(0,parentFolder.indexOf("nsfs/nsf-moonshine/odp/Forms"));
							var xmlFilePath:String=projectPath+"visualeditor-src/main/webapp/"+fileWrapper.file.fileBridge.nameWithoutExtension+".xml";
							//Alert.show("xmlFilePath:"+xmlFilePath);
							var xmlFile:FileLocation = new FileLocation(xmlFilePath);
							if(xmlFile.fileBridge.exists){
								xmlFile.fileBridge.deleteFile()
							}
						}
						// refresh after deleting so that the user can see the
						// change immediately, instead of waiting for the file
						// system watcher, which might take a second or two
						if (parentFileWrapper)
						{
							refreshItem(parentFileWrapper);
						}

					}
				}
	
				/*
	             * @local
	             * Rename file/folder
	             */
				function renameFileFolder(rendererObject:FileWrapperHierarchicalItemRenderer):void
				{
					dispatcher.dispatchEvent(new RenameEvent(RenameEvent.EVENT_OPEN_RENAME_FILE_VIEW, rendererObject.data));
				}
	
				/*
				* @local
				* Checks if multi-selection is valid to proceed
				* against context-menu options
				*/
				function isMultiSelectionIsValid():Boolean
				{
					var hasProjectRoot:Boolean;
					var hasProjectFiles:Boolean;
					for each (var fw:FileWrapper in _feathersTreeView.selectedItems)
					{
						if(fw.isRoot) hasProjectRoot = true;
						else hasProjectFiles = true;
	
						// terminate if any file do not exists
						if(!fw.file.fileBridge.exists)
						{
							Alert.show("One or more files to the selection does not exists.", "Error");
							return false;
						}
					}
	
					// terminates if project and project's files selected at same time
					if(hasProjectFiles && hasProjectRoot)
					{
						Alert.show("Project and files of projects are not allowed to bulk delete.", "Error");
						return false;
					}
	
					// terminate if multiple projects are trying to delete
					// (based on the current popup confirmation design with files to be deleted - 
					// we should show only confirmation to reduce complexity
					if(hasProjectRoot && _feathersTreeView.selectedItems.length > 1)
					{
						Alert.show("Multiple projects are are not allowed to bulk delete.", "Error");
						return false;
					}
	
					return true;
				}
	
				/*
				* @local
				* opens a folder or open a file
				*/
				function openFileFolder(fws:Array):void
				{
					var tmpFLs:Array = [];
					var tmpFWs:Array = [];
					for each (var fw:FileWrapper in fws)
					{
						if(fw.file.fileBridge.isDirectory && _feathersTreeView.dataProvider.isBranch(fw))
						{
							expandItem(fw, true);
						}
						else
						{
							tmpFLs.push(fw.file);
							tmpFWs.push(fw);
						}
					}
	
					if(tmpFLs.length > 0)
					{
						dispatcher.dispatchEvent(new OpenFileEvent(OpenFileEvent.OPEN_FILE, tmpFLs, -1, tmpFWs));
					}
				}
			}
	
			protected function handleNewFolderPopupClose(event:CloseEvent):void
			{
				newFolderWindow.removeEventListener(CloseEvent.CLOSE, handleNewFolderPopupClose);
				newFolderWindow.removeEventListener(NewFileEvent.EVENT_NEW_FOLDER, onFileNewFolderCreationRequested);
				newFolderWindow = null;
			}
	
			protected function onFileNewFolderCreationRequested(event:Event):void
			{
				// @note
				// NewFileEvent calls in case of folder creation, and
				// it's TreeMenuItemEvent in case of file creation
	
				var isFolderCreationEvent:Boolean = (event is NewFileEvent);
				var fileName:String;
				var newFileLocation:FileLocation;
				var fileSparator:String = model.fileCore.separator;
				var insideLocation:FileWrapper = (event is NewFileEvent) ? NewFileEvent(event).insideLocation : TreeMenuItemEvent(event).data;
				if (isFolderCreationEvent)
				{
					fileName = NewFileEvent(event).fileName;
	
					newFileLocation = insideLocation.file.fileBridge.resolvePath(fileName);
					if (!newFileLocation.fileBridge.exists) newFileLocation.fileBridge.createDirectory();
				} 
				else if ((event as TreeMenuItemEvent).extra && ((event as TreeMenuItemEvent).extra is FileLocation))
				{
					fileName = (event as TreeMenuItemEvent).menuLabel.replace((event as TreeMenuItemEvent).data.file.fileBridge.nativePath + model.fileCore.separator, "");
					newFileLocation = (event as TreeMenuItemEvent).extra as FileLocation;
				} 
				else
				{
					fileName = (event as TreeMenuItemEvent).menuLabel.replace((event as TreeMenuItemEvent).data.file.fileBridge.nativePath + model.fileCore.separator, "");
					newFileLocation = new FileLocation(TreeMenuItemEvent(event).menuLabel);
				}
	
				// generates the fileWrappers and add to the parent
				var tmpFolders:Array = (fileName.indexOf(fileSparator) != -1) ? fileName.split(fileSparator) : [fileName];
				var folderWrappers:Array = [];
				var newFile:FileWrapper;
				var tmpNestedFolderPathString:String = "";
				var isRequireFileNameAddition:Boolean;
				
				if (!isFolderCreationEvent && (tmpFolders.length > 1))
				{
					isRequireFileNameAddition = true;
					tmpFolders.pop();
				}
				
				var runCheckFileWrapper:FileWrapper = insideLocation;
				tmpFolders.forEach(function(folderName:String, index:int, arr:Array):void {
					
					var isExists:Boolean = runCheckFileWrapper.children.some(function(element:FileWrapper, index:int, arr:Array):Boolean {
						if (element.file.fileBridge.nativePath == (runCheckFileWrapper.file.fileBridge.nativePath + model.fileCore.separator + folderName))
						{
							runCheckFileWrapper = element;
							return true;
						}
						return false;
					});
					
					tmpNestedFolderPathString += folderName + fileSparator;
					if (isExists)
					{
						newFile = runCheckFileWrapper;
					}
					else
					{
						newFile = new FileWrapper(
							insideLocation.file.fileBridge.resolvePath(tmpNestedFolderPathString), 
							false, 
							insideLocation.projectReference
						);
						newFile.defaultName = folderName;
						newFile.children = [];
					}
					
					if (index == 0) 
					{
						folderWrappers.push(newFile);
					}
					else
					{
						if (!isExists) (folderWrappers[folderWrappers.length - 1] as FileWrapper).children.push(newFile);
						folderWrappers.push(newFile);
					}
				});
				
				if (!isFolderCreationEvent && isRequireFileNameAddition)
				{
					var newFileWrapper:FileWrapper = new FileWrapper(newFileLocation, false, insideLocation.projectReference);
					newFileWrapper.defaultName = newFileLocation.name;
					
					if (newFile)
					{
						newFile.children.push(newFileWrapper);
						newFile = newFileWrapper;
					}
					else
					{
						folderWrappers.push(newFileWrapper);
						newFile = newFileWrapper;
					}
				}
				
				
				var isImmediateExists:Boolean = insideLocation.children.some(function(element:FileWrapper, index:int, arr:Array):Boolean {
					return (element == folderWrappers[0]);
				});
				if (!isImmediateExists) insideLocation.children.push(folderWrappers[0]);
	
				// Make sure item is open before adding
				expandItem(insideLocation, true);
				// refresh after creating so that the user can see the
				// change immediately, instead of waiting for the file
				// system watcher, which might take a second or two
				refreshItem(insideLocation);
				if (isFolderCreationEvent)
				{
					expandItem(folderWrappers[0], true);
				}
	
				// refresh the folder section and select
				var timeoutValue:uint = setTimeout(function ():void
				{
					sortChildren(insideLocation);
	
					// after a refresh new fileWrapper being created,
					// so we need new instance of the wrapper so we can
					// select and scroll-to-index
					var tmpFileW:FileWrapper = UtilsCore.findFileWrapperAgainstProject(newFile, null, insideLocation);
					_feathersTreeView.selectedItem = tmpFileW;
	
					scrollToItem(tmpFileW);
					clearTimeout(timeoutValue);
				}, 300);
			}
	
			private function onNewFilesFoldersCopied(event:TreeMenuItemEvent):void
			{
				var insideLocation:FileWrapper = TreeMenuItemEvent(event).data;
	
				// refresh the folder section and select
				_feathersTreeView.selectedItem = findTreeViewItem(insideLocation);
				refreshByWrapperItem(insideLocation);
				expandItem(insideLocation, true);
			}
	
			protected function onProjectRenameRequest(event:RenameApplicationEvent):void
			{
				for each (var as3Project:AS3ProjectVO in model.projects)
				{
					if(as3Project.folderLocation.fileBridge.nativePath == event.from.fileBridge.nativePath)
					{
						as3Project.projectFolder.file = as3Project.folderLocation = as3Project.classpaths[0] = event.to;
						//as3Project.projectFolder.projectReference.name = event.to.fileBridge.name;
						as3Project.projectFolder.projectReference.path = event.to.fileBridge.nativePath;
	
						refreshByWrapperItem(as3Project.projectFolder);
	
						var timeoutValue:uint = setTimeout(function ():void
						{
							_feathersTreeView.selectedItem = findTreeViewItem(as3Project.projectFolder);
	
							scrollToItem(as3Project.projectFolder);
							clearTimeout(timeoutValue);
						}, 300);
						break;
					}
				}
			}
	
			public function getProjectBySelection(orByProjectPath:String = null):ProjectVO
			{
				if(!_feathersTreeView.selectedItem && !orByProjectPath) return null;
	
				for (var i:int; i < projects.length; i++)
				{
					if(!orByProjectPath)
					{
						if(FileWrapper(_feathersTreeView.selectedItem).projectReference.path == projects[i].folderPath) return projects[i];
					} else
					{
						if(orByProjectPath == projects[i].folderPath) return projects[i];
					}
				}
	
				return null;
			}
			
			private function onCloseProjectRequest(event:ProjectEvent):void
			{
				onFileDeletedOnServer([event.anObject], FileWrapperHierarchicalItemRenderer.CLOSE);
			}
	
			private function onFileDeletedOnServer(value:Array, removalType:String = null):void
			{
				if(!value) return;
	
				var parentCollection:Array;
				var tmpProject:ProjectVO;
				var lastSelectedItem:Object = _feathersTreeView.selectedItem;
				var lastProcessedProjectPath:String;
				// if the file/folder is a project root
				if(value[0].isRoot)
				{
					tmpProject = UtilsCore.getProjectFromProjectFolder(value[0]);
					UtilsCore.closeAllRelativeEditors(tmpProject ? tmpProject : value[0], (removalType == FileWrapperHierarchicalItemRenderer.CLOSE ? false : true), function ():void
					{
						for each (var project:ProjectVO in projects)
						{
							if(project.projectFolder.nativePath === value[0].nativePath)
							{
								projects.removeItem(project);
								dispatcher.dispatchEvent(new ProjectEvent(ProjectEvent.REMOVE_PROJECT, project));
								break;
							}
						}
					});
				} else
				{
					for each (var fw:FileWrapper in value)
					{
						deleteFileWrapper = fw;
						proceedWithDeletionOfNode(fw);
					}
				}

				function proceedWithDeletionOfNode(value:FileWrapper):void
				{
					// search through open projects as we don't know
					// which project the FileWrapper is belongs to
					for each (var fw:FileWrapper in model.selectedprojectFolders)
					{
						parentCollection = findFilePosition(fw);
						if(parentCollection) break;
					}
	
					try
					{
						// this is a scenario when both parent and children
						// get selected and called for deletion
						parentCollection.splice(parentCollection.indexOf(value), 1);
						if(lastSelectedItem && lastSelectedItem == value)
						{
							var parentItem:Object = getParentItem(value);
							_feathersTreeView.selectedItem = findTreeViewItem(parentItem as FileWrapper);
						}
					} catch (e:Error)
					{
						return;
					}
	
					fileCollection = null;

					// check if the wrapper is the source folder to the project
					if(lastProcessedProjectPath != value.projectReference.path)
					{
						tmpProject = UtilsCore.getProjectFromProjectFolder(value);
					}
					if(tmpProject && (tmpProject is AS3ProjectVO) && (tmpProject as AS3ProjectVO).sourceFolder)
					{
						if((tmpProject as AS3ProjectVO).sourceFolder.fileBridge.nativePath == value.nativePath)
						{
							(tmpProject as AS3ProjectVO).sourceFolder = null;
						}
					}
	
					dispatcher.dispatchEvent(new TreeMenuItemEvent(TreeMenuItemEvent.FILE_DELETED, null, deleteFileWrapper));
				}
			}
	
			private function findFilePosition(value:FileWrapper):Array
			{
				var tmpChildren:Array = value.children;
	
				for (var i:int = 0; i < tmpChildren.length; i++)
				{
					if(tmpChildren[i] == deleteFileWrapper)
					{
						fileCollection = tmpChildren;
						return tmpChildren;
					}
	
					if(fileCollection) return fileCollection;
					if(tmpChildren[i].children && (tmpChildren[i].children as Array).length > 0)
					{
						findFilePosition(tmpChildren[i]);
					}
				}
	
				return (fileCollection) ? fileCollection : null;
			}
	
			private function fileSingleClickedInTreeView(event:TreeViewEvent):void
			{
				var item:FileWrapper = event.state.data as FileWrapper;
				refreshActiveProject(item);
			}
	
			private function fileDoubleClickedInTreeView(event:TreeViewEvent):void
			{
				var item:FileWrapper = event.state.data as FileWrapper;
				if(_feathersTreeView.dataProvider.isBranch(item))
				{
					callRefreshActiveProject(item);
					// don't ignore tree branch changes here!
					// this is a user interaction and the opened or closed
					// folder should be saved
					var open:Boolean = !_feathersTreeView.isBranchOpen(item);
					_feathersTreeView.toggleBranch(item, open);
					if (open)
					{
						// Flex Tree dispatches an add event when opening a
						// branch, but Feathers does not, so we force it here
						reopenPreviouslyClosedItems(CollectionEventKind.ADD, item.children.slice());
					}
				} 
				else
				{
					if(item.file.fileBridge.isDirectory || item.isWorking) return;

					callRefreshActiveProject(item);
					dispatcher.dispatchEvent(
							new OpenFileEvent(OpenFileEvent.OPEN_FILE, [item.file], -1, [item])
					);
				}

				/*
				 * @local
				 */
				function callRefreshActiveProject(value:FileWrapper):void
				{
					if (_refreshActiveProjectTimeout != uint.MAX_VALUE)
					{
						clearTimeout(_refreshActiveProjectTimeout);
						_refreshActiveProjectTimeout = uint.MAX_VALUE;
					}
					_refreshActiveProjectTimeout = setTimeout(function():void
					{
						_refreshActiveProjectTimeout = uint.MAX_VALUE;
						refreshActiveProject(value);
					}, 300);
				}
			}
	
			private function getIconForFile(object:Object):Class
			{
				return null;
			}
	
			private function getTreeTooltip(item:Object):String
			{
				if(!FileWrapper(item).isRoot) return null;
				return FileWrapper(item).file.fileBridge.nativePath;
			}
	
			private function refreshActiveProject(projectFileWrapper:FileWrapper):void
			{
				if(!projectFileWrapper) return;
	
				var activeProject:ProjectVO = UtilsCore.getProjectFromProjectFolder(projectFileWrapper);
				if(activeProject)
				{
					if(model.activeProject != activeProject)
					{
						model.activeProject = activeProject;
						UtilsCore.setProjectMenuType(activeProject);
	
						dispatcher.dispatchEvent(new ProjectEvent(ProjectEvent.ACTIVE_PROJECT_CHANGED, activeProject));
					}
				}
			}
	
			private function onTreeViewBranchOpen(event:TreeViewEvent):void
			{
				if (_ignoreTreeBranchChanges)
				{
					return;
				}
				saveItemForOpen(event.state.data);
			}
	
			private function onTreeViewBranchClose(event:TreeViewEvent):void
			{
				if (_ignoreTreeBranchChanges)
				{
					return;
				}
				removeFromOpenedItems(event.state.data);
			}
	
			private function onScrollFromSource(event:Event):void
			{
				dispatcher.dispatchEvent(new ProjectEvent(ProjectEvent.SCROLL_FROM_SOURCE));
			}

			private function reopenPreviouslyClosedItems(eventKind:String, items:Array):void
			{
				if (model.selectedprojectFolders == null || _feathersTreeView == null)
				{
					return;
				}

				var itemsCount:int = model.selectedprojectFolders.length;
				if (itemsCount > 0)
				{
					if (eventKind == CollectionEventKind.ADD || eventKind == CollectionEventKind.RESET)
					{
						itemsCount = items.length;
						if (eventKind == CollectionEventKind.RESET)
						{
							if (itemsCount == 0)
							{
								items = model.selectedprojectFolders.source.slice();
								itemsCount = items.length;
							}
						}

						if (itemsCount > 0)
						{
							setItemsAsOpen(items);
						}
					}
				}
			}

			private function setItemsAsOpen(items:Array):void
			{
				var cookie:SharedObject = SharedObjectUtil.getMoonshineIDEProjectSO("projectTree");
				if (!cookie) return;

				var projectTree:Array = cookie.data.projectTree;
				if (projectTree && items.length > 0)
				{
					var item:Object = items.shift();
					var fileWrapper:FileWrapper = item as FileWrapper;
					if (fileWrapper != null && !_feathersTreeView.isBranchOpen(fileWrapper))
					{
						var hasItemForOpen:Boolean = projectTree.some(
								function hasSomeItemForOpen(itemForOpen:Object, index:int, arr:Array):Boolean {
									return itemForOpen.hasOwnProperty(fileWrapper[PROPERTY_NAME_KEY]) &&
											itemForOpen[fileWrapper[PROPERTY_NAME_KEY]] == fileWrapper[PROPERTY_NAME_KEY_VALUE];
								});
						if (hasItemForOpen)
						{
							//updateTreeViewItem(fileWrapper);
							// - or -
							// var location:Array = _feathersTreeView.dataProvider.locationOf(fileWrapper);
							// if (location != null) {
							// 	_feathersTreeView.dataProvider.updateAt(location);
							// }
							expandItem(fileWrapper, true);
							fileWrapper.sortChildren();
						}
					}
					
					setItemsAsOpen(items);
				}
			}

			private function updateTreeViewItem(item:FileWrapper):void
			{
				item = findTreeViewItem(item);
				if (!item)
				{
					return;
				}
				var location:Array = _feathersTreeView.dataProvider.locationOf(item);
				if (!location)
				{
					return;
				}
				_feathersTreeView.dataProvider.updateAt(location);
			}

			private function onActiveEditorChange(event:Event):void
			{
				if (_oldActiveEditorFileWrapper)
				{
					updateTreeViewItem(_oldActiveEditorFileWrapper);
				}
				var activeEditor:BasicTextEditor = model.activeEditor as BasicTextEditor;
				if (activeEditor)
				{
					var fileLocation:FileLocation = activeEditor.currentFile;
					var fileWrapper:FileWrapper = new FileWrapper(fileLocation);
					updateTreeViewItem(fileWrapper);
					_oldActiveEditorFileWrapper = fileWrapper;
				}
				else
				{
					_oldActiveEditorFileWrapper = null;
				}
			}
			
		]]>
	</mx:Script>

	<project:ProjectViewHeader id="header"
							   label="{'Workspace: '+ ConstantsCoreVO.CURRENT_WORKSPACE}"
							   showScrollFromSourceIcon="true"
							   width="100%"
							   scrollFromSource="onScrollFromSource(event)"
							   creationComplete="initHeader()" />

	<ui:FeathersUIWrapper
			feathersUIControl="{_feathersTreeView}"
			width="100%" height="100%" minHeight="0"/>
</mx:VBox>