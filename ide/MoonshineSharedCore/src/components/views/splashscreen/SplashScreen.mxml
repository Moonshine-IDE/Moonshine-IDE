<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009"
		   xmlns:s="library://ns.adobe.com/flex/spark"
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   implements="actionScripts.ui.IContentWindow"
		   label="Home"
		   width="100%"
		   height="100%" xmlns:splashscreen="components.views.splashscreen.*"
		   creationComplete="onSplashScreenCreationComplete(event)" horizontalScrollPolicy="off" verticalScrollPolicy="off">
	<fx:Script>
		<![CDATA[
		import components.renderers.MoonshineNewsItemRenderer;

		import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.effects.Fade;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			
			import spark.effects.Move;
			
			import actionScripts.controllers.DataAgent;
			import actionScripts.events.GlobalEventDispatcher;
			import actionScripts.events.MenuEvent;
			import actionScripts.events.NewProjectEvent;
			import actionScripts.events.ProjectEvent;
			import actionScripts.events.SdkEvent;
			import actionScripts.events.SettingsEvent;
			import actionScripts.factory.FileLocation;
			import actionScripts.locator.IDEModel;
			import actionScripts.plugin.actionscript.as3project.vo.MXMLProjectVO;
			import actionScripts.plugin.recentlyOpened.RecentlyOpenedPlugin;
			import actionScripts.plugin.splashscreen.SplashScreenPlugin;
			import actionScripts.plugin.templating.TemplatingHelper;
			import actionScripts.ui.tabview.CloseTabEvent;
			import actionScripts.utils.UtilsCore;
			import actionScripts.valueObjects.ConstantsCoreVO;
			import actionScripts.valueObjects.ProjectReferenceVO;
			import actionScripts.valueObjects.TemplateVO;
			import actionScripts.valueObjects.URLDescriptorVO;
			
			import components.popup.Authentication;
			import components.popup.AuthenticationPopUp;
			import components.popup.NegativeRatingPopup;
			import components.popup.PositiveRatingPopup;
			import components.renderers.RecentProjectRenderer;
			import components.renderers.TemplateItemRenderer;
			
			import flashx.textLayout.events.FlowElementMouseEvent;
			
			import no.doomsday.console.core.events.ConsoleEvent;
	
			[Embed("/elements/images/icoThumbUp.png")]
			private const ICON_THUMB_UP:Class;
			[Embed("/elements/images/icoThumbDown.png")]
			private const ICON_THUMB_DOWN:Class;
	
			[Bindable]
			public var plugin:SplashScreenPlugin;
	
			[Bindable]
			private var model:IDEModel = IDEModel.getInstance();
	
			protected var loader:DataAgent;
			protected var recentOpenedProjectObject:Object;
			protected var authPopup:AuthenticationPopUp;
			protected var dispatcher:GlobalEventDispatcher = GlobalEventDispatcher.getInstance();
			protected var positiveRatingPopup:PositiveRatingPopup;
			protected var negativeRatingPopup:NegativeRatingPopup;
	
			private var isNoSDKMessageShown:Boolean;
	
			public function get longLabel():String
			{
				return "Home";
			}
	
			public function isChanged():Boolean
			{
				return false;
			}
	
			public function isEmpty():Boolean
			{
				return true;
			}
	
			public function save():void
			{
			}
	
			public function openRecentItem(refVO:ProjectReferenceVO):void
			{
				// do not open an already opened project
				if(model.mainView.getTreeViewPanel() && UtilsCore.checkProjectIfAlreadyOpened(refVO.path)) return;
	
				// web only
				if (!ConstantsCoreVO.IS_AIR)
				{
					recentOpenedProjectObject = refVO;
					// check if there is no login or not
					if(URLDescriptorVO.BASE_URL_MIRROR == "")
					{
						GlobalEventDispatcher.getInstance().dispatchEvent(
								new MenuEvent(ProjectEvent.EVENT_IMPORT_FLASHBUILDER_PROJECT, false, false, {
									path: recentOpenedProjectObject.path,
									name: recentOpenedProjectObject.name
								})
						);
					} else if(ConstantsCoreVO.IS_AUTH_REQUIRED)
					{
						loader = new DataAgent(URLDescriptorVO.LOGIN_TEST, onProjectLoadSuccess, onLoginTestFault, null);
					} else
					{
						loadRecentProject();
					}
				}
			}
	
			private function updateRecetProjectList(event:Event):void
			{
				recentProjects.removeAllElements();
				for each (var i:ProjectReferenceVO in model.recentlyOpenedProjects)
				{
					var tmpRow:RecentProjectRenderer = new RecentProjectRenderer();
					tmpRow.project = i;
					recentProjects.addElement(tmpRow);
				}
	
				updateRecentLabelPosition();
			}
	
			private function updateRecentLabelPosition():void
			{
				if(recentProjects.numElements > 0)
				{
					vgProjects.callLater(function ():void
					{
						var tmpRow:RecentProjectRenderer = recentProjects.getElementAt(0) as RecentProjectRenderer;
						lblRecent.y = vgProjects.contentToLocal(new Point(tmpRow.x, tmpRow.y)).y;
					});
				}
			}
	
			private function updateRecetFileList(event:Event):void
			{
				recentFiles.removeAllElements();
				for each (var i:ProjectReferenceVO in model.recentlyOpenedFiles)
				{
					var tmpRow:RecentProjectRenderer = new RecentProjectRenderer();
					tmpRow.isFile = true;
					tmpRow.project = i;
					recentFiles.addElement(tmpRow);
				}
			}
	
			private function loadRecentProject():void
			{
				// we need another check here, too
				if(UtilsCore.checkProjectIfAlreadyOpened(recentOpenedProjectObject.path)) return;
	
				var activeProj:MXMLProjectVO = new MXMLProjectVO(recentOpenedProjectObject.path, recentOpenedProjectObject.name);
				activeProj.projectName = recentOpenedProjectObject.name;
				activeProj.projectRemotePath = "";
				model.activeProject = activeProj;
				GlobalEventDispatcher.getInstance().dispatchEvent(
						new ProjectEvent(ProjectEvent.ADD_PROJECT, activeProj)
				);
	
				// just to makeup some visual distruaction
				if(authPopup && authPopup.isPopUp)
				{
					PopUpManager.removePopUp(authPopup);
					authPopup = null;
				}
			}
	
			private function handleProjectOpen(event:Event):void
			{
				GlobalEventDispatcher.getInstance().dispatchEvent(
						new MenuEvent(ProjectEvent.EVENT_IMPORT_FLASHBUILDER_PROJECT)
				);
			}

			private function handleNewsOpen(event:Event):void
			{
				var dataNews:Object = event.target as MoonshineNewsItemRenderer;
				var link:String = dataNews.data.link;
				navigateToURL(new URLRequest(link));
			}

			private function handleTemplateClick(event:Event):void
			{
				var rdr:TemplateItemRenderer = event.target as TemplateItemRenderer;
				var fl:Object = ConstantsCoreVO.IS_AIR ? rdr.data as TemplateVO : rdr.data as FileLocation;
	
				if(ConstantsCoreVO.IS_AIR)
				{
					var templateLabel:String = TemplatingHelper.getTemplateLabel(fl.file);
					if(fl.file.fileBridge.isDirectory)
					{
						GlobalEventDispatcher.getInstance().dispatchEvent(
								new Event("eventNewProjectFromTemplate" + templateLabel)
						);
					}
					else
					{
						GlobalEventDispatcher.getInstance().dispatchEvent(
								new Event("eventNewFileFromTemplate" + templateLabel)
						);
					}
				} else
				{
					GlobalEventDispatcher.getInstance().dispatchEvent(
							new NewProjectEvent(NewProjectEvent.CREATE_NEW_PROJECT, FileLocation(fl).fileBridge.name, null, null)
					);
				}
			}
	
			private function handleRecentClick(event:Event):void
			{
				var refVO:ProjectReferenceVO = RecentProjectRenderer(event.target).project;
				dispatcher.dispatchEvent(new MenuEvent("eventOpenRecentProject", false, false, refVO));
			}
	
			private function onProjectLoadSuccess(value:Object):void
			{
				loader = null;
	
				var xData:XML = XML(String(value));
				if(!xData) return;
				if(xData.status == Authentication.SESSION_UNAUTHENTICATED)
				{
					authPopup = new AuthenticationPopUp();
					PopUpManager.addPopUp(authPopup, FlexGlobals.topLevelApplication as DisplayObject, false);
					PopUpManager.centerPopUp(authPopup);
					authPopup.addEventListener(Authentication.SUCCESS, authSuccessHandler);
					authPopup.addEventListener(Authentication.CANCEL, authCancelHandler);
				} else if(xData.status == Authentication.SESSION_AUTHLIMITEDACCESS)
				{
					Alert.show("You do not have sufficient rights to performn this operation. If you feel this is in error please contact the Administrator.", "Error!");
				} else
				{
					loadRecentProject();
				}
			}
	
			private function onLoginTestFault(result:Object):void
			{
				loader = null;
			}
	
			private function authSuccessHandler(evt:Event):void
			{
				loadRecentProject();
			}
	
			private function authCancelHandler(evt:Event):void
			{
				authPopup.removeEventListener(Authentication.SUCCESS, authSuccessHandler);
				authPopup.removeEventListener(Authentication.CANCEL, authCancelHandler);
				PopUpManager.removePopUp(authPopup);
				authPopup = null;
			}
	
			protected function onSplashScreenCreationComplete(event:FlexEvent):void
			{
				addEventListener(ResizeEvent.RESIZE, onStageResized);
				addEventListener(RecentProjectRenderer.RECENT_PROJECT_RENDERER_CLICK, handleRecentClick);
				dispatcher.addEventListener(SdkEvent.CHANGE_SDK, onDefaultSDKStateChanged);
				dispatcher.addEventListener(RecentlyOpenedPlugin.RECENT_PROJECT_LIST_UPDATED, updateRecetProjectList);
				dispatcher.addEventListener(RecentlyOpenedPlugin.RECENT_FILES_LIST_UPDATED, updateRecetFileList);
				dispatcher.addEventListener(ConsoleEvent.OPEN_REPORT_A_BUG_WINDOW, onOpenReportBugWithError, false, 0, true);
				dispatcher.addEventListener(CloseTabEvent.EVENT_TAB_CLOSED, onTabRemoved);
				
				if (!ConstantsCoreVO.IS_AIR)
				{
					dispatcher.addEventListener("eventOpenRecentProject", onOpenRecentProject);
					dispatcher.addEventListener("eventOpenRecentFile", onOpenRecentFile);
				}
	
				grpNoSDKMess.y = this.height;
	
				// manual run for the first time
				updateRecetProjectList(null);
				updateRecetFileList(null);
			}
	
			private function onOpenRecentProject(menuEvent:MenuEvent):void
			{
				openRecentItem(menuEvent.data as ProjectReferenceVO);
			}
	
			private function onOpenRecentFile(menuEvent:MenuEvent):void
			{
				openRecentItem(menuEvent.data as ProjectReferenceVO);
			}
	
			private function onStageResized(event:ResizeEvent):void
			{
				if(isNoSDKMessageShown) grpNoSDKMess.y = this.height - grpNoSDKMess.height;
				updateRecentLabelPosition();
			}
	
			private function onDefaultSDKStateChanged(event:Event):void
			{
				var isSDKAvailable:Boolean = model.defaultSDK ? true : false;
				if(!isSDKAvailable && !isNoSDKMessageShown)
				{
					isNoSDKMessageShown = true;
					grpNoSDKMess.y = this.height - grpNoSDKMess.height;
	
					var tmpFade:Fade = new Fade(grpNoSDKMess);
					tmpFade.alphaFrom = 0;
					tmpFade.alphaTo = 1;
					tmpFade.play();
				} else if(isSDKAvailable && isNoSDKMessageShown)
				{
					var tmpMove:Move = new Move(grpNoSDKMess);
					tmpMove.yFrom = grpNoSDKMess.y;
					tmpMove.yTo = height;
					tmpMove.addEventListener(EffectEvent.EFFECT_END, onEffectEnds);
					tmpMove.play();
					isNoSDKMessageShown = false;
				} else if(isNoSDKMessageShown)
				{
					grpNoSDKMess.y = this.height - grpNoSDKMess.height;
				}
	
				function onEffectEnds(effEvent:EffectEvent):void
				{
					effEvent.target.removeEventListener(EffectEvent.EFFECT_END, onEffectEnds);
					grpNoSDKMess.alpha = 0;
				}
			}
	
	
			private function onEffectEnds(effEvent:EffectEvent):void
			{
				effEvent.target.removeEventListener(EffectEvent.EFFECT_END, onEffectEnds);
				grpNoSDKMess.visible = false;
			}
	
			/**
			 * On agreement link clicked
			 */
			private function handleLinkEvent(event:FlowElementMouseEvent):void
			{
				dispatcher.dispatchEvent(new SettingsEvent(SettingsEvent.EVENT_OPEN_SETTINGS, "actionScripts.plugins.as3project.mxmlc::MXMLCPlugin"));
			}
	
			protected function onPositiveRating(event:MouseEvent):void
			{
				positiveRatingPopup = PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, PositiveRatingPopup, true) as PositiveRatingPopup;
				PopUpManager.centerPopUp(positiveRatingPopup);
			}
	
			protected function onNegativeRating(event:MouseEvent, withError:String = null):void
			{
				negativeRatingPopup = PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, NegativeRatingPopup, true) as NegativeRatingPopup;
				negativeRatingPopup.width = screen.width * .6;
				negativeRatingPopup.height = screen.height * .7;
				negativeRatingPopup.errorDetails = withError;
				PopUpManager.centerPopUp(negativeRatingPopup);
			}
	
			private function onOpenReportBugWithError(event:ConsoleEvent):void
			{
				onNegativeRating(null, event.text);
			}
	
			protected function onTabRemoved(event:CloseTabEvent):void
			{
				if (event.tab == this)
				{
					removeEventListener(ResizeEvent.RESIZE, onStageResized);
					removeEventListener(RecentProjectRenderer.RECENT_PROJECT_RENDERER_CLICK, handleRecentClick);
					dispatcher.removeEventListener(SdkEvent.CHANGE_SDK, onDefaultSDKStateChanged);
					dispatcher.removeEventListener(RecentlyOpenedPlugin.RECENT_PROJECT_LIST_UPDATED, updateRecetProjectList);
					dispatcher.removeEventListener(RecentlyOpenedPlugin.RECENT_FILES_LIST_UPDATED, updateRecetFileList);
					dispatcher.removeEventListener(ConsoleEvent.OPEN_REPORT_A_BUG_WINDOW, onOpenReportBugWithError);
					dispatcher.removeEventListener("eventOpenRecentProject", onOpenRecentProject);
					dispatcher.removeEventListener("eventOpenRecentFile", onOpenRecentFile);
					dispatcher.removeEventListener(CloseTabEvent.EVENT_TAB_CLOSED, onTabRemoved);
				}
			}
			
		]]>
	</fx:Script>
	
	<splashscreen:ArtContainer/>
	<s:VGroup id="vgLeftList"
		left="20" verticalCenter="0"
		gap="20">
		<s:DataGroup id="newsList" dataProvider="{ConstantsCoreVO.TEMPLATES_NEWS_MOONSHINE}"
					 itemRenderer="components.renderers.MoonshineNewsItemRenderer"
					 color="0xFFFFFF" width="100%"
					 creationComplete="newsList.addEventListener('itemClick', handleNewsOpen)">
			<s:layout>
				<s:VerticalLayout
						gap="10"
						clipAndEnableScrolling="false" />
			</s:layout>
		</s:DataGroup>
		<s:Label 
			text="OPEN"
			color="0xFFFFFF"
			paddingTop="3"
			paddingLeft="3"
			paddingRight="3"
			paddingBottom="0"
			fontStyle="italic"
			fontSize="18" />
		<s:DataGroup id="projectOpenList" dataProvider="{ConstantsCoreVO.TEMPLATES_OPEN_PROJECTS}"
					 itemRenderer="components.renderers.TemplateItemRenderer"
					 color="0xFFFFFF" width="100%"
					 creationComplete="projectOpenList.addEventListener('itemClick', handleProjectOpen)">
			<s:layout>
				<s:VerticalLayout
					gap="10"
					clipAndEnableScrolling="false" />
			</s:layout>
		</s:DataGroup>
		<s:Label 
			text="CREATE"
			color="0xD6D6D6"
			paddingTop="3"
			paddingLeft="3"
			paddingRight="3"
			paddingBottom="0"
			fontStyle="italic"
			fontSize="18"
			/>

		<s:DataGroup id="projectTemplateList"
					 dataProvider="{plugin.projectsTemplates}"
					 itemRenderer="components.renderers.TemplateItemRenderer"
					 color="0xFFFFFF"
					 creationComplete="projectTemplateList.addEventListener('itemClick', handleTemplateClick)">
			<s:layout>
				<s:TileLayout horizontalGap="5" requestedColumnCount="2"/>
			</s:layout>
		</s:DataGroup>
		<s:Label 
			text="FEEDBACK"
			color="0xD6D6D6"
			paddingTop="3"
			paddingLeft="3"
			paddingRight="3"
			paddingBottom="0"
			fontStyle="italic"
			fontSize="18"
			/>
		<s:HGroup autoLayout="true" verticalAlign="middle">
			<s:Button label="This is great!"
					  icon="{ICON_THUMB_UP}" height="26"
					  click="onPositiveRating(event)"/>
			<s:Button label="I'm having some problems"
					  icon="{ICON_THUMB_DOWN}" height="26"
					  click="onNegativeRating(event)"/>
		</s:HGroup>
	</s:VGroup>
	
	<s:Group id="vgProjects"
		width="40%" right="0" top="20" bottom="20">
		<s:Label id="lblRecent"
			text="RECENT"
			color="0xFFFFFF"
			paddingTop="2"
			paddingLeft="3"
			paddingBottom="0"
			fontStyle="italic"
			fontSize="18" 
			right="20"/>
		<s:VGroup width="100%" top="36" bottom="0" gap="0">
			<s:Scroller width="100%" height="50%" horizontalScrollPolicy="off">
				<s:VGroup id="recentProjects" 
						  width="100%" paddingRight="20" gap="5" verticalAlign="bottom" horizontalAlign="right"/>
			</s:Scroller>
			<s:Spacer height="20"/>
			<s:Scroller width="100%" height="50%" horizontalScrollPolicy="off">
				<s:VGroup id="recentFiles" 
						  width="100%" paddingRight="20" gap="5" horizontalAlign="right"/>
			</s:Scroller>
		</s:VGroup>
	</s:Group>
	
	<s:Group id="grpNoSDKMess" 
			 width="100%" height="24" alpha="0">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="0xffffcc"/>
			</s:fill>
		</s:Rect>
		<s:RichEditableText editable="false" focusEnabled="false"
							width="100%" color="0x333333" textAlign="center" verticalCenter="0" fontSize="11">
			<s:textFlow>
				<s:TextFlow>
					<s:p>Some options may unavailable until default SDK set. You can set by clicking <s:a click="handleLinkEvent(event)">here</s:a>.</s:p>
				</s:TextFlow>
			</s:textFlow>
		</s:RichEditableText>
	</s:Group>
</mx:Canvas>