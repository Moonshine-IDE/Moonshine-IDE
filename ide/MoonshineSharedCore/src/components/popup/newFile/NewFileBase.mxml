<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<resizableTitleWindow:ResizableTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
										   xmlns:mx="library://ns.adobe.com/flex/mx"
										   xmlns:resizableTitleWindow="actionScripts.ui.resizableTitleWindow.*"
										   xmlns:s="library://ns.adobe.com/flex/spark"
										   backgroundColor="0xf5f5f5" width="600" minWidth="400"
										   title="New Visual Editor File"
										   creationComplete="onNewFileCreationComplete(event)"
										   skinClass="components.skins.ResizableTitleWindowSkin">
	<fx:Metadata>
		[Event(name="EVENT_NEW_FILE", type="actionScripts.events.NewFileEvent")]
	</fx:Metadata>
	<resizableTitleWindow:layout>
		<s:VerticalLayout gap="10" paddingLeft="12" paddingBottom="3" paddingTop="9" paddingRight="13"
						  horizontalAlign="center"/>
	</resizableTitleWindow:layout>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.events.DropDownEvent;
			import spark.events.TextOperationEvent;
			
			import actionScripts.events.GlobalEventDispatcher;
			import actionScripts.events.NewFileEvent;
			import actionScripts.factory.FileLocation;
			import actionScripts.locator.IDEModel;
			import actionScripts.ui.menu.MenuPlugin;
			import actionScripts.valueObjects.FileWrapper;
			import actionScripts.valueObjects.ProjectVO;
			
			import components.renderers.DividerRenderer;
			import components.renderers.FileTypeRenderer;
			import actionScripts.utils.TextUtil;
			
			
			private static const SOURCE_ONLY_CREATION_ERROR:String = "Class files may only be created inside a source folder.";
	
			[Bindable]
			public var wrapperBelongToProject:ProjectVO;
	
			public var wrapperOfFolderLocation:FileWrapper;
			public var folderLocation:FileLocation;
	
			[Bindable]
			protected var modifiedName:String = "";
			[Bindable]
			protected var projectFolders:ArrayCollection;
			[Bindable]
			protected var model:IDEModel = IDEModel.getInstance();
			[Bindable]
			protected var warningMessage:String = SOURCE_ONLY_CREATION_ERROR;
			[Bindable]
			protected var createdFileExtension:String = "";
			[Bindable]
			protected var componentTemplates:ArrayCollection;
			[Bindable]
			protected var isSubmitButtonEnabled:Boolean;
	
			protected var lastSelectedItem:Object;
			protected var projectSelectionWindow:NewFileProjectSelectionPopup;
			protected var nestedFoldersRequested:Array;
	
			private var _isDestinationValid:Boolean;
	
			[Bindable]
			protected function set isDestinationValid(value:Boolean):void
			{
				_isDestinationValid = value;
				if (!value) warningMessage = SOURCE_ONLY_CREATION_ERROR;
			}
	
			protected function get isDestinationValid():Boolean
			{
				return _isDestinationValid;
			}
	
			override protected function closeByCrossSign(event:Event):void
			{
				doBeforeExit();
				super.closeByCrossSign(event);
			}
	
			override protected function onResizeKeyDownEvent(event:KeyboardEvent):void
			{
				doBeforeExit();
				super.onResizeKeyDownEvent(event);
			}
	
			protected function doBeforeExit():void
			{
				GlobalEventDispatcher.getInstance().dispatchEvent(new Event(MenuPlugin.CHANGE_MENU_MAC_ENABLE_STATE));
			}
	
			protected function onBrowseButton(event:MouseEvent):void
			{
				if (!projectSelectionWindow)
				{
					projectSelectionWindow = PopUpManager.createPopUp(this, NewFileProjectSelectionPopup, true) as NewFileProjectSelectionPopup;
					projectSelectionWindow.addEventListener(CloseEvent.CLOSE, handleProjectSelectionPopupClose);
					projectSelectionWindow.addEventListener(NewFileEvent.EVENT_PROJECT_SELECTED, onProjectSelectionChanged);
	
					//projectSelectionWindow.wrapperProject = UtilsCore.getProjectFromProjectFolder(tree.selectedItem as FileWrapper);
					//PopUpManager.centerPopUp(projectSelectionWindow);
				}
			}
	
			protected function handleProjectSelectionPopupClose(event:CloseEvent):void
			{
				projectSelectionWindow.removeEventListener(CloseEvent.CLOSE, handleProjectSelectionPopupClose);
				projectSelectionWindow.removeEventListener(NewFileEvent.EVENT_PROJECT_SELECTED, onProjectSelectionChanged);
				projectSelectionWindow = null;
			}
	
			protected function onProjectSelectionChanged(event:NewFileEvent):void
			{
				wrapperBelongToProject = event.ofProject;
				wrapperOfFolderLocation = wrapperBelongToProject.projectFolder;
				projectFolders = new ArrayCollection();
	
			}
	
			protected function getTemplateLabel(item:Object):String
			{
				return (!(item is String) ? item.name.split(".")[0] : "");
			}
	
			protected function getItemRenderer(item:*):IFactory
			{
				var renderer:Class = item is String ? DividerRenderer : FileTypeRenderer;
				return new ClassFactory(renderer);
			}
	
			protected function onDropDownClosed(event:DropDownEvent):void
			{
				if (event.target.selectedItem is String) event.target.selectedItem = lastSelectedItem;
			}
	
			protected function onNewFileCreationComplete(event:FlexEvent):void
			{
	
			}
			
			protected function onNameChanged(event:TextOperationEvent):void
			{
				if (!event || !event.target) return;
				
				var inputText:String = event.target.text;
				
				// checks for nested folders path
				if (inputText.indexOf("/") != -1)
				{
					nestedFoldersRequested = inputText.split("/");
					if (nestedFoldersRequested[nestedFoldersRequested.length - 1] == "") nestedFoldersRequested.pop();
					
					modifiedName = nestedFoldersRequested[nestedFoldersRequested.length - 1];
				}
				else
				{
					nestedFoldersRequested = null;
					modifiedName = inputText;
				}
				
				// validates the target file path
				if (!isDestinationValid || modifiedName == "") isSubmitButtonEnabled = false;
				else
				{
					var targetFile:FileLocation = wrapperOfFolderLocation.file.fileBridge.resolvePath(
						(nestedFoldersRequested ? nestedFoldersRequested.join("/") : modifiedName) + createdFileExtension
					);
					targetFile.fileBridge.canonicalize();
					
					isSubmitButtonEnabled = !targetFile.fileBridge.exists;
					//fixDominoViewName
					
					if (!isSubmitButtonEnabled)
					{
						warningMessage = modifiedName + createdFileExtension + " already exists.";
					}
				}
			}


			protected function onDominoNameChanged(event:TextOperationEvent):void
			{
				if (!event || !event.target) return;
				
				var inputText:String = event.target.text;
				
				// checks for nested folders path
				if (inputText.indexOf("/") != -1 ||inputText.indexOf("\\") != -1 )
				{
					
					modifiedName = TextUtil.fixDominoViewName(inputText);
				}
				else
				{
					
					modifiedName = inputText;
				}

				
				// validates the target file path
				if (!isDestinationValid || modifiedName == "") isSubmitButtonEnabled = false;
				else
				{
					var targetFile:FileLocation = wrapperOfFolderLocation.file.fileBridge.resolvePath(
						modifiedName+ createdFileExtension
					);
					targetFile.fileBridge.canonicalize();
					
					isSubmitButtonEnabled = !targetFile.fileBridge.exists;
					//fixDominoViewName
					
					if (!isSubmitButtonEnabled)
					{
						warningMessage = TextUtil.toDominoViewNormalName(modifiedName) + createdFileExtension + " already exists.";
					}
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:StringValidator id="sValidator" property="text"/>
	</fx:Declarations>
</resizableTitleWindow:ResizableTitleWindow>