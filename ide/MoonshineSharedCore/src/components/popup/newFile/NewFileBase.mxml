<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 Prominic.NET, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// Author: Prominic.NET, Inc.
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
////////////////////////////////////////////////////////////////////////////////
-->
<resizableTitleWindow:ResizableTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
										   xmlns:mx="library://ns.adobe.com/flex/mx"
										   xmlns:resizableTitleWindow="actionScripts.ui.resizableTitleWindow.*"
										   xmlns:s="library://ns.adobe.com/flex/spark"
										   backgroundColor="0xf5f5f5" width="600" minWidth="400"
										   title="New Visual Editor File"
										   creationComplete="onNewFileCreationComplete(event)"
										   skinClass="components.skins.ResizableTitleWindowSkin">
	<fx:Metadata>
		[Event(name="EVENT_NEW_FILE", type="actionScripts.events.NewFileEvent")]
	</fx:Metadata>
	<resizableTitleWindow:layout>
		<s:VerticalLayout gap="10" paddingLeft="12" paddingBottom="3" paddingTop="9" paddingRight="13"
						  horizontalAlign="center"/>
	</resizableTitleWindow:layout>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.events.DropDownEvent;
			import spark.events.TextOperationEvent;
			
			import actionScripts.events.GlobalEventDispatcher;
			import actionScripts.events.NewFileEvent;
			import actionScripts.factory.FileLocation;
			import actionScripts.locator.IDEModel;
			import actionScripts.ui.menu.MenuPlugin;
			import actionScripts.valueObjects.FileWrapper;
			import actionScripts.valueObjects.ProjectVO;
			
			import components.renderers.DividerRenderer;
			import components.renderers.FileTypeRenderer;
	
			[Bindable]
			public var wrapperBelongToProject:ProjectVO;
	
			public var wrapperOfFolderLocation:FileWrapper;
			public var folderLocation:FileLocation;
	
			[Bindable]
			protected var modifiedName:String = "";
			[Bindable]
			protected var projectFolders:ArrayCollection;
			[Bindable]
			protected var model:IDEModel = IDEModel.getInstance();
			[Bindable]
			protected var warningMessage:String = "Class files allowed to create inside source folder only.";
			[Bindable]
			protected var createdFileExtension:String = "";
			[Bindable]
			protected var componentTemplates:ArrayCollection;
			[Bindable]
			protected var isSubmitButtonEnabled:Boolean;
	
			protected var lastSelectedItem:Object;
			protected var projectSelectionWindow:NewFileProjectSelectionPopup;
			protected var nestedFoldersRequested:Array;
	
			private var _isDestinationValid:Boolean;
	
			[Bindable]
			protected function set isDestinationValid(value:Boolean):void
			{
				_isDestinationValid = value;
				if (!value) warningMessage = "Class files allowed to create inside source folder only.";
			}
	
			protected function get isDestinationValid():Boolean
			{
				return _isDestinationValid;
			}
	
			override protected function closeByCrossSign(event:Event):void
			{
				doBeforeExit();
				super.closeByCrossSign(event);
			}
	
			override protected function onResizeKeyDownEvent(event:KeyboardEvent):void
			{
				doBeforeExit();
				super.onResizeKeyDownEvent(event);
			}
	
			protected function doBeforeExit():void
			{
				GlobalEventDispatcher.getInstance().dispatchEvent(new Event(MenuPlugin.CHANGE_MENU_MAC_ENABLE_STATE));
			}
	
			protected function onBrowseButton(event:MouseEvent):void
			{
				if (!projectSelectionWindow)
				{
					projectSelectionWindow = PopUpManager.createPopUp(this, NewFileProjectSelectionPopup, true) as NewFileProjectSelectionPopup;
					projectSelectionWindow.addEventListener(CloseEvent.CLOSE, handleProjectSelectionPopupClose);
					projectSelectionWindow.addEventListener(NewFileEvent.EVENT_PROJECT_SELECTED, onProjectSelectionChanged);
	
					//projectSelectionWindow.wrapperProject = UtilsCore.getProjectFromProjectFolder(tree.selectedItem as FileWrapper);
					//PopUpManager.centerPopUp(projectSelectionWindow);
				}
			}
	
			protected function handleProjectSelectionPopupClose(event:CloseEvent):void
			{
				projectSelectionWindow.removeEventListener(CloseEvent.CLOSE, handleProjectSelectionPopupClose);
				projectSelectionWindow.removeEventListener(NewFileEvent.EVENT_PROJECT_SELECTED, onProjectSelectionChanged);
				projectSelectionWindow = null;
			}
	
			protected function onProjectSelectionChanged(event:NewFileEvent):void
			{
				wrapperBelongToProject = event.ofProject;
				wrapperOfFolderLocation = wrapperBelongToProject.projectFolder;
				projectFolders = new ArrayCollection();
	
			}
	
			protected function getTemplateLabel(item:Object):String
			{
				return (!(item is String) ? item.name.split(".")[0] : "");
			}
	
			protected function getItemRenderer(item:*):IFactory
			{
				var renderer:Class = item is String ? DividerRenderer : FileTypeRenderer;
				return new ClassFactory(renderer);
			}
	
			protected function onDropDownClosed(event:DropDownEvent):void
			{
				if (event.target.selectedItem is String) event.target.selectedItem = lastSelectedItem;
			}
	
			protected function onNewFileCreationComplete(event:FlexEvent):void
			{
	
			}
			
			protected function onNameChanged(event:TextOperationEvent):void
			{
				if (!event || !event.target) return;
				
				var inputText:String = event.target.text;
				
				// checks for nested folders path
				if (inputText.indexOf("/") != -1)
				{
					nestedFoldersRequested = inputText.split("/");
					if (nestedFoldersRequested[nestedFoldersRequested.length - 1] == "") nestedFoldersRequested.pop();
					
					modifiedName = nestedFoldersRequested[nestedFoldersRequested.length - 1];
				}
				else
				{
					nestedFoldersRequested = null;
					modifiedName = inputText;
				}
				
				// validates the target file path
				if (!isDestinationValid || modifiedName == "") isSubmitButtonEnabled = false;
				else
				{
					var targetFile:FileLocation = wrapperOfFolderLocation.file.fileBridge.resolvePath(
						(nestedFoldersRequested ? nestedFoldersRequested.join("/") : modifiedName) + createdFileExtension
					);
					targetFile.fileBridge.canonicalize();
					
					isSubmitButtonEnabled = !targetFile.fileBridge.exists;
					if (!isSubmitButtonEnabled)
					{
						warningMessage = modifiedName + createdFileExtension + " is already exists.";
					}
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:StringValidator id="sValidator" property="text"/>
	</fx:Declarations>
</resizableTitleWindow:ResizableTitleWindow>