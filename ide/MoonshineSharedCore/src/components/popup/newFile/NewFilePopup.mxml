<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<newfile:NewFileBase xmlns:fx="http://ns.adobe.com/mxml/2009"
                     xmlns:s="library://ns.adobe.com/flex/spark"
                     xmlns:view="actionScripts.plugin.findreplace.view.*" xmlns:utils="actionScripts.utils.*"
                     xmlns:newfile="components.popup.newFile.*">
    <fx:Metadata>
        [Event(name="EVENT_NEW_FILE", type="actionScripts.events.NewFileEvent")]
    </fx:Metadata>
    <fx:Script>
		<![CDATA[
        import mx.controls.Alert;
        import mx.events.FlexEvent;
        import mx.events.ListEvent;
        import mx.managers.PopUpManager;

        import spark.events.TextOperationEvent;

        import actionScripts.events.DuplicateEvent;
        import actionScripts.events.GlobalEventDispatcher;
        import actionScripts.events.NewFileEvent;
        import actionScripts.extResources.com.validator.ValidatorType;
        import actionScripts.factory.FileLocation;
        import actionScripts.ui.menu.MenuPlugin;
        import actionScripts.utils.SimpleValidator;
        import actionScripts.utils.UtilsCore;
        import actionScripts.valueObjects.ConstantsCoreVO;
        import actionScripts.valueObjects.FileWrapper;

        import actionScripts.interfaces.IVisualEditorProjectVO;
        import actionScripts.locator.IDEModel;

        import actionScripts.utils.TextUtil;
        [Bindable]
        public static var AS_PLAIN_TEXT:String = "AS_PLAIN_TEXT";

        public static var AS_XML:String = "AS_XML";
        public static var AS_CUSTOM:String = "AS_CUSTOM";
        public static var AS_DUPLICATE_FILE:String = "AS_DUPLICATE_FILE";

        [Bindable]
        public var openType:String;

        public var fileTemplate:FileLocation;
        public var folderFileLocation:FileLocation;

        private var isClassFile:Boolean;

        override protected function onBrowseButton(event:MouseEvent):void
        {
            super.onBrowseButton(event);

            if (!projectSelectionWindow)
            {
                projectSelectionWindow.wrapperProject = UtilsCore.getProjectFromProjectFolder(tree.selectedItem as FileWrapper);
                PopUpManager.centerPopUp(projectSelectionWindow);
            }
        }

        override protected function onProjectSelectionChanged(event:NewFileEvent):void
        {
            super.onProjectSelectionChanged(event);

            txtDestination.text = wrapperBelongToProject.projectName;

            var timeoutValue:uint = setTimeout(function ():void {
                parseFolders();
                clearTimeout(timeoutValue);
            }, 100);
        }

        protected function onCreateButton(event:MouseEvent):void
        {
            // validation check for Enter key
            if (!isSubmitButtonEnabled) return;

            // validation 2
            var validateArr:Array = new Array(new ValidatorType(sValidator, txtDestination, "Source Package"));
            if (SimpleValidator.validate(validateArr))
            {
                if (openType == AS_XML)
                {
                    fileTemplate = ConstantsCoreVO.TEMPLATE_XML;
                } else if (openType == AS_PLAIN_TEXT)
                {
                    // test if filename.extension
                    if (txtFileName.text.indexOf(".") != -1)
                    {
                        var tmpNameSplit:Array = txtFileName.text.split(".");
                        if (tmpNameSplit[tmpNameSplit.length - 1] == "")
                        {
                            Alert.show("Trailing '.' not permitted for file name", "Error!");
                            return;
                        }
                    }

                    fileTemplate = ConstantsCoreVO.TEMPLATE_TEXT;
                }

                if (openType == AS_DUPLICATE_FILE)
                {
                    var tmpDuplicateEvent:DuplicateEvent = new DuplicateEvent(DuplicateEvent.EVENT_APPLY_DUPLICATE, wrapperOfFolderLocation, folderFileLocation);
                    tmpDuplicateEvent.fileName = txtFileName.text;
                    dispatchEvent(tmpDuplicateEvent);
                    updateDuplicationFormXmlFile(tmpDuplicateEvent.fileName);
                } else
                {
                    var tmpEvent:NewFileEvent = new NewFileEvent(NewFileEvent.EVENT_NEW_FILE, null, fileTemplate, wrapperOfFolderLocation);
                    tmpEvent.fileName = txtFileName.text;
                    dispatchEvent(tmpEvent);
                }

                doBeforeExit();
                super.closeThis();
            }
        }

        private function updateDuplicationFormXmlFile(fileName:String):void
        {
            var project:IVisualEditorProjectVO = wrapperBelongToProject as IVisualEditorProjectVO;
            if (project && project.isDominoVisualEditorProject)
            {
                if (lblExtension.text && lblExtension.text == ".form")
                {
                    var targetXmlFilePath:String = wrapperBelongToProject.projectFolder.nativePath + "/visualeditor-src/main/webapp/" + fileName + ".xml";
                    var destinationXmlFile:FileLocation = new FileLocation(targetXmlFilePath);
                    var sourceXmlFileName:String = txtFileName.prompt;
                    var sourceXmlFilePath:String = wrapperBelongToProject.projectFolder.nativePath + "/visualeditor-src/main/webapp/" + sourceXmlFileName + ".xml";
                    var sourceXmlFile:FileLocation = new FileLocation(sourceXmlFilePath);
                    if (destinationXmlFile.fileBridge.exists)
                    {
                        destinationXmlFile.fileBridge.deleteFile();
                    }
                    if (sourceXmlFile.fileBridge.exists)
                    {
                        sourceXmlFile.fileBridge.copyTo(destinationXmlFile, true);
                    }
                    //2.update title from form file
                    var model:IDEModel = IDEModel.getInstance();
                    var formXmlString:String = null;
                    if (model)
                    {
                        formXmlString = model.visualEditorCore.renameDominoFormFileSave(model.activeEditor, txtFileName.text);
                    }
                    if (formXmlString != null)
                    {
                        var destinationFormFile:FileLocation = new FileLocation(wrapperBelongToProject.projectFolder.nativePath + "/nsfs/nsf-moonshine/odp/Forms/" + fileName + ".form")
                        if (destinationFormFile.fileBridge.exists)
                        {
                            destinationFormFile.fileBridge.deleteFile();
                        }
                        destinationFormFile.fileBridge.save(formXmlString);
                    }
                }
            }
        }

        protected function parseFolders():void
        {
            tree.expandItem(wrapperBelongToProject.projectFolder, true);

            // 1. expand all items to our fileWrapper object
            // 2. select the fileWrapper object
            // 3. scroll to the fileWrapper object
            UtilsCore.wrappersFoundThroughFindingAWrapper = new Vector.<FileWrapper>();
            UtilsCore.findFileWrapperInDepth(wrapperOfFolderLocation, wrapperOfFolderLocation.nativePath, wrapperBelongToProject);
            var project:IVisualEditorProjectVO = wrapperBelongToProject as IVisualEditorProjectVO;
            
           
            if (project && project.isDominoVisualEditorProject)
            {
                if( lblExtension.text && lblExtension.text == ".form"){
                    wrapperOfFolderLocation = UtilsCore.findDominoFileWrapperInDepth(wrapperBelongToProject.projectFolder, wrapperBelongToProject.projectFolder.nativePath + "/nsfs/nsf-moonshine/odp/Forms");
                }else if(lblExtension.text && lblExtension.text == ".page"){
                    wrapperOfFolderLocation = UtilsCore.findDominoFileWrapperInDepth(wrapperBelongToProject.projectFolder, wrapperBelongToProject.projectFolder.nativePath + "/nsfs/nsf-moonshine/odp/Pages");
                }
               
            }
            tree.callLater(function ():void {
                var wrappers:Vector.<FileWrapper> = UtilsCore.wrappersFoundThroughFindingAWrapper;
                for (var j:int = 0; j < (wrappers.length - 1); j++)
                {
                    tree.expandItem(wrappers[j], true);
                }

                // selection
                tree.selectedItem = wrapperOfFolderLocation;

                // scroll-to
                tree.callLater(function ():void {
                    tree.scrollToIndex(tree.getItemIndex(wrapperOfFolderLocation));
                });
            });
        }

        override protected function onNameChanged(event:TextOperationEvent):void
        {
            super.onNameChanged(event);
        }

        protected function onTreeItemClicked(event:ListEvent):void
        {
            //we only allow domin form generate into Forms folder
            var project:IVisualEditorProjectVO = wrapperBelongToProject as IVisualEditorProjectVO;
            if (project && project.isDominoVisualEditorProject)
            {
                //we should only limit the form file
                if (lblExtension.text && lblExtension.text == ".form")
                {
                    //get the domino project form folder value:
                    var dominoFormFolder:String = wrapperBelongToProject.projectFolder.nativePath + "/nsfs/nsf-moonshine/odp/Forms";
                    var dominoSUbFormFolder:String = wrapperBelongToProject.projectFolder.nativePath + "/nsfs/nsf-moonshine/odp/SharedElements/Subforms";

                    var currentPath:String = UtilsCore.getPathStringByProjectPath(
                            Vector.<FileLocation>([new FileLocation(tree.selectedItem.projectReference.path)]),
                            tree.selectedItem.nativePath);
                    //btnCreate.enabled = false;
                    if (currentPath != dominoFormFolder && currentPath != dominoSUbFormFolder)
                    {
                        warningMessage = "Domino forms are only supported in the Forms folder or  sub form folder";
                        hgExistingWarning.visible = hgExistingWarning.includeInLayout = true;
                        tree.selectedItem = wrapperOfFolderLocation;
                    }
                }else if (lblExtension.text && lblExtension.text == ".page"){
                    var dominoPageFolder:String = wrapperBelongToProject.projectFolder.nativePath + "/nsfs/nsf-moonshine/odp/Pages"
                    var currenPagetPath:String = UtilsCore.getPathStringByProjectPath(
                            Vector.<FileLocation>([new FileLocation(tree.selectedItem.projectReference.path)]),
                            tree.selectedItem.nativePath);
                    if (currentPath != dominoFormFolder)
                    {
                        warningMessage = "Domino pages are only supported in the Pages folder.";
                        hgExistingWarning.visible = hgExistingWarning.includeInLayout = true;
                        tree.selectedItem = wrapperOfFolderLocation;
                    }
                }
            }
			else
            {
                txtDestination.text = UtilsCore.getPathStringByProjectPath(
                        Vector.<FileLocation>([new FileLocation(tree.selectedItem.projectReference.path)]),
                        tree.selectedItem.nativePath);

                // re-validate upon folder location change
                wrapperOfFolderLocation = tree.selectedItem as FileWrapper;
                if (!isClassFile)
                {
                    isDestinationValid = true;
                    isSubmitButtonEnabled = (modifiedName != null);
                }
				else
                {
                    isDestinationValid = UtilsCore.validatePathAgainstSources(wrapperBelongToProject, wrapperOfFolderLocation);
                    txtFileName.dispatchEvent(new TextOperationEvent(TextOperationEvent.CHANGE));
                }
            }
        }

        override protected function onNewFileCreationComplete(event:FlexEvent):void
        {
            super.onNewFileCreationComplete(event);

            minHeight = height;
            if (openType == AS_DUPLICATE_FILE)
            {
                title = "Duplicate File";
                lblName.text = "New File Name:";

                var extension:String;
                if (folderFileLocation.fileBridge.extension)
                {
                    extension = folderFileLocation.fileBridge.extension.toLowerCase();
                    createdFileExtension = lblExtension.text = "." + extension;
                } else
                {
                    createdFileExtension = lblExtension.text = "";
                }

                if (ConstantsCoreVO.READABLE_CLASS_FILES.indexOf(extension) != -1)
                {
                    txtFileName.restrict = "0-9A-Za-z_.";
                    isClassFile = true;
                }

                var nameOnly:Array = folderFileLocation.fileBridge.name.split(".");
                nameOnly.pop();
                txtFileName.prompt = nameOnly.join(".");

                if(extension&&extension=="view"){
                    txtFileName.prompt=TextUtil.toDominoViewNormalName(txtFileName.prompt);
                }


            }
            else if (openType == AS_XML)
            {
                title = "New XML File";
                createdFileExtension = lblExtension.text = ".xml";
            }
            else
            {
                title = "New File";
                createdFileExtension = "";
                if (!fileTemplate)
                {
                    txtFileName.text = ".txt";
                }
                else
                {
                    var tmpArr:Array = fileTemplate.fileBridge.name.split(".");
                    if (tmpArr.length >= 3) lblExtension.text = "." + tmpArr[tmpArr.length - 2];
                }
            }

            if (wrapperBelongToProject)
            {
                txtDestination.text = UtilsCore.getPathStringByProjectPath(
                        Vector.<FileLocation>([new FileLocation(wrapperBelongToProject.folderPath)]),
                        wrapperOfFolderLocation.nativePath);

                var project:IVisualEditorProjectVO = wrapperBelongToProject as IVisualEditorProjectVO;
                if (project && project.isDominoVisualEditorProject)
                {
                    if (lblExtension.text && lblExtension.text == ".form")
                    {
                        txtDestination.text = UtilsCore.getPathStringByProjectPath(
                                Vector.<FileLocation>([new FileLocation(wrapperBelongToProject.folderPath)]),
                                wrapperBelongToProject.projectFolder.nativePath + "/nsfs/nsf-moonshine/odp/Forms");
                    }

                    if (lblExtension.text && lblExtension.text == ".page")
                    {
                        txtDestination.text = UtilsCore.getPathStringByProjectPath(
                                Vector.<FileLocation>([new FileLocation(wrapperBelongToProject.folderPath)]),
                                wrapperBelongToProject.projectFolder.nativePath + "/nsfs/nsf-moonshine/odp/Pages");
                    }
                }

                txtFileName.setFocus();
            }

            isDestinationValid = true;
            tree.callLater(parseFolders);
            GlobalEventDispatcher.getInstance().dispatchEvent(new Event(MenuPlugin.CHANGE_MENU_MAC_DISABLE_STATE));
        }
        ]]>
	</fx:Script>

    <s:VGroup width="100%" height="100%">
        <s:Label text="Source Folder:"/>
        <view:PromptTextInput id="txtDestination"
                              prompt="Select Destination" editable="false" width="100%" styleName="textInput"/>
        <utils:CustomTreeFolders id="tree"
                                 width="100%" height="100%"
                                 dataProvider="{model.selectedprojectFolders}"
                                 color="0xEEEEEE"
                                 contentBackgroundColor="0x0"
                                 rollOverColor="0x393939"
                                 selectionColor="0xc165b8"
                                 alternatingItemColors="[0x444444, 0x4d4c4c]"
                                 verticalScrollBarStyleName="black"
                                 borderVisible="false"
                                 rowHeight="18"
                                 useRollOver="true"
                                 doubleClickEnabled="false"
                                 labelField="name"
                                 itemRenderer="actionScripts.ui.renderers.GenericTreeItemRenderer"
                                 itemClick="onTreeItemClicked(event)"/>
    </s:VGroup>
    <s:VGroup width="100%">
        <s:Label id="lblName" text="Name:"/>
        <s:Group width="100%">
            <view:PromptTextInput id="txtFileName"
                                  prompt="Name" width="100%" styleName="textInput" restrict="0-9A-Za-z._\-\/\\\ "
                                  change="onNameChanged(event)" enter="onCreateButton(null)" marginRight="50"/>
            <s:Label id="lblExtension"
                     styleName="textInputLabel" textAlign="right"
                     right="6" verticalCenter="0"
                     visible="{openType != AS_PLAIN_TEXT}"/>
        </s:Group>
        <s:HGroup id="hgExistingWarning"
                  width="100%" verticalAlign="middle"
                  visible="{!isSubmitButtonEnabled &amp;&amp; modifiedName != ''}"
                  includeInLayout="{!isSubmitButtonEnabled &amp;&amp; modifiedName != ''}">
            <s:Image source="@Embed('/elements/images/iconExclamationRed.png')"/>
            <s:Label text="{warningMessage}" width="100%"/>
        </s:HGroup>
    </s:VGroup>
    <newfile:controlBarContent>
        <s:Button id="btnCreate" label="Create"
                  styleName="darkButton"
                  click="onCreateButton(event)"
                  enabled="{isSubmitButtonEnabled}"/>
    </newfile:controlBarContent>
</newfile:NewFileBase>