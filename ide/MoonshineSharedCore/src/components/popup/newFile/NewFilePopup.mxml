<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 Prominic.NET, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// Author: Prominic.NET, Inc.
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
////////////////////////////////////////////////////////////////////////////////
-->
<newfile:NewFileBase xmlns:fx="http://ns.adobe.com/mxml/2009"
					 xmlns:s="library://ns.adobe.com/flex/spark"
					 xmlns:view="actionScripts.plugin.findreplace.view.*" xmlns:utils="actionScripts.utils.*"
				     xmlns:newfile="components.popup.newFile.*">
	<fx:Metadata>
		[Event(name="EVENT_NEW_FILE", type="actionScripts.events.NewFileEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
        import mx.controls.Alert;
        import mx.events.FlexEvent;
        import mx.events.ListEvent;
        import mx.managers.PopUpManager;

        import spark.events.TextOperationEvent;

        import actionScripts.events.DuplicateEvent;
        import actionScripts.events.GlobalEventDispatcher;
        import actionScripts.events.NewFileEvent;
        import actionScripts.extResources.com.validator.ValidatorType;
        import actionScripts.factory.FileLocation;
        import actionScripts.ui.menu.MenuPlugin;
        import actionScripts.utils.SimpleValidator;
        import actionScripts.utils.UtilsCore;
        import actionScripts.valueObjects.ConstantsCoreVO;
        import actionScripts.valueObjects.FileWrapper;

        [Bindable]
        public static var AS_PLAIN_TEXT:String = "AS_PLAIN_TEXT";

        public static var AS_XML:String = "AS_XML";
        public static var AS_CUSTOM:String = "AS_CUSTOM";
        public static var AS_DUPLICATE_FILE:String = "AS_DUPLICATE_FILE";

        [Bindable]
        public var openType:String;

        public var fileTemplate:FileLocation;
        public var folderFileLocation:FileLocation;

        override protected function onBrowseButton(event:MouseEvent):void
        {
            super.onBrowseButton(event);

            if(!projectSelectionWindow)
            {
                projectSelectionWindow.wrapperProject = UtilsCore.getProjectFromProjectFolder(tree.selectedItem as FileWrapper);
                PopUpManager.centerPopUp(projectSelectionWindow);
            }
        }

        override protected function onProjectSelectionChanged(event:NewFileEvent):void
        {
            super.onProjectSelectionChanged(event);

            txtDestination.text = wrapperBelongToProject.projectName;

            var timeoutValue:uint = setTimeout(function ():void
            {
                parseFolders();
                clearTimeout(timeoutValue);
            }, 100);
        }

        protected function onCreateButton(event:MouseEvent):void
        {
            // validation check for Enter key
            if(!isSubmitButtonEnabled) return;

            // validation 2
            var validateArr:Array = new Array(new ValidatorType(sValidator, txtDestination, "Source Package"));
            if(SimpleValidator.validate(validateArr))
            {
                if(openType == AS_XML)
                {
                    fileTemplate = ConstantsCoreVO.TEMPLATE_XML;
                } else if(openType == AS_PLAIN_TEXT)
                {
                    // test if filename.extension
                    if(txtFileName.text.indexOf(".") != -1)
                    {
                        var tmpNameSplit:Array = txtFileName.text.split(".");
                        if(tmpNameSplit[tmpNameSplit.length - 1] == "")
                        {
                            Alert.show("Trailing '.' not permitted for file name", "Error!");
                            return;
                        }
                    }

                    fileTemplate = ConstantsCoreVO.TEMPLATE_TEXT;
                }

                if(openType == AS_DUPLICATE_FILE)
                {
                    var tmpDuplicateEvent:DuplicateEvent = new DuplicateEvent(DuplicateEvent.EVENT_APPLY_DUPLICATE, wrapperOfFolderLocation, folderFileLocation);
                    tmpDuplicateEvent.fileName = txtFileName.text;
                    dispatchEvent(tmpDuplicateEvent);
                } else
                {
                    var tmpEvent:NewFileEvent = new NewFileEvent(NewFileEvent.EVENT_NEW_FILE, null, fileTemplate, wrapperOfFolderLocation);
                    tmpEvent.fileName = txtFileName.text;
                    dispatchEvent(tmpEvent);
                }

                doBeforeExit();
                super.closeThis();
            }
        }

        protected function parseFolders():void
        {
            tree.expandItem(wrapperBelongToProject.projectFolder, true);

            // 1. expand all items to our fileWrapper object
            // 2. select the fileWrapper object
            // 3. scroll to the fileWrapper object
            UtilsCore.wrappersFoundThroughFindingAWrapper = new Vector.<FileWrapper>();
            UtilsCore.findFileWrapperInDepth(wrapperOfFolderLocation, wrapperOfFolderLocation.nativePath, wrapperBelongToProject);
            tree.callLater(function ():void
            {
                var wrappers:Vector.<FileWrapper> = UtilsCore.wrappersFoundThroughFindingAWrapper;
                for (var j:int = 0; j < (wrappers.length - 1); j++)
                {
                    tree.expandItem(wrappers[j], true);
                }

                // selection
                tree.selectedItem = wrapperOfFolderLocation;
                // scroll-to
                tree.callLater(function ():void
                {
                    tree.scrollToIndex(tree.getItemIndex(wrapperOfFolderLocation));
                });
            });
        }

        override protected function onNameChanged(event:TextOperationEvent):void
        {
            super.onNameChanged(event);
        }

        protected function onTreeItemClicked(event:ListEvent):void
        {
            txtDestination.text = UtilsCore.getPackageReferenceByProjectPath(
                    Vector.<FileLocation>([new FileLocation(tree.selectedItem.projectReference.path)]),
                    tree.selectedItem.nativePath);

            // re-validate upon folder location change
            wrapperOfFolderLocation = tree.selectedItem as FileWrapper;
            onNameChanged(new TextOperationEvent(TextOperationEvent.CHANGE));
        }

        override protected function onNewFileCreationComplete(event:FlexEvent):void
        {
            super.onNewFileCreationComplete(event);

            minHeight = height;
            if(openType == AS_DUPLICATE_FILE)
            {
                title = "Duplicate File";
                lblName.text = "New File Name:";

                var extension:String;
                if(folderFileLocation.fileBridge.extension)
                {
                    extension = folderFileLocation.fileBridge.extension.toLowerCase();
                    createdFileExtension = lblExtension.text = "." + extension;
                } else
                {
					createdFileExtension = lblExtension.text = "";
                }

                if(extension == "as" || extension == "mxml")
                {
                    txtFileName.restrict = "0-9A-Za-z_.";
                }

                var nameOnly:Array = folderFileLocation.fileBridge.name.split(".");
                nameOnly.pop();
                txtFileName.prompt = nameOnly.join(".");
            } else if(openType == AS_XML)
            {
                title = "New XML File";
				createdFileExtension = lblExtension.text = ".xml";
            } else
            {
                title = "New File";
				createdFileExtension = "";
                if(!fileTemplate)
                {
					txtFileName.text = ".txt";
                } else
                {
                    var tmpArr:Array = fileTemplate.fileBridge.name.split(".");
                    if(tmpArr.length >= 3) lblExtension.text = "." + tmpArr[tmpArr.length - 2];
                }
            }

            if(wrapperBelongToProject)
            {
                txtDestination.text = UtilsCore.getPackageReferenceByProjectPath(
                        Vector.<FileLocation>([new FileLocation(wrapperBelongToProject.folderPath)]),
                        wrapperOfFolderLocation.nativePath);
                txtFileName.setFocus();
            }

			isDestinationValid = true;
            tree.callLater(parseFolders);
            GlobalEventDispatcher.getInstance().dispatchEvent(new Event(MenuPlugin.CHANGE_MENU_MAC_DISABLE_STATE));
        }
        ]]>
	</fx:Script>
	<s:VGroup width="100%">
		<s:Label text="Source Folder:"/>
		<view:PromptTextInput id="txtDestination"
							  prompt="Select Destination" editable="false" width="100%" styleName="textInput"/>
		<utils:CustomTreeFolders id="tree"
                                 width="100%" height="100%"
                                 dataProvider="{model.selectedprojectFolders}"
                                 color="0xEEEEEE"
                                 contentBackgroundColor="0x0"
                                 rollOverColor="0x393939"
                                 selectionColor="0xc165b8"
                                 alternatingItemColors="[0x444444, 0x4d4c4c]"
                                 verticalScrollBarStyleName="black"
                                 borderVisible="false"
                                 rowHeight="18"
                                 useRollOver="true"
                                 doubleClickEnabled="true"
                                 labelField="name"
                                 itemRenderer="actionScripts.ui.renderers.GenericTreeItemRenderer"
                                 itemClick="onTreeItemClicked(event)"/>
	</s:VGroup>
	<s:VGroup width="100%">
		<s:Label id="lblName" text="Name:"/>
		<s:Group width="100%">
			<view:PromptTextInput id="txtFileName"
								  prompt="Name" width="100%" styleName="textInput" restrict="0-9A-Za-z._\-/"
								  change="onNameChanged(event)" enter="onCreateButton(null)" marginRight="50"/>
			<s:Label id="lblExtension"
					 styleName="textInputLabel" textAlign="right"
					 right="6" verticalCenter="0"
					 visible="{openType != AS_PLAIN_TEXT}"/>
		</s:Group>
		<s:HGroup id="hgExistingWarning"
				  width="100%" verticalAlign="middle"
				  visible="{!isSubmitButtonEnabled &amp;&amp; modifiedName != ''}">
			<s:Image source="@Embed('/elements/images/iconExclamationRed.png')"/>
			<s:Label text="{warningMessage}" width="100%"/>
		</s:HGroup>
	</s:VGroup>
	<newfile:controlBarContent>
		<s:Button id="btnCreate" label="Create"
				  styleName="darkButton"
				  click="onCreateButton(event)"
				  enabled="{isSubmitButtonEnabled}"/>
	</newfile:controlBarContent>
</newfile:NewFileBase>