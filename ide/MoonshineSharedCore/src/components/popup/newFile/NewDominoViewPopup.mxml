<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 Prominic.NET, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// Author: Prominic.NET, Inc.
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
////////////////////////////////////////////////////////////////////////////////
-->
<newfile:NewFileBase xmlns:fx="http://ns.adobe.com/mxml/2009"
					 xmlns:s="library://ns.adobe.com/flex/spark"
					 title="New Domino View"
					 xmlns:forms="view.forms.*"
					 xmlns:view="actionScripts.plugin.findreplace.view.*" xmlns:utils="actionScripts.utils.*"
					 xmlns:newfile="components.popup.newFile.*" preinitialize="onPreinitialize(event)">
	<fx:Metadata>
		[Event(name="EVENT_NEW_FILE", type="actionScripts.events.NewFileEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import actionScripts.factory.FileLocation;
	
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
	
			import spark.events.TextOperationEvent;
	
			import actionScripts.events.GlobalEventDispatcher;
			import actionScripts.events.NewFileEvent;
			import actionScripts.extResources.com.validator.ValidatorType;
			import actionScripts.ui.menu.MenuPlugin;
			import actionScripts.utils.SimpleValidator;
			import actionScripts.utils.UtilsCore;
			import actionScripts.valueObjects.ConstantsCoreVO;
			import actionScripts.valueObjects.FileWrapper;





			private var isDominoValid:Boolean=false;
			private var dominoFolderList:FileWrapper=null;
			
			protected function onPreinitialize(event:FlexEvent):void
			{
				createdFileExtension = ".view";
				warningMessage = "";
				isDestinationValid=true;
			
				
			}

			

			override protected function onBrowseButton(event:MouseEvent):void
			{
				super.onBrowseButton(event);
	
				if(!projectSelectionWindow)
				{
					projectSelectionWindow.wrapperProject = UtilsCore.getProjectFromProjectFolder(tree.selectedItem as FileWrapper);
					PopUpManager.centerPopUp(projectSelectionWindow);
				}
			}
	
			override protected function onProjectSelectionChanged(event:NewFileEvent):void
			{
				
				super.onProjectSelectionChanged(event);
	
				txtDestination.text = wrapperBelongToProject.projectName;
	
				var timeoutValue:uint = setTimeout(function ():void
				{
					parseFolders();
					clearTimeout(timeoutValue);
				}, 100);
			}
	
			protected function onCreateButton(event:MouseEvent):void
			{
				// validation check for Enter key
				if(!isSubmitButtonEnabled) return;
	
				// validation 2
				var validateArr:Array = new Array(new ValidatorType(sValidator, txtDestination, "Source Package"));
				if(SimpleValidator.validate(validateArr))
				{
					var tmpEvent:NewFileEvent = new NewFileEvent(NewFileEvent.EVENT_NEW_FILE, null, ConstantsCoreVO.TEMPLATE_DOMINO_VIEW, wrapperOfFolderLocation);
					tmpEvent.fileName = txtFileName.text;
					dispatchEvent(tmpEvent);
	
					doBeforeExit();
					super.closeThis();
				}
			}
	
			protected function parseFolders():void
			{
				tree.expandItem(wrapperBelongToProject.projectFolder, true);
	
				// 1. expand all items to our fileWrapper object
				// 2. select the fileWrapper object
				// 3. scroll to the fileWrapper object
				
				
				//UtilsCore.wrappersFoundThroughFindingAWrapper = new Vector.<FileWrapper>();
				//UtilsCore.findFileWrapperInDepth(wrapperOfFolderLocation, wrapperOfFolderLocation.nativePath, wrapperBelongToProject);
				// since we're not updating children list at the time of
				// project creation dialog - we need to do that now do
				// display children list
				//wrapperBelongToProject.projectFolder.isRoot = wrapperBelongToProject.projectFolder.shallUpdateChildren = true;
				//wrapperBelongToProject.projectFolder.updateChildren();
               
				
				var wrappers:Vector.<FileWrapper> = UtilsCore.wrappersFoundThroughFindingAWrapper;


                treeScrollToCorrectPostion();
			}
	
			override protected function onNameChanged(event:TextOperationEvent):void
			{
				super.onDominoNameChanged(event);
			}
	
			protected function onTreeItemClicked(event:ListEvent):void
			{
				
                //get the domino project form folder value:
                var dominoFormFolder:String = wrapperBelongToProject.projectFolder.nativePath + model.fileCore.separator+"nsfs"+model.fileCore.separator+"nsf-moonshine"+model.fileCore.separator+"odp"+model.fileCore.separator+"Forms";
				var dominoSubFormFolder:String = wrapperBelongToProject.projectFolder.nativePath + model.fileCore.separator+"nsfs"+model.fileCore.separator+"nsf-moonshine"+model.fileCore.separator+"odp"+model.fileCore.separator+"SharedElements"+model.fileCore.separator+"Subforms";
                var currentPath:String = UtilsCore.getPathStringByProjectPath(
                        Vector.<FileLocation>([new FileLocation(tree.selectedItem.projectReference.path)]),
                        tree.selectedItem.nativePath);
                //btnCreate.enabled = false;
				 txtDestination.text = currentPath;
				
			
				 //wrapperBelongToProject.projectFolder.nativePath + "/nsfs/nsf-moonshine/odp/SharedElements/Subforms";
				
                if (!UtilsCore.endsWith(dominoFormFolder,currentPath) &&  !UtilsCore.endsWith(dominoSubFormFolder,currentPath))
                {
					
                    warningMessage = "Domino forms are only supported in the Forms folder.";
                   	isSubmitButtonEnabled=false;
					
                }else{
                 
					warningMessage=""; 
					isSubmitButtonEnabled=true;
					
					treeScrollToCorrectPostion();
                }
				wrapperOfFolderLocation = tree.selectedItem as FileWrapper;
				txtFileName.dispatchEvent(new TextOperationEvent(TextOperationEvent.CHANGE));
                
                
			}
	
			override protected function onNewFileCreationComplete(event:FlexEvent):void
			{

				super.onNewFileCreationComplete(event);
				
				 
                txtFileName.text="NewView";
				txtFileName.dispatchEvent(new TextOperationEvent(TextOperationEvent.CHANGE));
                
			
				minHeight = height;
				if (wrapperBelongToProject)
				{
					var wrappers:Vector.<FileWrapper> = UtilsCore.wrappersFoundThroughFindingAWrapper;
					
					if(wrappers.length<4){
						UtilsCore.wrappersFoundThroughFindingAWrapper = new Vector.<FileWrapper>();
						wrapperOfFolderLocation = UtilsCore.findDominoFileWrapperInDepth(wrapperBelongToProject.projectFolder, wrapperBelongToProject.projectFolder.nativePath +  model.fileCore.separator+"nsfs"+ model.fileCore.separator+"nsf-moonshine"+ model.fileCore.separator+"odp"+ model.fileCore.separator+"Forms");
					}
					
               
					
					txtDestination.text = UtilsCore.getPathStringByProjectPath(
							Vector.<FileLocation>([new FileLocation(wrapperBelongToProject.folderPath)]),
							wrapperOfFolderLocation.nativePath);
					txtFileName.setFocus();
				}
	

					
				isDominoValid=true;
				tree.callLater(parseFolders);
				GlobalEventDispatcher.getInstance().dispatchEvent(new Event(MenuPlugin.CHANGE_MENU_MAC_DISABLE_STATE));
			}


			private function treeScrollToCorrectPostion():void 
			{
				var wrappers:Vector.<FileWrapper> = UtilsCore.wrappersFoundThroughFindingAWrapper;


					tree.callLater(function ():void
					{
					
						
						for (var j:int = 0; j < (wrappers.length - 1); j++)
						{
							tree.expandItem(wrappers[j], true);
						}
		
						// selection
						tree.selectedItem = wrapperOfFolderLocation;
						// scroll-to
						tree.callLater(function ():void
						{
							tree.scrollToIndex(tree.getItemIndex(wrapperOfFolderLocation));
						});
					});
			}
		]]>
	</fx:Script>
	<s:VGroup width="100%" height="100%">
		<s:Label text="Source Folder:"/>
		<s:HGroup width="100%" verticalAlign="middle">
			<view:PromptTextInput id="txtDestination"
								  prompt="Select Destination" editable="false" width="100%" styleName="textInput"/>
			<s:Button label="Change"
					  styleName="lightButtonTight" width="70"
					  click="onBrowseButton(event)"
					  enabled="{model.projects.length > 1}"/>
		</s:HGroup>
		<utils:CustomTreeFolders id="tree"
                                 width="100%" height="100%"
                                 color="0xEEEEEE"
								 dataProvider="{wrapperBelongToProject.projectFolder}"
                                 contentBackgroundColor="0x0"
                                 rollOverColor="0x393939"
                                 selectionColor="0xc165b8"
                                 alternatingItemColors="[0x444444, 0x4d4c4c]"
                                 verticalScrollBarStyleName="black"
                                 borderVisible="false"
                                 rowHeight="18"
                                 useRollOver="true"
                                 doubleClickEnabled="true"
                                 labelField="name"
                                 itemRenderer="actionScripts.ui.renderers.GenericTreeItemRenderer"
                                 itemClick="onTreeItemClicked(event)"/>
	</s:VGroup>
	<s:VGroup width="100%">
		<s:Label text="Name:"/>
		<s:Group width="100%">
			<view:PromptTextInput id="txtFileName"
								  prompt="Name" width="100%" styleName="textInput"  restrict="a-zA-Z0-9_\-\/\\ "
								  change="onNameChanged(event)" enter="onCreateButton(null)" marginRight="50"/>
			<s:Label text=".view" styleName="textInputLabel" textAlign="right"
					 right="6" verticalCenter="0"/>
		</s:Group>
		<s:HGroup id="hgExistingWarning"
				  width="100%" verticalAlign="middle"
				  visible="{(!isSubmitButtonEnabled)&amp;&amp; isDominoValid}">
			<s:Image source="@Embed('/elements/images/iconExclamationRed.png')"/>
			<s:Label text="{warningMessage}" width="100%"/>
		</s:HGroup>

	</s:VGroup>

	<newfile:controlBarContent>
		<s:Button id="btnCreate" label="Create"
				  styleName="darkButton"
				  click="onCreateButton(event)"
				  enabled="{isSubmitButtonEnabled }"/>
	</newfile:controlBarContent>
</newfile:NewFileBase>