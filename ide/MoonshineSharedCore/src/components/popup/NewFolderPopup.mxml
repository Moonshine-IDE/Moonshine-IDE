<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 Prominic.NET, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// Author: Prominic.NET, Inc.
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
////////////////////////////////////////////////////////////////////////////////
-->
<newFile:NewFileBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   backgroundColor="0xf5f5f5" title="New Folder"
				   width="600" height="400" minWidth="400"
				   xmlns:view="actionScripts.plugin.findreplace.view.*" xmlns:utils="actionScripts.utils.*" xmlns:resizableTitleWindow="actionScripts.ui.resizableTitleWindow.*"
				   skinClass="components.skins.ResizableTitleWindowSkin" xmlns:newFile="components.popup.newFile.*">
	<fx:Metadata>
		[Event(name="EVENT_NEW_FOLDER", type="actionScripts.events.NewFileEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			import spark.events.TextOperationEvent;
			
			import actionScripts.events.GlobalEventDispatcher;
			import actionScripts.events.NewFileEvent;
			import actionScripts.factory.FileLocation;
			import actionScripts.ui.menu.MenuPlugin;
			import actionScripts.utils.UtilsCore;
			import actionScripts.valueObjects.FileWrapper;
			
			protected function onChangeButton(event:MouseEvent):void
			{
				// validation check for Enter key
				if (!isSubmitButtonEnabled) return;
				
				isSubmitButtonEnabled = false;
				
				var tmpEvent:NewFileEvent = new NewFileEvent(NewFileEvent.EVENT_NEW_FOLDER, null, null, wrapperOfFolderLocation);
				tmpEvent.isFolder = true;
				tmpEvent.ofProject = UtilsCore.getProjectFromProjectFolder(tree.selectedItem as FileWrapper);
				tmpEvent.fileName = nestedFoldersRequested ? nestedFoldersRequested.join(model.fileCore.separator) : modifiedName;
				dispatchEvent(tmpEvent);
				
				doBeforeExit();
				super.closeThis();
			}
			
			override protected function onNewFileCreationComplete(event:FlexEvent):void
			{
				minHeight = height;
				if (wrapperOfFolderLocation) 
				{
					txtFolderPath.text = UtilsCore.getPackageReferenceByProjectPath(Vector.<FileLocation>([new FileLocation(wrapperBelongToProject.folderPath)]), wrapperOfFolderLocation.nativePath);
				}
				
				tree.callLater(parseFolders);
				txtFileName.setFocus();
				isDestinationValid = true;
				
				GlobalEventDispatcher.getInstance().dispatchEvent(new Event(MenuPlugin.CHANGE_MENU_MAC_DISABLE_STATE));
			}
			
			protected function parseFolders():void
			{
				tree.expandItem(wrapperBelongToProject.projectFolder, true);
				
				// 1. expand all items to our fileWrapper object
				// 2. select the fileWrapper object
				// 3. scroll to the fileWrapper object
				UtilsCore.wrappersFoundThroughFindingAWrapper = new Vector.<FileWrapper>();
				UtilsCore.findFileWrapperInDepth(wrapperOfFolderLocation, wrapperOfFolderLocation.nativePath, wrapperBelongToProject);
				tree.callLater(function():void
				{
					var wrappers:Vector.<FileWrapper> = UtilsCore.wrappersFoundThroughFindingAWrapper;
					for (var j:int=0; j < (wrappers.length - 1); j++)
					{
						tree.expandItem(wrappers[j], true);
					}
					
					// selection
					tree.selectedItem = wrapperOfFolderLocation;
					// scroll-to
					tree.callLater(function():void
					{
						tree.scrollToIndex(tree.getItemIndex(wrapperOfFolderLocation));
					});
				});
			}
			
			override protected function onNameChanged(event:TextOperationEvent):void
			{
				super.onNameChanged(event);
			}
			
			protected function onTreeItemClicked(event:ListEvent):void
			{
				txtFolderPath.text = UtilsCore.getPackageReferenceByProjectPath(
						Vector.<FileLocation>([new FileLocation(tree.selectedItem.projectReference.path)]),
						tree.selectedItem.nativePath);
				
				// re-validate upon folder location change
				wrapperOfFolderLocation = tree.selectedItem as FileWrapper;
				onNameChanged(new TextOperationEvent(TextOperationEvent.CHANGE));
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
	</fx:Declarations>
	
	<s:VGroup height="100%" width="100%" 
			  gap="10" paddingLeft="12" paddingBottom="3" paddingTop="9" paddingRight="13"
			  horizontalAlign="center">
		<s:VGroup width="100%" height="100%">
			<s:Label text="Select the Parent Folder:"/>
			<view:PromptTextInput id="txtFolderPath"
								  width="100%" editable="false" styleName="textInput"/>
			<utils:CustomTreeFolders id="tree"
                                     width="100%" height="100%"
                                     dataProvider="{model.selectedprojectFolders}"
                                     color="0xEEEEEE"
                                     contentBackgroundColor="0x0"
                                     rollOverColor="0x393939"
                                     selectionColor="0xc165b8"
                                     alternatingItemColors="[0x444444, 0x4d4c4c]"
                                     verticalScrollBarStyleName="black"
                                     borderVisible="false"
                                     rowHeight="18"
                                     useRollOver="true"
                                     doubleClickEnabled="true"
                                     labelField="name"
                                     itemRenderer="actionScripts.ui.renderers.FTETreeItemRenderer"
                                     itemClick="onTreeItemClicked(event)"/>
			<s:Label text="Folder Name:"/>
			<view:PromptTextInput id="txtFileName"
								  prompt="Name" width="100%" styleName="textInput" restrict="0-9A-Za-z_/"
								  change="onNameChanged(event)" enter="onChangeButton(null)"/>
			<s:HGroup id="hgExistingWarning" 
					  width="100%" verticalAlign="middle"
					  visible="{!isSubmitButtonEnabled &amp;&amp; modifiedName != ''}">
				<s:Image source="@Embed('/elements/images/iconExclamationRed.png')"/>
				<s:Label text="{modifiedName + ' is already exists.'}" width="100%"/>
			</s:HGroup>
		</s:VGroup>
	</s:VGroup>
	
	<newFile:controlBarContent>
		<s:Button label="Create"
				  styleName="darkButton"
				  click="onChangeButton(event)"
				  enabled="{isSubmitButtonEnabled}"/>
	</newFile:controlBarContent>
</newFile:NewFileBase>