<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 Prominic.NET, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// Author: Prominic.NET, Inc.
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
////////////////////////////////////////////////////////////////////////////////
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:ui="actionScripts.ui.*"
		 width="100%" height="100%"
		 preinitialize="onPreInit()" initialize="onInit()" addedToStage="onAddedToStage()">
	<fx:Script>
		<![CDATA[
		import mx.events.FlexEvent;
		
		import actionScripts.factory.BridgeFactory;
		import actionScripts.locator.IDEController;
		import actionScripts.locator.IDEModel;
		import actionScripts.plugin.PluginManager;
		import actionScripts.valueObjects.ConstantsCoreVO;
		import actionScripts.valueObjects.Settings;
			
			//--------------------------------------------------------------------------
			//
			//  PRIVATE VARIABLES
			//
			//--------------------------------------------------------------------------
			
			private var controller: IDEController;
			
			//--------------------------------------------------------------------------
			//
			//  PRIVATE API
			//
			//--------------------------------------------------------------------------
			
			/**
			 * On pre-initialization
			 */
			private function onPreInit(): void
			{
				var ideModel:IDEModel = IDEModel.getInstance();

				ideModel.fileCore = BridgeFactory.getFileInstance();
				ideModel.contextMenuCore = BridgeFactory.getContextMenuInstance();
				ideModel.languageServerCore = BridgeFactory.getLanguageServerCoreInstance();
				ideModel.flexCore = BridgeFactory.getFlexCoreInstance();
				ideModel.osxBookmarkerCore = BridgeFactory.getOSXBookmarkerCoreInstance();
				ideModel.aboutCore = BridgeFactory.getAboutInstance();
				ideModel.visualEditorCore = BridgeFactory.getVisualEditorInstance();
				ideModel.clipboardCore = BridgeFactory.getClipboardInstance();
				ideModel.javaCore = BridgeFactory.getJavaInstance();
				ideModel.groovyCore = BridgeFactory.getGroovyInstance();
				ideModel.haxeCore = BridgeFactory.getHaxeInstance();
				ideModel.ondiskCore = BridgeFactory.getOnDiskInstance();
			}
			
			/**
			 * On initialization
			 */
			private function onInit():void
			{
				// Initialize settings
				if (Settings.os == "win") Settings.keyboard.wordModifierKey = "ctrlKey";
				if (Settings.os == "mac") Settings.keyboard.copyModifierKey = "commandKey";
				
				IDEModel.getInstance().mainView = mainView;
				controller = new IDEController();
			}
			
			/**
			 * On added to stage
			 */
			private function onAddedToStage():void
			{
				ConstantsCoreVO.generate();
				
				var pluginManager:PluginManager = new PluginManager();
				pluginManager.setupPlugins();
			}
			
			/**
			 * On mainview creation completes
			 */
			protected function onMainViewCompletes(event:FlexEvent):void
			{
				if (!ConstantsCoreVO.IS_AIR) mainView.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, onKeyFocusChange);
			}
			
			private function onKeyFocusChange(event:FocusEvent):void
			{
				if (event.keyCode == Keyboard.TAB) event.preventDefault();
			}
			
		]]>
	</fx:Script>
	
	<ui:MainView id="mainView" x="0" y="0" width="100%" height="100%"
				 creationComplete="onMainViewCompletes(event)"/>
	
	<s:BorderContainer cornerRadius="5"
					   borderVisible="false"
					   horizontalCenter="0" verticalCenter="0"
					   includeInLayout="{ConstantsCoreVO.IS_APPLICATION_CLOSING}" visible="{ConstantsCoreVO.IS_APPLICATION_CLOSING}">
		<s:backgroundFill>
			<s:SolidColor color="0x4d4c4c"/>
		</s:backgroundFill>
		<s:Label text="Preparing to close... Please wait"
				 paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10"
				 styleName="textInputLabel" color="0xffea00"/>
	</s:BorderContainer>
</s:Group>