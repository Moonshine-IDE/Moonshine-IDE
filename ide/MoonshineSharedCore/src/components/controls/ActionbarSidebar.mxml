<?xml version="1.0"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
          xmlns:s="library://ns.adobe.com/flex/spark"
            backgroundColor="0x424242" verticalGap="0"
            creationComplete="onCreationCompletes()" preinitialize="onPreInitialize()">
    <mx:Script>
        <![CDATA[
        import actionScripts.events.GlobalEventDispatcher;
        import actionScripts.events.ProjectEvent;
        import actionScripts.factory.FileLocation;
        import actionScripts.locator.IDEModel;
        import actionScripts.ui.actionbar.vo.ActionItemTypes;
        import actionScripts.ui.actionbar.vo.ActionItemVO;
        import actionScripts.valueObjects.ConstantsCoreVO;
        import actionScripts.valueObjects.ProjectVO;

        private var model:IDEModel = IDEModel.getInstance();
        private var dispatcher:GlobalEventDispatcher = GlobalEventDispatcher.getInstance();
        private var actionsByID:Dictionary = new Dictionary();
        private var actionsByExtension:Dictionary = new Dictionary();
        private var activeProject:ProjectVO;
        private var projectActionItems:Vector.<ActionItemVO>;

        private function onPreInitialize():void
        {
            if (ConstantsCoreVO.IS_AIR)
            {
                var localActions:FileLocation = this.model.fileCore.resolveApplicationDirectoryPath("elements/data/moonshine-actions.xml");
                var localActionsOutput:String = localActions.fileBridge.read() as String;
                this.parseActions(new XML(localActionsOutput));
            }
        }

        private function onCreationCompletes():void
        {
            this.dispatcher.addEventListener(ProjectEvent.ACTIVE_PROJECT_CHANGED, onProjectSelectionChangedInSidebar, false, 0, true);
        }

        private function onProjectSelectionChangedInSidebar(event:ProjectEvent):void
        {
            if (!event.project) return;
            if (this.activeProject == event.project) return;

            this.activeProject = event.project;
            this.lblProjectName.text = this.activeProject.name;
            projectActionItems = model.projectCore.getActionItems(activeProject);

            var projectFileExtension:String = this.activeProject.projectFile.fileBridge.extension;
            if (this.actionsByExtension[projectFileExtension] != undefined)
            {
                this.hideActionButtons();
                var ids:Array = this.actionsByExtension[projectFileExtension];
                var typeById:String;
                for each(var id:String in ids)
                {
                    typeById = this.actionsByID[id];
                    switch (typeById)
                    {
                        case ActionItemTypes.BUILD:
                            this.btnBuild.includeInLayout = this.btnBuild.visible = true;
                            break;
                        case ActionItemTypes.RUN:
                            this.btnRun.includeInLayout = this.btnRun.visible = true;
                            break;
                        case ActionItemTypes.DEBUG:
                            this.btnDebug.includeInLayout = this.btnDebug.visible = true;
                            break;
                    }
                }

                // make workflow option visible irrespective
                // of project types
                this.btnWorkdflow.includeInLayout = this.btnWorkdflow.visible = true;
            }
        }

        private function hideActionButtons():void
        {
            for (var i:int; i < this.hgActionButtons.numElements; i++)
            {
                this.hgActionButtons.getElementAt(i).includeInLayout =
                        this.hgActionButtons.getElementAt(i).visible = false;
            }
        }

        private function parseActions(value:XML):void
        {
            var type:XML;
            for each (type in value.actionTypes.type)
            {
                this.actionsByID[String(type.@id)] = String(type.@type);
            }
            for each (type in value.configTypes.type)
            {
                var ids:Array = String(type.@id).split(",");
                for each (var id:String in ids)
                {
                    this.actionsByExtension[id] = String(type.@actions).split(",");
                }
            }
        }

        private function onProjectBuild(event:MouseEvent):void
        {
            if (!projectActionItems) return;

            for each (var action:ActionItemVO in projectActionItems)
            {
                if (action.type == ActionItemTypes.BUILD)
                {
                    dispatcher.dispatchEvent(new Event(action.event));
                    break;
                }
            }
        }
        ]]>
    </mx:Script>
    <s:HGroup width="100%" height="32" padding="2" verticalAlign="middle">
        <s:Label id="lblProjectName"
                 width="100%" showTruncationTip="true" paddingLeft="8"
                 fontSize="10" fontWeight="bold" color="0xFFFFCC"/>
        <s:HGroup id="hgActionButtons" paddingRight="4">
            <s:Button id="btnBuild" styleName="sidebarActionButton" toolTip="Build" width="22" height="22" includeInLayout="false" visible="false"
                      click="onProjectBuild(event)"/>
            <s:Button id="btnRun" styleName="sidebarActionButton" toolTip="Play" width="22" height="22" includeInLayout="false" visible="false"/>
            <!--s:Button id="btnStop" styleName="sidebarActionButton" icon="/elements/images/icoStop.png" toolTip="Stop" width="22" height="22" includeInLayout="false" visible="false"/-->
            <s:Button id="btnDebug" styleName="sidebarActionButton" toolTip="Debug" width="22" height="22" includeInLayout="false" visible="false"/>
            <s:Button id="btnWorkdflow" styleName="sidebarActionButton" toolTip="Workflow" width="22" height="22" includeInLayout="false" visible="false"/>
        </s:HGroup>
    </s:HGroup>
    <mx:HRule width="100%" strokeWidth="1" strokeColor="0x000"/>
</mx:VBox>