<?xml version="1.0"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
          xmlns:s="library://ns.adobe.com/flex/spark"
            backgroundColor="0x424242" verticalGap="0"
            creationComplete="onCreationCompletes()">
    <mx:Script>
        <![CDATA[
        import actionScripts.events.GlobalEventDispatcher;
        import actionScripts.events.ProjectEvent;
        import actionScripts.locator.IDEModel;
        import actionScripts.ui.actionbar.vo.ActionItemTypes;
        import actionScripts.ui.actionbar.vo.ActionItemVO;
        import actionScripts.valueObjects.ProjectVO;

        import spark.components.Button;

        [Embed(source="/elements/images/icoStop.png")]
        public var imageBuild:Class;
        [Embed(source="/elements/images/debug-play-icon.png")]
        public var imageRun:Class;
        [Embed(source="/elements/images/debug-play-icon.png")]
        public var imageDebug:Class;
        [Embed(source="/elements/images/icoStop.png")]
        public var imageExport:Class;
        [Embed(source="/elements/images/icoStop.png")]
        public var imageWorkflow:Class;

        private var model:IDEModel = IDEModel.getInstance();
        private var dispatcher:GlobalEventDispatcher = GlobalEventDispatcher.getInstance();
        private var activeProject:ProjectVO;
        private var projectActionItems:Vector.<ActionItemVO>;

        private function onCreationCompletes():void
        {
            this.dispatcher.addEventListener(ProjectEvent.ACTIVE_PROJECT_CHANGED, onProjectSelectionChangedInSidebar, false, 0, true);
        }

        private function onProjectSelectionChangedInSidebar(event:ProjectEvent):void
        {
            if (!event.project) return;
            if (this.activeProject == event.project) return;

            projectActionItems = model.projectCore.getActionItems(event.project);
            if (!projectActionItems) return;

            this.activeProject = event.project;
            this.lblProjectName.text = this.activeProject.name;
            this.removeActionButtons();

            for each (var action:ActionItemVO in projectActionItems)
            {
                var tmpButton:Button;
                switch (action.type)
                {
                    case ActionItemTypes.BUILD:
                        tmpButton = getNewActionButton(action, imageBuild);
                        break;
                    case ActionItemTypes.RUN:
                        tmpButton = getNewActionButton(action, imageRun);
                        break;
                    case ActionItemTypes.DEBUG:
                        tmpButton = getNewActionButton(action, imageDebug);
                        break;
                    case ActionItemTypes.EXPORT:
                        tmpButton = getNewActionButton(action, imageExport);
                        break;
                }

                this.hgActionButtons.addElement(tmpButton);
            }

            // make workflow option visible irrespective
            // of project types
            //this.btnWorkdflow.includeInLayout = this.btnWorkdflow.visible = true;
        }

        private function removeActionButtons():void
        {
            // remove listeners
            for (var i:int; i < this.hgActionButtons.numElements; i++)
            {
                var tmpButton:Button = this.hgActionButtons.getElementAt(i) as Button
                tmpButton.removeEventListener(MouseEvent.CLICK, onActionItemClick);
            }
            // remove all
            hgActionButtons.removeAllElements();
        }

        private function onActionItemClick(event:MouseEvent):void
        {
            if (!projectActionItems) return;

            var tmpButton:Button = event.target as Button;
            for each (var action:ActionItemVO in projectActionItems)
            {
                if (action.type == tmpButton.label)
                {
                    dispatcher.dispatchEvent(new Event(action.event));
                    break;
                }
            }
        }

        private function getNewActionButton(action:ActionItemVO, icon:Class):Button
        {
            var tmpButton:Button = new Button();
            tmpButton.width = tmpButton.height = 22;
            tmpButton.styleName = "sidebarActionButton";
            tmpButton.setStyle("icon", icon);
            tmpButton.label = action.type;
            tmpButton.toolTip = action.title;
            tmpButton.addEventListener(MouseEvent.CLICK, onActionItemClick, false, 0, true);

            return tmpButton;
        }
        ]]>
    </mx:Script>
    <s:HGroup width="100%" height="32" padding="2" verticalAlign="middle">
        <s:Label id="lblProjectName"
                 width="100%" showTruncationTip="true" paddingLeft="8"
                 fontSize="10" fontWeight="bold" color="0xFFFFCC"/>
        <s:HGroup id="hgActionButtons" paddingRight="4"/>
        <s:Button styleName="sidebarActionButton" width="22" height="22"
                  label="{ActionItemTypes.WORKFLOW}"
                  click="onActionItemClick(event)"/>
    </s:HGroup>
    <mx:HRule width="100%" strokeWidth="1" strokeColor="0x000"/>
</mx:VBox>