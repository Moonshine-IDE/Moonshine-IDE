(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/server.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./language/TibboBasic/lib/TibboBasicLexer.js":
/*!****************************************************!*\
  !*** ./language/TibboBasic/lib/TibboBasicLexer.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Generated from /Users/jimmyhu/Projects/tibbo-basic/server/language/TibboBasic/TibboBasicLexer.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = __webpack_require__(/*! antlr4/index */ "./node_modules/antlr4/index.js");



var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0002\u0094\u06c2\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\u0004\u0002",
    "\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t\u0004\u0004\u0005\t\u0005",
    "\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004\b\t\b\u0004\t\t\t\u0004",
    "\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e",
    "\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004\u0011\t\u0011\u0004\u0012",
    "\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t\u0014\u0004\u0015\t\u0015",
    "\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004\u0018\t\u0018\u0004\u0019",
    "\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t\u001b\u0004\u001c\t\u001c",
    "\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004\u001f\t\u001f\u0004 ",
    "\t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004",
    "\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004",
    ".\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u00043\t3\u00044\t4\u0004",
    "5\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004",
    "<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004",
    "C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004",
    "J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004",
    "Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004",
    "X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004",
    "_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004",
    "f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004",
    "m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004",
    "t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004",
    "{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004\u007f\t\u007f\u0004\u0080\t",
    "\u0080\u0004\u0081\t\u0081\u0004\u0082\t\u0082\u0004\u0083\t\u0083\u0004",
    "\u0084\t\u0084\u0004\u0085\t\u0085\u0004\u0086\t\u0086\u0004\u0087\t",
    "\u0087\u0004\u0088\t\u0088\u0004\u0089\t\u0089\u0004\u008a\t\u008a\u0004",
    "\u008b\t\u008b\u0004\u008c\t\u008c\u0004\u008d\t\u008d\u0004\u008e\t",
    "\u008e\u0004\u008f\t\u008f\u0004\u0090\t\u0090\u0004\u0091\t\u0091\u0004",
    "\u0092\t\u0092\u0004\u0093\t\u0093\u0004\u0094\t\u0094\u0004\u0095\t",
    "\u0095\u0004\u0096\t\u0096\u0004\u0097\t\u0097\u0004\u0098\t\u0098\u0004",
    "\u0099\t\u0099\u0004\u009a\t\u009a\u0004\u009b\t\u009b\u0004\u009c\t",
    "\u009c\u0004\u009d\t\u009d\u0004\u009e\t\u009e\u0004\u009f\t\u009f\u0004",
    "\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004\u00a2\t\u00a2\u0004\u00a3\t",
    "\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t\u00a5\u0004\u00a6\t\u00a6\u0004",
    "\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004\u00a9\t\u00a9\u0004\u00aa\t",
    "\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t\u00ac\u0004\u00ad\t\u00ad\u0004",
    "\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004\u00b0\t\u00b0\u0004\u00b1\t",
    "\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t\u00b3\u0004\u00b4\t\u00b4\u0004",
    "\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004\u00b7\t\u00b7\u0004\u00b8\t",
    "\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t\u00ba\u0004\u00bb\t\u00bb\u0004",
    "\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004\u00be\t\u00be\u0004\u00bf\t",
    "\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t\u00c1\u0004\u00c2\t\u00c2\u0004",
    "\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0004\u00c5\t\u00c5\u0004\u00c6\t",
    "\u00c6\u0004\u00c7\t\u00c7\u0004\u00c8\t\u00c8\u0004\u00c9\t\u00c9\u0004",
    "\u00ca\t\u00ca\u0004\u00cb\t\u00cb\u0004\u00cc\t\u00cc\u0004\u00cd\t",
    "\u00cd\u0004\u00ce\t\u00ce\u0004\u00cf\t\u00cf\u0004\u00d0\t\u00d0\u0004",
    "\u00d1\t\u00d1\u0004\u00d2\t\u00d2\u0004\u00d3\t\u00d3\u0004\u00d4\t",
    "\u00d4\u0004\u00d5\t\u00d5\u0004\u00d6\t\u00d6\u0004\u00d7\t\u00d7\u0004",
    "\u00d8\t\u00d8\u0004\u00d9\t\u00d9\u0004\u00da\t\u00da\u0004\u00db\t",
    "\u00db\u0004\u00dc\t\u00dc\u0004\u00dd\t\u00dd\u0004\u00de\t\u00de\u0004",
    "\u00df\t\u00df\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003)\u0003)\u0003)\u0003",
    ")\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "+\u0003+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003,\u0003,\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00032\u00032\u00032\u00032\u00032\u0003",
    "2\u00032\u00032\u00033\u00033\u00033\u00033\u00033\u00034\u00034\u0003",
    "4\u00034\u00034\u00035\u00035\u00035\u00035\u00036\u00036\u00036\u0003",
    "6\u00036\u00037\u00037\u00037\u00037\u00038\u00038\u00038\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003:\u0003:\u0003",
    ":\u0003:\u0003:\u0003:\u0003:\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003<\u0003<\u0003<\u0003<\u0003=\u0003=\u0003=\u0003=\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003?\u0003?\u0003?\u0003?\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003A\u0003A\u0003A\u0003",
    "A\u0003A\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003C\u0003",
    "C\u0003C\u0003C\u0003D\u0003D\u0003D\u0003D\u0003D\u0003E\u0003E\u0003",
    "E\u0003F\u0003F\u0003F\u0003F\u0003F\u0003G\u0003G\u0003G\u0003G\u0003",
    "G\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003I\u0003I\u0003I\u0003",
    "I\u0003I\u0003I\u0003J\u0003J\u0003J\u0003J\u0003J\u0003K\u0003K\u0003",
    "K\u0003K\u0003K\u0003K\u0003L\u0003L\u0003L\u0003L\u0003L\u0003M\u0003",
    "M\u0003M\u0003M\u0003N\u0003N\u0003N\u0003N\u0003N\u0003O\u0003O\u0003",
    "O\u0003O\u0007O\u03bb\nO\fO\u000eO\u03be\u000bO\u0003O\u0003O\u0003",
    "P\u0003P\u0003P\u0003P\u0007P\u03c6\nP\fP\u000eP\u03c9\u000bP\u0003",
    "P\u0003P\u0003Q\u0003Q\u0003Q\u0006Q\u03d0\nQ\rQ\u000eQ\u03d1\u0003",
    "R\u0003R\u0003R\u0006R\u03d7\nR\rR\u000eR\u03d8\u0003S\u0006S\u03dc",
    "\nS\rS\u000eS\u03dd\u0003T\u0003T\u0003U\u0003U\u0003V\u0003V\u0003",
    "V\u0003W\u0003W\u0003X\u0003X\u0003X\u0003Y\u0003Y\u0003Z\u0003Z\u0003",
    "[\u0003[\u0003\\\u0003\\\u0003]\u0003]\u0003]\u0003^\u0003^\u0003_\u0003",
    "_\u0003`\u0003`\u0003a\u0003a\u0003b\u0003b\u0003c\u0003c\u0003d\u0005",
    "d\u0404\nd\u0003d\u0003d\u0003d\u0003d\u0003e\u0003e\u0007e\u040c\n",
    "e\fe\u000ee\u040f\u000be\u0003e\u0003e\u0003f\u0003f\u0003g\u0003g\u0003",
    "h\u0003h\u0003i\u0003i\u0003j\u0003j\u0003k\u0003k\u0003l\u0003l\u0003",
    "m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003n\u0006n\u042a",
    "\nn\rn\u000en\u042b\u0003n\u0003n\u0003o\u0003o\u0007o\u0432\no\fo\u000e",
    "o\u0435\u000bo\u0003p\u0003p\u0003q\u0003q\u0003r\u0003r\u0003s\u0003",
    "s\u0003t\u0003t\u0003u\u0003u\u0003v\u0003v\u0003w\u0003w\u0003x\u0003",
    "x\u0003y\u0003y\u0003z\u0003z\u0003{\u0003{\u0003|\u0003|\u0003}\u0003",
    "}\u0003~\u0003~\u0003\u007f\u0003\u007f\u0003\u0080\u0003\u0080\u0003",
    "\u0081\u0003\u0081\u0003\u0082\u0003\u0082\u0003\u0083\u0003\u0083\u0003",
    "\u0084\u0003\u0084\u0003\u0085\u0003\u0085\u0003\u0086\u0003\u0086\u0003",
    "\u0087\u0003\u0087\u0003\u0088\u0003\u0088\u0003\u0089\u0003\u0089\u0003",
    "\u008a\u0003\u008a\u0003\u008b\u0003\u008b\u0003\u008c\u0003\u008c\u0003",
    "\u008d\u0003\u008d\u0006\u008d\u0473\n\u008d\r\u008d\u000e\u008d\u0474",
    "\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008e\u0003\u008e\u0006\u008e",
    "\u047c\n\u008e\r\u008e\u000e\u008e\u047d\u0003\u008e\u0003\u008e\u0003",
    "\u008e\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003",
    "\u008f\u0003\u008f\u0006\u008f\u048a\n\u008f\r\u008f\u000e\u008f\u048b",
    "\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u0090\u0003\u0090\u0003\u0090",
    "\u0003\u0090\u0003\u0090\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091",
    "\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0092\u0003\u0092\u0003\u0092",
    "\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0093\u0003\u0093",
    "\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093",
    "\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094",
    "\u0003\u0094\u0003\u0094\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095",
    "\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0096",
    "\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096",
    "\u0003\u0096\u0003\u0096\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097",
    "\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0098",
    "\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0099\u0003\u0099\u0003\u0099",
    "\u0003\u0099\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009b",
    "\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009c\u0003\u009c\u0003\u009c",
    "\u0003\u009c\u0003\u009c\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d",
    "\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009f\u0003\u009f",
    "\u0003\u009f\u0003\u009f\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0",
    "\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a2",
    "\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a3\u0006\u00a3",
    "\u04ff\n\u00a3\r\u00a3\u000e\u00a3\u0500\u0003\u00a3\u0003\u00a3\u0003",
    "\u00a3\u0003\u00a4\u0003\u00a4\u0007\u00a4\u0508\n\u00a4\f\u00a4\u000e",
    "\u00a4\u050b\u000b\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a5\u0006\u00a5",
    "\u0510\n\u00a5\r\u00a5\u000e\u00a5\u0511\u0003\u00a5\u0003\u00a5\u0003",
    "\u00a6\u0006\u00a6\u0517\n\u00a6\r\u00a6\u000e\u00a6\u0518\u0003\u00a6",
    "\u0003\u00a6\u0007\u00a6\u051d\n\u00a6\f\u00a6\u000e\u00a6\u0520\u000b",
    "\u00a6\u0003\u00a6\u0003\u00a6\u0006\u00a6\u0524\n\u00a6\r\u00a6\u000e",
    "\u00a6\u0525\u0005\u00a6\u0528\n\u00a6\u0003\u00a6\u0003\u00a6\u0003",
    "\u00a7\u0005\u00a7\u052d\n\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7",
    "\u0003\u00a7\u0003\u00a7\u0003\u00a8\u0003\u00a8\u0007\u00a8\u0536\n",
    "\u00a8\f\u00a8\u000e\u00a8\u0539\u000b\u00a8\u0003\u00a8\u0003\u00a8",
    "\u0003\u00a9\u0003\u00a9\u0005\u00a9\u053f\n\u00a9\u0003\u00a9\u0003",
    "\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00aa\u0003\u00aa\u0007\u00aa\u0547",
    "\n\u00aa\f\u00aa\u000e\u00aa\u054a\u000b\u00aa\u0003\u00aa\u0003\u00aa",
    "\u0003\u00aa\u0007\u00aa\u054f\n\u00aa\f\u00aa\u000e\u00aa\u0552\u000b",
    "\u00aa\u0003\u00aa\u0005\u00aa\u0555\n\u00aa\u0003\u00aa\u0003\u00aa",
    "\u0003\u00aa\u0003\u00aa\u0003\u00ab\u0003\u00ab\u0005\u00ab\u055d\n",
    "\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ac\u0003",
    "\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ad\u0005",
    "\u00ad\u056a\n\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad",
    "\u0003\u00ad\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0007\u00ae",
    "\u0575\n\u00ae\f\u00ae\u000e\u00ae\u0578\u000b\u00ae\u0003\u00ae\u0003",
    "\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00af\u0003\u00af\u0003",
    "\u00af\u0003\u00af\u0007\u00af\u0583\n\u00af\f\u00af\u000e\u00af\u0586",
    "\u000b\u00af\u0003\u00af\u0003\u00af\u0003\u00b0\u0003\u00b0\u0003\u00b0",
    "\u0003\u00b0\u0003\u00b0\u0003\u00b1\u0006\u00b1\u0590\n\u00b1\r\u00b1",
    "\u000e\u00b1\u0591\u0003\u00b1\u0003\u00b1\u0003\u00b2\u0003\u00b2\u0003",
    "\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b3\u0003\u00b3\u0003",
    "\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b4\u0003",
    "\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b5\u0003",
    "\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003",
    "\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003",
    "\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003",
    "\u00b6\u0003\u00b6\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003",
    "\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003",
    "\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003",
    "\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003",
    "\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b9\u0003",
    "\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003",
    "\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003",
    "\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003",
    "\u00ba\u0003\u00ba\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0003",
    "\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003",
    "\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00be\u0003\u00be\u0003\u00be\u0003",
    "\u00be\u0003\u00be\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003",
    "\u00bf\u0003\u00bf\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003",
    "\u00c0\u0003\u00c0\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003",
    "\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c2\u0003",
    "\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003",
    "\u00c4\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0007\u00c5\u0633",
    "\n\u00c5\f\u00c5\u000e\u00c5\u0636\u000b\u00c5\u0003\u00c5\u0003\u00c5",
    "\u0003\u00c5\u0003\u00c5\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0006\u00c6",
    "\u063f\n\u00c6\r\u00c6\u000e\u00c6\u0640\u0003\u00c6\u0003\u00c6\u0003",
    "\u00c7\u0003\u00c7\u0003\u00c7\u0006\u00c7\u0648\n\u00c7\r\u00c7\u000e",
    "\u00c7\u0649\u0003\u00c7\u0003\u00c7\u0003\u00c8\u0006\u00c8\u064f\n",
    "\u00c8\r\u00c8\u000e\u00c8\u0650\u0003\u00c8\u0003\u00c8\u0003\u00c9",
    "\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00ca\u0003\u00ca\u0003\u00ca",
    "\u0003\u00ca\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb",
    "\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cd\u0003\u00cd",
    "\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00ce\u0003\u00ce\u0003\u00ce",
    "\u0003\u00ce\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0003\u00d0",
    "\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d1\u0003\u00d1\u0003\u00d1",
    "\u0003\u00d1\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2",
    "\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d4\u0003\u00d4",
    "\u0003\u00d4\u0003\u00d4\u0003\u00d5\u0005\u00d5\u0689\n\u00d5\u0003",
    "\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d6\u0003",
    "\u00d6\u0007\u00d6\u0692\n\u00d6\f\u00d6\u000e\u00d6\u0695\u000b\u00d6",
    "\u0003\u00d6\u0003\u00d6\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7",
    "\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d9\u0003\u00d9",
    "\u0003\u00d9\u0003\u00d9\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da",
    "\u0003\u00db\u0003\u00db\u0003\u00db\u0003\u00db\u0003\u00dc\u0003\u00dc",
    "\u0003\u00dc\u0003\u00dc\u0003\u00dd\u0006\u00dd\u06b2\n\u00dd\r\u00dd",
    "\u000e\u00dd\u06b3\u0003\u00dd\u0003\u00dd\u0003\u00de\u0003\u00de\u0007",
    "\u00de\u06ba\n\u00de\f\u00de\u000e\u00de\u06bd\u000b\u00de\u0003\u00de",
    "\u0003\u00de\u0003\u00df\u0003\u00df\u0003\u0576\u0002\u00e0\u0007\u0003",
    "\t\u0004\u000b\u0005\r\u0006\u000f\u0007\u0011\b\u0013\t\u0015\n\u0017",
    "\u000b\u0019\f\u001b\r\u001d\u000e\u001f\u000f!\u0010#\u0011%\u0012",
    "\'\u0013)\u0014+\u0015-\u0016/\u00171\u00183\u00195\u001a7\u001b9\u001c",
    ";\u001d=\u001e?\u001fA C!E\"G#I$K%M&O\'Q(S)U*W+Y,[-]._/a0c1e2g3i4k5",
    "m6o7q8s9u:w;y<{=}>\u007f?\u0081@\u0083A\u0085B\u0087C\u0089D\u008bE",
    "\u008dF\u008fG\u0091H\u0093I\u0095J\u0097K\u0099L\u009bM\u009dN\u009f",
    "O\u00a1P\u00a3Q\u00a5R\u00a7S\u00a9T\u00abU\u00adV\u00afW\u00b1X\u00b3",
    "Y\u00b5Z\u00b7[\u00b9\\\u00bb]\u00bd^\u00bf_\u00c1`\u00c3a\u00c5b\u00c7",
    "c\u00c9d\u00cbe\u00cdf\u00cfg\u00d1h\u00d3i\u00d5j\u00d7k\u00d9l\u00db",
    "m\u00ddn\u00dfo\u00e1p\u00e3\u0002\u00e5\u0002\u00e7\u0002\u00e9\u0002",
    "\u00eb\u0002\u00ed\u0002\u00ef\u0002\u00f1\u0002\u00f3\u0002\u00f5\u0002",
    "\u00f7\u0002\u00f9\u0002\u00fb\u0002\u00fd\u0002\u00ff\u0002\u0101\u0002",
    "\u0103\u0002\u0105\u0002\u0107\u0002\u0109\u0002\u010b\u0002\u010d\u0002",
    "\u010f\u0002\u0111\u0002\u0113\u0002\u0115\u0002\u0117\u0002\u0119\u0002",
    "\u011b\u0002\u011dq\u011fr\u0121s\u0123t\u0125u\u0127v\u0129w\u012b",
    "x\u012dy\u012fz\u0131{\u0133|\u0135}\u0137~\u0139\u007f\u013b\u0080",
    "\u013d\u0081\u013f\u0082\u0141\u0083\u0143\u0084\u0145\u0085\u0147\u0086",
    "\u0149\u0002\u014b\u0087\u014d\u0088\u014f\u0089\u0151\u008a\u0153\u008b",
    "\u0155\u008c\u0157\u0002\u0159\u008d\u015b\u0002\u015d\u008e\u015f\u008f",
    "\u0161\u0090\u0163\u0002\u0165\u0091\u0167\u0002\u0169\u0002\u016b\u0002",
    "\u016d\u0002\u016f\u0002\u0171\u0002\u0173\u0002\u0175\u0002\u0177\u0002",
    "\u0179\u0002\u017b\u0002\u017d\u0002\u017f\u0002\u0181\u0002\u0183\u0002",
    "\u0185\u0002\u0187\u0002\u0189\u0002\u018b\u0002\u018d\u0002\u018f\u0002",
    "\u0191\u0002\u0193\u0002\u0195\u0002\u0197\u0002\u0199\u0002\u019b\u0002",
    "\u019d\u0002\u019f\u0002\u01a1\u0002\u01a3\u0002\u01a5\u0002\u01a7\u0002",
    "\u01a9\u0002\u01ab\u0002\u01ad\u0002\u01af\u0092\u01b1\u0002\u01b3\u0002",
    "\u01b5\u0002\u01b7\u0002\u01b9\u0002\u01bb\u0002\u01bd\u0093\u01bf\u0002",
    "\u01c1\u0094\u0007\u0002\u0003\u0004\u0005\u0006)\u0004\u0002$$bb\u0005",
    "\u0002\f\f\u000f\u000f$$\u0003\u0002bb\u0005\u00022;CHch\u0004\u0002",
    "2;CH\u0004\u000211^^\u0004\u0002\f\f\u000f\u000f\u0004\u0002\u000b\u000b",
    "\"\"\u0005\u0002C\\aac|\u0003\u00022;\u0006\u00022;C\\aac|\u0004\u0002",
    "CCcc\u0004\u0002DDdd\u0004\u0002EEee\u0004\u0002FFff\u0004\u0002GGg",
    "g\u0004\u0002HHhh\u0004\u0002IIii\u0004\u0002JJjj\u0004\u0002KKkk\u0004",
    "\u0002LLll\u0004\u0002MMmm\u0004\u0002NNnn\u0004\u0002OOoo\u0004\u0002",
    "PPpp\u0004\u0002QQqq\u0004\u0002RRrr\u0004\u0002SSss\u0004\u0002TTt",
    "t\u0004\u0002UUuu\u0004\u0002VVvv\u0004\u0002WWww\u0004\u0002XXxx\u0004",
    "\u0002YYyy\u0004\u0002ZZzz\u0004\u0002[[{{\u0004\u0002\\\\||\u0006\u0002",
    "\u000b\u000b\"\"..00\u0006\u0002\f\f\u000f\u000f11^^\u0002\u06ca\u0002",
    "\u0007\u0003\u0002\u0002\u0002\u0002\t\u0003\u0002\u0002\u0002\u0002",
    "\u000b\u0003\u0002\u0002\u0002\u0002\r\u0003\u0002\u0002\u0002\u0002",
    "\u000f\u0003\u0002\u0002\u0002\u0002\u0011\u0003\u0002\u0002\u0002\u0002",
    "\u0013\u0003\u0002\u0002\u0002\u0002\u0015\u0003\u0002\u0002\u0002\u0002",
    "\u0017\u0003\u0002\u0002\u0002\u0002\u0019\u0003\u0002\u0002\u0002\u0002",
    "\u001b\u0003\u0002\u0002\u0002\u0002\u001d\u0003\u0002\u0002\u0002\u0002",
    "\u001f\u0003\u0002\u0002\u0002\u0002!\u0003\u0002\u0002\u0002\u0002",
    "#\u0003\u0002\u0002\u0002\u0002%\u0003\u0002\u0002\u0002\u0002\'\u0003",
    "\u0002\u0002\u0002\u0002)\u0003\u0002\u0002\u0002\u0002+\u0003\u0002",
    "\u0002\u0002\u0002-\u0003\u0002\u0002\u0002\u0002/\u0003\u0002\u0002",
    "\u0002\u00021\u0003\u0002\u0002\u0002\u00023\u0003\u0002\u0002\u0002",
    "\u00025\u0003\u0002\u0002\u0002\u00027\u0003\u0002\u0002\u0002\u0002",
    "9\u0003\u0002\u0002\u0002\u0002;\u0003\u0002\u0002\u0002\u0002=\u0003",
    "\u0002\u0002\u0002\u0002?\u0003\u0002\u0002\u0002\u0002A\u0003\u0002",
    "\u0002\u0002\u0002C\u0003\u0002\u0002\u0002\u0002E\u0003\u0002\u0002",
    "\u0002\u0002G\u0003\u0002\u0002\u0002\u0002I\u0003\u0002\u0002\u0002",
    "\u0002K\u0003\u0002\u0002\u0002\u0002M\u0003\u0002\u0002\u0002\u0002",
    "O\u0003\u0002\u0002\u0002\u0002Q\u0003\u0002\u0002\u0002\u0002S\u0003",
    "\u0002\u0002\u0002\u0002U\u0003\u0002\u0002\u0002\u0002W\u0003\u0002",
    "\u0002\u0002\u0002Y\u0003\u0002\u0002\u0002\u0002[\u0003\u0002\u0002",
    "\u0002\u0002]\u0003\u0002\u0002\u0002\u0002_\u0003\u0002\u0002\u0002",
    "\u0002a\u0003\u0002\u0002\u0002\u0002c\u0003\u0002\u0002\u0002\u0002",
    "e\u0003\u0002\u0002\u0002\u0002g\u0003\u0002\u0002\u0002\u0002i\u0003",
    "\u0002\u0002\u0002\u0002k\u0003\u0002\u0002\u0002\u0002m\u0003\u0002",
    "\u0002\u0002\u0002o\u0003\u0002\u0002\u0002\u0002q\u0003\u0002\u0002",
    "\u0002\u0002s\u0003\u0002\u0002\u0002\u0002u\u0003\u0002\u0002\u0002",
    "\u0002w\u0003\u0002\u0002\u0002\u0002y\u0003\u0002\u0002\u0002\u0002",
    "{\u0003\u0002\u0002\u0002\u0002}\u0003\u0002\u0002\u0002\u0002\u007f",
    "\u0003\u0002\u0002\u0002\u0002\u0081\u0003\u0002\u0002\u0002\u0002\u0083",
    "\u0003\u0002\u0002\u0002\u0002\u0085\u0003\u0002\u0002\u0002\u0002\u0087",
    "\u0003\u0002\u0002\u0002\u0002\u0089\u0003\u0002\u0002\u0002\u0002\u008b",
    "\u0003\u0002\u0002\u0002\u0002\u008d\u0003\u0002\u0002\u0002\u0002\u008f",
    "\u0003\u0002\u0002\u0002\u0002\u0091\u0003\u0002\u0002\u0002\u0002\u0093",
    "\u0003\u0002\u0002\u0002\u0002\u0095\u0003\u0002\u0002\u0002\u0002\u0097",
    "\u0003\u0002\u0002\u0002\u0002\u0099\u0003\u0002\u0002\u0002\u0002\u009b",
    "\u0003\u0002\u0002\u0002\u0002\u009d\u0003\u0002\u0002\u0002\u0002\u009f",
    "\u0003\u0002\u0002\u0002\u0002\u00a1\u0003\u0002\u0002\u0002\u0002\u00a3",
    "\u0003\u0002\u0002\u0002\u0002\u00a5\u0003\u0002\u0002\u0002\u0002\u00a7",
    "\u0003\u0002\u0002\u0002\u0002\u00a9\u0003\u0002\u0002\u0002\u0002\u00ab",
    "\u0003\u0002\u0002\u0002\u0002\u00ad\u0003\u0002\u0002\u0002\u0002\u00af",
    "\u0003\u0002\u0002\u0002\u0002\u00b1\u0003\u0002\u0002\u0002\u0002\u00b3",
    "\u0003\u0002\u0002\u0002\u0002\u00b5\u0003\u0002\u0002\u0002\u0002\u00b7",
    "\u0003\u0002\u0002\u0002\u0002\u00b9\u0003\u0002\u0002\u0002\u0002\u00bb",
    "\u0003\u0002\u0002\u0002\u0002\u00bd\u0003\u0002\u0002\u0002\u0002\u00bf",
    "\u0003\u0002\u0002\u0002\u0002\u00c1\u0003\u0002\u0002\u0002\u0002\u00c3",
    "\u0003\u0002\u0002\u0002\u0002\u00c5\u0003\u0002\u0002\u0002\u0002\u00c7",
    "\u0003\u0002\u0002\u0002\u0002\u00c9\u0003\u0002\u0002\u0002\u0002\u00cb",
    "\u0003\u0002\u0002\u0002\u0002\u00cd\u0003\u0002\u0002\u0002\u0002\u00cf",
    "\u0003\u0002\u0002\u0002\u0002\u00d1\u0003\u0002\u0002\u0002\u0002\u00d3",
    "\u0003\u0002\u0002\u0002\u0002\u00d5\u0003\u0002\u0002\u0002\u0002\u00d7",
    "\u0003\u0002\u0002\u0002\u0002\u00d9\u0003\u0002\u0002\u0002\u0002\u00db",
    "\u0003\u0002\u0002\u0002\u0002\u00dd\u0003\u0002\u0002\u0002\u0002\u00df",
    "\u0003\u0002\u0002\u0002\u0002\u00e1\u0003\u0002\u0002\u0002\u0003\u011d",
    "\u0003\u0002\u0002\u0002\u0003\u011f\u0003\u0002\u0002\u0002\u0003\u0121",
    "\u0003\u0002\u0002\u0002\u0003\u0123\u0003\u0002\u0002\u0002\u0003\u0125",
    "\u0003\u0002\u0002\u0002\u0003\u0127\u0003\u0002\u0002\u0002\u0003\u0129",
    "\u0003\u0002\u0002\u0002\u0003\u012b\u0003\u0002\u0002\u0002\u0003\u012d",
    "\u0003\u0002\u0002\u0002\u0003\u012f\u0003\u0002\u0002\u0002\u0003\u0131",
    "\u0003\u0002\u0002\u0002\u0003\u0133\u0003\u0002\u0002\u0002\u0003\u0135",
    "\u0003\u0002\u0002\u0002\u0003\u0137\u0003\u0002\u0002\u0002\u0003\u0139",
    "\u0003\u0002\u0002\u0002\u0003\u013b\u0003\u0002\u0002\u0002\u0003\u013d",
    "\u0003\u0002\u0002\u0002\u0003\u013f\u0003\u0002\u0002\u0002\u0003\u0141",
    "\u0003\u0002\u0002\u0002\u0003\u0143\u0003\u0002\u0002\u0002\u0003\u0145",
    "\u0003\u0002\u0002\u0002\u0003\u0147\u0003\u0002\u0002\u0002\u0003\u0149",
    "\u0003\u0002\u0002\u0002\u0003\u014b\u0003\u0002\u0002\u0002\u0003\u014d",
    "\u0003\u0002\u0002\u0002\u0003\u014f\u0003\u0002\u0002\u0002\u0003\u0151",
    "\u0003\u0002\u0002\u0002\u0003\u0153\u0003\u0002\u0002\u0002\u0003\u0155",
    "\u0003\u0002\u0002\u0002\u0004\u0157\u0003\u0002\u0002\u0002\u0005\u0159",
    "\u0003\u0002\u0002\u0002\u0005\u015b\u0003\u0002\u0002\u0002\u0005\u015d",
    "\u0003\u0002\u0002\u0002\u0005\u015f\u0003\u0002\u0002\u0002\u0005\u0161",
    "\u0003\u0002\u0002\u0002\u0005\u0163\u0003\u0002\u0002\u0002\u0005\u0165",
    "\u0003\u0002\u0002\u0002\u0006\u0167\u0003\u0002\u0002\u0002\u0006\u0169",
    "\u0003\u0002\u0002\u0002\u0006\u016b\u0003\u0002\u0002\u0002\u0006\u016d",
    "\u0003\u0002\u0002\u0002\u0006\u016f\u0003\u0002\u0002\u0002\u0006\u0171",
    "\u0003\u0002\u0002\u0002\u0006\u0173\u0003\u0002\u0002\u0002\u0006\u0175",
    "\u0003\u0002\u0002\u0002\u0006\u0177\u0003\u0002\u0002\u0002\u0006\u0179",
    "\u0003\u0002\u0002\u0002\u0006\u017b\u0003\u0002\u0002\u0002\u0006\u017d",
    "\u0003\u0002\u0002\u0002\u0006\u017f\u0003\u0002\u0002\u0002\u0006\u0181",
    "\u0003\u0002\u0002\u0002\u0006\u0183\u0003\u0002\u0002\u0002\u0006\u0185",
    "\u0003\u0002\u0002\u0002\u0006\u0187\u0003\u0002\u0002\u0002\u0006\u0189",
    "\u0003\u0002\u0002\u0002\u0006\u018b\u0003\u0002\u0002\u0002\u0006\u018d",
    "\u0003\u0002\u0002\u0002\u0006\u018f\u0003\u0002\u0002\u0002\u0006\u0191",
    "\u0003\u0002\u0002\u0002\u0006\u0193\u0003\u0002\u0002\u0002\u0006\u0195",
    "\u0003\u0002\u0002\u0002\u0006\u0197\u0003\u0002\u0002\u0002\u0006\u0199",
    "\u0003\u0002\u0002\u0002\u0006\u019b\u0003\u0002\u0002\u0002\u0006\u019d",
    "\u0003\u0002\u0002\u0002\u0006\u019f\u0003\u0002\u0002\u0002\u0006\u01a1",
    "\u0003\u0002\u0002\u0002\u0006\u01a3\u0003\u0002\u0002\u0002\u0006\u01a5",
    "\u0003\u0002\u0002\u0002\u0006\u01a7\u0003\u0002\u0002\u0002\u0006\u01a9",
    "\u0003\u0002\u0002\u0002\u0006\u01ab\u0003\u0002\u0002\u0002\u0006\u01ad",
    "\u0003\u0002\u0002\u0002\u0006\u01af\u0003\u0002\u0002\u0002\u0006\u01b1",
    "\u0003\u0002\u0002\u0002\u0006\u01b3\u0003\u0002\u0002\u0002\u0006\u01b5",
    "\u0003\u0002\u0002\u0002\u0006\u01b7\u0003\u0002\u0002\u0002\u0006\u01b9",
    "\u0003\u0002\u0002\u0002\u0006\u01bb\u0003\u0002\u0002\u0002\u0006\u01bd",
    "\u0003\u0002\u0002\u0002\u0006\u01bf\u0003\u0002\u0002\u0002\u0006\u01c1",
    "\u0003\u0002\u0002\u0002\u0007\u01c3\u0003\u0002\u0002\u0002\t\u01ca",
    "\u0003\u0002\u0002\u0002\u000b\u01ce\u0003\u0002\u0002\u0002\r\u01d1",
    "\u0003\u0002\u0002\u0002\u000f\u01d9\u0003\u0002\u0002\u0002\u0011\u01de",
    "\u0003\u0002\u0002\u0002\u0013\u01e4\u0003\u0002\u0002\u0002\u0015\u01e9",
    "\u0003\u0002\u0002\u0002\u0017\u01ef\u0003\u0002\u0002\u0002\u0019\u01f4",
    "\u0003\u0002\u0002\u0002\u001b\u01fe\u0003\u0002\u0002\u0002\u001d\u0203",
    "\u0003\u0002\u0002\u0002\u001f\u0209\u0003\u0002\u0002\u0002!\u0211",
    "\u0003\u0002\u0002\u0002#\u0219\u0003\u0002\u0002\u0002%\u021d\u0003",
    "\u0002\u0002\u0002\'\u0220\u0003\u0002\u0002\u0002)\u0226\u0003\u0002",
    "\u0002\u0002+\u022b\u0003\u0002\u0002\u0002-\u0230\u0003\u0002\u0002",
    "\u0002/\u0234\u0003\u0002\u0002\u00021\u023c\u0003\u0002\u0002\u0002",
    "3\u0241\u0003\u0002\u0002\u00025\u024a\u0003\u0002\u0002\u00027\u0257",
    "\u0003\u0002\u0002\u00029\u025e\u0003\u0002\u0002\u0002;\u026b\u0003",
    "\u0002\u0002\u0002=\u0276\u0003\u0002\u0002\u0002?\u027e\u0003\u0002",
    "\u0002\u0002A\u0287\u0003\u0002\u0002\u0002C\u0290\u0003\u0002\u0002",
    "\u0002E\u0296\u0003\u0002\u0002\u0002G\u029e\u0003\u0002\u0002\u0002",
    "I\u02a7\u0003\u0002\u0002\u0002K\u02b5\u0003\u0002\u0002\u0002M\u02c3",
    "\u0003\u0002\u0002\u0002O\u02cc\u0003\u0002\u0002\u0002Q\u02d7\u0003",
    "\u0002\u0002\u0002S\u02dd\u0003\u0002\u0002\u0002U\u02e3\u0003\u0002",
    "\u0002\u0002W\u02e7\u0003\u0002\u0002\u0002Y\u02f0\u0003\u0002\u0002",
    "\u0002[\u02f4\u0003\u0002\u0002\u0002]\u02f9\u0003\u0002\u0002\u0002",
    "_\u02fe\u0003\u0002\u0002\u0002a\u0304\u0003\u0002\u0002\u0002c\u030b",
    "\u0003\u0002\u0002\u0002e\u0313\u0003\u0002\u0002\u0002g\u031d\u0003",
    "\u0002\u0002\u0002i\u0325\u0003\u0002\u0002\u0002k\u032a\u0003\u0002",
    "\u0002\u0002m\u032f\u0003\u0002\u0002\u0002o\u0333\u0003\u0002\u0002",
    "\u0002q\u0338\u0003\u0002\u0002\u0002s\u033c\u0003\u0002\u0002\u0002",
    "u\u033f\u0003\u0002\u0002\u0002w\u0348\u0003\u0002\u0002\u0002y\u034f",
    "\u0003\u0002\u0002\u0002{\u0356\u0003\u0002\u0002\u0002}\u035a\u0003",
    "\u0002\u0002\u0002\u007f\u035e\u0003\u0002\u0002\u0002\u0081\u0364\u0003",
    "\u0002\u0002\u0002\u0083\u0368\u0003\u0002\u0002\u0002\u0085\u036f\u0003",
    "\u0002\u0002\u0002\u0087\u0374\u0003\u0002\u0002\u0002\u0089\u037b\u0003",
    "\u0002\u0002\u0002\u008b\u037f\u0003\u0002\u0002\u0002\u008d\u0384\u0003",
    "\u0002\u0002\u0002\u008f\u0387\u0003\u0002\u0002\u0002\u0091\u038c\u0003",
    "\u0002\u0002\u0002\u0093\u0391\u0003\u0002\u0002\u0002\u0095\u0397\u0003",
    "\u0002\u0002\u0002\u0097\u039d\u0003\u0002\u0002\u0002\u0099\u03a2\u0003",
    "\u0002\u0002\u0002\u009b\u03a8\u0003\u0002\u0002\u0002\u009d\u03ad\u0003",
    "\u0002\u0002\u0002\u009f\u03b1\u0003\u0002\u0002\u0002\u00a1\u03b6\u0003",
    "\u0002\u0002\u0002\u00a3\u03c1\u0003\u0002\u0002\u0002\u00a5\u03cc\u0003",
    "\u0002\u0002\u0002\u00a7\u03d3\u0003\u0002\u0002\u0002\u00a9\u03db\u0003",
    "\u0002\u0002\u0002\u00ab\u03df\u0003\u0002\u0002\u0002\u00ad\u03e1\u0003",
    "\u0002\u0002\u0002\u00af\u03e3\u0003\u0002\u0002\u0002\u00b1\u03e6\u0003",
    "\u0002\u0002\u0002\u00b3\u03e8\u0003\u0002\u0002\u0002\u00b5\u03eb\u0003",
    "\u0002\u0002\u0002\u00b7\u03ed\u0003\u0002\u0002\u0002\u00b9\u03ef\u0003",
    "\u0002\u0002\u0002\u00bb\u03f1\u0003\u0002\u0002\u0002\u00bd\u03f3\u0003",
    "\u0002\u0002\u0002\u00bf\u03f6\u0003\u0002\u0002\u0002\u00c1\u03f8\u0003",
    "\u0002\u0002\u0002\u00c3\u03fa\u0003\u0002\u0002\u0002\u00c5\u03fc\u0003",
    "\u0002\u0002\u0002\u00c7\u03fe\u0003\u0002\u0002\u0002\u00c9\u0400\u0003",
    "\u0002\u0002\u0002\u00cb\u0403\u0003\u0002\u0002\u0002\u00cd\u0409\u0003",
    "\u0002\u0002\u0002\u00cf\u0412\u0003\u0002\u0002\u0002\u00d1\u0414\u0003",
    "\u0002\u0002\u0002\u00d3\u0416\u0003\u0002\u0002\u0002\u00d5\u0418\u0003",
    "\u0002\u0002\u0002\u00d7\u041a\u0003\u0002\u0002\u0002\u00d9\u041c\u0003",
    "\u0002\u0002\u0002\u00db\u041e\u0003\u0002\u0002\u0002\u00dd\u0420\u0003",
    "\u0002\u0002\u0002\u00df\u0429\u0003\u0002\u0002\u0002\u00e1\u042f\u0003",
    "\u0002\u0002\u0002\u00e3\u0436\u0003\u0002\u0002\u0002\u00e5\u0438\u0003",
    "\u0002\u0002\u0002\u00e7\u043a\u0003\u0002\u0002\u0002\u00e9\u043c\u0003",
    "\u0002\u0002\u0002\u00eb\u043e\u0003\u0002\u0002\u0002\u00ed\u0440\u0003",
    "\u0002\u0002\u0002\u00ef\u0442\u0003\u0002\u0002\u0002\u00f1\u0444\u0003",
    "\u0002\u0002\u0002\u00f3\u0446\u0003\u0002\u0002\u0002\u00f5\u0448\u0003",
    "\u0002\u0002\u0002\u00f7\u044a\u0003\u0002\u0002\u0002\u00f9\u044c\u0003",
    "\u0002\u0002\u0002\u00fb\u044e\u0003\u0002\u0002\u0002\u00fd\u0450\u0003",
    "\u0002\u0002\u0002\u00ff\u0452\u0003\u0002\u0002\u0002\u0101\u0454\u0003",
    "\u0002\u0002\u0002\u0103\u0456\u0003\u0002\u0002\u0002\u0105\u0458\u0003",
    "\u0002\u0002\u0002\u0107\u045a\u0003\u0002\u0002\u0002\u0109\u045c\u0003",
    "\u0002\u0002\u0002\u010b\u045e\u0003\u0002\u0002\u0002\u010d\u0460\u0003",
    "\u0002\u0002\u0002\u010f\u0462\u0003\u0002\u0002\u0002\u0111\u0464\u0003",
    "\u0002\u0002\u0002\u0113\u0466\u0003\u0002\u0002\u0002\u0115\u0468\u0003",
    "\u0002\u0002\u0002\u0117\u046a\u0003\u0002\u0002\u0002\u0119\u046c\u0003",
    "\u0002\u0002\u0002\u011b\u046e\u0003\u0002\u0002\u0002\u011d\u0470\u0003",
    "\u0002\u0002\u0002\u011f\u0479\u0003\u0002\u0002\u0002\u0121\u0482\u0003",
    "\u0002\u0002\u0002\u0123\u0490\u0003\u0002\u0002\u0002\u0125\u0495\u0003",
    "\u0002\u0002\u0002\u0127\u049c\u0003\u0002\u0002\u0002\u0129\u04a3\u0003",
    "\u0002\u0002\u0002\u012b\u04ab\u0003\u0002\u0002\u0002\u012d\u04b3\u0003",
    "\u0002\u0002\u0002\u012f\u04bc\u0003\u0002\u0002\u0002\u0131\u04c5\u0003",
    "\u0002\u0002\u0002\u0133\u04ce\u0003\u0002\u0002\u0002\u0135\u04d2\u0003",
    "\u0002\u0002\u0002\u0137\u04d6\u0003\u0002\u0002\u0002\u0139\u04da\u0003",
    "\u0002\u0002\u0002\u013b\u04de\u0003\u0002\u0002\u0002\u013d\u04e3\u0003",
    "\u0002\u0002\u0002\u013f\u04e7\u0003\u0002\u0002\u0002\u0141\u04eb\u0003",
    "\u0002\u0002\u0002\u0143\u04ef\u0003\u0002\u0002\u0002\u0145\u04f3\u0003",
    "\u0002\u0002\u0002\u0147\u04f8\u0003\u0002\u0002\u0002\u0149\u04fe\u0003",
    "\u0002\u0002\u0002\u014b\u0505\u0003\u0002\u0002\u0002\u014d\u050f\u0003",
    "\u0002\u0002\u0002\u014f\u0527\u0003\u0002\u0002\u0002\u0151\u052c\u0003",
    "\u0002\u0002\u0002\u0153\u0533\u0003\u0002\u0002\u0002\u0155\u053c\u0003",
    "\u0002\u0002\u0002\u0157\u0544\u0003\u0002\u0002\u0002\u0159\u055a\u0003",
    "\u0002\u0002\u0002\u015b\u0562\u0003\u0002\u0002\u0002\u015d\u0569\u0003",
    "\u0002\u0002\u0002\u015f\u0570\u0003\u0002\u0002\u0002\u0161\u057e\u0003",
    "\u0002\u0002\u0002\u0163\u0589\u0003\u0002\u0002\u0002\u0165\u058f\u0003",
    "\u0002\u0002\u0002\u0167\u0595\u0003\u0002\u0002\u0002\u0169\u059b\u0003",
    "\u0002\u0002\u0002\u016b\u05a2\u0003\u0002\u0002\u0002\u016d\u05a8\u0003",
    "\u0002\u0002\u0002\u016f\u05b2\u0003\u0002\u0002\u0002\u0171\u05bd\u0003",
    "\u0002\u0002\u0002\u0173\u05cd\u0003\u0002\u0002\u0002\u0175\u05d8\u0003",
    "\u0002\u0002\u0002\u0177\u05e5\u0003\u0002\u0002\u0002\u0179\u05ed\u0003",
    "\u0002\u0002\u0002\u017b\u05f4\u0003\u0002\u0002\u0002\u017d\u05fa\u0003",
    "\u0002\u0002\u0002\u017f\u0600\u0003\u0002\u0002\u0002\u0181\u0605\u0003",
    "\u0002\u0002\u0002\u0183\u060b\u0003\u0002\u0002\u0002\u0185\u0611\u0003",
    "\u0002\u0002\u0002\u0187\u061a\u0003\u0002\u0002\u0002\u0189\u0621\u0003",
    "\u0002\u0002\u0002\u018b\u0628\u0003\u0002\u0002\u0002\u018d\u062e\u0003",
    "\u0002\u0002\u0002\u018f\u063b\u0003\u0002\u0002\u0002\u0191\u0644\u0003",
    "\u0002\u0002\u0002\u0193\u064e\u0003\u0002\u0002\u0002\u0195\u0654\u0003",
    "\u0002\u0002\u0002\u0197\u0658\u0003\u0002\u0002\u0002\u0199\u065c\u0003",
    "\u0002\u0002\u0002\u019b\u0661\u0003\u0002\u0002\u0002\u019d\u0665\u0003",
    "\u0002\u0002\u0002\u019f\u066a\u0003\u0002\u0002\u0002\u01a1\u066e\u0003",
    "\u0002\u0002\u0002\u01a3\u0672\u0003\u0002\u0002\u0002\u01a5\u0676\u0003",
    "\u0002\u0002\u0002\u01a7\u067a\u0003\u0002\u0002\u0002\u01a9\u067f\u0003",
    "\u0002\u0002\u0002\u01ab\u0683\u0003\u0002\u0002\u0002\u01ad\u0688\u0003",
    "\u0002\u0002\u0002\u01af\u068f\u0003\u0002\u0002\u0002\u01b1\u0698\u0003",
    "\u0002\u0002\u0002\u01b3\u069c\u0003\u0002\u0002\u0002\u01b5\u06a0\u0003",
    "\u0002\u0002\u0002\u01b7\u06a4\u0003\u0002\u0002\u0002\u01b9\u06a8\u0003",
    "\u0002\u0002\u0002\u01bb\u06ac\u0003\u0002\u0002\u0002\u01bd\u06b1\u0003",
    "\u0002\u0002\u0002\u01bf\u06b7\u0003\u0002\u0002\u0002\u01c1\u06c0\u0003",
    "\u0002\u0002\u0002\u01c3\u01c4\u0005\u0105\u0081\u0002\u01c4\u01c5\u0005",
    "\u00ebt\u0002\u01c5\u01c6\u0005\u00fb|\u0002\u01c6\u01c7\u0005\u00f1",
    "w\u0002\u01c7\u01c8\u0005\u00edu\u0002\u01c8\u01c9\u0005\u010f\u0086",
    "\u0002\u01c9\b\u0003\u0002\u0002\u0002\u01ca\u01cb\u0005\u00e9s\u0002",
    "\u01cb\u01cc\u0005\u0103\u0080\u0002\u01cc\u01cd\u0005\u00efv\u0002",
    "\u01cd\n\u0003\u0002\u0002\u0002\u01ce\u01cf\u0005\u00e9s\u0002\u01cf",
    "\u01d0\u0005\u010d\u0085\u0002\u01d0\f\u0003\u0002\u0002\u0002\u01d1",
    "\u01d2\u0005\u00ebt\u0002\u01d2\u01d3\u0005\u0105\u0081\u0002\u01d3",
    "\u01d4\u0005\u0105\u0081\u0002\u01d4\u01d5\u0005\u00ff~\u0002\u01d5",
    "\u01d6\u0005\u00f1w\u0002\u01d6\u01d7\u0005\u00e9s\u0002\u01d7\u01d8",
    "\u0005\u0103\u0080\u0002\u01d8\u000e\u0003\u0002\u0002\u0002\u01d9\u01da",
    "\u0005\u010b\u0084\u0002\u01da\u01db\u0005\u00f1w\u0002\u01db\u01dc",
    "\u0005\u00e9s\u0002\u01dc\u01dd\u0005\u00ff~\u0002\u01dd\u0010\u0003",
    "\u0002\u0002\u0002\u01de\u01df\u0005\u00ebt\u0002\u01df\u01e0\u0005",
    "\u0119\u008b\u0002\u01e0\u01e1\u0005\u010b\u0084\u0002\u01e1\u01e2\u0005",
    "\u00f1w\u0002\u01e2\u01e3\u0005\u00f3x\u0002\u01e3\u0012\u0003\u0002",
    "\u0002\u0002\u01e4\u01e5\u0005\u00ebt\u0002\u01e5\u01e6\u0005\u0119",
    "\u008b\u0002\u01e6\u01e7\u0005\u010f\u0086\u0002\u01e7\u01e8\u0005\u00f1",
    "w\u0002\u01e8\u0014\u0003\u0002\u0002\u0002\u01e9\u01ea\u0005\u00eb",
    "t\u0002\u01ea\u01eb\u0005\u0119\u008b\u0002\u01eb\u01ec\u0005\u0113",
    "\u0088\u0002\u01ec\u01ed\u0005\u00e9s\u0002\u01ed\u01ee\u0005\u00ff",
    "~\u0002\u01ee\u0016\u0003\u0002\u0002\u0002\u01ef\u01f0\u0005\u00ed",
    "u\u0002\u01f0\u01f1\u0005\u00e9s\u0002\u01f1\u01f2\u0005\u010d\u0085",
    "\u0002\u01f2\u01f3\u0005\u00f1w\u0002\u01f3\u0018\u0003\u0002\u0002",
    "\u0002\u01f4\u01f5\u0005\u00edu\u0002\u01f5\u01f6\u0005\u00e9s\u0002",
    "\u01f6\u01f7\u0005\u010d\u0085\u0002\u01f7\u01f8\u0005\u00f1w\u0002",
    "\u01f8\u01f9\u0005\u00dfn\u0002\u01f9\u01fa\u0005\u00f1w\u0002\u01fa",
    "\u01fb\u0005\u00ff~\u0002\u01fb\u01fc\u0005\u010d\u0085\u0002\u01fc",
    "\u01fd\u0005\u00f1w\u0002\u01fd\u001a\u0003\u0002\u0002\u0002\u01fe",
    "\u01ff\u0005\u00edu\u0002\u01ff\u0200\u0005\u00f7z\u0002\u0200\u0201",
    "\u0005\u00e9s\u0002\u0201\u0202\u0005\u010b\u0084\u0002\u0202\u001c",
    "\u0003\u0002\u0002\u0002\u0203\u0204\u0005\u00edu\u0002\u0204\u0205",
    "\u0005\u0105\u0081\u0002\u0205\u0206\u0005\u0103\u0080\u0002\u0206\u0207",
    "\u0005\u010d\u0085\u0002\u0207\u0208\u0005\u010f\u0086\u0002\u0208\u001e",
    "\u0003\u0002\u0002\u0002\u0209\u020a\u0005\u00edu\u0002\u020a\u020b",
    "\u0005\u0105\u0081\u0002\u020b\u020c\u0005\u0111\u0087\u0002\u020c\u020d",
    "\u0005\u0103\u0080\u0002\u020d\u020e\u0005\u010f\u0086\u0002\u020e\u020f",
    "\u0005\u0105\u0081\u0002\u020f\u0210\u0005\u00f3x\u0002\u0210 \u0003",
    "\u0002\u0002\u0002\u0211\u0212\u0005\u00efv\u0002\u0212\u0213\u0005",
    "\u00f1w\u0002\u0213\u0214\u0005\u00edu\u0002\u0214\u0215\u0005\u00ff",
    "~\u0002\u0215\u0216\u0005\u00e9s\u0002\u0216\u0217\u0005\u010b\u0084",
    "\u0002\u0217\u0218\u0005\u00f1w\u0002\u0218\"\u0003\u0002\u0002\u0002",
    "\u0219\u021a\u0005\u00efv\u0002\u021a\u021b\u0005\u00f9{\u0002\u021b",
    "\u021c\u0005\u0101\u007f\u0002\u021c$\u0003\u0002\u0002\u0002\u021d",
    "\u021e\u0005\u00efv\u0002\u021e\u021f\u0005\u0105\u0081\u0002\u021f",
    "&\u0003\u0002\u0002\u0002\u0220\u0221\u0005\u00efv\u0002\u0221\u0222",
    "\u0005\u0115\u0089\u0002\u0222\u0223\u0005\u0105\u0081\u0002\u0223\u0224",
    "\u0005\u010b\u0084\u0002\u0224\u0225\u0005\u00efv\u0002\u0225(\u0003",
    "\u0002\u0002\u0002\u0226\u0227\u0005\u00f1w\u0002\u0227\u0228\u0005",
    "\u00ff~\u0002\u0228\u0229\u0005\u010d\u0085\u0002\u0229\u022a\u0005",
    "\u00f1w\u0002\u022a*\u0003\u0002\u0002\u0002\u022b\u022c\u0005\u00f1",
    "w\u0002\u022c\u022d\u0005\u00ff~\u0002\u022d\u022e\u0005\u00f9{\u0002",
    "\u022e\u022f\u0005\u00f3x\u0002\u022f,\u0003\u0002\u0002\u0002\u0230",
    "\u0231\u0005\u00f1w\u0002\u0231\u0232\u0005\u0103\u0080\u0002\u0232",
    "\u0233\u0005\u00efv\u0002\u0233.\u0003\u0002\u0002\u0002\u0234\u0235",
    "\u0005\u00f1w\u0002\u0235\u0236\u0005\u00ff~\u0002\u0236\u0237\u0005",
    "\u010d\u0085\u0002\u0237\u0238\u0005\u00f1w\u0002\u0238\u0239\u0005",
    "\u00dfn\u0002\u0239\u023a\u0005\u00f9{\u0002\u023a\u023b\u0005\u00f3",
    "x\u0002\u023b0\u0003\u0002\u0002\u0002\u023c\u023d\u0005\u00f1w\u0002",
    "\u023d\u023e\u0005\u0103\u0080\u0002\u023e\u023f\u0005\u0111\u0087\u0002",
    "\u023f\u0240\u0005\u0101\u007f\u0002\u02402\u0003\u0002\u0002\u0002",
    "\u0241\u0242\u0005\u00f1w\u0002\u0242\u0243\u0005\u0103\u0080\u0002",
    "\u0243\u0244\u0005\u00efv\u0002\u0244\u0245\u0005\u00dfn\u0002\u0245",
    "\u0246\u0005\u00f1w\u0002\u0246\u0247\u0005\u0103\u0080\u0002\u0247",
    "\u0248\u0005\u0111\u0087\u0002\u0248\u0249\u0005\u0101\u007f\u0002\u0249",
    "4\u0003\u0002\u0002\u0002\u024a\u024b\u0005\u00f1w\u0002\u024b\u024c",
    "\u0005\u0103\u0080\u0002\u024c\u024d\u0005\u00efv\u0002\u024d\u024e",
    "\u0005\u00dfn\u0002\u024e\u024f\u0005\u00f3x\u0002\u024f\u0250\u0005",
    "\u0111\u0087\u0002\u0250\u0251\u0005\u0103\u0080\u0002\u0251\u0252\u0005",
    "\u00edu\u0002\u0252\u0253\u0005\u010f\u0086\u0002\u0253\u0254\u0005",
    "\u00f9{\u0002\u0254\u0255\u0005\u0105\u0081\u0002\u0255\u0256\u0005",
    "\u0103\u0080\u0002\u02566\u0003\u0002\u0002\u0002\u0257\u0258\u0005",
    "\u00f1w\u0002\u0258\u0259\u0005\u0103\u0080\u0002\u0259\u025a\u0005",
    "\u00efv\u0002\u025a\u025b\u0005\u00dfn\u0002\u025b\u025c\u0005\u00f9",
    "{\u0002\u025c\u025d\u0005\u00f3x\u0002\u025d8\u0003\u0002\u0002\u0002",
    "\u025e\u025f\u0005\u00f1w\u0002\u025f\u0260\u0005\u0103\u0080\u0002",
    "\u0260\u0261\u0005\u00efv\u0002\u0261\u0262\u0005\u00dfn\u0002\u0262",
    "\u0263\u0005\u0107\u0082\u0002\u0263\u0264\u0005\u010b\u0084\u0002\u0264",
    "\u0265\u0005\u0105\u0081\u0002\u0265\u0266\u0005\u0107\u0082\u0002\u0266",
    "\u0267\u0005\u00f1w\u0002\u0267\u0268\u0005\u010b\u0084\u0002\u0268",
    "\u0269\u0005\u010f\u0086\u0002\u0269\u026a\u0005\u0119\u008b\u0002\u026a",
    ":\u0003\u0002\u0002\u0002\u026b\u026c\u0005\u00f1w\u0002\u026c\u026d",
    "\u0005\u0103\u0080\u0002\u026d\u026e\u0005\u00efv\u0002\u026e\u026f",
    "\u0005\u00dfn\u0002\u026f\u0270\u0005\u010d\u0085\u0002\u0270\u0271",
    "\u0005\u00f1w\u0002\u0271\u0272\u0005\u00ff~\u0002\u0272\u0273\u0005",
    "\u00f1w\u0002\u0273\u0274\u0005\u00edu\u0002\u0274\u0275\u0005\u010f",
    "\u0086\u0002\u0275<\u0003\u0002\u0002\u0002\u0276\u0277\u0005\u00f1",
    "w\u0002\u0277\u0278\u0005\u0103\u0080\u0002\u0278\u0279\u0005\u00ef",
    "v\u0002\u0279\u027a\u0005\u00dfn\u0002\u027a\u027b\u0005\u010d\u0085",
    "\u0002\u027b\u027c\u0005\u0111\u0087\u0002\u027c\u027d\u0005\u00ebt",
    "\u0002\u027d>\u0003\u0002\u0002\u0002\u027e\u027f\u0005\u00f1w\u0002",
    "\u027f\u0280\u0005\u0103\u0080\u0002\u0280\u0281\u0005\u00efv\u0002",
    "\u0281\u0282\u0005\u00dfn\u0002\u0282\u0283\u0005\u010f\u0086\u0002",
    "\u0283\u0284\u0005\u0119\u008b\u0002\u0284\u0285\u0005\u0107\u0082\u0002",
    "\u0285\u0286\u0005\u00f1w\u0002\u0286@\u0003\u0002\u0002\u0002\u0287",
    "\u0288\u0005\u00f1w\u0002\u0288\u0289\u0005\u0103\u0080\u0002\u0289",
    "\u028a\u0005\u00efv\u0002\u028a\u028b\u0005\u00dfn\u0002\u028b\u028c",
    "\u0005\u0115\u0089\u0002\u028c\u028d\u0005\u00f9{\u0002\u028d\u028e",
    "\u0005\u010f\u0086\u0002\u028e\u028f\u0005\u00f7z\u0002\u028fB\u0003",
    "\u0002\u0002\u0002\u0290\u0291\u0005\u00f1w\u0002\u0291\u0292\u0005",
    "\u0113\u0088\u0002\u0292\u0293\u0005\u00f1w\u0002\u0293\u0294\u0005",
    "\u0103\u0080\u0002\u0294\u0295\u0005\u010f\u0086\u0002\u0295D\u0003",
    "\u0002\u0002\u0002\u0296\u0297\u0005\u00f1w\u0002\u0297\u0298\u0005",
    "\u0117\u008a\u0002\u0298\u0299\u0005\u00f9{\u0002\u0299\u029a\u0005",
    "\u010f\u0086\u0002\u029a\u029b\u0005\u00dfn\u0002\u029b\u029c\u0005",
    "\u00efv\u0002\u029c\u029d\u0005\u0105\u0081\u0002\u029dF\u0003\u0002",
    "\u0002\u0002\u029e\u029f\u0005\u00f1w\u0002\u029f\u02a0\u0005\u0117",
    "\u008a\u0002\u02a0\u02a1\u0005\u00f9{\u0002\u02a1\u02a2\u0005\u010f",
    "\u0086\u0002\u02a2\u02a3\u0005\u00dfn\u0002\u02a3\u02a4\u0005\u00f3",
    "x\u0002\u02a4\u02a5\u0005\u0105\u0081\u0002\u02a5\u02a6\u0005\u010b",
    "\u0084\u0002\u02a6H\u0003\u0002\u0002\u0002\u02a7\u02a8\u0005\u00f1",
    "w\u0002\u02a8\u02a9\u0005\u0117\u008a\u0002\u02a9\u02aa\u0005\u00f9",
    "{\u0002\u02aa\u02ab\u0005\u010f\u0086\u0002\u02ab\u02ac\u0005\u00df",
    "n\u0002\u02ac\u02ad\u0005\u00f3x\u0002\u02ad\u02ae\u0005\u0111\u0087",
    "\u0002\u02ae\u02af\u0005\u0103\u0080\u0002\u02af\u02b0\u0005\u00edu",
    "\u0002\u02b0\u02b1\u0005\u010f\u0086\u0002\u02b1\u02b2\u0005\u00f9{",
    "\u0002\u02b2\u02b3\u0005\u0105\u0081\u0002\u02b3\u02b4\u0005\u0103\u0080",
    "\u0002\u02b4J\u0003\u0002\u0002\u0002\u02b5\u02b6\u0005\u00f1w\u0002",
    "\u02b6\u02b7\u0005\u0117\u008a\u0002\u02b7\u02b8\u0005\u00f9{\u0002",
    "\u02b8\u02b9\u0005\u010f\u0086\u0002\u02b9\u02ba\u0005\u00dfn\u0002",
    "\u02ba\u02bb\u0005\u0107\u0082\u0002\u02bb\u02bc\u0005\u010b\u0084\u0002",
    "\u02bc\u02bd\u0005\u0105\u0081\u0002\u02bd\u02be\u0005\u0107\u0082\u0002",
    "\u02be\u02bf\u0005\u00f1w\u0002\u02bf\u02c0\u0005\u010b\u0084\u0002",
    "\u02c0\u02c1\u0005\u010f\u0086\u0002\u02c1\u02c2\u0005\u0119\u008b\u0002",
    "\u02c2L\u0003\u0002\u0002\u0002\u02c3\u02c4\u0005\u00f1w\u0002\u02c4",
    "\u02c5\u0005\u0117\u008a\u0002\u02c5\u02c6\u0005\u00f9{\u0002\u02c6",
    "\u02c7\u0005\u010f\u0086\u0002\u02c7\u02c8\u0005\u00dfn\u0002\u02c8",
    "\u02c9\u0005\u010d\u0085\u0002\u02c9\u02ca\u0005\u0111\u0087\u0002\u02ca",
    "\u02cb\u0005\u00ebt\u0002\u02cbN\u0003\u0002\u0002\u0002\u02cc\u02cd",
    "\u0005\u00f1w\u0002\u02cd\u02ce\u0005\u0117\u008a\u0002\u02ce\u02cf",
    "\u0005\u00f9{\u0002\u02cf\u02d0\u0005\u010f\u0086\u0002\u02d0\u02d1",
    "\u0005\u00dfn\u0002\u02d1\u02d2\u0005\u0115\u0089\u0002\u02d2\u02d3",
    "\u0005\u00f7z\u0002\u02d3\u02d4\u0005\u00f9{\u0002\u02d4\u02d5\u0005",
    "\u00ff~\u0002\u02d5\u02d6\u0005\u00f1w\u0002\u02d6P\u0003\u0002\u0002",
    "\u0002\u02d7\u02d8\u0005\u00f3x\u0002\u02d8\u02d9\u0005\u00e9s\u0002",
    "\u02d9\u02da\u0005\u00ff~\u0002\u02da\u02db\u0005\u010d\u0085\u0002",
    "\u02db\u02dc\u0005\u00f1w\u0002\u02dcR\u0003\u0002\u0002\u0002\u02dd",
    "\u02de\u0005\u00f3x\u0002\u02de\u02df\u0005\u00ff~\u0002\u02df\u02e0",
    "\u0005\u0105\u0081\u0002\u02e0\u02e1\u0005\u00e9s\u0002\u02e1\u02e2",
    "\u0005\u010f\u0086\u0002\u02e2T\u0003\u0002\u0002\u0002\u02e3\u02e4",
    "\u0005\u00f3x\u0002\u02e4\u02e5\u0005\u0105\u0081\u0002\u02e5\u02e6",
    "\u0005\u010b\u0084\u0002\u02e6V\u0003\u0002\u0002\u0002\u02e7\u02e8",
    "\u0005\u00f3x\u0002\u02e8\u02e9\u0005\u0111\u0087\u0002\u02e9\u02ea",
    "\u0005\u0103\u0080\u0002\u02ea\u02eb\u0005\u00edu\u0002\u02eb\u02ec",
    "\u0005\u010f\u0086\u0002\u02ec\u02ed\u0005\u00f9{\u0002\u02ed\u02ee",
    "\u0005\u0105\u0081\u0002\u02ee\u02ef\u0005\u0103\u0080\u0002\u02efX",
    "\u0003\u0002\u0002\u0002\u02f0\u02f1\u0005\u00f5y\u0002\u02f1\u02f2",
    "\u0005\u00f1w\u0002\u02f2\u02f3\u0005\u010f\u0086\u0002\u02f3Z\u0003",
    "\u0002\u0002\u0002\u02f4\u02f5\u0005\u00f5y\u0002\u02f5\u02f6\u0005",
    "\u0105\u0081\u0002\u02f6\u02f7\u0005\u010f\u0086\u0002\u02f7\u02f8\u0005",
    "\u0105\u0081\u0002\u02f8\\\u0003\u0002\u0002\u0002\u02f9\u02fa\u0005",
    "\u00f9{\u0002\u02fa\u02fb\u0005\u00f3x\u0002\u02fb\u02fc\u0003\u0002",
    "\u0002\u0002\u02fc\u02fd\b-\u0002\u0002\u02fd^\u0003\u0002\u0002\u0002",
    "\u02fe\u02ff\u0005\u00f9{\u0002\u02ff\u0300\u0005\u00f3x\u0002\u0300",
    "\u0301\u0005\u00efv\u0002\u0301\u0302\u0005\u00f1w\u0002\u0302\u0303",
    "\u0005\u00f3x\u0002\u0303`\u0003\u0002\u0002\u0002\u0304\u0305\u0005",
    "\u00f9{\u0002\u0305\u0306\u0005\u00f3x\u0002\u0306\u0307\u0005\u0103",
    "\u0080\u0002\u0307\u0308\u0005\u00efv\u0002\u0308\u0309\u0005\u00f1",
    "w\u0002\u0309\u030a\u0005\u00f3x\u0002\u030ab\u0003\u0002\u0002\u0002",
    "\u030b\u030c\u0005\u00f9{\u0002\u030c\u030d\u0005\u0103\u0080\u0002",
    "\u030d\u030e\u0005\u00edu\u0002\u030e\u030f\u0005\u00ff~\u0002\u030f",
    "\u0310\u0005\u0111\u0087\u0002\u0310\u0311\u0005\u00efv\u0002\u0311",
    "\u0312\u0005\u00f1w\u0002\u0312d\u0003\u0002\u0002\u0002\u0313\u0314",
    "\u0005\u00f9{\u0002\u0314\u0315\u0005\u0103\u0080\u0002\u0315\u0316",
    "\u0005\u00edu\u0002\u0316\u0317\u0005\u00ff~\u0002\u0317\u0318\u0005",
    "\u0111\u0087\u0002\u0318\u0319\u0005\u00efv\u0002\u0319\u031a\u0005",
    "\u00f1w\u0002\u031a\u031b\u0005\u0107\u0082\u0002\u031b\u031c\u0005",
    "\u0107\u0082\u0002\u031cf\u0003\u0002\u0002\u0002\u031d\u031e\u0005",
    "\u00f9{\u0002\u031e\u031f\u0005\u0103\u0080\u0002\u031f\u0320\u0005",
    "\u010f\u0086\u0002\u0320\u0321\u0005\u00f1w\u0002\u0321\u0322\u0005",
    "\u00f5y\u0002\u0322\u0323\u0005\u00f1w\u0002\u0323\u0324\u0005\u010b",
    "\u0084\u0002\u0324h\u0003\u0002\u0002\u0002\u0325\u0326\u0005\u00ff",
    "~\u0002\u0326\u0327\u0005\u0105\u0081\u0002\u0327\u0328\u0005\u0103",
    "\u0080\u0002\u0328\u0329\u0005\u00f5y\u0002\u0329j\u0003\u0002\u0002",
    "\u0002\u032a\u032b\u0005\u00ff~\u0002\u032b\u032c\u0005\u0105\u0081",
    "\u0002\u032c\u032d\u0005\u0105\u0081\u0002\u032d\u032e\u0005\u0107\u0082",
    "\u0002\u032el\u0003\u0002\u0002\u0002\u032f\u0330\u0005\u0101\u007f",
    "\u0002\u0330\u0331\u0005\u0105\u0081\u0002\u0331\u0332\u0005\u00efv",
    "\u0002\u0332n\u0003\u0002\u0002\u0002\u0333\u0334\u0005\u0103\u0080",
    "\u0002\u0334\u0335\u0005\u00f1w\u0002\u0335\u0336\u0005\u0117\u008a",
    "\u0002\u0336\u0337\u0005\u010f\u0086\u0002\u0337p\u0003\u0002\u0002",
    "\u0002\u0338\u0339\u0005\u0103\u0080\u0002\u0339\u033a\u0005\u0105\u0081",
    "\u0002\u033a\u033b\u0005\u010f\u0086\u0002\u033br\u0003\u0002\u0002",
    "\u0002\u033c\u033d\u0005\u0105\u0081\u0002\u033d\u033e\u0005\u010b\u0084",
    "\u0002\u033et\u0003\u0002\u0002\u0002\u033f\u0340\u0005\u0107\u0082",
    "\u0002\u0340\u0341\u0005\u010b\u0084\u0002\u0341\u0342\u0005\u0105\u0081",
    "\u0002\u0342\u0343\u0005\u0107\u0082\u0002\u0343\u0344\u0005\u00f1w",
    "\u0002\u0344\u0345\u0005\u010b\u0084\u0002\u0345\u0346\u0005\u010f\u0086",
    "\u0002\u0346\u0347\u0005\u0119\u008b\u0002\u0347v\u0003\u0002\u0002",
    "\u0002\u0348\u0349\u0005\u0107\u0082\u0002\u0349\u034a\u0005\u0111\u0087",
    "\u0002\u034a\u034b\u0005\u00ebt\u0002\u034b\u034c\u0005\u00ff~\u0002",
    "\u034c\u034d\u0005\u00f9{\u0002\u034d\u034e\u0005\u00edu\u0002\u034e",
    "x\u0003\u0002\u0002\u0002\u034f\u0350\u0005\u010d\u0085\u0002\u0350",
    "\u0351\u0005\u00f1w\u0002\u0351\u0352\u0005\u00ff~\u0002\u0352\u0353",
    "\u0005\u00f1w\u0002\u0353\u0354\u0005\u00edu\u0002\u0354\u0355\u0005",
    "\u010f\u0086\u0002\u0355z\u0003\u0002\u0002\u0002\u0356\u0357\u0005",
    "\u010d\u0085\u0002\u0357\u0358\u0005\u00f1w\u0002\u0358\u0359\u0005",
    "\u010f\u0086\u0002\u0359|\u0003\u0002\u0002\u0002\u035a\u035b\u0005",
    "\u010d\u0085\u0002\u035b\u035c\u0005\u00f7z\u0002\u035c\u035d\u0005",
    "\u00ff~\u0002\u035d~\u0003\u0002\u0002\u0002\u035e\u035f\u0005\u010d",
    "\u0085\u0002\u035f\u0360\u0005\u00f7z\u0002\u0360\u0361\u0005\u0105",
    "\u0081\u0002\u0361\u0362\u0005\u010b\u0084\u0002\u0362\u0363\u0005\u010f",
    "\u0086\u0002\u0363\u0080\u0003\u0002\u0002\u0002\u0364\u0365\u0005\u010d",
    "\u0085\u0002\u0365\u0366\u0005\u00f7z\u0002\u0366\u0367\u0005\u010b",
    "\u0084\u0002\u0367\u0082\u0003\u0002\u0002\u0002\u0368\u0369\u0005\u010d",
    "\u0085\u0002\u0369\u036a\u0005\u00f9{\u0002\u036a\u036b\u0005\u011b",
    "\u008c\u0002\u036b\u036c\u0005\u00f1w\u0002\u036c\u036d\u0005\u0105",
    "\u0081\u0002\u036d\u036e\u0005\u00f3x\u0002\u036e\u0084\u0003\u0002",
    "\u0002\u0002\u036f\u0370\u0005\u010d\u0085\u0002\u0370\u0371\u0005\u010f",
    "\u0086\u0002\u0371\u0372\u0005\u00f1w\u0002\u0372\u0373\u0005\u0107",
    "\u0082\u0002\u0373\u0086\u0003\u0002\u0002\u0002\u0374\u0375\u0005\u010d",
    "\u0085\u0002\u0375\u0376\u0005\u010f\u0086\u0002\u0376\u0377\u0005\u010b",
    "\u0084\u0002\u0377\u0378\u0005\u00f9{\u0002\u0378\u0379\u0005\u0103",
    "\u0080\u0002\u0379\u037a\u0005\u00f5y\u0002\u037a\u0088\u0003\u0002",
    "\u0002\u0002\u037b\u037c\u0005\u010d\u0085\u0002\u037c\u037d\u0005\u0111",
    "\u0087\u0002\u037d\u037e\u0005\u00ebt\u0002\u037e\u008a\u0003\u0002",
    "\u0002\u0002\u037f\u0380\u0005\u010f\u0086\u0002\u0380\u0381\u0005\u00f7",
    "z\u0002\u0381\u0382\u0005\u00f1w\u0002\u0382\u0383\u0005\u0103\u0080",
    "\u0002\u0383\u008c\u0003\u0002\u0002\u0002\u0384\u0385\u0005\u010f\u0086",
    "\u0002\u0385\u0386\u0005\u0105\u0081\u0002\u0386\u008e\u0003\u0002\u0002",
    "\u0002\u0387\u0388\u0005\u010f\u0086\u0002\u0388\u0389\u0005\u010b\u0084",
    "\u0002\u0389\u038a\u0005\u0111\u0087\u0002\u038a\u038b\u0005\u00f1w",
    "\u0002\u038b\u0090\u0003\u0002\u0002\u0002\u038c\u038d\u0005\u010f\u0086",
    "\u0002\u038d\u038e\u0005\u0119\u008b\u0002\u038e\u038f\u0005\u0107\u0082",
    "\u0002\u038f\u0390\u0005\u00f1w\u0002\u0390\u0092\u0003\u0002\u0002",
    "\u0002\u0391\u0392\u0005\u0111\u0087\u0002\u0392\u0393\u0005\u0103\u0080",
    "\u0002\u0393\u0394\u0005\u00efv\u0002\u0394\u0395\u0005\u00f1w\u0002",
    "\u0395\u0396\u0005\u00f3x\u0002\u0396\u0094\u0003\u0002\u0002\u0002",
    "\u0397\u0398\u0005\u0111\u0087\u0002\u0398\u0399\u0005\u0103\u0080\u0002",
    "\u0399\u039a\u0005\u010f\u0086\u0002\u039a\u039b\u0005\u00f9{\u0002",
    "\u039b\u039c\u0005\u00ff~\u0002\u039c\u0096\u0003\u0002\u0002\u0002",
    "\u039d\u039e\u0005\u0115\u0089\u0002\u039e\u039f\u0005\u00f1w\u0002",
    "\u039f\u03a0\u0005\u0103\u0080\u0002\u03a0\u03a1\u0005\u00efv\u0002",
    "\u03a1\u0098\u0003\u0002\u0002\u0002\u03a2\u03a3\u0005\u0115\u0089\u0002",
    "\u03a3\u03a4\u0005\u00f7z\u0002\u03a4\u03a5\u0005\u00f9{\u0002\u03a5",
    "\u03a6\u0005\u00ff~\u0002\u03a6\u03a7\u0005\u00f1w\u0002\u03a7\u009a",
    "\u0003\u0002\u0002\u0002\u03a8\u03a9\u0005\u0115\u0089\u0002\u03a9\u03aa",
    "\u0005\u0105\u0081\u0002\u03aa\u03ab\u0005\u010b\u0084\u0002\u03ab\u03ac",
    "\u0005\u00efv\u0002\u03ac\u009c\u0003\u0002\u0002\u0002\u03ad\u03ae",
    "\u0005\u0117\u008a\u0002\u03ae\u03af\u0005\u0105\u0081\u0002\u03af\u03b0",
    "\u0005\u010b\u0084\u0002\u03b0\u009e\u0003\u0002\u0002\u0002\u03b1\u03b2",
    "\u0007%\u0002\u0002\u03b2\u03b3\u0003\u0002\u0002\u0002\u03b3\u03b4",
    "\bN\u0003\u0002\u03b4\u03b5\bN\u0004\u0002\u03b5\u00a0\u0003\u0002\u0002",
    "\u0002\u03b6\u03bc\t\u0002\u0002\u0002\u03b7\u03bb\n\u0003\u0002\u0002",
    "\u03b8\u03b9\u0007$\u0002\u0002\u03b9\u03bb\u0007$\u0002\u0002\u03ba",
    "\u03b7\u0003\u0002\u0002\u0002\u03ba\u03b8\u0003\u0002\u0002\u0002\u03bb",
    "\u03be\u0003\u0002\u0002\u0002\u03bc\u03ba\u0003\u0002\u0002\u0002\u03bc",
    "\u03bd\u0003\u0002\u0002\u0002\u03bd\u03bf\u0003\u0002\u0002\u0002\u03be",
    "\u03bc\u0003\u0002\u0002\u0002\u03bf\u03c0\t\u0002\u0002\u0002\u03c0",
    "\u00a2\u0003\u0002\u0002\u0002\u03c1\u03c7\u0007b\u0002\u0002\u03c2",
    "\u03c3\u0007^\u0002\u0002\u03c3\u03c6\u0007b\u0002\u0002\u03c4\u03c6",
    "\n\u0004\u0002\u0002\u03c5\u03c2\u0003\u0002\u0002\u0002\u03c5\u03c4",
    "\u0003\u0002\u0002\u0002\u03c6\u03c9\u0003\u0002\u0002\u0002\u03c7\u03c5",
    "\u0003\u0002\u0002\u0002\u03c7\u03c8\u0003\u0002\u0002\u0002\u03c8\u03ca",
    "\u0003\u0002\u0002\u0002\u03c9\u03c7\u0003\u0002\u0002\u0002\u03ca\u03cb",
    "\u0007b\u0002\u0002\u03cb\u00a4\u0003\u0002\u0002\u0002\u03cc\u03cd",
    "\u0007(\u0002\u0002\u03cd\u03cf\u0005\u00f7z\u0002\u03ce\u03d0\t\u0005",
    "\u0002\u0002\u03cf\u03ce\u0003\u0002\u0002\u0002\u03d0\u03d1\u0003\u0002",
    "\u0002\u0002\u03d1\u03cf\u0003\u0002\u0002\u0002\u03d1\u03d2\u0003\u0002",
    "\u0002\u0002\u03d2\u00a6\u0003\u0002\u0002\u0002\u03d3\u03d4\u0007(",
    "\u0002\u0002\u03d4\u03d6\u0005\u00ebt\u0002\u03d5\u03d7\t\u0006\u0002",
    "\u0002\u03d6\u03d5\u0003\u0002\u0002\u0002\u03d7\u03d8\u0003\u0002\u0002",
    "\u0002\u03d8\u03d6\u0003\u0002\u0002\u0002\u03d8\u03d9\u0003\u0002\u0002",
    "\u0002\u03d9\u00a8\u0003\u0002\u0002\u0002\u03da\u03dc\u0005\u00e5q",
    "\u0002\u03db\u03da\u0003\u0002\u0002\u0002\u03dc\u03dd\u0003\u0002\u0002",
    "\u0002\u03dd\u03db\u0003\u0002\u0002\u0002\u03dd\u03de\u0003\u0002\u0002",
    "\u0002\u03de\u00aa\u0003\u0002\u0002\u0002\u03df\u03e0\t\u0007\u0002",
    "\u0002\u03e0\u00ac\u0003\u0002\u0002\u0002\u03e1\u03e2\u0007?\u0002",
    "\u0002\u03e2\u00ae\u0003\u0002\u0002\u0002\u03e3\u03e4\u0007@\u0002",
    "\u0002\u03e4\u03e5\u0007?\u0002\u0002\u03e5\u00b0\u0003\u0002\u0002",
    "\u0002\u03e6\u03e7\u0007@\u0002\u0002\u03e7\u00b2\u0003\u0002\u0002",
    "\u0002\u03e8\u03e9\u0007>\u0002\u0002\u03e9\u03ea\u0007?\u0002\u0002",
    "\u03ea\u00b4\u0003\u0002\u0002\u0002\u03eb\u03ec\u0007*\u0002\u0002",
    "\u03ec\u00b6\u0003\u0002\u0002\u0002\u03ed\u03ee\u0007>\u0002\u0002",
    "\u03ee\u00b8\u0003\u0002\u0002\u0002\u03ef\u03f0\u0007/\u0002\u0002",
    "\u03f0\u00ba\u0003\u0002\u0002\u0002\u03f1\u03f2\u0007,\u0002\u0002",
    "\u03f2\u00bc\u0003\u0002\u0002\u0002\u03f3\u03f4\u0007>\u0002\u0002",
    "\u03f4\u03f5\u0007@\u0002\u0002\u03f5\u00be\u0003\u0002\u0002\u0002",
    "\u03f6\u03f7\u0007-\u0002\u0002\u03f7\u00c0\u0003\u0002\u0002\u0002",
    "\u03f8\u03f9\u0007+\u0002\u0002\u03f9\u00c2\u0003\u0002\u0002\u0002",
    "\u03fa\u03fb\u0007]\u0002\u0002\u03fb\u00c4\u0003\u0002\u0002\u0002",
    "\u03fc\u03fd\u0007_\u0002\u0002\u03fd\u00c6\u0003\u0002\u0002\u0002",
    "\u03fe\u03ff\u0007}\u0002\u0002\u03ff\u00c8\u0003\u0002\u0002\u0002",
    "\u0400\u0401\u0007\u007f\u0002\u0002\u0401\u00ca\u0003\u0002\u0002\u0002",
    "\u0402\u0404\u0007\u000f\u0002\u0002\u0403\u0402\u0003\u0002\u0002\u0002",
    "\u0403\u0404\u0003\u0002\u0002\u0002\u0404\u0405\u0003\u0002\u0002\u0002",
    "\u0405\u0406\u0007\f\u0002\u0002\u0406\u0407\u0003\u0002\u0002\u0002",
    "\u0407\u0408\bd\u0005\u0002\u0408\u00cc\u0003\u0002\u0002\u0002\u0409",
    "\u040d\u0005\u00cff\u0002\u040a\u040c\n\b\u0002\u0002\u040b\u040a\u0003",
    "\u0002\u0002\u0002\u040c\u040f\u0003\u0002\u0002\u0002\u040d\u040b\u0003",
    "\u0002\u0002\u0002\u040d\u040e\u0003\u0002\u0002\u0002\u040e\u0410\u0003",
    "\u0002\u0002\u0002\u040f\u040d\u0003\u0002\u0002\u0002\u0410\u0411\b",
    "e\u0006\u0002\u0411\u00ce\u0003\u0002\u0002\u0002\u0412\u0413\u0007",
    ")\u0002\u0002\u0413\u00d0\u0003\u0002\u0002\u0002\u0414\u0415\u0007",
    "<\u0002\u0002\u0415\u00d2\u0003\u0002\u0002\u0002\u0416\u0417\u0007",
    "=\u0002\u0002\u0417\u00d4\u0003\u0002\u0002\u0002\u0418\u0419\u0007",
    ".\u0002\u0002\u0419\u00d6\u0003\u0002\u0002\u0002\u041a\u041b\u0007",
    "0\u0002\u0002\u041b\u00d8\u0003\u0002\u0002\u0002\u041c\u041d\u0007",
    "#\u0002\u0002\u041d\u00da\u0003\u0002\u0002\u0002\u041e\u041f\u0007",
    "a\u0002\u0002\u041f\u00dc\u0003\u0002\u0002\u0002\u0420\u0421\u0005",
    "\u010d\u0085\u0002\u0421\u0422\u0005\u0119\u008b\u0002\u0422\u0423\u0005",
    "\u010d\u0085\u0002\u0423\u0424\u0005\u00edu\u0002\u0424\u0425\u0005",
    "\u00e9s\u0002\u0425\u0426\u0005\u00ff~\u0002\u0426\u0427\u0005\u00ff",
    "~\u0002\u0427\u00de\u0003\u0002\u0002\u0002\u0428\u042a\t\t\u0002\u0002",
    "\u0429\u0428\u0003\u0002\u0002\u0002\u042a\u042b\u0003\u0002\u0002\u0002",
    "\u042b\u0429\u0003\u0002\u0002\u0002\u042b\u042c\u0003\u0002\u0002\u0002",
    "\u042c\u042d\u0003\u0002\u0002\u0002\u042d\u042e\bn\u0007\u0002\u042e",
    "\u00e0\u0003\u0002\u0002\u0002\u042f\u0433\u0005\u00e3p\u0002\u0430",
    "\u0432\u0005\u00e7r\u0002\u0431\u0430\u0003\u0002\u0002\u0002\u0432",
    "\u0435\u0003\u0002\u0002\u0002\u0433\u0431\u0003\u0002\u0002\u0002\u0433",
    "\u0434\u0003\u0002\u0002\u0002\u0434\u00e2\u0003\u0002\u0002\u0002\u0435",
    "\u0433\u0003\u0002\u0002\u0002\u0436\u0437\t\n\u0002\u0002\u0437\u00e4",
    "\u0003\u0002\u0002\u0002\u0438\u0439\t\u000b\u0002\u0002\u0439\u00e6",
    "\u0003\u0002\u0002\u0002\u043a\u043b\t\f\u0002\u0002\u043b\u00e8\u0003",
    "\u0002\u0002\u0002\u043c\u043d\t\r\u0002\u0002\u043d\u00ea\u0003\u0002",
    "\u0002\u0002\u043e\u043f\t\u000e\u0002\u0002\u043f\u00ec\u0003\u0002",
    "\u0002\u0002\u0440\u0441\t\u000f\u0002\u0002\u0441\u00ee\u0003\u0002",
    "\u0002\u0002\u0442\u0443\t\u0010\u0002\u0002\u0443\u00f0\u0003\u0002",
    "\u0002\u0002\u0444\u0445\t\u0011\u0002\u0002\u0445\u00f2\u0003\u0002",
    "\u0002\u0002\u0446\u0447\t\u0012\u0002\u0002\u0447\u00f4\u0003\u0002",
    "\u0002\u0002\u0448\u0449\t\u0013\u0002\u0002\u0449\u00f6\u0003\u0002",
    "\u0002\u0002\u044a\u044b\t\u0014\u0002\u0002\u044b\u00f8\u0003\u0002",
    "\u0002\u0002\u044c\u044d\t\u0015\u0002\u0002\u044d\u00fa\u0003\u0002",
    "\u0002\u0002\u044e\u044f\t\u0016\u0002\u0002\u044f\u00fc\u0003\u0002",
    "\u0002\u0002\u0450\u0451\t\u0017\u0002\u0002\u0451\u00fe\u0003\u0002",
    "\u0002\u0002\u0452\u0453\t\u0018\u0002\u0002\u0453\u0100\u0003\u0002",
    "\u0002\u0002\u0454\u0455\t\u0019\u0002\u0002\u0455\u0102\u0003\u0002",
    "\u0002\u0002\u0456\u0457\t\u001a\u0002\u0002\u0457\u0104\u0003\u0002",
    "\u0002\u0002\u0458\u0459\t\u001b\u0002\u0002\u0459\u0106\u0003\u0002",
    "\u0002\u0002\u045a\u045b\t\u001c\u0002\u0002\u045b\u0108\u0003\u0002",
    "\u0002\u0002\u045c\u045d\t\u001d\u0002\u0002\u045d\u010a\u0003\u0002",
    "\u0002\u0002\u045e\u045f\t\u001e\u0002\u0002\u045f\u010c\u0003\u0002",
    "\u0002\u0002\u0460\u0461\t\u001f\u0002\u0002\u0461\u010e\u0003\u0002",
    "\u0002\u0002\u0462\u0463\t \u0002\u0002\u0463\u0110\u0003\u0002\u0002",
    "\u0002\u0464\u0465\t!\u0002\u0002\u0465\u0112\u0003\u0002\u0002\u0002",
    "\u0466\u0467\t\"\u0002\u0002\u0467\u0114\u0003\u0002\u0002\u0002\u0468",
    "\u0469\t#\u0002\u0002\u0469\u0116\u0003\u0002\u0002\u0002\u046a\u046b",
    "\t$\u0002\u0002\u046b\u0118\u0003\u0002\u0002\u0002\u046c\u046d\t%\u0002",
    "\u0002\u046d\u011a\u0003\u0002\u0002\u0002\u046e\u046f\t&\u0002\u0002",
    "\u046f\u011c\u0003\u0002\u0002\u0002\u0470\u0472\u0005c0\u0002\u0471",
    "\u0473\t\t\u0002\u0002\u0472\u0471\u0003\u0002\u0002\u0002\u0473\u0474",
    "\u0003\u0002\u0002\u0002\u0474\u0472\u0003\u0002\u0002\u0002\u0474\u0475",
    "\u0003\u0002\u0002\u0002\u0475\u0476\u0003\u0002\u0002\u0002\u0476\u0477",
    "\b\u008d\u0003\u0002\u0477\u0478\b\u008d\b\u0002\u0478\u011e\u0003\u0002",
    "\u0002\u0002\u0479\u047b\u0005e1\u0002\u047a\u047c\t\t\u0002\u0002\u047b",
    "\u047a\u0003\u0002\u0002\u0002\u047c\u047d\u0003\u0002\u0002\u0002\u047d",
    "\u047b\u0003\u0002\u0002\u0002\u047d\u047e\u0003\u0002\u0002\u0002\u047e",
    "\u047f\u0003\u0002\u0002\u0002\u047f\u0480\b\u008e\u0003\u0002\u0480",
    "\u0481\b\u008e\b\u0002\u0481\u0120\u0003\u0002\u0002\u0002\u0482\u0483",
    "\u0005\u00efv\u0002\u0483\u0484\u0005\u00f1w\u0002\u0484\u0485\u0005",
    "\u00f3x\u0002\u0485\u0486\u0005\u00f9{\u0002\u0486\u0487\u0005\u0103",
    "\u0080\u0002\u0487\u0489\u0005\u00f1w\u0002\u0488\u048a\t\t\u0002\u0002",
    "\u0489\u0488\u0003\u0002\u0002\u0002\u048a\u048b\u0003\u0002\u0002\u0002",
    "\u048b\u0489\u0003\u0002\u0002\u0002\u048b\u048c\u0003\u0002\u0002\u0002",
    "\u048c\u048d\u0003\u0002\u0002\u0002\u048d\u048e\b\u008f\u0003\u0002",
    "\u048e\u048f\b\u008f\t\u0002\u048f\u0122\u0003\u0002\u0002\u0002\u0490",
    "\u0491\u0005\u00f9{\u0002\u0491\u0492\u0005\u00f3x\u0002\u0492\u0493",
    "\u0003\u0002\u0002\u0002\u0493\u0494\b\u0090\u0003\u0002\u0494\u0124",
    "\u0003\u0002\u0002\u0002\u0495\u0496\u0005\u00f1w\u0002\u0496\u0497",
    "\u0005\u00ff~\u0002\u0497\u0498\u0005\u00f9{\u0002\u0498\u0499\u0005",
    "\u00f3x\u0002\u0499\u049a\u0003\u0002\u0002\u0002\u049a\u049b\b\u0091",
    "\u0003\u0002\u049b\u0126\u0003\u0002\u0002\u0002\u049c\u049d\u0005\u00f1",
    "w\u0002\u049d\u049e\u0005\u00ff~\u0002\u049e\u049f\u0005\u010d\u0085",
    "\u0002\u049f\u04a0\u0005\u00f1w\u0002\u04a0\u04a1\u0003\u0002\u0002",
    "\u0002\u04a1\u04a2\b\u0092\u0003\u0002\u04a2\u0128\u0003\u0002\u0002",
    "\u0002\u04a3\u04a4\u0005\u0111\u0087\u0002\u04a4\u04a5\u0005\u0103\u0080",
    "\u0002\u04a5\u04a6\u0005\u00efv\u0002\u04a6\u04a7\u0005\u00f1w\u0002",
    "\u04a7\u04a8\u0005\u00f3x\u0002\u04a8\u04a9\u0003\u0002\u0002\u0002",
    "\u04a9\u04aa\b\u0093\u0003\u0002\u04aa\u012a\u0003\u0002\u0002\u0002",
    "\u04ab\u04ac\u0005\u00f9{\u0002\u04ac\u04ad\u0005\u00f3x\u0002\u04ad",
    "\u04ae\u0005\u00efv\u0002\u04ae\u04af\u0005\u00f1w\u0002\u04af\u04b0",
    "\u0005\u00f3x\u0002\u04b0\u04b1\u0003\u0002\u0002\u0002\u04b1\u04b2",
    "\b\u0094\u0003\u0002\u04b2\u012c\u0003\u0002\u0002\u0002\u04b3\u04b4",
    "\u0005\u00f9{\u0002\u04b4\u04b5\u0005\u00f3x\u0002\u04b5\u04b6\u0005",
    "\u0103\u0080\u0002\u04b6\u04b7\u0005\u00efv\u0002\u04b7\u04b8\u0005",
    "\u00f1w\u0002\u04b8\u04b9\u0005\u00f3x\u0002\u04b9\u04ba\u0003\u0002",
    "\u0002\u0002\u04ba\u04bb\b\u0095\u0003\u0002\u04bb\u012e\u0003\u0002",
    "\u0002\u0002\u04bc\u04bd\u0005\u00f1w\u0002\u04bd\u04be\u0005\u0103",
    "\u0080\u0002\u04be\u04bf\u0005\u00efv\u0002\u04bf\u04c0\u0005\u00df",
    "n\u0002\u04c0\u04c1\u0005\u00f9{\u0002\u04c1\u04c2\u0005\u00f3x\u0002",
    "\u04c2\u04c3\u0003\u0002\u0002\u0002\u04c3\u04c4\b\u0096\u0003\u0002",
    "\u04c4\u0130\u0003\u0002\u0002\u0002\u04c5\u04c6\u0005\u00f1w\u0002",
    "\u04c6\u04c7\u0005\u010b\u0084\u0002\u04c7\u04c8\u0005\u010b\u0084\u0002",
    "\u04c8\u04c9\u0005\u0105\u0081\u0002\u04c9\u04ca\u0005\u010b\u0084\u0002",
    "\u04ca\u04cb\u0003\u0002\u0002\u0002\u04cb\u04cc\b\u0097\u0003\u0002",
    "\u04cc\u04cd\b\u0097\b\u0002\u04cd\u0132\u0003\u0002\u0002\u0002\u04ce",
    "\u04cf\u0007#\u0002\u0002\u04cf\u04d0\u0003\u0002\u0002\u0002\u04d0",
    "\u04d1\b\u0098\u0003\u0002\u04d1\u0134\u0003\u0002\u0002\u0002\u04d2",
    "\u04d3\u0007*\u0002\u0002\u04d3\u04d4\u0003\u0002\u0002\u0002\u04d4",
    "\u04d5\b\u0099\u0003\u0002\u04d5\u0136\u0003\u0002\u0002\u0002\u04d6",
    "\u04d7\u0007+\u0002\u0002\u04d7\u04d8\u0003\u0002\u0002\u0002\u04d8",
    "\u04d9\b\u009a\u0003\u0002\u04d9\u0138\u0003\u0002\u0002\u0002\u04da",
    "\u04db\u0007?\u0002\u0002\u04db\u04dc\u0003\u0002\u0002\u0002\u04dc",
    "\u04dd\b\u009b\u0003\u0002\u04dd\u013a\u0003\u0002\u0002\u0002\u04de",
    "\u04df\u0007>\u0002\u0002\u04df\u04e0\u0007@\u0002\u0002\u04e0\u04e1",
    "\u0003\u0002\u0002\u0002\u04e1\u04e2\b\u009c\u0003\u0002\u04e2\u013c",
    "\u0003\u0002\u0002\u0002\u04e3\u04e4\u0005\t\u0003\u0002\u04e4\u04e5",
    "\u0003\u0002\u0002\u0002\u04e5\u04e6\b\u009d\u0003\u0002\u04e6\u013e",
    "\u0003\u0002\u0002\u0002\u04e7\u04e8\u0005s8\u0002\u04e8\u04e9\u0003",
    "\u0002\u0002\u0002\u04e9\u04ea\b\u009e\u0003\u0002\u04ea\u0140\u0003",
    "\u0002\u0002\u0002\u04eb\u04ec\u0007>\u0002\u0002\u04ec\u04ed\u0003",
    "\u0002\u0002\u0002\u04ed\u04ee\b\u009f\u0003\u0002\u04ee\u0142\u0003",
    "\u0002\u0002\u0002\u04ef\u04f0\u0007@\u0002\u0002\u04f0\u04f1\u0003",
    "\u0002\u0002\u0002\u04f1\u04f2\b\u00a0\u0003\u0002\u04f2\u0144\u0003",
    "\u0002\u0002\u0002\u04f3\u04f4\u0007>\u0002\u0002\u04f4\u04f5\u0007",
    "?\u0002\u0002\u04f5\u04f6\u0003\u0002\u0002\u0002\u04f6\u04f7\b\u00a1",
    "\u0003\u0002\u04f7\u0146\u0003\u0002\u0002\u0002\u04f8\u04f9\u0007@",
    "\u0002\u0002\u04f9\u04fa\u0007?\u0002\u0002\u04fa\u04fb\u0003\u0002",
    "\u0002\u0002\u04fb\u04fc\b\u00a2\u0003\u0002\u04fc\u0148\u0003\u0002",
    "\u0002\u0002\u04fd\u04ff\t\t\u0002\u0002\u04fe\u04fd\u0003\u0002\u0002",
    "\u0002\u04ff\u0500\u0003\u0002\u0002\u0002\u0500\u04fe\u0003\u0002\u0002",
    "\u0002\u0500\u0501\u0003\u0002\u0002\u0002\u0501\u0502\u0003\u0002\u0002",
    "\u0002\u0502\u0503\b\u00a3\u0007\u0002\u0503\u0504\b\u00a3\n\u0002\u0504",
    "\u014a\u0003\u0002\u0002\u0002\u0505\u0509\u0005\u00e3p\u0002\u0506",
    "\u0508\u0005\u00e7r\u0002\u0507\u0506\u0003\u0002\u0002\u0002\u0508",
    "\u050b\u0003\u0002\u0002\u0002\u0509\u0507\u0003\u0002\u0002\u0002\u0509",
    "\u050a\u0003\u0002\u0002\u0002\u050a\u050c\u0003\u0002\u0002\u0002\u050b",
    "\u0509\u0003\u0002\u0002\u0002\u050c\u050d\b\u00a4\u0003\u0002\u050d",
    "\u014c\u0003\u0002\u0002\u0002\u050e\u0510\u0005\u00e5q\u0002\u050f",
    "\u050e\u0003\u0002\u0002\u0002\u0510\u0511\u0003\u0002\u0002\u0002\u0511",
    "\u050f\u0003\u0002\u0002\u0002\u0511\u0512\u0003\u0002\u0002\u0002\u0512",
    "\u0513\u0003\u0002\u0002\u0002\u0513\u0514\b\u00a5\u0003\u0002\u0514",
    "\u014e\u0003\u0002\u0002\u0002\u0515\u0517\u0005\u00e5q\u0002\u0516",
    "\u0515\u0003\u0002\u0002\u0002\u0517\u0518\u0003\u0002\u0002\u0002\u0518",
    "\u0516\u0003\u0002\u0002\u0002\u0518\u0519\u0003\u0002\u0002\u0002\u0519",
    "\u051a\u0003\u0002\u0002\u0002\u051a\u051e\u00070\u0002\u0002\u051b",
    "\u051d\u0005\u00e5q\u0002\u051c\u051b\u0003\u0002\u0002\u0002\u051d",
    "\u0520\u0003\u0002\u0002\u0002\u051e\u051c\u0003\u0002\u0002\u0002\u051e",
    "\u051f\u0003\u0002\u0002\u0002\u051f\u0528\u0003\u0002\u0002\u0002\u0520",
    "\u051e\u0003\u0002\u0002\u0002\u0521\u0523\u00070\u0002\u0002\u0522",
    "\u0524\u0005\u00e5q\u0002\u0523\u0522\u0003\u0002\u0002\u0002\u0524",
    "\u0525\u0003\u0002\u0002\u0002\u0525\u0523\u0003\u0002\u0002\u0002\u0525",
    "\u0526\u0003\u0002\u0002\u0002\u0526\u0528\u0003\u0002\u0002\u0002\u0527",
    "\u0516\u0003\u0002\u0002\u0002\u0527\u0521\u0003\u0002\u0002\u0002\u0528",
    "\u0529\u0003\u0002\u0002\u0002\u0529\u052a\b\u00a6\u0003\u0002\u052a",
    "\u0150\u0003\u0002\u0002\u0002\u052b\u052d\u0007\u000f\u0002\u0002\u052c",
    "\u052b\u0003\u0002\u0002\u0002\u052c\u052d\u0003\u0002\u0002\u0002\u052d",
    "\u052e\u0003\u0002\u0002\u0002\u052e\u052f\u0007\f\u0002\u0002\u052f",
    "\u0530\u0003\u0002\u0002\u0002\u0530\u0531\b\u00a7\u0007\u0002\u0531",
    "\u0532\b\u00a7\u000b\u0002\u0532\u0152\u0003\u0002\u0002\u0002\u0533",
    "\u0537\u0007)\u0002\u0002\u0534\u0536\n\b\u0002\u0002\u0535\u0534\u0003",
    "\u0002\u0002\u0002\u0536\u0539\u0003\u0002\u0002\u0002\u0537\u0535\u0003",
    "\u0002\u0002\u0002\u0537\u0538\u0003\u0002\u0002\u0002\u0538\u053a\u0003",
    "\u0002\u0002\u0002\u0539\u0537\u0003\u0002\u0002\u0002\u053a\u053b\b",
    "\u00a8\u0006\u0002\u053b\u0154\u0003\u0002\u0002\u0002\u053c\u053e\u0007",
    "^\u0002\u0002\u053d\u053f\u0007\u000f\u0002\u0002\u053e\u053d\u0003",
    "\u0002\u0002\u0002\u053e\u053f\u0003\u0002\u0002\u0002\u053f\u0540\u0003",
    "\u0002\u0002\u0002\u0540\u0541\u0007\f\u0002\u0002\u0541\u0542\u0003",
    "\u0002\u0002\u0002\u0542\u0543\b\u00a9\u0005\u0002\u0543\u0156\u0003",
    "\u0002\u0002\u0002\u0544\u0548\u0005\u00e3p\u0002\u0545\u0547\u0005",
    "\u00e7r\u0002\u0546\u0545\u0003\u0002\u0002\u0002\u0547\u054a\u0003",
    "\u0002\u0002\u0002\u0548\u0546\u0003\u0002\u0002\u0002\u0548\u0549\u0003",
    "\u0002\u0002\u0002\u0549\u0554\u0003\u0002\u0002\u0002\u054a\u0548\u0003",
    "\u0002\u0002\u0002\u054b\u0550\u0007*\u0002\u0002\u054c\u054f\u0005",
    "\u00e7r\u0002\u054d\u054f\t\'\u0002\u0002\u054e\u054c\u0003\u0002\u0002",
    "\u0002\u054e\u054d\u0003\u0002\u0002\u0002\u054f\u0552\u0003\u0002\u0002",
    "\u0002\u0550\u054e\u0003\u0002\u0002\u0002\u0550\u0551\u0003\u0002\u0002",
    "\u0002\u0551\u0553\u0003\u0002\u0002\u0002\u0552\u0550\u0003\u0002\u0002",
    "\u0002\u0553\u0555\u0007+\u0002\u0002\u0554\u054b\u0003\u0002\u0002",
    "\u0002\u0554\u0555\u0003\u0002\u0002\u0002\u0555\u0556\u0003\u0002\u0002",
    "\u0002\u0556\u0557\b\u00aa\u0003\u0002\u0557\u0558\b\u00aa\f\u0002\u0558",
    "\u0559\b\u00aa\b\u0002\u0559\u0158\u0003\u0002\u0002\u0002\u055a\u055c",
    "\u0007^\u0002\u0002\u055b\u055d\u0007\u000f\u0002\u0002\u055c\u055b",
    "\u0003\u0002\u0002\u0002\u055c\u055d\u0003\u0002\u0002\u0002\u055d\u055e",
    "\u0003\u0002\u0002\u0002\u055e\u055f\u0007\f\u0002\u0002\u055f\u0560",
    "\u0003\u0002\u0002\u0002\u0560\u0561\b\u00ab\u0003\u0002\u0561\u015a",
    "\u0003\u0002\u0002\u0002\u0562\u0563\u0007^\u0002\u0002\u0563\u0564",
    "\u000b\u0002\u0002\u0002\u0564\u0565\u0003\u0002\u0002\u0002\u0565\u0566",
    "\b\u00ac\u0003\u0002\u0566\u0567\b\u00ac\r\u0002\u0567\u015c\u0003\u0002",
    "\u0002\u0002\u0568\u056a\u0007\u000f\u0002\u0002\u0569\u0568\u0003\u0002",
    "\u0002\u0002\u0569\u056a\u0003\u0002\u0002\u0002\u056a\u056b\u0003\u0002",
    "\u0002\u0002\u056b\u056c\u0007\f\u0002\u0002\u056c\u056d\u0003\u0002",
    "\u0002\u0002\u056d\u056e\b\u00ad\u0007\u0002\u056e\u056f\b\u00ad\u000b",
    "\u0002\u056f\u015e\u0003\u0002\u0002\u0002\u0570\u0571\u00071\u0002",
    "\u0002\u0571\u0572\u0007,\u0002\u0002\u0572\u0576\u0003\u0002\u0002",
    "\u0002\u0573\u0575\u000b\u0002\u0002\u0002\u0574\u0573\u0003\u0002\u0002",
    "\u0002\u0575\u0578\u0003\u0002\u0002\u0002\u0576\u0577\u0003\u0002\u0002",
    "\u0002\u0576\u0574\u0003\u0002\u0002\u0002\u0577\u0579\u0003\u0002\u0002",
    "\u0002\u0578\u0576\u0003\u0002\u0002\u0002\u0579\u057a\u0007,\u0002",
    "\u0002\u057a\u057b\u00071\u0002\u0002\u057b\u057c\u0003\u0002\u0002",
    "\u0002\u057c\u057d\b\u00ae\u0006\u0002\u057d\u0160\u0003\u0002\u0002",
    "\u0002\u057e\u057f\u00071\u0002\u0002\u057f\u0580\u00071\u0002\u0002",
    "\u0580\u0584\u0003\u0002\u0002\u0002\u0581\u0583\n\b\u0002\u0002\u0582",
    "\u0581\u0003\u0002\u0002\u0002\u0583\u0586\u0003\u0002\u0002\u0002\u0584",
    "\u0582\u0003\u0002\u0002\u0002\u0584\u0585\u0003\u0002\u0002\u0002\u0585",
    "\u0587\u0003\u0002\u0002\u0002\u0586\u0584\u0003\u0002\u0002\u0002\u0587",
    "\u0588\b\u00af\u0006\u0002\u0588\u0162\u0003\u0002\u0002\u0002\u0589",
    "\u058a\u00071\u0002\u0002\u058a\u058b\u0003\u0002\u0002\u0002\u058b",
    "\u058c\b\u00b0\u0003\u0002\u058c\u058d\b\u00b0\r\u0002\u058d\u0164\u0003",
    "\u0002\u0002\u0002\u058e\u0590\n(\u0002\u0002\u058f\u058e\u0003\u0002",
    "\u0002\u0002\u0590\u0591\u0003\u0002\u0002\u0002\u0591\u058f\u0003\u0002",
    "\u0002\u0002\u0591\u0592\u0003\u0002\u0002\u0002\u0592\u0593\u0003\u0002",
    "\u0002\u0002\u0593\u0594\b\u00b1\u0003\u0002\u0594\u0166\u0003\u0002",
    "\u0002\u0002\u0595\u0596\u0005\u00e9s\u0002\u0596\u0597\u0005\u0103",
    "\u0080\u0002\u0597\u0598\u0005\u00efv\u0002\u0598\u0599\u0003\u0002",
    "\u0002\u0002\u0599\u059a\b\u00b2\u000e\u0002\u059a\u0168\u0003\u0002",
    "\u0002\u0002\u059b\u059c\u0005\u00f1w\u0002\u059c\u059d\u0005\u00ff",
    "~\u0002\u059d\u059e\u0005\u010d\u0085\u0002\u059e\u059f\u0005\u00f1",
    "w\u0002\u059f\u05a0\u0003\u0002\u0002\u0002\u05a0\u05a1\b\u00b3\u000f",
    "\u0002\u05a1\u016a\u0003\u0002\u0002\u0002\u05a2\u05a3\u0005\u00f1w",
    "\u0002\u05a3\u05a4\u0005\u0103\u0080\u0002\u05a4\u05a5\u0005\u00efv",
    "\u0002\u05a5\u05a6\u0003\u0002\u0002\u0002\u05a6\u05a7\b\u00b4\u0010",
    "\u0002\u05a7\u016c\u0003\u0002\u0002\u0002\u05a8\u05a9\u0005\u00f1w",
    "\u0002\u05a9\u05aa\u0005\u0117\u008a\u0002\u05aa\u05ab\u0005\u00f9{",
    "\u0002\u05ab\u05ac\u0005\u010f\u0086\u0002\u05ac\u05ad\u0005\u00dfn",
    "\u0002\u05ad\u05ae\u0005\u00efv\u0002\u05ae\u05af\u0005\u0105\u0081",
    "\u0002\u05af\u05b0\u0003\u0002\u0002\u0002\u05b0\u05b1\b\u00b5\u0011",
    "\u0002\u05b1\u016e\u0003\u0002\u0002\u0002\u05b2\u05b3\u0005\u00f1w",
    "\u0002\u05b3\u05b4\u0005\u0117\u008a\u0002\u05b4\u05b5\u0005\u00f9{",
    "\u0002\u05b5\u05b6\u0005\u010f\u0086\u0002\u05b6\u05b7\u0005\u00dfn",
    "\u0002\u05b7\u05b8\u0005\u00f3x\u0002\u05b8\u05b9\u0005\u0105\u0081",
    "\u0002\u05b9\u05ba\u0005\u010b\u0084\u0002\u05ba\u05bb\u0003\u0002\u0002",
    "\u0002\u05bb\u05bc\b\u00b6\u0012\u0002\u05bc\u0170\u0003\u0002\u0002",
    "\u0002\u05bd\u05be\u0005\u00f1w\u0002\u05be\u05bf\u0005\u0117\u008a",
    "\u0002\u05bf\u05c0\u0005\u00f9{\u0002\u05c0\u05c1\u0005\u010f\u0086",
    "\u0002\u05c1\u05c2\u0005\u00dfn\u0002\u05c2\u05c3\u0005\u00f3x\u0002",
    "\u05c3\u05c4\u0005\u0111\u0087\u0002\u05c4\u05c5\u0005\u0103\u0080\u0002",
    "\u05c5\u05c6\u0005\u00edu\u0002\u05c6\u05c7\u0005\u010f\u0086\u0002",
    "\u05c7\u05c8\u0005\u00f9{\u0002\u05c8\u05c9\u0005\u0105\u0081\u0002",
    "\u05c9\u05ca\u0005\u0103\u0080\u0002\u05ca\u05cb\u0003\u0002\u0002\u0002",
    "\u05cb\u05cc\b\u00b7\u0013\u0002\u05cc\u0172\u0003\u0002\u0002\u0002",
    "\u05cd\u05ce\u0005\u00f1w\u0002\u05ce\u05cf\u0005\u0117\u008a\u0002",
    "\u05cf\u05d0\u0005\u00f9{\u0002\u05d0\u05d1\u0005\u010f\u0086\u0002",
    "\u05d1\u05d2\u0005\u00dfn\u0002\u05d2\u05d3\u0005\u010d\u0085\u0002",
    "\u05d3\u05d4\u0005\u0111\u0087\u0002\u05d4\u05d5\u0005\u00ebt\u0002",
    "\u05d5\u05d6\u0003\u0002\u0002\u0002\u05d6\u05d7\b\u00b8\u0014\u0002",
    "\u05d7\u0174\u0003\u0002\u0002\u0002\u05d8\u05d9\u0005\u00f1w\u0002",
    "\u05d9\u05da\u0005\u0117\u008a\u0002\u05da\u05db\u0005\u00f9{\u0002",
    "\u05db\u05dc\u0005\u010f\u0086\u0002\u05dc\u05dd\u0005\u00dfn\u0002",
    "\u05dd\u05de\u0005\u0115\u0089\u0002\u05de\u05df\u0005\u00f7z\u0002",
    "\u05df\u05e0\u0005\u00f9{\u0002\u05e0\u05e1\u0005\u00ff~\u0002\u05e1",
    "\u05e2\u0005\u00f1w\u0002\u05e2\u05e3\u0003\u0002\u0002\u0002\u05e3",
    "\u05e4\b\u00b9\u0015\u0002\u05e4\u0176\u0003\u0002\u0002\u0002\u05e5",
    "\u05e6\u0005\u00f3x\u0002\u05e6\u05e7\u0005\u00e9s\u0002\u05e7\u05e8",
    "\u0005\u00ff~\u0002\u05e8\u05e9\u0005\u010d\u0085\u0002\u05e9\u05ea",
    "\u0005\u00f1w\u0002\u05ea\u05eb\u0003\u0002\u0002\u0002\u05eb\u05ec",
    "\b\u00ba\u0016\u0002\u05ec\u0178\u0003\u0002\u0002\u0002\u05ed\u05ee",
    "\u0005\u00f5y\u0002\u05ee\u05ef\u0005\u0105\u0081\u0002\u05ef\u05f0",
    "\u0005\u010f\u0086\u0002\u05f0\u05f1\u0005\u0105\u0081\u0002\u05f1\u05f2",
    "\u0003\u0002\u0002\u0002\u05f2\u05f3\b\u00bb\u0017\u0002\u05f3\u017a",
    "\u0003\u0002\u0002\u0002\u05f4\u05f5\u0005\u0101\u007f\u0002\u05f5\u05f6",
    "\u0005\u0105\u0081\u0002\u05f6\u05f7\u0005\u00efv\u0002\u05f7\u05f8",
    "\u0003\u0002\u0002\u0002\u05f8\u05f9\b\u00bc\u0018\u0002\u05f9\u017c",
    "\u0003\u0002\u0002\u0002\u05fa\u05fb\u0005\u0103\u0080\u0002\u05fb\u05fc",
    "\u0005\u0105\u0081\u0002\u05fc\u05fd\u0005\u010f\u0086\u0002\u05fd\u05fe",
    "\u0003\u0002\u0002\u0002\u05fe\u05ff\b\u00bd\u0019\u0002\u05ff\u017e",
    "\u0003\u0002\u0002\u0002\u0600\u0601\u0005\u0105\u0081\u0002\u0601\u0602",
    "\u0005\u010b\u0084\u0002\u0602\u0603\u0003\u0002\u0002\u0002\u0603\u0604",
    "\b\u00be\u001a\u0002\u0604\u0180\u0003\u0002\u0002\u0002\u0605\u0606",
    "\u0005\u010d\u0085\u0002\u0606\u0607\u0005\u00f7z\u0002\u0607\u0608",
    "\u0005\u00ff~\u0002\u0608\u0609\u0003\u0002\u0002\u0002\u0609\u060a",
    "\b\u00bf\u001b\u0002\u060a\u0182\u0003\u0002\u0002\u0002\u060b\u060c",
    "\u0005\u010d\u0085\u0002\u060c\u060d\u0005\u00f7z\u0002\u060d\u060e",
    "\u0005\u010b\u0084\u0002\u060e\u060f\u0003\u0002\u0002\u0002\u060f\u0610",
    "\b\u00c0\u001c\u0002\u0610\u0184\u0003\u0002\u0002\u0002\u0611\u0612",
    "\u0005\u010d\u0085\u0002\u0612\u0613\u0005\u00f9{\u0002\u0613\u0614",
    "\u0005\u011b\u008c\u0002\u0614\u0615\u0005\u00f1w\u0002\u0615\u0616",
    "\u0005\u0105\u0081\u0002\u0616\u0617\u0005\u00f3x\u0002\u0617\u0618",
    "\u0003\u0002\u0002\u0002\u0618\u0619\b\u00c1\u001d\u0002\u0619\u0186",
    "\u0003\u0002\u0002\u0002\u061a\u061b\u0005\u010f\u0086\u0002\u061b\u061c",
    "\u0005\u00f7z\u0002\u061c\u061d\u0005\u00f1w\u0002\u061d\u061e\u0005",
    "\u0103\u0080\u0002\u061e\u061f\u0003\u0002\u0002\u0002\u061f\u0620\b",
    "\u00c2\u001e\u0002\u0620\u0188\u0003\u0002\u0002\u0002\u0621\u0622\u0005",
    "\u010f\u0086\u0002\u0622\u0623\u0005\u010b\u0084\u0002\u0623\u0624\u0005",
    "\u0111\u0087\u0002\u0624\u0625\u0005\u00f1w\u0002\u0625\u0626\u0003",
    "\u0002\u0002\u0002\u0626\u0627\b\u00c3\u001f\u0002\u0627\u018a\u0003",
    "\u0002\u0002\u0002\u0628\u0629\u0005\u0117\u008a\u0002\u0629\u062a\u0005",
    "\u0105\u0081\u0002\u062a\u062b\u0005\u010b\u0084\u0002\u062b\u062c\u0003",
    "\u0002\u0002\u0002\u062c\u062d\b\u00c4 \u0002\u062d\u018c\u0003\u0002",
    "\u0002\u0002\u062e\u0634\t\u0002\u0002\u0002\u062f\u0633\n\u0003\u0002",
    "\u0002\u0630\u0631\u0007$\u0002\u0002\u0631\u0633\u0007$\u0002\u0002",
    "\u0632\u062f\u0003\u0002\u0002\u0002\u0632\u0630\u0003\u0002\u0002\u0002",
    "\u0633\u0636\u0003\u0002\u0002\u0002\u0634\u0632\u0003\u0002\u0002\u0002",
    "\u0634\u0635\u0003\u0002\u0002\u0002\u0635\u0637\u0003\u0002\u0002\u0002",
    "\u0636\u0634\u0003\u0002\u0002\u0002\u0637\u0638\t\u0002\u0002\u0002",
    "\u0638\u0639\u0003\u0002\u0002\u0002\u0639\u063a\b\u00c5!\u0002\u063a",
    "\u018e\u0003\u0002\u0002\u0002\u063b\u063c\u0007(\u0002\u0002\u063c",
    "\u063e\u0005\u00f7z\u0002\u063d\u063f\t\u0005\u0002\u0002\u063e\u063d",
    "\u0003\u0002\u0002\u0002\u063f\u0640\u0003\u0002\u0002\u0002\u0640\u063e",
    "\u0003\u0002\u0002\u0002\u0640\u0641\u0003\u0002\u0002\u0002\u0641\u0642",
    "\u0003\u0002\u0002\u0002\u0642\u0643\b\u00c6\"\u0002\u0643\u0190\u0003",
    "\u0002\u0002\u0002\u0644\u0645\u0007(\u0002\u0002\u0645\u0647\u0005",
    "\u00ebt\u0002\u0646\u0648\t\u0006\u0002\u0002\u0647\u0646\u0003\u0002",
    "\u0002\u0002\u0648\u0649\u0003\u0002\u0002\u0002\u0649\u0647\u0003\u0002",
    "\u0002\u0002\u0649\u064a\u0003\u0002\u0002\u0002\u064a\u064b\u0003\u0002",
    "\u0002\u0002\u064b\u064c\b\u00c7#\u0002\u064c\u0192\u0003\u0002\u0002",
    "\u0002\u064d\u064f\u0005\u00e5q\u0002\u064e\u064d\u0003\u0002\u0002",
    "\u0002\u064f\u0650\u0003\u0002\u0002\u0002\u0650\u064e\u0003\u0002\u0002",
    "\u0002\u0650\u0651\u0003\u0002\u0002\u0002\u0651\u0652\u0003\u0002\u0002",
    "\u0002\u0652\u0653\b\u00c8$\u0002\u0653\u0194\u0003\u0002\u0002\u0002",
    "\u0654\u0655\t\u0007\u0002\u0002\u0655\u0656\u0003\u0002\u0002\u0002",
    "\u0656\u0657\b\u00c9%\u0002\u0657\u0196\u0003\u0002\u0002\u0002\u0658",
    "\u0659\u0007?\u0002\u0002\u0659\u065a\u0003\u0002\u0002\u0002\u065a",
    "\u065b\b\u00ca&\u0002\u065b\u0198\u0003\u0002\u0002\u0002\u065c\u065d",
    "\u0007@\u0002\u0002\u065d\u065e\u0007?\u0002\u0002\u065e\u065f\u0003",
    "\u0002\u0002\u0002\u065f\u0660\b\u00cb\'\u0002\u0660\u019a\u0003\u0002",
    "\u0002\u0002\u0661\u0662\u0007@\u0002\u0002\u0662\u0663\u0003\u0002",
    "\u0002\u0002\u0663\u0664\b\u00cc(\u0002\u0664\u019c\u0003\u0002\u0002",
    "\u0002\u0665\u0666\u0007>\u0002\u0002\u0666\u0667\u0007?\u0002\u0002",
    "\u0667\u0668\u0003\u0002\u0002\u0002\u0668\u0669\b\u00cd)\u0002\u0669",
    "\u019e\u0003\u0002\u0002\u0002\u066a\u066b\u0007*\u0002\u0002\u066b",
    "\u066c\u0003\u0002\u0002\u0002\u066c\u066d\b\u00ce*\u0002\u066d\u01a0",
    "\u0003\u0002\u0002\u0002\u066e\u066f\u0007>\u0002\u0002\u066f\u0670",
    "\u0003\u0002\u0002\u0002\u0670\u0671\b\u00cf+\u0002\u0671\u01a2\u0003",
    "\u0002\u0002\u0002\u0672\u0673\u0007/\u0002\u0002\u0673\u0674\u0003",
    "\u0002\u0002\u0002\u0674\u0675\b\u00d0,\u0002\u0675\u01a4\u0003\u0002",
    "\u0002\u0002\u0676\u0677\u0007,\u0002\u0002\u0677\u0678\u0003\u0002",
    "\u0002\u0002\u0678\u0679\b\u00d1-\u0002\u0679\u01a6\u0003\u0002\u0002",
    "\u0002\u067a\u067b\u0007>\u0002\u0002\u067b\u067c\u0007@\u0002\u0002",
    "\u067c\u067d\u0003\u0002\u0002\u0002\u067d\u067e\b\u00d2.\u0002\u067e",
    "\u01a8\u0003\u0002\u0002\u0002\u067f\u0680\u0007-\u0002\u0002\u0680",
    "\u0681\u0003\u0002\u0002\u0002\u0681\u0682\b\u00d3/\u0002\u0682\u01aa",
    "\u0003\u0002\u0002\u0002\u0683\u0684\u0007+\u0002\u0002\u0684\u0685",
    "\u0003\u0002\u0002\u0002\u0685\u0686\b\u00d40\u0002\u0686\u01ac\u0003",
    "\u0002\u0002\u0002\u0687\u0689\u0007\u000f\u0002\u0002\u0688\u0687\u0003",
    "\u0002\u0002\u0002\u0688\u0689\u0003\u0002\u0002\u0002\u0689\u068a\u0003",
    "\u0002\u0002\u0002\u068a\u068b\u0007\f\u0002\u0002\u068b\u068c\u0003",
    "\u0002\u0002\u0002\u068c\u068d\b\u00d5\u000b\u0002\u068d\u068e\b\u00d5",
    "1\u0002\u068e\u01ae\u0003\u0002\u0002\u0002\u068f\u0693\u0005\u01b1",
    "\u00d7\u0002\u0690\u0692\n\b\u0002\u0002\u0691\u0690\u0003\u0002\u0002",
    "\u0002\u0692\u0695\u0003\u0002\u0002\u0002\u0693\u0691\u0003\u0002\u0002",
    "\u0002\u0693\u0694\u0003\u0002\u0002\u0002\u0694\u0696\u0003\u0002\u0002",
    "\u0002\u0695\u0693\u0003\u0002\u0002\u0002\u0696\u0697\b\u00d6\u0006",
    "\u0002\u0697\u01b0\u0003\u0002\u0002\u0002\u0698\u0699\u0007)\u0002",
    "\u0002\u0699\u069a\u0003\u0002\u0002\u0002\u069a\u069b\b\u00d72\u0002",
    "\u069b\u01b2\u0003\u0002\u0002\u0002\u069c\u069d\u0007<\u0002\u0002",
    "\u069d\u069e\u0003\u0002\u0002\u0002\u069e\u069f\b\u00d83\u0002\u069f",
    "\u01b4\u0003\u0002\u0002\u0002\u06a0\u06a1\u0007.\u0002\u0002\u06a1",
    "\u06a2\u0003\u0002\u0002\u0002\u06a2\u06a3\b\u00d94\u0002\u06a3\u01b6",
    "\u0003\u0002\u0002\u0002\u06a4\u06a5\u00070\u0002\u0002\u06a5\u06a6",
    "\u0003\u0002\u0002\u0002\u06a6\u06a7\b\u00da5\u0002\u06a7\u01b8\u0003",
    "\u0002\u0002\u0002\u06a8\u06a9\u0007#\u0002\u0002\u06a9\u06aa\u0003",
    "\u0002\u0002\u0002\u06aa\u06ab\b\u00db6\u0002\u06ab\u01ba\u0003\u0002",
    "\u0002\u0002\u06ac\u06ad\u0007a\u0002\u0002\u06ad\u06ae\u0003\u0002",
    "\u0002\u0002\u06ae\u06af\b\u00dc7\u0002\u06af\u01bc\u0003\u0002\u0002",
    "\u0002\u06b0\u06b2\t\t\u0002\u0002\u06b1\u06b0\u0003\u0002\u0002\u0002",
    "\u06b2\u06b3\u0003\u0002\u0002\u0002\u06b3\u06b1\u0003\u0002\u0002\u0002",
    "\u06b3\u06b4\u0003\u0002\u0002\u0002\u06b4\u06b5\u0003\u0002\u0002\u0002",
    "\u06b5\u06b6\b\u00dd\u0007\u0002\u06b6\u01be\u0003\u0002\u0002\u0002",
    "\u06b7\u06bb\u0005\u00e3p\u0002\u06b8\u06ba\u0005\u00e7r\u0002\u06b9",
    "\u06b8\u0003\u0002\u0002\u0002\u06ba\u06bd\u0003\u0002\u0002\u0002\u06bb",
    "\u06b9\u0003\u0002\u0002\u0002\u06bb\u06bc\u0003\u0002\u0002\u0002\u06bc",
    "\u06be\u0003\u0002\u0002\u0002\u06bd\u06bb\u0003\u0002\u0002\u0002\u06be",
    "\u06bf\b\u00de8\u0002\u06bf\u01c0\u0003\u0002\u0002\u0002\u06c0\u06c1",
    "\u000b\u0002\u0002\u0002\u06c1\u01c2\u0003\u0002\u0002\u00021\u0002",
    "\u0003\u0004\u0005\u0006\u03ba\u03bc\u03c5\u03c7\u03d1\u03d8\u03dd\u0403",
    "\u040d\u042b\u0433\u0474\u047d\u048b\u0500\u0509\u0511\u0518\u051e\u0525",
    "\u0527\u052c\u0537\u053e\u0548\u054e\u0550\u0554\u055c\u0569\u0576\u0584",
    "\u0591\u0632\u0634\u0640\u0649\u0650\u0688\u0693\u06b3\u06bb9\u0004",
    "\u0006\u0002\u0002\u0005\u0002\u0004\u0003\u0002\b\u0002\u0002\u0002",
    "\u0004\u0002\u0002\u0003\u0002\u0004\u0005\u0002\u0004\u0004\u0002\t",
    "o\u0002\u0004\u0002\u0002\t\u0087\u0002\t\u0091\u0002\t\u0004\u0002",
    "\t\u0014\u0002\t\u0016\u0002\t\"\u0002\t#\u0002\t$\u0002\t&\u0002\t",
    "\'\u0002\t(\u0002\t-\u0002\t6\u0002\t8\u0002\t9\u0002\t>\u0002\t@\u0002",
    "\tA\u0002\tE\u0002\tG\u0002\tN\u0002\tP\u0002\tR\u0002\tS\u0002\tT\u0002",
    "\tU\u0002\tV\u0002\tW\u0002\tX\u0002\tY\u0002\tZ\u0002\t[\u0002\t\\",
    "\u0002\t]\u0002\t^\u0002\t_\u0002\t`\u0002\te\u0002\tg\u0002\th\u0002",
    "\tj\u0002\tk\u0002\tl\u0002\tm\u0002\tp\u0002"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

function TibboBasicLexer(input) {
	antlr4.Lexer.call(this, input);
    this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    return this;
}

TibboBasicLexer.prototype = Object.create(antlr4.Lexer.prototype);
TibboBasicLexer.prototype.constructor = TibboBasicLexer;

Object.defineProperty(TibboBasicLexer.prototype, "atn", {
        get : function() {
                return atn;
        }
});

TibboBasicLexer.EOF = antlr4.Token.EOF;
TibboBasicLexer.OBJECT = 1;
TibboBasicLexer.AND = 2;
TibboBasicLexer.AS = 3;
TibboBasicLexer.BOOLEAN = 4;
TibboBasicLexer.REAL = 5;
TibboBasicLexer.BYREF = 6;
TibboBasicLexer.BYTE = 7;
TibboBasicLexer.BYVAL = 8;
TibboBasicLexer.CASE = 9;
TibboBasicLexer.CASE_ELSE = 10;
TibboBasicLexer.CHAR = 11;
TibboBasicLexer.CONST = 12;
TibboBasicLexer.COUNTOF = 13;
TibboBasicLexer.DECLARE = 14;
TibboBasicLexer.DIM = 15;
TibboBasicLexer.DO = 16;
TibboBasicLexer.DWORD = 17;
TibboBasicLexer.ELSE = 18;
TibboBasicLexer.ELIF = 19;
TibboBasicLexer.END = 20;
TibboBasicLexer.ELSEIF = 21;
TibboBasicLexer.ENUM = 22;
TibboBasicLexer.END_ENUM = 23;
TibboBasicLexer.END_FUNCTION = 24;
TibboBasicLexer.END_IF = 25;
TibboBasicLexer.END_PROPERTY = 26;
TibboBasicLexer.END_SELECT = 27;
TibboBasicLexer.END_SUB = 28;
TibboBasicLexer.END_TYPE = 29;
TibboBasicLexer.END_WITH = 30;
TibboBasicLexer.EVENT = 31;
TibboBasicLexer.EXIT_DO = 32;
TibboBasicLexer.EXIT_FOR = 33;
TibboBasicLexer.EXIT_FUNCTION = 34;
TibboBasicLexer.EXIT_PROPERTY = 35;
TibboBasicLexer.EXIT_SUB = 36;
TibboBasicLexer.EXIT_WHILE = 37;
TibboBasicLexer.FALSE = 38;
TibboBasicLexer.FLOAT = 39;
TibboBasicLexer.FOR = 40;
TibboBasicLexer.FUNCTION = 41;
TibboBasicLexer.GET = 42;
TibboBasicLexer.GOTO = 43;
TibboBasicLexer.IF = 44;
TibboBasicLexer.IFDEF = 45;
TibboBasicLexer.IFNDEF = 46;
TibboBasicLexer.INCLUDE = 47;
TibboBasicLexer.INCLUDEPP = 48;
TibboBasicLexer.INTEGER = 49;
TibboBasicLexer.LONG = 50;
TibboBasicLexer.LOOP = 51;
TibboBasicLexer.MOD = 52;
TibboBasicLexer.NEXT = 53;
TibboBasicLexer.NOT = 54;
TibboBasicLexer.OR = 55;
TibboBasicLexer.PROPERTY = 56;
TibboBasicLexer.PUBLIC = 57;
TibboBasicLexer.SELECT = 58;
TibboBasicLexer.SET = 59;
TibboBasicLexer.SHL = 60;
TibboBasicLexer.SHORT = 61;
TibboBasicLexer.SHR = 62;
TibboBasicLexer.SIZEOF = 63;
TibboBasicLexer.STEP = 64;
TibboBasicLexer.STRING = 65;
TibboBasicLexer.SUB = 66;
TibboBasicLexer.THEN = 67;
TibboBasicLexer.TO = 68;
TibboBasicLexer.TRUE = 69;
TibboBasicLexer.TYPE = 70;
TibboBasicLexer.UNDEF = 71;
TibboBasicLexer.UNTIL = 72;
TibboBasicLexer.WEND = 73;
TibboBasicLexer.WHILE = 74;
TibboBasicLexer.WORD = 75;
TibboBasicLexer.XOR = 76;
TibboBasicLexer.SHARP = 77;
TibboBasicLexer.STRINGLITERAL = 78;
TibboBasicLexer.TemplateStringLiteral = 79;
TibboBasicLexer.HEXLITERAL = 80;
TibboBasicLexer.BINLITERAL = 81;
TibboBasicLexer.INTEGERLITERAL = 82;
TibboBasicLexer.DIV = 83;
TibboBasicLexer.EQ = 84;
TibboBasicLexer.GEQ = 85;
TibboBasicLexer.GT = 86;
TibboBasicLexer.LEQ = 87;
TibboBasicLexer.LPAREN = 88;
TibboBasicLexer.LT = 89;
TibboBasicLexer.MINUS = 90;
TibboBasicLexer.MULT = 91;
TibboBasicLexer.NEQ = 92;
TibboBasicLexer.PLUS = 93;
TibboBasicLexer.RPAREN = 94;
TibboBasicLexer.L_SQUARE_BRACKET = 95;
TibboBasicLexer.R_SQUARE_BRACKET = 96;
TibboBasicLexer.L_CURLY_BRACKET = 97;
TibboBasicLexer.R_CURLY_BRACKET = 98;
TibboBasicLexer.NEWLINE = 99;
TibboBasicLexer.COMMENT = 100;
TibboBasicLexer.SINGLEQUOTE = 101;
TibboBasicLexer.COLON = 102;
TibboBasicLexer.SEMICOLON = 103;
TibboBasicLexer.COMMA = 104;
TibboBasicLexer.DOT = 105;
TibboBasicLexer.BANG = 106;
TibboBasicLexer.UNDERSCORE = 107;
TibboBasicLexer.SYSCALL = 108;
TibboBasicLexer.WS = 109;
TibboBasicLexer.IDENTIFIER = 110;
TibboBasicLexer.DIRECTIVE_INCLUDE = 111;
TibboBasicLexer.DIRECTIVE_INCLUDEPP = 112;
TibboBasicLexer.DIRECTIVE_DEFINE = 113;
TibboBasicLexer.DIRECTIVE_IF = 114;
TibboBasicLexer.DIRECTIVE_ELIF = 115;
TibboBasicLexer.DIRECTIVE_ELSE = 116;
TibboBasicLexer.DIRECTIVE_UNDEF = 117;
TibboBasicLexer.DIRECTIVE_IFDEF = 118;
TibboBasicLexer.DIRECTIVE_IFNDEF = 119;
TibboBasicLexer.DIRECTIVE_ENDIF = 120;
TibboBasicLexer.DIRECTIVE_ERROR = 121;
TibboBasicLexer.DIRECTIVE_BANG = 122;
TibboBasicLexer.DIRECTIVE_LP = 123;
TibboBasicLexer.DIRECTIVE_RP = 124;
TibboBasicLexer.DIRECTIVE_EQUAL = 125;
TibboBasicLexer.DIRECTIVE_NOTEQUAL = 126;
TibboBasicLexer.DIRECTIVE_AND = 127;
TibboBasicLexer.DIRECTIVE_OR = 128;
TibboBasicLexer.DIRECTIVE_LT = 129;
TibboBasicLexer.DIRECTIVE_GT = 130;
TibboBasicLexer.DIRECTIVE_LE = 131;
TibboBasicLexer.DIRECTIVE_GE = 132;
TibboBasicLexer.DIRECTIVE_ID = 133;
TibboBasicLexer.DIRECTIVE_DECIMAL_LITERAL = 134;
TibboBasicLexer.DIRECTIVE_FLOAT = 135;
TibboBasicLexer.DIRECTIVE_NEWLINE = 136;
TibboBasicLexer.DIRECTIVE_SINGLE_COMMENT = 137;
TibboBasicLexer.DIRECTIVE_BACKSLASH_NEWLINE = 138;
TibboBasicLexer.DIRECTIVE_TEXT_NEWLINE = 139;
TibboBasicLexer.DIRECTIVE_TEXT_BACKSLASH_NEWLINE = 140;
TibboBasicLexer.DIRECTIVE_TEXT_MULTI_COMMENT = 141;
TibboBasicLexer.DIRECTIVE_TEXT_SINGLE_COMMENT = 142;
TibboBasicLexer.DIRECTIVE_TEXT = 143;
TibboBasicLexer.COMMENT2 = 144;
TibboBasicLexer.WS2 = 145;
TibboBasicLexer.ANY = 146;

TibboBasicLexer.COMMENTS_CHANNEL = 2;
TibboBasicLexer.DIRECTIVE_CHANNEL = 3;

TibboBasicLexer.DIRECTIVE_MODE = 1;
TibboBasicLexer.DEFINE = 2;
TibboBasicLexer.DIRECTIVE_TEXT_MODE = 3;
TibboBasicLexer.INLINE_MODE = 4;

TibboBasicLexer.prototype.channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN", 
                                                                              "COMMENTS_CHANNEL", 
                                                                              "DIRECTIVE_CHANNEL" ];

TibboBasicLexer.prototype.modeNames = [ "DEFAULT_MODE", "DIRECTIVE_MODE", 
                                        "DEFINE", "DIRECTIVE_TEXT_MODE", 
                                        "INLINE_MODE" ];

TibboBasicLexer.prototype.literalNames = [ null, null, null, null, null, 
                                           null, null, null, null, null, 
                                           null, null, null, null, null, 
                                           null, null, null, null, null, 
                                           null, null, null, null, null, 
                                           null, null, null, null, null, 
                                           null, null, null, null, null, 
                                           null, null, null, null, null, 
                                           null, null, null, null, null, 
                                           null, null, null, null, null, 
                                           null, null, null, null, null, 
                                           null, null, null, null, null, 
                                           null, null, null, null, null, 
                                           null, null, null, null, null, 
                                           null, null, null, null, null, 
                                           null, null, null, null, null, 
                                           null, null, null, null, null, 
                                           null, null, null, null, null, 
                                           null, null, null, null, null, 
                                           "'['", "']'", "'{'", "'}'", null, 
                                           null, null, null, "';'" ];

TibboBasicLexer.prototype.symbolicNames = [ null, "OBJECT", "AND", "AS", 
                                            "BOOLEAN", "REAL", "BYREF", 
                                            "BYTE", "BYVAL", "CASE", "CASE_ELSE", 
                                            "CHAR", "CONST", "COUNTOF", 
                                            "DECLARE", "DIM", "DO", "DWORD", 
                                            "ELSE", "ELIF", "END", "ELSEIF", 
                                            "ENUM", "END_ENUM", "END_FUNCTION", 
                                            "END_IF", "END_PROPERTY", "END_SELECT", 
                                            "END_SUB", "END_TYPE", "END_WITH", 
                                            "EVENT", "EXIT_DO", "EXIT_FOR", 
                                            "EXIT_FUNCTION", "EXIT_PROPERTY", 
                                            "EXIT_SUB", "EXIT_WHILE", "FALSE", 
                                            "FLOAT", "FOR", "FUNCTION", 
                                            "GET", "GOTO", "IF", "IFDEF", 
                                            "IFNDEF", "INCLUDE", "INCLUDEPP", 
                                            "INTEGER", "LONG", "LOOP", "MOD", 
                                            "NEXT", "NOT", "OR", "PROPERTY", 
                                            "PUBLIC", "SELECT", "SET", "SHL", 
                                            "SHORT", "SHR", "SIZEOF", "STEP", 
                                            "STRING", "SUB", "THEN", "TO", 
                                            "TRUE", "TYPE", "UNDEF", "UNTIL", 
                                            "WEND", "WHILE", "WORD", "XOR", 
                                            "SHARP", "STRINGLITERAL", "TemplateStringLiteral", 
                                            "HEXLITERAL", "BINLITERAL", 
                                            "INTEGERLITERAL", "DIV", "EQ", 
                                            "GEQ", "GT", "LEQ", "LPAREN", 
                                            "LT", "MINUS", "MULT", "NEQ", 
                                            "PLUS", "RPAREN", "L_SQUARE_BRACKET", 
                                            "R_SQUARE_BRACKET", "L_CURLY_BRACKET", 
                                            "R_CURLY_BRACKET", "NEWLINE", 
                                            "COMMENT", "SINGLEQUOTE", "COLON", 
                                            "SEMICOLON", "COMMA", "DOT", 
                                            "BANG", "UNDERSCORE", "SYSCALL", 
                                            "WS", "IDENTIFIER", "DIRECTIVE_INCLUDE", 
                                            "DIRECTIVE_INCLUDEPP", "DIRECTIVE_DEFINE", 
                                            "DIRECTIVE_IF", "DIRECTIVE_ELIF", 
                                            "DIRECTIVE_ELSE", "DIRECTIVE_UNDEF", 
                                            "DIRECTIVE_IFDEF", "DIRECTIVE_IFNDEF", 
                                            "DIRECTIVE_ENDIF", "DIRECTIVE_ERROR", 
                                            "DIRECTIVE_BANG", "DIRECTIVE_LP", 
                                            "DIRECTIVE_RP", "DIRECTIVE_EQUAL", 
                                            "DIRECTIVE_NOTEQUAL", "DIRECTIVE_AND", 
                                            "DIRECTIVE_OR", "DIRECTIVE_LT", 
                                            "DIRECTIVE_GT", "DIRECTIVE_LE", 
                                            "DIRECTIVE_GE", "DIRECTIVE_ID", 
                                            "DIRECTIVE_DECIMAL_LITERAL", 
                                            "DIRECTIVE_FLOAT", "DIRECTIVE_NEWLINE", 
                                            "DIRECTIVE_SINGLE_COMMENT", 
                                            "DIRECTIVE_BACKSLASH_NEWLINE", 
                                            "DIRECTIVE_TEXT_NEWLINE", "DIRECTIVE_TEXT_BACKSLASH_NEWLINE", 
                                            "DIRECTIVE_TEXT_MULTI_COMMENT", 
                                            "DIRECTIVE_TEXT_SINGLE_COMMENT", 
                                            "DIRECTIVE_TEXT", "COMMENT2", 
                                            "WS2", "ANY" ];

TibboBasicLexer.prototype.ruleNames = [ "OBJECT", "AND", "AS", "BOOLEAN", 
                                        "REAL", "BYREF", "BYTE", "BYVAL", 
                                        "CASE", "CASE_ELSE", "CHAR", "CONST", 
                                        "COUNTOF", "DECLARE", "DIM", "DO", 
                                        "DWORD", "ELSE", "ELIF", "END", 
                                        "ELSEIF", "ENUM", "END_ENUM", "END_FUNCTION", 
                                        "END_IF", "END_PROPERTY", "END_SELECT", 
                                        "END_SUB", "END_TYPE", "END_WITH", 
                                        "EVENT", "EXIT_DO", "EXIT_FOR", 
                                        "EXIT_FUNCTION", "EXIT_PROPERTY", 
                                        "EXIT_SUB", "EXIT_WHILE", "FALSE", 
                                        "FLOAT", "FOR", "FUNCTION", "GET", 
                                        "GOTO", "IF", "IFDEF", "IFNDEF", 
                                        "INCLUDE", "INCLUDEPP", "INTEGER", 
                                        "LONG", "LOOP", "MOD", "NEXT", "NOT", 
                                        "OR", "PROPERTY", "PUBLIC", "SELECT", 
                                        "SET", "SHL", "SHORT", "SHR", "SIZEOF", 
                                        "STEP", "STRING", "SUB", "THEN", 
                                        "TO", "TRUE", "TYPE", "UNDEF", "UNTIL", 
                                        "WEND", "WHILE", "WORD", "XOR", 
                                        "SHARP", "STRINGLITERAL", "TemplateStringLiteral", 
                                        "HEXLITERAL", "BINLITERAL", "INTEGERLITERAL", 
                                        "DIV", "EQ", "GEQ", "GT", "LEQ", 
                                        "LPAREN", "LT", "MINUS", "MULT", 
                                        "NEQ", "PLUS", "RPAREN", "L_SQUARE_BRACKET", 
                                        "R_SQUARE_BRACKET", "L_CURLY_BRACKET", 
                                        "R_CURLY_BRACKET", "NEWLINE", "COMMENT", 
                                        "SINGLEQUOTE", "COLON", "SEMICOLON", 
                                        "COMMA", "DOT", "BANG", "UNDERSCORE", 
                                        "SYSCALL", "WS", "IDENTIFIER", "LETTER", 
                                        "DIGIT", "LETTERORDIGIT", "A", "B", 
                                        "C", "D", "E", "F", "G", "H", "I", 
                                        "J", "K", "L", "M", "N", "O", "P", 
                                        "Q", "R", "S", "T", "U", "V", "W", 
                                        "X", "Y", "Z", "DIRECTIVE_INCLUDE", 
                                        "DIRECTIVE_INCLUDEPP", "DIRECTIVE_DEFINE", 
                                        "DIRECTIVE_IF", "DIRECTIVE_ELIF", 
                                        "DIRECTIVE_ELSE", "DIRECTIVE_UNDEF", 
                                        "DIRECTIVE_IFDEF", "DIRECTIVE_IFNDEF", 
                                        "DIRECTIVE_ENDIF", "DIRECTIVE_ERROR", 
                                        "DIRECTIVE_BANG", "DIRECTIVE_LP", 
                                        "DIRECTIVE_RP", "DIRECTIVE_EQUAL", 
                                        "DIRECTIVE_NOTEQUAL", "DIRECTIVE_AND", 
                                        "DIRECTIVE_OR", "DIRECTIVE_LT", 
                                        "DIRECTIVE_GT", "DIRECTIVE_LE", 
                                        "DIRECTIVE_GE", "DIRECTIVE_WS", 
                                        "DIRECTIVE_ID", "DIRECTIVE_DECIMAL_LITERAL", 
                                        "DIRECTIVE_FLOAT", "DIRECTIVE_NEWLINE", 
                                        "DIRECTIVE_SINGLE_COMMENT", "DIRECTIVE_BACKSLASH_NEWLINE", 
                                        "DIRECTIVE_DEFINE_ID", "DIRECTIVE_TEXT_NEWLINE", 
                                        "DIRECTIVE_BACKSLASH_ESCAPE", "DIRECTIVE_TEXT_BACKSLASH_NEWLINE", 
                                        "DIRECTIVE_TEXT_MULTI_COMMENT", 
                                        "DIRECTIVE_TEXT_SINGLE_COMMENT", 
                                        "DIRECTIVE_SLASH", "DIRECTIVE_TEXT", 
                                        "AND2", "ELSE2", "END2", "EXIT_DO2", 
                                        "EXIT_FOR2", "EXIT_FUNCTION2", "EXIT_SUB2", 
                                        "EXIT_WHILE2", "FALSE2", "GOTO2", 
                                        "MOD2", "NOT2", "OR2", "SHL2", "SHR2", 
                                        "SIZEOF2", "THEN2", "TRUE2", "XOR2", 
                                        "STRINGLITERAL2", "HEXLITERAL2", 
                                        "BINLITERAL2", "INTEGERLITERAL2", 
                                        "DIV2", "EQ2", "GEQ2", "GT2", "LEQ2", 
                                        "LPAREN2", "LT2", "MINUS2", "MULT2", 
                                        "NEQ2", "PLUS2", "RPAREN2", "NEWLINE2", 
                                        "COMMENT2", "SINGLEQUOTE2", "COLON2", 
                                        "COMMA2", "DOT2", "BANG2", "UNDERSCORE2", 
                                        "WS2", "IDENTIFIER2", "ANY" ];

TibboBasicLexer.prototype.grammarFileName = "TibboBasicLexer.g4";


exports.TibboBasicLexer = TibboBasicLexer;



/***/ }),

/***/ "./language/TibboBasic/lib/TibboBasicParser.js":
/*!*****************************************************!*\
  !*** ./language/TibboBasic/lib/TibboBasicParser.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Generated from /Users/jimmyhu/Projects/tibbo-basic/server/language/TibboBasic/TibboBasicParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = __webpack_require__(/*! antlr4/index */ "./node_modules/antlr4/index.js");
var TibboBasicParserListener = __webpack_require__(/*! ./TibboBasicParserListener */ "./language/TibboBasic/lib/TibboBasicParserListener.js").TibboBasicParserListener;
var TibboBasicParserVisitor = __webpack_require__(/*! ./TibboBasicParserVisitor */ "./language/TibboBasic/lib/TibboBasicParserVisitor.js").TibboBasicParserVisitor;

var grammarFileName = "TibboBasicParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u0092\u030e\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0003",
    "\u0002\u0007\u0002\u0080\n\u0002\f\u0002\u000e\u0002\u0083\u000b\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003",
    "\u0096\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0006\u0005\u0006\u009f\n\u0006\u0003\u0006",
    "\u0007\u0006\u00a2\n\u0006\f\u0006\u000e\u0006\u00a5\u000b\u0006\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u00b1\n\u0007",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0007\b\u00b7\n\b\f\b\u000e\b\u00ba",
    "\u000b\b\u0003\t\u0003\t\u0005\t\u00be\n\t\u0003\t\u0003\t\u0003\t\u0003",
    "\n\u0005\n\u00c4\n\n\u0003\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0005\u000b\u00cd\n\u000b\u0003\u000b\u0003",
    "\u000b\u0005\u000b\u00d1\n\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0005",
    "\f\u00d7\n\f\u0003\f\u0003\f\u0005\f\u00db\n\f\u0003\f\u0003\f\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u00ef\n\r",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0007\u000e\u00f4\n\u000e\f\u000e",
    "\u000e\u000e\u00f7\u000b\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0005\u000f\u00fe\n\u000f\u0003\u000f\u0005\u000f",
    "\u0101\n\u000f\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u010b\n\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u0110\n\u0011\u0003",
    "\u0012\u0005\u0012\u0113\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0005\u0012\u0118\n\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u011c",
    "\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0013",
    "\u0003\u0013\u0005\u0013\u0124\n\u0013\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005",
    "\u0015\u012e\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015",
    "\u0133\n\u0015\u0005\u0015\u0135\n\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0006\u0015\u013d\n\u0015",
    "\r\u0015\u000e\u0015\u013e\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0007\u0015\u0147\n\u0015\f\u0015\u000e",
    "\u0015\u014a\u000b\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u014e\n",
    "\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0152\n\u0015\u0003\u0016",
    "\u0003\u0016\u0003\u0017\u0003\u0017\u0005\u0017\u0158\n\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0007\u0017\u015e\n\u0017",
    "\f\u0017\u000e\u0017\u0161\u000b\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0018\u0003\u0018\u0005\u0018\u0167\n\u0018\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0005\u0019\u0171\n\u0019\u0005\u0019\u0173\n\u0019\u0005\u0019\u0175",
    "\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0005\u001a\u0182\n\u001a\u0005\u001a\u0184\n\u001a\u0005\u001a\u0186",
    "\n\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u0191\n",
    "\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0005\u001c\u0199\n\u001c\u0005\u001c\u019b\n\u001c\u0005\u001c",
    "\u019d\n\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u01a2",
    "\n\u001c\u0003\u001d\u0003\u001d\u0005\u001d\u01a6\n\u001d\u0003\u001d",
    "\u0003\u001d\u0005\u001d\u01aa\n\u001d\u0003\u001d\u0005\u001d\u01ad",
    "\n\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u01b2\n\u001e",
    "\u0003\u001e\u0003\u001e\u0005\u001e\u01b6\n\u001e\u0003\u001e\u0005",
    "\u001e\u01b9\n\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0007\u001f\u01bf\n\u001f\f\u001f\u000e\u001f\u01c2\u000b\u001f\u0005",
    "\u001f\u01c4\n\u001f\u0003\u001f\u0003\u001f\u0003 \u0005 \u01c9\n ",
    "\u0003 \u0003 \u0005 \u01cd\n \u0003!\u0003!\u0003!\u0003!\u0005!\u01d3",
    "\n!\u0003!\u0007!\u01d6\n!\f!\u000e!\u01d9\u000b!\u0003!\u0005!\u01dc",
    "\n!\u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0003\"\u0007\"\u01e4\n\"",
    "\f\"\u000e\"\u01e7\u000b\"\u0003\"\u0005\"\u01ea\n\"\u0003\"\u0003\"",
    "\u0003#\u0003#\u0005#\u01f0\n#\u0003#\u0003#\u0003$\u0003$\u0003%\u0005",
    "%\u01f7\n%\u0003%\u0003%\u0003%\u0005%\u01fc\n%\u0003%\u0003%\u0005",
    "%\u0200\n%\u0003%\u0003%\u0003%\u0003&\u0005&\u0206\n&\u0003&\u0003",
    "&\u0003&\u0007&\u020b\n&\f&\u000e&\u020e\u000b&\u0003&\u0003&\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0005\'\u0217\n\'\u0003\'\u0003\'",
    "\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0005(\u0221\n(\u0003(\u0003",
    "(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003",
    "(\u0003(\u0003(\u0003(\u0007(\u0232\n(\f(\u000e(\u0235\u000b(\u0003",
    ")\u0003)\u0003)\u0003)\u0005)\u023b\n)\u0003*\u0003*\u0003+\u0003+\u0003",
    "+\u0007+\u0242\n+\f+\u000e+\u0245\u000b+\u0003+\u0003+\u0003+\u0003",
    "+\u0007+\u024b\n+\f+\u000e+\u024e\u000b+\u0007+\u0250\n+\f+\u000e+\u0253",
    "\u000b+\u0003,\u0003,\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u025c",
    "\n-\u0003.\u0005.\u025f\n.\u0003.\u0003.\u0003.\u0003/\u0003/\u0003",
    "/\u0005/\u0267\n/\u0007/\u0269\n/\f/\u000e/\u026c\u000b/\u0003/\u0003",
    "/\u0003/\u0003/\u0005/\u0272\n/\u0005/\u0274\n/\u00030\u00030\u0003",
    "0\u00030\u00030\u00050\u027b\n0\u00031\u00031\u00031\u00031\u00031\u0003",
    "2\u00032\u00032\u00033\u00033\u00033\u00033\u00073\u0289\n3\f3\u000e",
    "3\u028c\u000b3\u00053\u028e\n3\u00033\u00033\u00034\u00034\u00035\u0003",
    "5\u00035\u00035\u00075\u0298\n5\f5\u000e5\u029b\u000b5\u00055\u029d",
    "\n5\u00035\u00035\u00036\u00056\u02a2\n6\u00036\u00036\u00036\u0003",
    "6\u00056\u02a8\n6\u00036\u00056\u02ab\n6\u00037\u00037\u00057\u02af",
    "\n7\u00037\u00037\u00057\u02b3\n7\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00058\u02c1\n8\u0003",
    "8\u00038\u00058\u02c5\n8\u00038\u00058\u02c8\n8\u00058\u02ca\n8\u0003",
    "9\u00039\u00039\u00079\u02cf\n9\f9\u000e9\u02d2\u000b9\u0003:\u0003",
    ":\u0003:\u0003;\u0003;\u0003;\u0003<\u0003<\u0003<\u0005<\u02dd\n<\u0003",
    "<\u0006<\u02e0\n<\r<\u000e<\u02e1\u0003<\u0005<\u02e5\n<\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0005<\u02ed\n<\u0003=\u0003=\u0003=\u0005",
    "=\u02f2\n=\u0003=\u0003=\u0003=\u0005=\u02f7\n=\u0007=\u02f9\n=\f=\u000e",
    "=\u02fc\u000b=\u0003=\u0005=\u02ff\n=\u0003=\u0003=\u0003>\u0003>\u0005",
    ">\u0305\n>\u0003>\u0003>\u0003>\u0005>\u030a\n>\u0003?\u0003?\u0003",
    "?\u0002\u0004NT@\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016",
    "\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnp",
    "rtvxz|\u0002\u000e\u0004\u0002JJLL\u0003\u0002\"\'\u0004\u0002PPpp\u0004",
    "\u0002\b\b\n\n\u0005\u000266UU]]\u0004\u0002\\\\__\u0004\u0002WY[[\u0004",
    "\u0002VV^^\u0007\u0002\u0004\u000489>>@@NN\u0004\u000288\\\\\u0003\u0002",
    "kl\u0004\u0002TTpp\u0002\u035e\u0002\u0081\u0003\u0002\u0002\u0002\u0004",
    "\u0095\u0003\u0002\u0002\u0002\u0006\u0097\u0003\u0002\u0002\u0002\b",
    "\u009a\u0003\u0002\u0002\u0002\n\u00a3\u0003\u0002\u0002\u0002\f\u00b0",
    "\u0003\u0002\u0002\u0002\u000e\u00b2\u0003\u0002\u0002\u0002\u0010\u00bb",
    "\u0003\u0002\u0002\u0002\u0012\u00c3\u0003\u0002\u0002\u0002\u0014\u00c8",
    "\u0003\u0002\u0002\u0002\u0016\u00d2\u0003\u0002\u0002\u0002\u0018\u00ee",
    "\u0003\u0002\u0002\u0002\u001a\u00f0\u0003\u0002\u0002\u0002\u001c\u00fa",
    "\u0003\u0002\u0002\u0002\u001e\u0102\u0003\u0002\u0002\u0002 \u0104",
    "\u0003\u0002\u0002\u0002\"\u0112\u0003\u0002\u0002\u0002$\u0123\u0003",
    "\u0002\u0002\u0002&\u0125\u0003\u0002\u0002\u0002(\u0151\u0003\u0002",
    "\u0002\u0002*\u0153\u0003\u0002\u0002\u0002,\u0155\u0003\u0002\u0002",
    "\u0002.\u0166\u0003\u0002\u0002\u00020\u0168\u0003\u0002\u0002\u0002",
    "2\u0179\u0003\u0002\u0002\u00024\u018a\u0003\u0002\u0002\u00026\u0192",
    "\u0003\u0002\u0002\u00028\u01a5\u0003\u0002\u0002\u0002:\u01ae\u0003",
    "\u0002\u0002\u0002<\u01ba\u0003\u0002\u0002\u0002>\u01c8\u0003\u0002",
    "\u0002\u0002@\u01ce\u0003\u0002\u0002\u0002B\u01df\u0003\u0002\u0002",
    "\u0002D\u01ed\u0003\u0002\u0002\u0002F\u01f3\u0003\u0002\u0002\u0002",
    "H\u01f6\u0003\u0002\u0002\u0002J\u0205\u0003\u0002\u0002\u0002L\u0211",
    "\u0003\u0002\u0002\u0002N\u0220\u0003\u0002\u0002\u0002P\u023a\u0003",
    "\u0002\u0002\u0002R\u023c\u0003\u0002\u0002\u0002T\u023e\u0003\u0002",
    "\u0002\u0002V\u0254\u0003\u0002\u0002\u0002X\u025b\u0003\u0002\u0002",
    "\u0002Z\u025e\u0003\u0002\u0002\u0002\\\u0263\u0003\u0002\u0002\u0002",
    "^\u0275\u0003\u0002\u0002\u0002`\u027c\u0003\u0002\u0002\u0002b\u0281",
    "\u0003\u0002\u0002\u0002d\u0284\u0003\u0002\u0002\u0002f\u0291\u0003",
    "\u0002\u0002\u0002h\u0293\u0003\u0002\u0002\u0002j\u02a1\u0003\u0002",
    "\u0002\u0002l\u02ac\u0003\u0002\u0002\u0002n\u02c9\u0003\u0002\u0002",
    "\u0002p\u02cb\u0003\u0002\u0002\u0002r\u02d3\u0003\u0002\u0002\u0002",
    "t\u02d6\u0003\u0002\u0002\u0002v\u02ec\u0003\u0002\u0002\u0002x\u02ee",
    "\u0003\u0002\u0002\u0002z\u0304\u0003\u0002\u0002\u0002|\u030b\u0003",
    "\u0002\u0002\u0002~\u0080\u0005\u0004\u0003\u0002\u007f~\u0003\u0002",
    "\u0002\u0002\u0080\u0083\u0003\u0002\u0002\u0002\u0081\u007f\u0003\u0002",
    "\u0002\u0002\u0081\u0082\u0003\u0002\u0002\u0002\u0082\u0084\u0003\u0002",
    "\u0002\u0002\u0083\u0081\u0003\u0002\u0002\u0002\u0084\u0085\u0007\u0002",
    "\u0002\u0003\u0085\u0003\u0003\u0002\u0002\u0002\u0086\u0096\u0005\u0006",
    "\u0004\u0002\u0087\u0096\u0005\b\u0005\u0002\u0088\u0096\u0005\u001a",
    "\u000e\u0002\u0089\u0096\u0005\u000e\b\u0002\u008a\u0096\u0005\u0014",
    "\u000b\u0002\u008b\u0096\u0005\u0016\f\u0002\u008c\u0096\u0005\u0012",
    "\n\u0002\u008d\u0096\u0005Z.\u0002\u008e\u0096\u0005H%\u0002\u008f\u0096",
    "\u0005\"\u0012\u0002\u0090\u0096\u0005b2\u0002\u0091\u0096\u0005,\u0017",
    "\u0002\u0092\u0096\u00054\u001b\u0002\u0093\u0096\u00056\u001c\u0002",
    "\u0094\u0096\u0005J&\u0002\u0095\u0086\u0003\u0002\u0002\u0002\u0095",
    "\u0087\u0003\u0002\u0002\u0002\u0095\u0088\u0003\u0002\u0002\u0002\u0095",
    "\u0089\u0003\u0002\u0002\u0002\u0095\u008a\u0003\u0002\u0002\u0002\u0095",
    "\u008b\u0003\u0002\u0002\u0002\u0095\u008c\u0003\u0002\u0002\u0002\u0095",
    "\u008d\u0003\u0002\u0002\u0002\u0095\u008e\u0003\u0002\u0002\u0002\u0095",
    "\u008f\u0003\u0002\u0002\u0002\u0095\u0090\u0003\u0002\u0002\u0002\u0095",
    "\u0091\u0003\u0002\u0002\u0002\u0095\u0092\u0003\u0002\u0002\u0002\u0095",
    "\u0093\u0003\u0002\u0002\u0002\u0095\u0094\u0003\u0002\u0002\u0002\u0096",
    "\u0005\u0003\u0002\u0002\u0002\u0097\u0098\u00071\u0002\u0002\u0098",
    "\u0099\u0007P\u0002\u0002\u0099\u0007\u0003\u0002\u0002\u0002\u009a",
    "\u009b\u00072\u0002\u0002\u009b\u009c\u0007P\u0002\u0002\u009c\t\u0003",
    "\u0002\u0002\u0002\u009d\u009f\u0005t;\u0002\u009e\u009d\u0003\u0002",
    "\u0002\u0002\u009e\u009f\u0003\u0002\u0002\u0002\u009f\u00a0\u0003\u0002",
    "\u0002\u0002\u00a0\u00a2\u0005\f\u0007\u0002\u00a1\u009e\u0003\u0002",
    "\u0002\u0002\u00a2\u00a5\u0003\u0002\u0002\u0002\u00a3\u00a1\u0003\u0002",
    "\u0002\u0002\u00a3\u00a4\u0003\u0002\u0002\u0002\u00a4\u000b\u0003\u0002",
    "\u0002\u0002\u00a5\u00a3\u0003\u0002\u0002\u0002\u00a6\u00b1\u0005t",
    ";\u0002\u00a7\u00b1\u0005\u000e\b\u0002\u00a8\u00b1\u0005\u0018\r\u0002",
    "\u00a9\u00b1\u0005 \u0011\u0002\u00aa\u00b1\u0005$\u0013\u0002\u00ab",
    "\u00b1\u0005(\u0015\u0002\u00ac\u00b1\u0005@!\u0002\u00ad\u00b1\u0005",
    "Z.\u0002\u00ae\u00b1\u0005`1\u0002\u00af\u00b1\u0005N(\u0002\u00b0\u00a6",
    "\u0003\u0002\u0002\u0002\u00b0\u00a7\u0003\u0002\u0002\u0002\u00b0\u00a8",
    "\u0003\u0002\u0002\u0002\u00b0\u00a9\u0003\u0002\u0002\u0002\u00b0\u00aa",
    "\u0003\u0002\u0002\u0002\u00b0\u00ab\u0003\u0002\u0002\u0002\u00b0\u00ac",
    "\u0003\u0002\u0002\u0002\u00b0\u00ad\u0003\u0002\u0002\u0002\u00b0\u00ae",
    "\u0003\u0002\u0002\u0002\u00b0\u00af\u0003\u0002\u0002\u0002\u00b1\r",
    "\u0003\u0002\u0002\u0002\u00b2\u00b3\u0007\u000e\u0002\u0002\u00b3\u00b8",
    "\u0005\u0010\t\u0002\u00b4\u00b5\u0007j\u0002\u0002\u00b5\u00b7\u0005",
    "\u0010\t\u0002\u00b6\u00b4\u0003\u0002\u0002\u0002\u00b7\u00ba\u0003",
    "\u0002\u0002\u0002\u00b8\u00b6\u0003\u0002\u0002\u0002\u00b8\u00b9\u0003",
    "\u0002\u0002\u0002\u00b9\u000f\u0003\u0002\u0002\u0002\u00ba\u00b8\u0003",
    "\u0002\u0002\u0002\u00bb\u00bd\u0007p\u0002\u0002\u00bc\u00be\u0005",
    "l7\u0002\u00bd\u00bc\u0003\u0002\u0002\u0002\u00bd\u00be\u0003\u0002",
    "\u0002\u0002\u00be\u00bf\u0003\u0002\u0002\u0002\u00bf\u00c0\u0007V",
    "\u0002\u0002\u00c0\u00c1\u0005N(\u0002\u00c1\u0011\u0003\u0002\u0002",
    "\u0002\u00c2\u00c4\u0005|?\u0002\u00c3\u00c2\u0003\u0002\u0002\u0002",
    "\u00c3\u00c4\u0003\u0002\u0002\u0002\u00c4\u00c5\u0003\u0002\u0002\u0002",
    "\u00c5\u00c6\u0007\u0010\u0002\u0002\u00c6\u00c7\u0005\\/\u0002\u00c7",
    "\u0013\u0003\u0002\u0002\u0002\u00c8\u00c9\u0007\u0010\u0002\u0002\u00c9",
    "\u00cc\u0007D\u0002\u0002\u00ca\u00cb\u0007p\u0002\u0002\u00cb\u00cd",
    "\u0007k\u0002\u0002\u00cc\u00ca\u0003\u0002\u0002\u0002\u00cc\u00cd",
    "\u0003\u0002\u0002\u0002\u00cd\u00ce\u0003\u0002\u0002\u0002\u00ce\u00d0",
    "\u0007p\u0002\u0002\u00cf\u00d1\u0005h5\u0002\u00d0\u00cf\u0003\u0002",
    "\u0002\u0002\u00d0\u00d1\u0003\u0002\u0002\u0002\u00d1\u0015\u0003\u0002",
    "\u0002\u0002\u00d2\u00d3\u0007\u0010\u0002\u0002\u00d3\u00d6\u0007+",
    "\u0002\u0002\u00d4\u00d5\u0007p\u0002\u0002\u00d5\u00d7\u0007k\u0002",
    "\u0002\u00d6\u00d4\u0003\u0002\u0002\u0002\u00d6\u00d7\u0003\u0002\u0002",
    "\u0002\u00d7\u00d8\u0003\u0002\u0002\u0002\u00d8\u00da\u0007p\u0002",
    "\u0002\u00d9\u00db\u0005h5\u0002\u00da\u00d9\u0003\u0002\u0002\u0002",
    "\u00da\u00db\u0003\u0002\u0002\u0002\u00db\u00dc\u0003\u0002\u0002\u0002",
    "\u00dc\u00dd\u0005l7\u0002\u00dd\u0017\u0003\u0002\u0002\u0002\u00de",
    "\u00df\u0007\u0012\u0002\u0002\u00df\u00e0\u0005\n\u0006\u0002\u00e0",
    "\u00e1\u00075\u0002\u0002\u00e1\u00ef\u0003\u0002\u0002\u0002\u00e2",
    "\u00e3\u0007\u0012\u0002\u0002\u00e3\u00e4\t\u0002\u0002\u0002\u00e4",
    "\u00e5\u0005N(\u0002\u00e5\u00e6\u0005\n\u0006\u0002\u00e6\u00e7\u0007",
    "5\u0002\u0002\u00e7\u00ef\u0003\u0002\u0002\u0002\u00e8\u00e9\u0007",
    "\u0012\u0002\u0002\u00e9\u00ea\u0005\n\u0006\u0002\u00ea\u00eb\u0007",
    "5\u0002\u0002\u00eb\u00ec\t\u0002\u0002\u0002\u00ec\u00ed\u0005N(\u0002",
    "\u00ed\u00ef\u0003\u0002\u0002\u0002\u00ee\u00de\u0003\u0002\u0002\u0002",
    "\u00ee\u00e2\u0003\u0002\u0002\u0002\u00ee\u00e8\u0003\u0002\u0002\u0002",
    "\u00ef\u0019\u0003\u0002\u0002\u0002\u00f0\u00f1\u0007\u0018\u0002\u0002",
    "\u00f1\u00f5\u0007p\u0002\u0002\u00f2\u00f4\u0005\u001c\u000f\u0002",
    "\u00f3\u00f2\u0003\u0002\u0002\u0002\u00f4\u00f7\u0003\u0002\u0002\u0002",
    "\u00f5\u00f3\u0003\u0002\u0002\u0002\u00f5\u00f6\u0003\u0002\u0002\u0002",
    "\u00f6\u00f8\u0003\u0002\u0002\u0002\u00f7\u00f5\u0003\u0002\u0002\u0002",
    "\u00f8\u00f9\u0007\u0019\u0002\u0002\u00f9\u001b\u0003\u0002\u0002\u0002",
    "\u00fa\u00fd\u0007p\u0002\u0002\u00fb\u00fc\u0007V\u0002\u0002\u00fc",
    "\u00fe\u0005N(\u0002\u00fd\u00fb\u0003\u0002\u0002\u0002\u00fd\u00fe",
    "\u0003\u0002\u0002\u0002\u00fe\u0100\u0003\u0002\u0002\u0002\u00ff\u0101",
    "\u0007j\u0002\u0002\u0100\u00ff\u0003\u0002\u0002\u0002\u0100\u0101",
    "\u0003\u0002\u0002\u0002\u0101\u001d\u0003\u0002\u0002\u0002\u0102\u0103",
    "\t\u0003\u0002\u0002\u0103\u001f\u0003\u0002\u0002\u0002\u0104\u0105",
    "\u0007*\u0002\u0002\u0105\u0106\u0005N(\u0002\u0106\u0107\u0007F\u0002",
    "\u0002\u0107\u010a\u0005N(\u0002\u0108\u0109\u0007B\u0002\u0002\u0109",
    "\u010b\u0005N(\u0002\u010a\u0108\u0003\u0002\u0002\u0002\u010a\u010b",
    "\u0003\u0002\u0002\u0002\u010b\u010c\u0003\u0002\u0002\u0002\u010c\u010d",
    "\u0005\n\u0006\u0002\u010d\u010f\u00077\u0002\u0002\u010e\u0110\u0005",
    "N(\u0002\u010f\u010e\u0003\u0002\u0002\u0002\u010f\u0110\u0003\u0002",
    "\u0002\u0002\u0110!\u0003\u0002\u0002\u0002\u0111\u0113\u0005|?\u0002",
    "\u0112\u0111\u0003\u0002\u0002\u0002\u0112\u0113\u0003\u0002\u0002\u0002",
    "\u0113\u0114\u0003\u0002\u0002\u0002\u0114\u0117\u0007+\u0002\u0002",
    "\u0115\u0116\u0007p\u0002\u0002\u0116\u0118\u0007k\u0002\u0002\u0117",
    "\u0115\u0003\u0002\u0002\u0002\u0117\u0118\u0003\u0002\u0002\u0002\u0118",
    "\u0119\u0003\u0002\u0002\u0002\u0119\u011b\u0007p\u0002\u0002\u011a",
    "\u011c\u0005h5\u0002\u011b\u011a\u0003\u0002\u0002\u0002\u011b\u011c",
    "\u0003\u0002\u0002\u0002\u011c\u011d\u0003\u0002\u0002\u0002\u011d\u011e",
    "\u0005l7\u0002\u011e\u011f\u0005\n\u0006\u0002\u011f\u0120\u0007\u001a",
    "\u0002\u0002\u0120#\u0003\u0002\u0002\u0002\u0121\u0124\u0005&\u0014",
    "\u0002\u0122\u0124\u0005\u001e\u0010\u0002\u0123\u0121\u0003\u0002\u0002",
    "\u0002\u0123\u0122\u0003\u0002\u0002\u0002\u0124%\u0003\u0002\u0002",
    "\u0002\u0125\u0126\u0007-\u0002\u0002\u0126\u0127\u0007p\u0002\u0002",
    "\u0127\'\u0003\u0002\u0002\u0002\u0128\u0129\u0007.\u0002\u0002\u0129",
    "\u012a\u0005N(\u0002\u012a\u012d\u0007E\u0002\u0002\u012b\u012e\u0005",
    "\f\u0007\u0002\u012c\u012e\u0005$\u0013\u0002\u012d\u012b\u0003\u0002",
    "\u0002\u0002\u012d\u012c\u0003\u0002\u0002\u0002\u012e\u0134\u0003\u0002",
    "\u0002\u0002\u012f\u0132\u0007\u0014\u0002\u0002\u0130\u0133\u0005\f",
    "\u0007\u0002\u0131\u0133\u0005$\u0013\u0002\u0132\u0130\u0003\u0002",
    "\u0002\u0002\u0132\u0131\u0003\u0002\u0002\u0002\u0133\u0135\u0003\u0002",
    "\u0002\u0002\u0134\u012f\u0003\u0002\u0002\u0002\u0134\u0135\u0003\u0002",
    "\u0002\u0002\u0135\u0136\u0003\u0002\u0002\u0002\u0136\u0137\u0007e",
    "\u0002\u0002\u0137\u0152\u0003\u0002\u0002\u0002\u0138\u0139\u0007.",
    "\u0002\u0002\u0139\u013a\u0005N(\u0002\u013a\u013c\u0007E\u0002\u0002",
    "\u013b\u013d\u0007e\u0002\u0002\u013c\u013b\u0003\u0002\u0002\u0002",
    "\u013d\u013e\u0003\u0002\u0002\u0002\u013e\u013c\u0003\u0002\u0002\u0002",
    "\u013e\u013f\u0003\u0002\u0002\u0002\u013f\u0140\u0003\u0002\u0002\u0002",
    "\u0140\u0148\u0005\n\u0006\u0002\u0141\u0142\u0007\u0017\u0002\u0002",
    "\u0142\u0143\u0005*\u0016\u0002\u0143\u0144\u0007E\u0002\u0002\u0144",
    "\u0145\u0005\n\u0006\u0002\u0145\u0147\u0003\u0002\u0002\u0002\u0146",
    "\u0141\u0003\u0002\u0002\u0002\u0147\u014a\u0003\u0002\u0002\u0002\u0148",
    "\u0146\u0003\u0002\u0002\u0002\u0148\u0149\u0003\u0002\u0002\u0002\u0149",
    "\u014d\u0003\u0002\u0002\u0002\u014a\u0148\u0003\u0002\u0002\u0002\u014b",
    "\u014c\u0007\u0014\u0002\u0002\u014c\u014e\u0005\n\u0006\u0002\u014d",
    "\u014b\u0003\u0002\u0002\u0002\u014d\u014e\u0003\u0002\u0002\u0002\u014e",
    "\u014f\u0003\u0002\u0002\u0002\u014f\u0150\u0007\u001b\u0002\u0002\u0150",
    "\u0152\u0003\u0002\u0002\u0002\u0151\u0128\u0003\u0002\u0002\u0002\u0151",
    "\u0138\u0003\u0002\u0002\u0002\u0152)\u0003\u0002\u0002\u0002\u0153",
    "\u0154\u0005N(\u0002\u0154+\u0003\u0002\u0002\u0002\u0155\u0157\u0007",
    ":\u0002\u0002\u0156\u0158\u0007l\u0002\u0002\u0157\u0156\u0003\u0002",
    "\u0002\u0002\u0157\u0158\u0003\u0002\u0002\u0002\u0158\u0159\u0003\u0002",
    "\u0002\u0002\u0159\u015a\u0007p\u0002\u0002\u015a\u015b\u0007k\u0002",
    "\u0002\u015b\u015f\u0007p\u0002\u0002\u015c\u015e\u0005.\u0018\u0002",
    "\u015d\u015c\u0003\u0002\u0002\u0002\u015e\u0161\u0003\u0002\u0002\u0002",
    "\u015f\u015d\u0003\u0002\u0002\u0002\u015f\u0160\u0003\u0002\u0002\u0002",
    "\u0160\u0162\u0003\u0002\u0002\u0002\u0161\u015f\u0003\u0002\u0002\u0002",
    "\u0162\u0163\u0007\u001c\u0002\u0002\u0163-\u0003\u0002\u0002\u0002",
    "\u0164\u0167\u00050\u0019\u0002\u0165\u0167\u00052\u001a\u0002\u0166",
    "\u0164\u0003\u0002\u0002\u0002\u0166\u0165\u0003\u0002\u0002\u0002\u0167",
    "/\u0003\u0002\u0002\u0002\u0168\u0169\u0007,\u0002\u0002\u0169\u016a",
    "\u0007V\u0002\u0002\u016a\u016b\u0007n\u0002\u0002\u016b\u0174\u0007",
    "Z\u0002\u0002\u016c\u0172\u0007T\u0002\u0002\u016d\u016e\u0007j\u0002",
    "\u0002\u016e\u0170\t\u0004\u0002\u0002\u016f\u0171\u0007_\u0002\u0002",
    "\u0170\u016f\u0003\u0002\u0002\u0002\u0170\u0171\u0003\u0002\u0002\u0002",
    "\u0171\u0173\u0003\u0002\u0002\u0002\u0172\u016d\u0003\u0002\u0002\u0002",
    "\u0172\u0173\u0003\u0002\u0002\u0002\u0173\u0175\u0003\u0002\u0002\u0002",
    "\u0174\u016c\u0003\u0002\u0002\u0002\u0174\u0175\u0003\u0002\u0002\u0002",
    "\u0175\u0176\u0003\u0002\u0002\u0002\u0176\u0177\u0007`\u0002\u0002",
    "\u0177\u0178\u0005l7\u0002\u01781\u0003\u0002\u0002\u0002\u0179\u017a",
    "\u0007=\u0002\u0002\u017a\u017b\u0007V\u0002\u0002\u017b\u017c\u0007",
    "n\u0002\u0002\u017c\u0185\u0007Z\u0002\u0002\u017d\u0183\u0007T\u0002",
    "\u0002\u017e\u017f\u0007j\u0002\u0002\u017f\u0181\t\u0004\u0002\u0002",
    "\u0180\u0182\u0007_\u0002\u0002\u0181\u0180\u0003\u0002\u0002\u0002",
    "\u0181\u0182\u0003\u0002\u0002\u0002\u0182\u0184\u0003\u0002\u0002\u0002",
    "\u0183\u017e\u0003\u0002\u0002\u0002\u0183\u0184\u0003\u0002\u0002\u0002",
    "\u0184\u0186\u0003\u0002\u0002\u0002\u0185\u017d\u0003\u0002\u0002\u0002",
    "\u0185\u0186\u0003\u0002\u0002\u0002\u0186\u0187\u0003\u0002\u0002\u0002",
    "\u0187\u0188\u0007`\u0002\u0002\u0188\u0189\u0005h5\u0002\u01893\u0003",
    "\u0002\u0002\u0002\u018a\u018b\u0007!\u0002\u0002\u018b\u018c\u0007",
    "Z\u0002\u0002\u018c\u018d\u0007T\u0002\u0002\u018d\u018e\u0007`\u0002",
    "\u0002\u018e\u0190\u0007p\u0002\u0002\u018f\u0191\u0005h5\u0002\u0190",
    "\u018f\u0003\u0002\u0002\u0002\u0190\u0191\u0003\u0002\u0002\u0002\u0191",
    "5\u0003\u0002\u0002\u0002\u0192\u0193\u0007n\u0002\u0002\u0193\u019c",
    "\u0007Z\u0002\u0002\u0194\u019a\u0007T\u0002\u0002\u0195\u0196\u0007",
    "j\u0002\u0002\u0196\u0198\t\u0004\u0002\u0002\u0197\u0199\u0007_\u0002",
    "\u0002\u0198\u0197\u0003\u0002\u0002\u0002\u0198\u0199\u0003\u0002\u0002",
    "\u0002\u0199\u019b\u0003\u0002\u0002\u0002\u019a\u0195\u0003\u0002\u0002",
    "\u0002\u019a\u019b\u0003\u0002\u0002\u0002\u019b\u019d\u0003\u0002\u0002",
    "\u0002\u019c\u0194\u0003\u0002\u0002\u0002\u019c\u019d\u0003\u0002\u0002",
    "\u0002\u019d\u019e\u0003\u0002\u0002\u0002\u019e\u01a1\u0007`\u0002",
    "\u0002\u019f\u01a2\u00058\u001d\u0002\u01a0\u01a2\u0005:\u001e\u0002",
    "\u01a1\u019f\u0003\u0002\u0002\u0002\u01a1\u01a0\u0003\u0002\u0002\u0002",
    "\u01a27\u0003\u0002\u0002\u0002\u01a3\u01a4\u0007p\u0002\u0002\u01a4",
    "\u01a6\u0007k\u0002\u0002\u01a5\u01a3\u0003\u0002\u0002\u0002\u01a5",
    "\u01a6\u0003\u0002\u0002\u0002\u01a6\u01a7\u0003\u0002\u0002\u0002\u01a7",
    "\u01a9\u0007p\u0002\u0002\u01a8\u01aa\u0005h5\u0002\u01a9\u01a8\u0003",
    "\u0002\u0002\u0002\u01a9\u01aa\u0003\u0002\u0002\u0002\u01aa\u01ac\u0003",
    "\u0002\u0002\u0002\u01ab\u01ad\u0005l7\u0002\u01ac\u01ab\u0003\u0002",
    "\u0002\u0002\u01ac\u01ad\u0003\u0002\u0002\u0002\u01ad9\u0003\u0002",
    "\u0002\u0002\u01ae\u01b1\u0007l\u0002\u0002\u01af\u01b0\u0007p\u0002",
    "\u0002\u01b0\u01b2\u0007k\u0002\u0002\u01b1\u01af\u0003\u0002\u0002",
    "\u0002\u01b1\u01b2\u0003\u0002\u0002\u0002\u01b2\u01b3\u0003\u0002\u0002",
    "\u0002\u01b3\u01b5\u0007p\u0002\u0002\u01b4\u01b6\u0005<\u001f\u0002",
    "\u01b5\u01b4\u0003\u0002\u0002\u0002\u01b5\u01b6\u0003\u0002\u0002\u0002",
    "\u01b6\u01b8\u0003\u0002\u0002\u0002\u01b7\u01b9\u0005l7\u0002\u01b8",
    "\u01b7\u0003\u0002\u0002\u0002\u01b8\u01b9\u0003\u0002\u0002\u0002\u01b9",
    ";\u0003\u0002\u0002\u0002\u01ba\u01c3\u0007Z\u0002\u0002\u01bb\u01c0",
    "\u0005> \u0002\u01bc\u01bd\u0007j\u0002\u0002\u01bd\u01bf\u0005> \u0002",
    "\u01be\u01bc\u0003\u0002\u0002\u0002\u01bf\u01c2\u0003\u0002\u0002\u0002",
    "\u01c0\u01be\u0003\u0002\u0002\u0002\u01c0\u01c1\u0003\u0002\u0002\u0002",
    "\u01c1\u01c4\u0003\u0002\u0002\u0002\u01c2\u01c0\u0003\u0002\u0002\u0002",
    "\u01c3\u01bb\u0003\u0002\u0002\u0002\u01c3\u01c4\u0003\u0002\u0002\u0002",
    "\u01c4\u01c5\u0003\u0002\u0002\u0002\u01c5\u01c6\u0007`\u0002\u0002",
    "\u01c6=\u0003\u0002\u0002\u0002\u01c7\u01c9\t\u0005\u0002\u0002\u01c8",
    "\u01c7\u0003\u0002\u0002\u0002\u01c8\u01c9\u0003\u0002\u0002\u0002\u01c9",
    "\u01ca\u0003\u0002\u0002\u0002\u01ca\u01cc\u0007p\u0002\u0002\u01cb",
    "\u01cd\u0005l7\u0002\u01cc\u01cb\u0003\u0002\u0002\u0002\u01cc\u01cd",
    "\u0003\u0002\u0002\u0002\u01cd?\u0003\u0002\u0002\u0002\u01ce\u01cf",
    "\u0007<\u0002\u0002\u01cf\u01d0\u0007\u000b\u0002\u0002\u01d0\u01d2",
    "\u0005N(\u0002\u01d1\u01d3\u0007h\u0002\u0002\u01d2\u01d1\u0003\u0002",
    "\u0002\u0002\u01d2\u01d3\u0003\u0002\u0002\u0002\u01d3\u01d7\u0003\u0002",
    "\u0002\u0002\u01d4\u01d6\u0005B\"\u0002\u01d5\u01d4\u0003\u0002\u0002",
    "\u0002\u01d6\u01d9\u0003\u0002\u0002\u0002\u01d7\u01d5\u0003\u0002\u0002",
    "\u0002\u01d7\u01d8\u0003\u0002\u0002\u0002\u01d8\u01db\u0003\u0002\u0002",
    "\u0002\u01d9\u01d7\u0003\u0002\u0002\u0002\u01da\u01dc\u0005D#\u0002",
    "\u01db\u01da\u0003\u0002\u0002\u0002\u01db\u01dc\u0003\u0002\u0002\u0002",
    "\u01dc\u01dd\u0003\u0002\u0002\u0002\u01dd\u01de\u0007\u001d\u0002\u0002",
    "\u01deA\u0003\u0002\u0002\u0002\u01df\u01e0\u0007\u000b\u0002\u0002",
    "\u01e0\u01e5\u0005F$\u0002\u01e1\u01e2\u0007j\u0002\u0002\u01e2\u01e4",
    "\u0005F$\u0002\u01e3\u01e1\u0003\u0002\u0002\u0002\u01e4\u01e7\u0003",
    "\u0002\u0002\u0002\u01e5\u01e3\u0003\u0002\u0002\u0002\u01e5\u01e6\u0003",
    "\u0002\u0002\u0002\u01e6\u01e9\u0003\u0002\u0002\u0002\u01e7\u01e5\u0003",
    "\u0002\u0002\u0002\u01e8\u01ea\u0007h\u0002\u0002\u01e9\u01e8\u0003",
    "\u0002\u0002\u0002\u01e9\u01ea\u0003\u0002\u0002\u0002\u01ea\u01eb\u0003",
    "\u0002\u0002\u0002\u01eb\u01ec\u0005\n\u0006\u0002\u01ecC\u0003\u0002",
    "\u0002\u0002\u01ed\u01ef\u0007\f\u0002\u0002\u01ee\u01f0\u0007h\u0002",
    "\u0002\u01ef\u01ee\u0003\u0002\u0002\u0002\u01ef\u01f0\u0003\u0002\u0002",
    "\u0002\u01f0\u01f1\u0003\u0002\u0002\u0002\u01f1\u01f2\u0005\n\u0006",
    "\u0002\u01f2E\u0003\u0002\u0002\u0002\u01f3\u01f4\u0005N(\u0002\u01f4",
    "G\u0003\u0002\u0002\u0002\u01f5\u01f7\u0005|?\u0002\u01f6\u01f5\u0003",
    "\u0002\u0002\u0002\u01f6\u01f7\u0003\u0002\u0002\u0002\u01f7\u01f8\u0003",
    "\u0002\u0002\u0002\u01f8\u01fb\u0007D\u0002\u0002\u01f9\u01fa\u0007",
    "p\u0002\u0002\u01fa\u01fc\u0007k\u0002\u0002\u01fb\u01f9\u0003\u0002",
    "\u0002\u0002\u01fb\u01fc\u0003\u0002\u0002\u0002\u01fc\u01fd\u0003\u0002",
    "\u0002\u0002\u01fd\u01ff\u0007p\u0002\u0002\u01fe\u0200\u0005h5\u0002",
    "\u01ff\u01fe\u0003\u0002\u0002\u0002\u01ff\u0200\u0003\u0002\u0002\u0002",
    "\u0200\u0201\u0003\u0002\u0002\u0002\u0201\u0202\u0005\n\u0006\u0002",
    "\u0202\u0203\u0007\u001e\u0002\u0002\u0203I\u0003\u0002\u0002\u0002",
    "\u0204\u0206\u0005|?\u0002\u0205\u0204\u0003\u0002\u0002\u0002\u0205",
    "\u0206\u0003\u0002\u0002\u0002\u0206\u0207\u0003\u0002\u0002\u0002\u0207",
    "\u0208\u0007H\u0002\u0002\u0208\u020c\u0007p\u0002\u0002\u0209\u020b",
    "\u0005L\'\u0002\u020a\u0209\u0003\u0002\u0002\u0002\u020b\u020e\u0003",
    "\u0002\u0002\u0002\u020c\u020a\u0003\u0002\u0002\u0002\u020c\u020d\u0003",
    "\u0002\u0002\u0002\u020d\u020f\u0003\u0002\u0002\u0002\u020e\u020c\u0003",
    "\u0002\u0002\u0002\u020f\u0210\u0007\u001f\u0002\u0002\u0210K\u0003",
    "\u0002\u0002\u0002\u0211\u0216\u0007p\u0002\u0002\u0212\u0213\u0007",
    "Z\u0002\u0002\u0213\u0214\u0005v<\u0002\u0214\u0215\u0007`\u0002\u0002",
    "\u0215\u0217\u0003\u0002\u0002\u0002\u0216\u0212\u0003\u0002\u0002\u0002",
    "\u0216\u0217\u0003\u0002\u0002\u0002\u0217\u0218\u0003\u0002\u0002\u0002",
    "\u0218\u0219\u0005l7\u0002\u0219M\u0003\u0002\u0002\u0002\u021a\u021b",
    "\b(\u0001\u0002\u021b\u0221\u0005P)\u0002\u021c\u021d\u0007Z\u0002\u0002",
    "\u021d\u021e\u0005N(\u0002\u021e\u021f\u0007`\u0002\u0002\u021f\u0221",
    "\u0003\u0002\u0002\u0002\u0220\u021a\u0003\u0002\u0002\u0002\u0220\u021c",
    "\u0003\u0002\u0002\u0002\u0221\u0233\u0003\u0002\u0002\u0002\u0222\u0223",
    "\f\b\u0002\u0002\u0223\u0224\t\u0006\u0002\u0002\u0224\u0232\u0005N",
    "(\t\u0225\u0226\f\u0007\u0002\u0002\u0226\u0227\t\u0007\u0002\u0002",
    "\u0227\u0232\u0005N(\b\u0228\u0229\f\u0006\u0002\u0002\u0229\u022a\t",
    "\b\u0002\u0002\u022a\u0232\u0005N(\u0007\u022b\u022c\f\u0005\u0002\u0002",
    "\u022c\u022d\t\t\u0002\u0002\u022d\u0232\u0005N(\u0006\u022e\u022f\f",
    "\u0004\u0002\u0002\u022f\u0230\t\n\u0002\u0002\u0230\u0232\u0005N(\u0005",
    "\u0231\u0222\u0003\u0002\u0002\u0002\u0231\u0225\u0003\u0002\u0002\u0002",
    "\u0231\u0228\u0003\u0002\u0002\u0002\u0231\u022b\u0003\u0002\u0002\u0002",
    "\u0231\u022e\u0003\u0002\u0002\u0002\u0232\u0235\u0003\u0002\u0002\u0002",
    "\u0233\u0231\u0003\u0002\u0002\u0002\u0233\u0234\u0003\u0002\u0002\u0002",
    "\u0234O\u0003\u0002\u0002\u0002\u0235\u0233\u0003\u0002\u0002\u0002",
    "\u0236\u023b\u0005T+\u0002\u0237\u0238\u0005R*\u0002\u0238\u0239\u0005",
    "X-\u0002\u0239\u023b\u0003\u0002\u0002\u0002\u023a\u0236\u0003\u0002",
    "\u0002\u0002\u023a\u0237\u0003\u0002\u0002\u0002\u023bQ\u0003\u0002",
    "\u0002\u0002\u023c\u023d\t\u000b\u0002\u0002\u023dS\u0003\u0002\u0002",
    "\u0002\u023e\u023f\b+\u0001\u0002\u023f\u0243\u0005X-\u0002\u0240\u0242",
    "\u0005V,\u0002\u0241\u0240\u0003\u0002\u0002\u0002\u0242\u0245\u0003",
    "\u0002\u0002\u0002\u0243\u0241\u0003\u0002\u0002\u0002\u0243\u0244\u0003",
    "\u0002\u0002\u0002\u0244\u0251\u0003\u0002\u0002\u0002\u0245\u0243\u0003",
    "\u0002\u0002\u0002\u0246\u0247\f\u0003\u0002\u0002\u0247\u0248\u0007",
    "k\u0002\u0002\u0248\u024c\u0007p\u0002\u0002\u0249\u024b\u0005V,\u0002",
    "\u024a\u0249\u0003\u0002\u0002\u0002\u024b\u024e\u0003\u0002\u0002\u0002",
    "\u024c\u024a\u0003\u0002\u0002\u0002\u024c\u024d\u0003\u0002\u0002\u0002",
    "\u024d\u0250\u0003\u0002\u0002\u0002\u024e\u024c\u0003\u0002\u0002\u0002",
    "\u024f\u0246\u0003\u0002\u0002\u0002\u0250\u0253\u0003\u0002\u0002\u0002",
    "\u0251\u024f\u0003\u0002\u0002\u0002\u0251\u0252\u0003\u0002\u0002\u0002",
    "\u0252U\u0003\u0002\u0002\u0002\u0253\u0251\u0003\u0002\u0002\u0002",
    "\u0254\u0255\u0005d3\u0002\u0255W\u0003\u0002\u0002\u0002\u0256\u025c",
    "\u0005v<\u0002\u0257\u0258\u0007Z\u0002\u0002\u0258\u0259\u0005N(\u0002",
    "\u0259\u025a\u0007`\u0002\u0002\u025a\u025c\u0003\u0002\u0002\u0002",
    "\u025b\u0256\u0003\u0002\u0002\u0002\u025b\u0257\u0003\u0002\u0002\u0002",
    "\u025cY\u0003\u0002\u0002\u0002\u025d\u025f\u0005|?\u0002\u025e\u025d",
    "\u0003\u0002\u0002\u0002\u025e\u025f\u0003\u0002\u0002\u0002\u025f\u0260",
    "\u0003\u0002\u0002\u0002\u0260\u0261\u0007\u0011\u0002\u0002\u0261\u0262",
    "\u0005\\/\u0002\u0262[\u0003\u0002\u0002\u0002\u0263\u026a\u0005^0\u0002",
    "\u0264\u0266\u0007j\u0002\u0002\u0265\u0267\u0005^0\u0002\u0266\u0265",
    "\u0003\u0002\u0002\u0002\u0266\u0267\u0003\u0002\u0002\u0002\u0267\u0269",
    "\u0003\u0002\u0002\u0002\u0268\u0264\u0003\u0002\u0002\u0002\u0269\u026c",
    "\u0003\u0002\u0002\u0002\u026a\u0268\u0003\u0002\u0002\u0002\u026a\u026b",
    "\u0003\u0002\u0002\u0002\u026b\u026d\u0003\u0002\u0002\u0002\u026c\u026a",
    "\u0003\u0002\u0002\u0002\u026d\u0273\u0005l7\u0002\u026e\u0271\u0007",
    "V\u0002\u0002\u026f\u0272\u0005N(\u0002\u0270\u0272\u0005x=\u0002\u0271",
    "\u026f\u0003\u0002\u0002\u0002\u0271\u0270\u0003\u0002\u0002\u0002\u0272",
    "\u0274\u0003\u0002\u0002\u0002\u0273\u026e\u0003\u0002\u0002\u0002\u0273",
    "\u0274\u0003\u0002\u0002\u0002\u0274]\u0003\u0002\u0002\u0002\u0275",
    "\u027a\u0007p\u0002\u0002\u0276\u0277\u0007Z\u0002\u0002\u0277\u0278",
    "\u0005v<\u0002\u0278\u0279\u0007`\u0002\u0002\u0279\u027b\u0003\u0002",
    "\u0002\u0002\u027a\u0276\u0003\u0002\u0002\u0002\u027a\u027b\u0003\u0002",
    "\u0002\u0002\u027b_\u0003\u0002\u0002\u0002\u027c\u027d\u0007L\u0002",
    "\u0002\u027d\u027e\u0005N(\u0002\u027e\u027f\u0005\n\u0006\u0002\u027f",
    "\u0280\u0007K\u0002\u0002\u0280a\u0003\u0002\u0002\u0002\u0281\u0282",
    "\u0007\u0003\u0002\u0002\u0282\u0283\u0007p\u0002\u0002\u0283c\u0003",
    "\u0002\u0002\u0002\u0284\u028d\u0007Z\u0002\u0002\u0285\u028a\u0005",
    "f4\u0002\u0286\u0287\u0007j\u0002\u0002\u0287\u0289\u0005f4\u0002\u0288",
    "\u0286\u0003\u0002\u0002\u0002\u0289\u028c\u0003\u0002\u0002\u0002\u028a",
    "\u0288\u0003\u0002\u0002\u0002\u028a\u028b\u0003\u0002\u0002\u0002\u028b",
    "\u028e\u0003\u0002\u0002\u0002\u028c\u028a\u0003\u0002\u0002\u0002\u028d",
    "\u0285\u0003\u0002\u0002\u0002\u028d\u028e\u0003\u0002\u0002\u0002\u028e",
    "\u028f\u0003\u0002\u0002\u0002\u028f\u0290\u0007`\u0002\u0002\u0290",
    "e\u0003\u0002\u0002\u0002\u0291\u0292\u0005N(\u0002\u0292g\u0003\u0002",
    "\u0002\u0002\u0293\u029c\u0007Z\u0002\u0002\u0294\u0299\u0005j6\u0002",
    "\u0295\u0296\u0007j\u0002\u0002\u0296\u0298\u0005j6\u0002\u0297\u0295",
    "\u0003\u0002\u0002\u0002\u0298\u029b\u0003\u0002\u0002\u0002\u0299\u0297",
    "\u0003\u0002\u0002\u0002\u0299\u029a\u0003\u0002\u0002\u0002\u029a\u029d",
    "\u0003\u0002\u0002\u0002\u029b\u0299\u0003\u0002\u0002\u0002\u029c\u0294",
    "\u0003\u0002\u0002\u0002\u029c\u029d\u0003\u0002\u0002\u0002\u029d\u029e",
    "\u0003\u0002\u0002\u0002\u029e\u029f\u0007`\u0002\u0002\u029fi\u0003",
    "\u0002\u0002\u0002\u02a0\u02a2\t\u0005\u0002\u0002\u02a1\u02a0\u0003",
    "\u0002\u0002\u0002\u02a1\u02a2\u0003\u0002\u0002\u0002\u02a2\u02a3\u0003",
    "\u0002\u0002\u0002\u02a3\u02a7\u0007p\u0002\u0002\u02a4\u02a5\u0007",
    "Z\u0002\u0002\u02a5\u02a6\u0007T\u0002\u0002\u02a6\u02a8\u0007`\u0002",
    "\u0002\u02a7\u02a4\u0003\u0002\u0002\u0002\u02a7\u02a8\u0003\u0002\u0002",
    "\u0002\u02a8\u02aa\u0003\u0002\u0002\u0002\u02a9\u02ab\u0005l7\u0002",
    "\u02aa\u02a9\u0003\u0002\u0002\u0002\u02aa\u02ab\u0003\u0002\u0002\u0002",
    "\u02abk\u0003\u0002\u0002\u0002\u02ac\u02ae\u0007\u0005\u0002\u0002",
    "\u02ad\u02af\u0007\u0018\u0002\u0002\u02ae\u02ad\u0003\u0002\u0002\u0002",
    "\u02ae\u02af\u0003\u0002\u0002\u0002\u02af\u02b0\u0003\u0002\u0002\u0002",
    "\u02b0\u02b2\u0005z>\u0002\u02b1\u02b3\u0005r:\u0002\u02b2\u02b1\u0003",
    "\u0002\u0002\u0002\u02b2\u02b3\u0003\u0002\u0002\u0002\u02b3m\u0003",
    "\u0002\u0002\u0002\u02b4\u02ca\u0007\r\u0002\u0002\u02b5\u02ca\u0007",
    "?\u0002\u0002\u02b6\u02ca\u0007M\u0002\u0002\u02b7\u02ca\u0007\u0013",
    "\u0002\u0002\u02b8\u02ca\u0007)\u0002\u0002\u02b9\u02ca\u0007\u0007",
    "\u0002\u0002\u02ba\u02ca\u0007\u0006\u0002\u0002\u02bb\u02ca\u0007\t",
    "\u0002\u0002\u02bc\u02ca\u00073\u0002\u0002\u02bd\u02ca\u00074\u0002",
    "\u0002\u02be\u02c7\u0007C\u0002\u0002\u02bf\u02c1\u0007o\u0002\u0002",
    "\u02c0\u02bf\u0003\u0002\u0002\u0002\u02c0\u02c1\u0003\u0002\u0002\u0002",
    "\u02c1\u02c2\u0003\u0002\u0002\u0002\u02c2\u02c4\u0007]\u0002\u0002",
    "\u02c3\u02c5\u0007o\u0002\u0002\u02c4\u02c3\u0003\u0002\u0002\u0002",
    "\u02c4\u02c5\u0003\u0002\u0002\u0002\u02c5\u02c6\u0003\u0002\u0002\u0002",
    "\u02c6\u02c8\u0005N(\u0002\u02c7\u02c0\u0003\u0002\u0002\u0002\u02c7",
    "\u02c8\u0003\u0002\u0002\u0002\u02c8\u02ca\u0003\u0002\u0002\u0002\u02c9",
    "\u02b4\u0003\u0002\u0002\u0002\u02c9\u02b5\u0003\u0002\u0002\u0002\u02c9",
    "\u02b6\u0003\u0002\u0002\u0002\u02c9\u02b7\u0003\u0002\u0002\u0002\u02c9",
    "\u02b8\u0003\u0002\u0002\u0002\u02c9\u02b9\u0003\u0002\u0002\u0002\u02c9",
    "\u02ba\u0003\u0002\u0002\u0002\u02c9\u02bb\u0003\u0002\u0002\u0002\u02c9",
    "\u02bc\u0003\u0002\u0002\u0002\u02c9\u02bd\u0003\u0002\u0002\u0002\u02c9",
    "\u02be\u0003\u0002\u0002\u0002\u02cao\u0003\u0002\u0002\u0002\u02cb",
    "\u02d0\u0007p\u0002\u0002\u02cc\u02cd\t\f\u0002\u0002\u02cd\u02cf\u0007",
    "p\u0002\u0002\u02ce\u02cc\u0003\u0002\u0002\u0002\u02cf\u02d2\u0003",
    "\u0002\u0002\u0002\u02d0\u02ce\u0003\u0002\u0002\u0002\u02d0\u02d1\u0003",
    "\u0002\u0002\u0002\u02d1q\u0003\u0002\u0002\u0002\u02d2\u02d0\u0003",
    "\u0002\u0002\u0002\u02d3\u02d4\u0007]\u0002\u0002\u02d4\u02d5\t\r\u0002",
    "\u0002\u02d5s\u0003\u0002\u0002\u0002\u02d6\u02d7\u0007p\u0002\u0002",
    "\u02d7\u02d8\u0007h\u0002\u0002\u02d8u\u0003\u0002\u0002\u0002\u02d9",
    "\u02ed\u0007R\u0002\u0002\u02da\u02ed\u0007S\u0002\u0002\u02db\u02dd",
    "\t\u0007\u0002\u0002\u02dc\u02db\u0003\u0002\u0002\u0002\u02dc\u02dd",
    "\u0003\u0002\u0002\u0002\u02dd\u02e4\u0003\u0002\u0002\u0002\u02de\u02e0",
    "\u0007T\u0002\u0002\u02df\u02de\u0003\u0002\u0002\u0002\u02e0\u02e1",
    "\u0003\u0002\u0002\u0002\u02e1\u02df\u0003\u0002\u0002\u0002\u02e1\u02e2",
    "\u0003\u0002\u0002\u0002\u02e2\u02e3\u0003\u0002\u0002\u0002\u02e3\u02e5",
    "\u0007k\u0002\u0002\u02e4\u02df\u0003\u0002\u0002\u0002\u02e4\u02e5",
    "\u0003\u0002\u0002\u0002\u02e5\u02e6\u0003\u0002\u0002\u0002\u02e6\u02ed",
    "\u0007T\u0002\u0002\u02e7\u02ed\u0007P\u0002\u0002\u02e8\u02ed\u0007",
    "Q\u0002\u0002\u02e9\u02ed\u0007G\u0002\u0002\u02ea\u02ed\u0007(\u0002",
    "\u0002\u02eb\u02ed\u0007p\u0002\u0002\u02ec\u02d9\u0003\u0002\u0002",
    "\u0002\u02ec\u02da\u0003\u0002\u0002\u0002\u02ec\u02dc\u0003\u0002\u0002",
    "\u0002\u02ec\u02e7\u0003\u0002\u0002\u0002\u02ec\u02e8\u0003\u0002\u0002",
    "\u0002\u02ec\u02e9\u0003\u0002\u0002\u0002\u02ec\u02ea\u0003\u0002\u0002",
    "\u0002\u02ec\u02eb\u0003\u0002\u0002\u0002\u02edw\u0003\u0002\u0002",
    "\u0002\u02ee\u02f1\u0007c\u0002\u0002\u02ef\u02f2\u0005v<\u0002\u02f0",
    "\u02f2\u0005x=\u0002\u02f1\u02ef\u0003\u0002\u0002\u0002\u02f1\u02f0",
    "\u0003\u0002\u0002\u0002\u02f2\u02fa\u0003\u0002\u0002\u0002\u02f3\u02f6",
    "\u0007j\u0002\u0002\u02f4\u02f7\u0005v<\u0002\u02f5\u02f7\u0005x=\u0002",
    "\u02f6\u02f4\u0003\u0002\u0002\u0002\u02f6\u02f5\u0003\u0002\u0002\u0002",
    "\u02f7\u02f9\u0003\u0002\u0002\u0002\u02f8\u02f3\u0003\u0002\u0002\u0002",
    "\u02f9\u02fc\u0003\u0002\u0002\u0002\u02fa\u02f8\u0003\u0002\u0002\u0002",
    "\u02fa\u02fb\u0003\u0002\u0002\u0002\u02fb\u02fe\u0003\u0002\u0002\u0002",
    "\u02fc\u02fa\u0003\u0002\u0002\u0002\u02fd\u02ff\u0007j\u0002\u0002",
    "\u02fe\u02fd\u0003\u0002\u0002\u0002\u02fe\u02ff\u0003\u0002\u0002\u0002",
    "\u02ff\u0300\u0003\u0002\u0002\u0002\u0300\u0301\u0007d\u0002\u0002",
    "\u0301y\u0003\u0002\u0002\u0002\u0302\u0305\u0005n8\u0002\u0303\u0305",
    "\u0005p9\u0002\u0304\u0302\u0003\u0002\u0002\u0002\u0304\u0303\u0003",
    "\u0002\u0002\u0002\u0305\u0309\u0003\u0002\u0002\u0002\u0306\u0307\u0007",
    "Z\u0002\u0002\u0307\u0308\t\r\u0002\u0002\u0308\u030a\u0007`\u0002\u0002",
    "\u0309\u0306\u0003\u0002\u0002\u0002\u0309\u030a\u0003\u0002\u0002\u0002",
    "\u030a{\u0003\u0002\u0002\u0002\u030b\u030c\u0007;\u0002\u0002\u030c",
    "}\u0003\u0002\u0002\u0002i\u0081\u0095\u009e\u00a3\u00b0\u00b8\u00bd",
    "\u00c3\u00cc\u00d0\u00d6\u00da\u00ee\u00f5\u00fd\u0100\u010a\u010f\u0112",
    "\u0117\u011b\u0123\u012d\u0132\u0134\u013e\u0148\u014d\u0151\u0157\u015f",
    "\u0166\u0170\u0172\u0174\u0181\u0183\u0185\u0190\u0198\u019a\u019c\u01a1",
    "\u01a5\u01a9\u01ac\u01b1\u01b5\u01b8\u01c0\u01c3\u01c8\u01cc\u01d2\u01d7",
    "\u01db\u01e5\u01e9\u01ef\u01f6\u01fb\u01ff\u0205\u020c\u0216\u0220\u0231",
    "\u0233\u023a\u0243\u024c\u0251\u025b\u025e\u0266\u026a\u0271\u0273\u027a",
    "\u028a\u028d\u0299\u029c\u02a1\u02a7\u02aa\u02ae\u02b2\u02c0\u02c4\u02c7",
    "\u02c9\u02d0\u02dc\u02e1\u02e4\u02ec\u02f1\u02f6\u02fa\u02fe\u0304\u0309"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     "'-'", "'*'", null, "'+'", null, "'['", "']'", "'{'", 
                     "'}'", null, null, "'''", "':'", "';'", "','", "'.'", 
                     null, "'_'" ];

var symbolicNames = [ null, "OBJECT", "AND", "AS", "BOOLEAN", "REAL", "BYREF", 
                      "BYTE", "BYVAL", "CASE", "CASE_ELSE", "CHAR", "CONST", 
                      "COUNTOF", "DECLARE", "DIM", "DO", "DWORD", "ELSE", 
                      "ELIF", "END", "ELSEIF", "ENUM", "END_ENUM", "END_FUNCTION", 
                      "END_IF", "END_PROPERTY", "END_SELECT", "END_SUB", 
                      "END_TYPE", "END_WITH", "EVENT", "EXIT_DO", "EXIT_FOR", 
                      "EXIT_FUNCTION", "EXIT_PROPERTY", "EXIT_SUB", "EXIT_WHILE", 
                      "FALSE", "FLOAT", "FOR", "FUNCTION", "GET", "GOTO", 
                      "IF", "IFDEF", "IFNDEF", "INCLUDE", "INCLUDEPP", "INTEGER", 
                      "LONG", "LOOP", "MOD", "NEXT", "NOT", "OR", "PROPERTY", 
                      "PUBLIC", "SELECT", "SET", "SHL", "SHORT", "SHR", 
                      "SIZEOF", "STEP", "STRING", "SUB", "THEN", "TO", "TRUE", 
                      "TYPE", "UNDEF", "UNTIL", "WEND", "WHILE", "WORD", 
                      "XOR", "SHARP", "STRINGLITERAL", "TemplateStringLiteral", 
                      "HEXLITERAL", "BINLITERAL", "INTEGERLITERAL", "DIV", 
                      "EQ", "GEQ", "GT", "LEQ", "LPAREN", "LT", "MINUS", 
                      "MULT", "NEQ", "PLUS", "RPAREN", "L_SQUARE_BRACKET", 
                      "R_SQUARE_BRACKET", "L_CURLY_BRACKET", "R_CURLY_BRACKET", 
                      "NEWLINE", "COMMENT", "SINGLEQUOTE", "COLON", "SEMICOLON", 
                      "COMMA", "DOT", "BANG", "UNDERSCORE", "SYSCALL", "WS", 
                      "IDENTIFIER", "DIRECTIVE_INCLUDE", "DIRECTIVE_INCLUDEPP", 
                      "DIRECTIVE_DEFINE", "DIRECTIVE_IF", "DIRECTIVE_ELIF", 
                      "DIRECTIVE_ELSE", "DIRECTIVE_UNDEF", "DIRECTIVE_IFDEF", 
                      "DIRECTIVE_IFNDEF", "DIRECTIVE_ENDIF", "DIRECTIVE_ERROR", 
                      "DIRECTIVE_BANG", "DIRECTIVE_LP", "DIRECTIVE_RP", 
                      "DIRECTIVE_EQUAL", "DIRECTIVE_NOTEQUAL", "DIRECTIVE_AND", 
                      "DIRECTIVE_OR", "DIRECTIVE_LT", "DIRECTIVE_GT", "DIRECTIVE_LE", 
                      "DIRECTIVE_GE", "DIRECTIVE_ID", "DIRECTIVE_DECIMAL_LITERAL", 
                      "DIRECTIVE_FLOAT", "DIRECTIVE_NEWLINE", "DIRECTIVE_SINGLE_COMMENT", 
                      "DIRECTIVE_BACKSLASH_NEWLINE", "DIRECTIVE_TEXT_NEWLINE", 
                      "DIRECTIVE_TEXT_BACKSLASH_NEWLINE", "DIRECTIVE_TEXT_MULTI_COMMENT", 
                      "DIRECTIVE_TEXT_SINGLE_COMMENT", "DIRECTIVE_TEXT", 
                      "ANY" ];

var ruleNames =  [ "startRule", "topLevelDeclaration", "includeStmt", "includeppStmt", 
                   "block", "statement", "constStmt", "constSubStmt", "declareVariableStmt", 
                   "declareSubStmt", "declareFuncStmt", "doLoopStmt", "enumerationStmt", 
                   "enumerationStmt_Constant", "exitStmt", "forNextStmt", 
                   "functionStmt", "jumpStmt", "goToStmt", "ifThenElseStmt", 
                   "ifConditionStmt", "propertyDefineStmt", "propertyDefineStmt_InStmt", 
                   "propertyGetStmt", "propertySetStmt", "eventDeclaration", 
                   "syscallDeclaration", "syscallDeclarationInner", "syscallInternalDeclarationInner", 
                   "syscallInternalParamList", "paramInternal", "selectCaseStmt", 
                   "sC_Case", "sC_Default", "sC_Cond", "subStmt", "typeStmt", 
                   "typeStmtElement", "expression", "unaryExpression", "unaryOperator", 
                   "postfixExpression", "postfix", "primaryExpression", 
                   "variableStmt", "variableListStmt", "variableListItem", 
                   "whileWendStmt", "objectDeclaration", "argList", "arg", 
                   "paramList", "param", "asTypeClause", "baseType", "complexType", 
                   "fieldLength", "lineLabel", "literal", "arrayLiteral", 
                   "type", "visibility" ];

function TibboBasicParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

TibboBasicParser.prototype = Object.create(antlr4.Parser.prototype);
TibboBasicParser.prototype.constructor = TibboBasicParser;

Object.defineProperty(TibboBasicParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

TibboBasicParser.EOF = antlr4.Token.EOF;
TibboBasicParser.OBJECT = 1;
TibboBasicParser.AND = 2;
TibboBasicParser.AS = 3;
TibboBasicParser.BOOLEAN = 4;
TibboBasicParser.REAL = 5;
TibboBasicParser.BYREF = 6;
TibboBasicParser.BYTE = 7;
TibboBasicParser.BYVAL = 8;
TibboBasicParser.CASE = 9;
TibboBasicParser.CASE_ELSE = 10;
TibboBasicParser.CHAR = 11;
TibboBasicParser.CONST = 12;
TibboBasicParser.COUNTOF = 13;
TibboBasicParser.DECLARE = 14;
TibboBasicParser.DIM = 15;
TibboBasicParser.DO = 16;
TibboBasicParser.DWORD = 17;
TibboBasicParser.ELSE = 18;
TibboBasicParser.ELIF = 19;
TibboBasicParser.END = 20;
TibboBasicParser.ELSEIF = 21;
TibboBasicParser.ENUM = 22;
TibboBasicParser.END_ENUM = 23;
TibboBasicParser.END_FUNCTION = 24;
TibboBasicParser.END_IF = 25;
TibboBasicParser.END_PROPERTY = 26;
TibboBasicParser.END_SELECT = 27;
TibboBasicParser.END_SUB = 28;
TibboBasicParser.END_TYPE = 29;
TibboBasicParser.END_WITH = 30;
TibboBasicParser.EVENT = 31;
TibboBasicParser.EXIT_DO = 32;
TibboBasicParser.EXIT_FOR = 33;
TibboBasicParser.EXIT_FUNCTION = 34;
TibboBasicParser.EXIT_PROPERTY = 35;
TibboBasicParser.EXIT_SUB = 36;
TibboBasicParser.EXIT_WHILE = 37;
TibboBasicParser.FALSE = 38;
TibboBasicParser.FLOAT = 39;
TibboBasicParser.FOR = 40;
TibboBasicParser.FUNCTION = 41;
TibboBasicParser.GET = 42;
TibboBasicParser.GOTO = 43;
TibboBasicParser.IF = 44;
TibboBasicParser.IFDEF = 45;
TibboBasicParser.IFNDEF = 46;
TibboBasicParser.INCLUDE = 47;
TibboBasicParser.INCLUDEPP = 48;
TibboBasicParser.INTEGER = 49;
TibboBasicParser.LONG = 50;
TibboBasicParser.LOOP = 51;
TibboBasicParser.MOD = 52;
TibboBasicParser.NEXT = 53;
TibboBasicParser.NOT = 54;
TibboBasicParser.OR = 55;
TibboBasicParser.PROPERTY = 56;
TibboBasicParser.PUBLIC = 57;
TibboBasicParser.SELECT = 58;
TibboBasicParser.SET = 59;
TibboBasicParser.SHL = 60;
TibboBasicParser.SHORT = 61;
TibboBasicParser.SHR = 62;
TibboBasicParser.SIZEOF = 63;
TibboBasicParser.STEP = 64;
TibboBasicParser.STRING = 65;
TibboBasicParser.SUB = 66;
TibboBasicParser.THEN = 67;
TibboBasicParser.TO = 68;
TibboBasicParser.TRUE = 69;
TibboBasicParser.TYPE = 70;
TibboBasicParser.UNDEF = 71;
TibboBasicParser.UNTIL = 72;
TibboBasicParser.WEND = 73;
TibboBasicParser.WHILE = 74;
TibboBasicParser.WORD = 75;
TibboBasicParser.XOR = 76;
TibboBasicParser.SHARP = 77;
TibboBasicParser.STRINGLITERAL = 78;
TibboBasicParser.TemplateStringLiteral = 79;
TibboBasicParser.HEXLITERAL = 80;
TibboBasicParser.BINLITERAL = 81;
TibboBasicParser.INTEGERLITERAL = 82;
TibboBasicParser.DIV = 83;
TibboBasicParser.EQ = 84;
TibboBasicParser.GEQ = 85;
TibboBasicParser.GT = 86;
TibboBasicParser.LEQ = 87;
TibboBasicParser.LPAREN = 88;
TibboBasicParser.LT = 89;
TibboBasicParser.MINUS = 90;
TibboBasicParser.MULT = 91;
TibboBasicParser.NEQ = 92;
TibboBasicParser.PLUS = 93;
TibboBasicParser.RPAREN = 94;
TibboBasicParser.L_SQUARE_BRACKET = 95;
TibboBasicParser.R_SQUARE_BRACKET = 96;
TibboBasicParser.L_CURLY_BRACKET = 97;
TibboBasicParser.R_CURLY_BRACKET = 98;
TibboBasicParser.NEWLINE = 99;
TibboBasicParser.COMMENT = 100;
TibboBasicParser.SINGLEQUOTE = 101;
TibboBasicParser.COLON = 102;
TibboBasicParser.SEMICOLON = 103;
TibboBasicParser.COMMA = 104;
TibboBasicParser.DOT = 105;
TibboBasicParser.BANG = 106;
TibboBasicParser.UNDERSCORE = 107;
TibboBasicParser.SYSCALL = 108;
TibboBasicParser.WS = 109;
TibboBasicParser.IDENTIFIER = 110;
TibboBasicParser.DIRECTIVE_INCLUDE = 111;
TibboBasicParser.DIRECTIVE_INCLUDEPP = 112;
TibboBasicParser.DIRECTIVE_DEFINE = 113;
TibboBasicParser.DIRECTIVE_IF = 114;
TibboBasicParser.DIRECTIVE_ELIF = 115;
TibboBasicParser.DIRECTIVE_ELSE = 116;
TibboBasicParser.DIRECTIVE_UNDEF = 117;
TibboBasicParser.DIRECTIVE_IFDEF = 118;
TibboBasicParser.DIRECTIVE_IFNDEF = 119;
TibboBasicParser.DIRECTIVE_ENDIF = 120;
TibboBasicParser.DIRECTIVE_ERROR = 121;
TibboBasicParser.DIRECTIVE_BANG = 122;
TibboBasicParser.DIRECTIVE_LP = 123;
TibboBasicParser.DIRECTIVE_RP = 124;
TibboBasicParser.DIRECTIVE_EQUAL = 125;
TibboBasicParser.DIRECTIVE_NOTEQUAL = 126;
TibboBasicParser.DIRECTIVE_AND = 127;
TibboBasicParser.DIRECTIVE_OR = 128;
TibboBasicParser.DIRECTIVE_LT = 129;
TibboBasicParser.DIRECTIVE_GT = 130;
TibboBasicParser.DIRECTIVE_LE = 131;
TibboBasicParser.DIRECTIVE_GE = 132;
TibboBasicParser.DIRECTIVE_ID = 133;
TibboBasicParser.DIRECTIVE_DECIMAL_LITERAL = 134;
TibboBasicParser.DIRECTIVE_FLOAT = 135;
TibboBasicParser.DIRECTIVE_NEWLINE = 136;
TibboBasicParser.DIRECTIVE_SINGLE_COMMENT = 137;
TibboBasicParser.DIRECTIVE_BACKSLASH_NEWLINE = 138;
TibboBasicParser.DIRECTIVE_TEXT_NEWLINE = 139;
TibboBasicParser.DIRECTIVE_TEXT_BACKSLASH_NEWLINE = 140;
TibboBasicParser.DIRECTIVE_TEXT_MULTI_COMMENT = 141;
TibboBasicParser.DIRECTIVE_TEXT_SINGLE_COMMENT = 142;
TibboBasicParser.DIRECTIVE_TEXT = 143;
TibboBasicParser.ANY = 144;

TibboBasicParser.RULE_startRule = 0;
TibboBasicParser.RULE_topLevelDeclaration = 1;
TibboBasicParser.RULE_includeStmt = 2;
TibboBasicParser.RULE_includeppStmt = 3;
TibboBasicParser.RULE_block = 4;
TibboBasicParser.RULE_statement = 5;
TibboBasicParser.RULE_constStmt = 6;
TibboBasicParser.RULE_constSubStmt = 7;
TibboBasicParser.RULE_declareVariableStmt = 8;
TibboBasicParser.RULE_declareSubStmt = 9;
TibboBasicParser.RULE_declareFuncStmt = 10;
TibboBasicParser.RULE_doLoopStmt = 11;
TibboBasicParser.RULE_enumerationStmt = 12;
TibboBasicParser.RULE_enumerationStmt_Constant = 13;
TibboBasicParser.RULE_exitStmt = 14;
TibboBasicParser.RULE_forNextStmt = 15;
TibboBasicParser.RULE_functionStmt = 16;
TibboBasicParser.RULE_jumpStmt = 17;
TibboBasicParser.RULE_goToStmt = 18;
TibboBasicParser.RULE_ifThenElseStmt = 19;
TibboBasicParser.RULE_ifConditionStmt = 20;
TibboBasicParser.RULE_propertyDefineStmt = 21;
TibboBasicParser.RULE_propertyDefineStmt_InStmt = 22;
TibboBasicParser.RULE_propertyGetStmt = 23;
TibboBasicParser.RULE_propertySetStmt = 24;
TibboBasicParser.RULE_eventDeclaration = 25;
TibboBasicParser.RULE_syscallDeclaration = 26;
TibboBasicParser.RULE_syscallDeclarationInner = 27;
TibboBasicParser.RULE_syscallInternalDeclarationInner = 28;
TibboBasicParser.RULE_syscallInternalParamList = 29;
TibboBasicParser.RULE_paramInternal = 30;
TibboBasicParser.RULE_selectCaseStmt = 31;
TibboBasicParser.RULE_sC_Case = 32;
TibboBasicParser.RULE_sC_Default = 33;
TibboBasicParser.RULE_sC_Cond = 34;
TibboBasicParser.RULE_subStmt = 35;
TibboBasicParser.RULE_typeStmt = 36;
TibboBasicParser.RULE_typeStmtElement = 37;
TibboBasicParser.RULE_expression = 38;
TibboBasicParser.RULE_unaryExpression = 39;
TibboBasicParser.RULE_unaryOperator = 40;
TibboBasicParser.RULE_postfixExpression = 41;
TibboBasicParser.RULE_postfix = 42;
TibboBasicParser.RULE_primaryExpression = 43;
TibboBasicParser.RULE_variableStmt = 44;
TibboBasicParser.RULE_variableListStmt = 45;
TibboBasicParser.RULE_variableListItem = 46;
TibboBasicParser.RULE_whileWendStmt = 47;
TibboBasicParser.RULE_objectDeclaration = 48;
TibboBasicParser.RULE_argList = 49;
TibboBasicParser.RULE_arg = 50;
TibboBasicParser.RULE_paramList = 51;
TibboBasicParser.RULE_param = 52;
TibboBasicParser.RULE_asTypeClause = 53;
TibboBasicParser.RULE_baseType = 54;
TibboBasicParser.RULE_complexType = 55;
TibboBasicParser.RULE_fieldLength = 56;
TibboBasicParser.RULE_lineLabel = 57;
TibboBasicParser.RULE_literal = 58;
TibboBasicParser.RULE_arrayLiteral = 59;
TibboBasicParser.RULE_type = 60;
TibboBasicParser.RULE_visibility = 61;


function StartRuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_startRule;
    return this;
}

StartRuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartRuleContext.prototype.constructor = StartRuleContext;

StartRuleContext.prototype.EOF = function() {
    return this.getToken(TibboBasicParser.EOF, 0);
};

StartRuleContext.prototype.topLevelDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TopLevelDeclarationContext);
    } else {
        return this.getTypedRuleContext(TopLevelDeclarationContext,i);
    }
};

StartRuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterStartRule(this);
	}
};

StartRuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitStartRule(this);
	}
};

StartRuleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitStartRule(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.StartRuleContext = StartRuleContext;

TibboBasicParser.prototype.startRule = function() {

    var localctx = new StartRuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, TibboBasicParser.RULE_startRule);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 127;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << TibboBasicParser.OBJECT) | (1 << TibboBasicParser.CONST) | (1 << TibboBasicParser.DECLARE) | (1 << TibboBasicParser.DIM) | (1 << TibboBasicParser.ENUM) | (1 << TibboBasicParser.EVENT))) !== 0) || ((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (TibboBasicParser.FUNCTION - 41)) | (1 << (TibboBasicParser.INCLUDE - 41)) | (1 << (TibboBasicParser.INCLUDEPP - 41)) | (1 << (TibboBasicParser.PROPERTY - 41)) | (1 << (TibboBasicParser.PUBLIC - 41)) | (1 << (TibboBasicParser.SUB - 41)) | (1 << (TibboBasicParser.TYPE - 41)))) !== 0) || _la===TibboBasicParser.SYSCALL) {
            this.state = 124;
            this.topLevelDeclaration();
            this.state = 129;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 130;
        this.match(TibboBasicParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TopLevelDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_topLevelDeclaration;
    return this;
}

TopLevelDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TopLevelDeclarationContext.prototype.constructor = TopLevelDeclarationContext;

TopLevelDeclarationContext.prototype.includeStmt = function() {
    return this.getTypedRuleContext(IncludeStmtContext,0);
};

TopLevelDeclarationContext.prototype.includeppStmt = function() {
    return this.getTypedRuleContext(IncludeppStmtContext,0);
};

TopLevelDeclarationContext.prototype.enumerationStmt = function() {
    return this.getTypedRuleContext(EnumerationStmtContext,0);
};

TopLevelDeclarationContext.prototype.constStmt = function() {
    return this.getTypedRuleContext(ConstStmtContext,0);
};

TopLevelDeclarationContext.prototype.declareSubStmt = function() {
    return this.getTypedRuleContext(DeclareSubStmtContext,0);
};

TopLevelDeclarationContext.prototype.declareFuncStmt = function() {
    return this.getTypedRuleContext(DeclareFuncStmtContext,0);
};

TopLevelDeclarationContext.prototype.declareVariableStmt = function() {
    return this.getTypedRuleContext(DeclareVariableStmtContext,0);
};

TopLevelDeclarationContext.prototype.variableStmt = function() {
    return this.getTypedRuleContext(VariableStmtContext,0);
};

TopLevelDeclarationContext.prototype.subStmt = function() {
    return this.getTypedRuleContext(SubStmtContext,0);
};

TopLevelDeclarationContext.prototype.functionStmt = function() {
    return this.getTypedRuleContext(FunctionStmtContext,0);
};

TopLevelDeclarationContext.prototype.objectDeclaration = function() {
    return this.getTypedRuleContext(ObjectDeclarationContext,0);
};

TopLevelDeclarationContext.prototype.propertyDefineStmt = function() {
    return this.getTypedRuleContext(PropertyDefineStmtContext,0);
};

TopLevelDeclarationContext.prototype.eventDeclaration = function() {
    return this.getTypedRuleContext(EventDeclarationContext,0);
};

TopLevelDeclarationContext.prototype.syscallDeclaration = function() {
    return this.getTypedRuleContext(SyscallDeclarationContext,0);
};

TopLevelDeclarationContext.prototype.typeStmt = function() {
    return this.getTypedRuleContext(TypeStmtContext,0);
};

TopLevelDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterTopLevelDeclaration(this);
	}
};

TopLevelDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitTopLevelDeclaration(this);
	}
};

TopLevelDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitTopLevelDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.TopLevelDeclarationContext = TopLevelDeclarationContext;

TibboBasicParser.prototype.topLevelDeclaration = function() {

    var localctx = new TopLevelDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, TibboBasicParser.RULE_topLevelDeclaration);
    try {
        this.state = 147;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 132;
            this.includeStmt();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 133;
            this.includeppStmt();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 134;
            this.enumerationStmt();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 135;
            this.constStmt();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 136;
            this.declareSubStmt();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 137;
            this.declareFuncStmt();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 138;
            this.declareVariableStmt();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 139;
            this.variableStmt();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 140;
            this.subStmt();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 141;
            this.functionStmt();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 142;
            this.objectDeclaration();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 143;
            this.propertyDefineStmt();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 144;
            this.eventDeclaration();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 145;
            this.syscallDeclaration();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 146;
            this.typeStmt();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IncludeStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_includeStmt;
    return this;
}

IncludeStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IncludeStmtContext.prototype.constructor = IncludeStmtContext;

IncludeStmtContext.prototype.INCLUDE = function() {
    return this.getToken(TibboBasicParser.INCLUDE, 0);
};

IncludeStmtContext.prototype.STRINGLITERAL = function() {
    return this.getToken(TibboBasicParser.STRINGLITERAL, 0);
};

IncludeStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterIncludeStmt(this);
	}
};

IncludeStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitIncludeStmt(this);
	}
};

IncludeStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitIncludeStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.IncludeStmtContext = IncludeStmtContext;

TibboBasicParser.prototype.includeStmt = function() {

    var localctx = new IncludeStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, TibboBasicParser.RULE_includeStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 149;
        this.match(TibboBasicParser.INCLUDE);
        this.state = 150;
        this.match(TibboBasicParser.STRINGLITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IncludeppStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_includeppStmt;
    return this;
}

IncludeppStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IncludeppStmtContext.prototype.constructor = IncludeppStmtContext;

IncludeppStmtContext.prototype.INCLUDEPP = function() {
    return this.getToken(TibboBasicParser.INCLUDEPP, 0);
};

IncludeppStmtContext.prototype.STRINGLITERAL = function() {
    return this.getToken(TibboBasicParser.STRINGLITERAL, 0);
};

IncludeppStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterIncludeppStmt(this);
	}
};

IncludeppStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitIncludeppStmt(this);
	}
};

IncludeppStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitIncludeppStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.IncludeppStmtContext = IncludeppStmtContext;

TibboBasicParser.prototype.includeppStmt = function() {

    var localctx = new IncludeppStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, TibboBasicParser.RULE_includeppStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 152;
        this.match(TibboBasicParser.INCLUDEPP);
        this.state = 153;
        this.match(TibboBasicParser.STRINGLITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

BlockContext.prototype.lineLabel = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LineLabelContext);
    } else {
        return this.getTypedRuleContext(LineLabelContext,i);
    }
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitBlock(this);
	}
};

BlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.BlockContext = BlockContext;

TibboBasicParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, TibboBasicParser.RULE_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 161;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << TibboBasicParser.CONST) | (1 << TibboBasicParser.DIM) | (1 << TibboBasicParser.DO))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (TibboBasicParser.EXIT_DO - 32)) | (1 << (TibboBasicParser.EXIT_FOR - 32)) | (1 << (TibboBasicParser.EXIT_FUNCTION - 32)) | (1 << (TibboBasicParser.EXIT_PROPERTY - 32)) | (1 << (TibboBasicParser.EXIT_SUB - 32)) | (1 << (TibboBasicParser.EXIT_WHILE - 32)) | (1 << (TibboBasicParser.FALSE - 32)) | (1 << (TibboBasicParser.FOR - 32)) | (1 << (TibboBasicParser.GOTO - 32)) | (1 << (TibboBasicParser.IF - 32)) | (1 << (TibboBasicParser.NOT - 32)) | (1 << (TibboBasicParser.PUBLIC - 32)) | (1 << (TibboBasicParser.SELECT - 32)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (TibboBasicParser.TRUE - 69)) | (1 << (TibboBasicParser.WHILE - 69)) | (1 << (TibboBasicParser.STRINGLITERAL - 69)) | (1 << (TibboBasicParser.TemplateStringLiteral - 69)) | (1 << (TibboBasicParser.HEXLITERAL - 69)) | (1 << (TibboBasicParser.BINLITERAL - 69)) | (1 << (TibboBasicParser.INTEGERLITERAL - 69)) | (1 << (TibboBasicParser.LPAREN - 69)) | (1 << (TibboBasicParser.MINUS - 69)) | (1 << (TibboBasicParser.PLUS - 69)))) !== 0) || _la===TibboBasicParser.IDENTIFIER) {
            this.state = 156;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
            if(la_===1) {
                this.state = 155;
                this.lineLabel();

            }
            this.state = 158;
            this.statement();
            this.state = 163;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.lineLabel = function() {
    return this.getTypedRuleContext(LineLabelContext,0);
};

StatementContext.prototype.constStmt = function() {
    return this.getTypedRuleContext(ConstStmtContext,0);
};

StatementContext.prototype.doLoopStmt = function() {
    return this.getTypedRuleContext(DoLoopStmtContext,0);
};

StatementContext.prototype.forNextStmt = function() {
    return this.getTypedRuleContext(ForNextStmtContext,0);
};

StatementContext.prototype.jumpStmt = function() {
    return this.getTypedRuleContext(JumpStmtContext,0);
};

StatementContext.prototype.ifThenElseStmt = function() {
    return this.getTypedRuleContext(IfThenElseStmtContext,0);
};

StatementContext.prototype.selectCaseStmt = function() {
    return this.getTypedRuleContext(SelectCaseStmtContext,0);
};

StatementContext.prototype.variableStmt = function() {
    return this.getTypedRuleContext(VariableStmtContext,0);
};

StatementContext.prototype.whileWendStmt = function() {
    return this.getTypedRuleContext(WhileWendStmtContext,0);
};

StatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitStatement(this);
	}
};

StatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.StatementContext = StatementContext;

TibboBasicParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, TibboBasicParser.RULE_statement);
    try {
        this.state = 174;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 164;
            this.lineLabel();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 165;
            this.constStmt();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 166;
            this.doLoopStmt();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 167;
            this.forNextStmt();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 168;
            this.jumpStmt();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 169;
            this.ifThenElseStmt();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 170;
            this.selectCaseStmt();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 171;
            this.variableStmt();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 172;
            this.whileWendStmt();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 173;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_constStmt;
    return this;
}

ConstStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstStmtContext.prototype.constructor = ConstStmtContext;

ConstStmtContext.prototype.CONST = function() {
    return this.getToken(TibboBasicParser.CONST, 0);
};

ConstStmtContext.prototype.constSubStmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstSubStmtContext);
    } else {
        return this.getTypedRuleContext(ConstSubStmtContext,i);
    }
};

ConstStmtContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.COMMA);
    } else {
        return this.getToken(TibboBasicParser.COMMA, i);
    }
};


ConstStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterConstStmt(this);
	}
};

ConstStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitConstStmt(this);
	}
};

ConstStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitConstStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.ConstStmtContext = ConstStmtContext;

TibboBasicParser.prototype.constStmt = function() {

    var localctx = new ConstStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, TibboBasicParser.RULE_constStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 176;
        this.match(TibboBasicParser.CONST);
        this.state = 177;
        this.constSubStmt();
        this.state = 182;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TibboBasicParser.COMMA) {
            this.state = 178;
            this.match(TibboBasicParser.COMMA);
            this.state = 179;
            this.constSubStmt();
            this.state = 184;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstSubStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_constSubStmt;
    this.name = null; // Token
    this.value = null; // ExpressionContext
    return this;
}

ConstSubStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstSubStmtContext.prototype.constructor = ConstSubStmtContext;

ConstSubStmtContext.prototype.EQ = function() {
    return this.getToken(TibboBasicParser.EQ, 0);
};

ConstSubStmtContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

ConstSubStmtContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConstSubStmtContext.prototype.asTypeClause = function() {
    return this.getTypedRuleContext(AsTypeClauseContext,0);
};

ConstSubStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterConstSubStmt(this);
	}
};

ConstSubStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitConstSubStmt(this);
	}
};

ConstSubStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitConstSubStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.ConstSubStmtContext = ConstSubStmtContext;

TibboBasicParser.prototype.constSubStmt = function() {

    var localctx = new ConstSubStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, TibboBasicParser.RULE_constSubStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 185;
        localctx.name = this.match(TibboBasicParser.IDENTIFIER);
        this.state = 187;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.AS) {
            this.state = 186;
            this.asTypeClause();
        }

        this.state = 189;
        this.match(TibboBasicParser.EQ);
        this.state = 190;
        localctx.value = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclareVariableStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_declareVariableStmt;
    return this;
}

DeclareVariableStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclareVariableStmtContext.prototype.constructor = DeclareVariableStmtContext;

DeclareVariableStmtContext.prototype.DECLARE = function() {
    return this.getToken(TibboBasicParser.DECLARE, 0);
};

DeclareVariableStmtContext.prototype.variableListStmt = function() {
    return this.getTypedRuleContext(VariableListStmtContext,0);
};

DeclareVariableStmtContext.prototype.visibility = function() {
    return this.getTypedRuleContext(VisibilityContext,0);
};

DeclareVariableStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterDeclareVariableStmt(this);
	}
};

DeclareVariableStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitDeclareVariableStmt(this);
	}
};

DeclareVariableStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitDeclareVariableStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.DeclareVariableStmtContext = DeclareVariableStmtContext;

TibboBasicParser.prototype.declareVariableStmt = function() {

    var localctx = new DeclareVariableStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, TibboBasicParser.RULE_declareVariableStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 193;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.PUBLIC) {
            this.state = 192;
            this.visibility();
        }

        this.state = 195;
        this.match(TibboBasicParser.DECLARE);
        this.state = 196;
        this.variableListStmt();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclareSubStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_declareSubStmt;
    this.name = null; // Token
    return this;
}

DeclareSubStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclareSubStmtContext.prototype.constructor = DeclareSubStmtContext;

DeclareSubStmtContext.prototype.DECLARE = function() {
    return this.getToken(TibboBasicParser.DECLARE, 0);
};

DeclareSubStmtContext.prototype.SUB = function() {
    return this.getToken(TibboBasicParser.SUB, 0);
};

DeclareSubStmtContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.IDENTIFIER);
    } else {
        return this.getToken(TibboBasicParser.IDENTIFIER, i);
    }
};


DeclareSubStmtContext.prototype.DOT = function() {
    return this.getToken(TibboBasicParser.DOT, 0);
};

DeclareSubStmtContext.prototype.paramList = function() {
    return this.getTypedRuleContext(ParamListContext,0);
};

DeclareSubStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterDeclareSubStmt(this);
	}
};

DeclareSubStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitDeclareSubStmt(this);
	}
};

DeclareSubStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitDeclareSubStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.DeclareSubStmtContext = DeclareSubStmtContext;

TibboBasicParser.prototype.declareSubStmt = function() {

    var localctx = new DeclareSubStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, TibboBasicParser.RULE_declareSubStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 198;
        this.match(TibboBasicParser.DECLARE);
        this.state = 199;
        this.match(TibboBasicParser.SUB);
        this.state = 202;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
        if(la_===1) {
            this.state = 200;
            this.match(TibboBasicParser.IDENTIFIER);
            this.state = 201;
            this.match(TibboBasicParser.DOT);

        }
        this.state = 204;
        localctx.name = this.match(TibboBasicParser.IDENTIFIER);
        this.state = 206;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.LPAREN) {
            this.state = 205;
            this.paramList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclareFuncStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_declareFuncStmt;
    this.name = null; // Token
    this.returnType = null; // AsTypeClauseContext
    return this;
}

DeclareFuncStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclareFuncStmtContext.prototype.constructor = DeclareFuncStmtContext;

DeclareFuncStmtContext.prototype.DECLARE = function() {
    return this.getToken(TibboBasicParser.DECLARE, 0);
};

DeclareFuncStmtContext.prototype.FUNCTION = function() {
    return this.getToken(TibboBasicParser.FUNCTION, 0);
};

DeclareFuncStmtContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.IDENTIFIER);
    } else {
        return this.getToken(TibboBasicParser.IDENTIFIER, i);
    }
};


DeclareFuncStmtContext.prototype.asTypeClause = function() {
    return this.getTypedRuleContext(AsTypeClauseContext,0);
};

DeclareFuncStmtContext.prototype.DOT = function() {
    return this.getToken(TibboBasicParser.DOT, 0);
};

DeclareFuncStmtContext.prototype.paramList = function() {
    return this.getTypedRuleContext(ParamListContext,0);
};

DeclareFuncStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterDeclareFuncStmt(this);
	}
};

DeclareFuncStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitDeclareFuncStmt(this);
	}
};

DeclareFuncStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitDeclareFuncStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.DeclareFuncStmtContext = DeclareFuncStmtContext;

TibboBasicParser.prototype.declareFuncStmt = function() {

    var localctx = new DeclareFuncStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, TibboBasicParser.RULE_declareFuncStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 208;
        this.match(TibboBasicParser.DECLARE);
        this.state = 209;
        this.match(TibboBasicParser.FUNCTION);
        this.state = 212;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
        if(la_===1) {
            this.state = 210;
            this.match(TibboBasicParser.IDENTIFIER);
            this.state = 211;
            this.match(TibboBasicParser.DOT);

        }
        this.state = 214;
        localctx.name = this.match(TibboBasicParser.IDENTIFIER);
        this.state = 216;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.LPAREN) {
            this.state = 215;
            this.paramList();
        }

        this.state = 218;
        localctx.returnType = this.asTypeClause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DoLoopStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_doLoopStmt;
    this.condition = null; // ExpressionContext
    return this;
}

DoLoopStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DoLoopStmtContext.prototype.constructor = DoLoopStmtContext;

DoLoopStmtContext.prototype.DO = function() {
    return this.getToken(TibboBasicParser.DO, 0);
};

DoLoopStmtContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

DoLoopStmtContext.prototype.LOOP = function() {
    return this.getToken(TibboBasicParser.LOOP, 0);
};

DoLoopStmtContext.prototype.WHILE = function() {
    return this.getToken(TibboBasicParser.WHILE, 0);
};

DoLoopStmtContext.prototype.UNTIL = function() {
    return this.getToken(TibboBasicParser.UNTIL, 0);
};

DoLoopStmtContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DoLoopStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterDoLoopStmt(this);
	}
};

DoLoopStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitDoLoopStmt(this);
	}
};

DoLoopStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitDoLoopStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.DoLoopStmtContext = DoLoopStmtContext;

TibboBasicParser.prototype.doLoopStmt = function() {

    var localctx = new DoLoopStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, TibboBasicParser.RULE_doLoopStmt);
    var _la = 0; // Token type
    try {
        this.state = 236;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 220;
            this.match(TibboBasicParser.DO);
            this.state = 221;
            this.block();
            this.state = 222;
            this.match(TibboBasicParser.LOOP);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 224;
            this.match(TibboBasicParser.DO);
            this.state = 225;
            _la = this._input.LA(1);
            if(!(_la===TibboBasicParser.UNTIL || _la===TibboBasicParser.WHILE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 226;
            localctx.condition = this.expression(0);
            this.state = 227;
            this.block();
            this.state = 228;
            this.match(TibboBasicParser.LOOP);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 230;
            this.match(TibboBasicParser.DO);
            this.state = 231;
            this.block();
            this.state = 232;
            this.match(TibboBasicParser.LOOP);
            this.state = 233;
            _la = this._input.LA(1);
            if(!(_la===TibboBasicParser.UNTIL || _la===TibboBasicParser.WHILE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 234;
            localctx.condition = this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumerationStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_enumerationStmt;
    return this;
}

EnumerationStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumerationStmtContext.prototype.constructor = EnumerationStmtContext;

EnumerationStmtContext.prototype.ENUM = function() {
    return this.getToken(TibboBasicParser.ENUM, 0);
};

EnumerationStmtContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

EnumerationStmtContext.prototype.END_ENUM = function() {
    return this.getToken(TibboBasicParser.END_ENUM, 0);
};

EnumerationStmtContext.prototype.enumerationStmt_Constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumerationStmt_ConstantContext);
    } else {
        return this.getTypedRuleContext(EnumerationStmt_ConstantContext,i);
    }
};

EnumerationStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterEnumerationStmt(this);
	}
};

EnumerationStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitEnumerationStmt(this);
	}
};

EnumerationStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitEnumerationStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.EnumerationStmtContext = EnumerationStmtContext;

TibboBasicParser.prototype.enumerationStmt = function() {

    var localctx = new EnumerationStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, TibboBasicParser.RULE_enumerationStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 238;
        this.match(TibboBasicParser.ENUM);
        this.state = 239;
        this.match(TibboBasicParser.IDENTIFIER);
        this.state = 243;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TibboBasicParser.IDENTIFIER) {
            this.state = 240;
            this.enumerationStmt_Constant();
            this.state = 245;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 246;
        this.match(TibboBasicParser.END_ENUM);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumerationStmt_ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_enumerationStmt_Constant;
    return this;
}

EnumerationStmt_ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumerationStmt_ConstantContext.prototype.constructor = EnumerationStmt_ConstantContext;

EnumerationStmt_ConstantContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

EnumerationStmt_ConstantContext.prototype.EQ = function() {
    return this.getToken(TibboBasicParser.EQ, 0);
};

EnumerationStmt_ConstantContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

EnumerationStmt_ConstantContext.prototype.COMMA = function() {
    return this.getToken(TibboBasicParser.COMMA, 0);
};

EnumerationStmt_ConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterEnumerationStmt_Constant(this);
	}
};

EnumerationStmt_ConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitEnumerationStmt_Constant(this);
	}
};

EnumerationStmt_ConstantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitEnumerationStmt_Constant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.EnumerationStmt_ConstantContext = EnumerationStmt_ConstantContext;

TibboBasicParser.prototype.enumerationStmt_Constant = function() {

    var localctx = new EnumerationStmt_ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, TibboBasicParser.RULE_enumerationStmt_Constant);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 248;
        this.match(TibboBasicParser.IDENTIFIER);
        this.state = 251;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.EQ) {
            this.state = 249;
            this.match(TibboBasicParser.EQ);
            this.state = 250;
            this.expression(0);
        }

        this.state = 254;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.COMMA) {
            this.state = 253;
            this.match(TibboBasicParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExitStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_exitStmt;
    return this;
}

ExitStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExitStmtContext.prototype.constructor = ExitStmtContext;

ExitStmtContext.prototype.EXIT_DO = function() {
    return this.getToken(TibboBasicParser.EXIT_DO, 0);
};

ExitStmtContext.prototype.EXIT_FOR = function() {
    return this.getToken(TibboBasicParser.EXIT_FOR, 0);
};

ExitStmtContext.prototype.EXIT_FUNCTION = function() {
    return this.getToken(TibboBasicParser.EXIT_FUNCTION, 0);
};

ExitStmtContext.prototype.EXIT_PROPERTY = function() {
    return this.getToken(TibboBasicParser.EXIT_PROPERTY, 0);
};

ExitStmtContext.prototype.EXIT_SUB = function() {
    return this.getToken(TibboBasicParser.EXIT_SUB, 0);
};

ExitStmtContext.prototype.EXIT_WHILE = function() {
    return this.getToken(TibboBasicParser.EXIT_WHILE, 0);
};

ExitStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterExitStmt(this);
	}
};

ExitStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitExitStmt(this);
	}
};

ExitStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitExitStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.ExitStmtContext = ExitStmtContext;

TibboBasicParser.prototype.exitStmt = function() {

    var localctx = new ExitStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, TibboBasicParser.RULE_exitStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 256;
        _la = this._input.LA(1);
        if(!(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (TibboBasicParser.EXIT_DO - 32)) | (1 << (TibboBasicParser.EXIT_FOR - 32)) | (1 << (TibboBasicParser.EXIT_FUNCTION - 32)) | (1 << (TibboBasicParser.EXIT_PROPERTY - 32)) | (1 << (TibboBasicParser.EXIT_SUB - 32)) | (1 << (TibboBasicParser.EXIT_WHILE - 32)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForNextStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_forNextStmt;
    this.step = null; // ExpressionContext
    return this;
}

ForNextStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForNextStmtContext.prototype.constructor = ForNextStmtContext;

ForNextStmtContext.prototype.FOR = function() {
    return this.getToken(TibboBasicParser.FOR, 0);
};

ForNextStmtContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ForNextStmtContext.prototype.TO = function() {
    return this.getToken(TibboBasicParser.TO, 0);
};

ForNextStmtContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ForNextStmtContext.prototype.NEXT = function() {
    return this.getToken(TibboBasicParser.NEXT, 0);
};

ForNextStmtContext.prototype.STEP = function() {
    return this.getToken(TibboBasicParser.STEP, 0);
};

ForNextStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterForNextStmt(this);
	}
};

ForNextStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitForNextStmt(this);
	}
};

ForNextStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitForNextStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.ForNextStmtContext = ForNextStmtContext;

TibboBasicParser.prototype.forNextStmt = function() {

    var localctx = new ForNextStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, TibboBasicParser.RULE_forNextStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 258;
        this.match(TibboBasicParser.FOR);
        this.state = 259;
        this.expression(0);
        this.state = 260;
        this.match(TibboBasicParser.TO);
        this.state = 261;
        this.expression(0);
        this.state = 264;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.STEP) {
            this.state = 262;
            this.match(TibboBasicParser.STEP);
            this.state = 263;
            localctx.step = this.expression(0);
        }

        this.state = 266;
        this.block();
        this.state = 267;
        this.match(TibboBasicParser.NEXT);
        this.state = 269;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
        if(la_===1) {
            this.state = 268;
            this.expression(0);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_functionStmt;
    this.name = null; // Token
    this.returnType = null; // AsTypeClauseContext
    return this;
}

FunctionStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionStmtContext.prototype.constructor = FunctionStmtContext;

FunctionStmtContext.prototype.FUNCTION = function() {
    return this.getToken(TibboBasicParser.FUNCTION, 0);
};

FunctionStmtContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FunctionStmtContext.prototype.END_FUNCTION = function() {
    return this.getToken(TibboBasicParser.END_FUNCTION, 0);
};

FunctionStmtContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.IDENTIFIER);
    } else {
        return this.getToken(TibboBasicParser.IDENTIFIER, i);
    }
};


FunctionStmtContext.prototype.asTypeClause = function() {
    return this.getTypedRuleContext(AsTypeClauseContext,0);
};

FunctionStmtContext.prototype.visibility = function() {
    return this.getTypedRuleContext(VisibilityContext,0);
};

FunctionStmtContext.prototype.DOT = function() {
    return this.getToken(TibboBasicParser.DOT, 0);
};

FunctionStmtContext.prototype.paramList = function() {
    return this.getTypedRuleContext(ParamListContext,0);
};

FunctionStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterFunctionStmt(this);
	}
};

FunctionStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitFunctionStmt(this);
	}
};

FunctionStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitFunctionStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.FunctionStmtContext = FunctionStmtContext;

TibboBasicParser.prototype.functionStmt = function() {

    var localctx = new FunctionStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, TibboBasicParser.RULE_functionStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 272;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.PUBLIC) {
            this.state = 271;
            this.visibility();
        }

        this.state = 274;
        this.match(TibboBasicParser.FUNCTION);
        this.state = 277;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        if(la_===1) {
            this.state = 275;
            this.match(TibboBasicParser.IDENTIFIER);
            this.state = 276;
            this.match(TibboBasicParser.DOT);

        }
        this.state = 279;
        localctx.name = this.match(TibboBasicParser.IDENTIFIER);
        this.state = 281;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.LPAREN) {
            this.state = 280;
            this.paramList();
        }

        this.state = 283;
        localctx.returnType = this.asTypeClause();
        this.state = 284;
        this.block();
        this.state = 285;
        this.match(TibboBasicParser.END_FUNCTION);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JumpStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_jumpStmt;
    return this;
}

JumpStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JumpStmtContext.prototype.constructor = JumpStmtContext;

JumpStmtContext.prototype.goToStmt = function() {
    return this.getTypedRuleContext(GoToStmtContext,0);
};

JumpStmtContext.prototype.exitStmt = function() {
    return this.getTypedRuleContext(ExitStmtContext,0);
};

JumpStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterJumpStmt(this);
	}
};

JumpStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitJumpStmt(this);
	}
};

JumpStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitJumpStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.JumpStmtContext = JumpStmtContext;

TibboBasicParser.prototype.jumpStmt = function() {

    var localctx = new JumpStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, TibboBasicParser.RULE_jumpStmt);
    try {
        this.state = 289;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TibboBasicParser.GOTO:
            this.enterOuterAlt(localctx, 1);
            this.state = 287;
            this.goToStmt();
            break;
        case TibboBasicParser.EXIT_DO:
        case TibboBasicParser.EXIT_FOR:
        case TibboBasicParser.EXIT_FUNCTION:
        case TibboBasicParser.EXIT_PROPERTY:
        case TibboBasicParser.EXIT_SUB:
        case TibboBasicParser.EXIT_WHILE:
            this.enterOuterAlt(localctx, 2);
            this.state = 288;
            this.exitStmt();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GoToStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_goToStmt;
    return this;
}

GoToStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GoToStmtContext.prototype.constructor = GoToStmtContext;

GoToStmtContext.prototype.GOTO = function() {
    return this.getToken(TibboBasicParser.GOTO, 0);
};

GoToStmtContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

GoToStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterGoToStmt(this);
	}
};

GoToStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitGoToStmt(this);
	}
};

GoToStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitGoToStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.GoToStmtContext = GoToStmtContext;

TibboBasicParser.prototype.goToStmt = function() {

    var localctx = new GoToStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, TibboBasicParser.RULE_goToStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 291;
        this.match(TibboBasicParser.GOTO);
        this.state = 292;
        this.match(TibboBasicParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfThenElseStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_ifThenElseStmt;
    return this;
}

IfThenElseStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfThenElseStmtContext.prototype.constructor = IfThenElseStmtContext;


 
IfThenElseStmtContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function BlockIfThenElseContext(parser, ctx) {
	IfThenElseStmtContext.call(this, parser);
    IfThenElseStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BlockIfThenElseContext.prototype = Object.create(IfThenElseStmtContext.prototype);
BlockIfThenElseContext.prototype.constructor = BlockIfThenElseContext;

TibboBasicParser.BlockIfThenElseContext = BlockIfThenElseContext;

BlockIfThenElseContext.prototype.IF = function() {
    return this.getToken(TibboBasicParser.IF, 0);
};

BlockIfThenElseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BlockIfThenElseContext.prototype.THEN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.THEN);
    } else {
        return this.getToken(TibboBasicParser.THEN, i);
    }
};


BlockIfThenElseContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

BlockIfThenElseContext.prototype.END_IF = function() {
    return this.getToken(TibboBasicParser.END_IF, 0);
};

BlockIfThenElseContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.NEWLINE);
    } else {
        return this.getToken(TibboBasicParser.NEWLINE, i);
    }
};


BlockIfThenElseContext.prototype.ELSEIF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.ELSEIF);
    } else {
        return this.getToken(TibboBasicParser.ELSEIF, i);
    }
};


BlockIfThenElseContext.prototype.ifConditionStmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IfConditionStmtContext);
    } else {
        return this.getTypedRuleContext(IfConditionStmtContext,i);
    }
};

BlockIfThenElseContext.prototype.ELSE = function() {
    return this.getToken(TibboBasicParser.ELSE, 0);
};
BlockIfThenElseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterBlockIfThenElse(this);
	}
};

BlockIfThenElseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitBlockIfThenElse(this);
	}
};

BlockIfThenElseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitBlockIfThenElse(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InlineIfThenElseContext(parser, ctx) {
	IfThenElseStmtContext.call(this, parser);
    IfThenElseStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InlineIfThenElseContext.prototype = Object.create(IfThenElseStmtContext.prototype);
InlineIfThenElseContext.prototype.constructor = InlineIfThenElseContext;

TibboBasicParser.InlineIfThenElseContext = InlineIfThenElseContext;

InlineIfThenElseContext.prototype.IF = function() {
    return this.getToken(TibboBasicParser.IF, 0);
};

InlineIfThenElseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

InlineIfThenElseContext.prototype.THEN = function() {
    return this.getToken(TibboBasicParser.THEN, 0);
};

InlineIfThenElseContext.prototype.NEWLINE = function() {
    return this.getToken(TibboBasicParser.NEWLINE, 0);
};

InlineIfThenElseContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

InlineIfThenElseContext.prototype.jumpStmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JumpStmtContext);
    } else {
        return this.getTypedRuleContext(JumpStmtContext,i);
    }
};

InlineIfThenElseContext.prototype.ELSE = function() {
    return this.getToken(TibboBasicParser.ELSE, 0);
};
InlineIfThenElseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterInlineIfThenElse(this);
	}
};

InlineIfThenElseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitInlineIfThenElse(this);
	}
};

InlineIfThenElseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitInlineIfThenElse(this);
    } else {
        return visitor.visitChildren(this);
    }
};



TibboBasicParser.IfThenElseStmtContext = IfThenElseStmtContext;

TibboBasicParser.prototype.ifThenElseStmt = function() {

    var localctx = new IfThenElseStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, TibboBasicParser.RULE_ifThenElseStmt);
    var _la = 0; // Token type
    try {
        this.state = 335;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        switch(la_) {
        case 1:
            localctx = new InlineIfThenElseContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 294;
            this.match(TibboBasicParser.IF);
            this.state = 295;
            this.expression(0);
            this.state = 296;
            this.match(TibboBasicParser.THEN);
            this.state = 299;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
            switch(la_) {
            case 1:
                this.state = 297;
                this.statement();
                break;

            case 2:
                this.state = 298;
                this.jumpStmt();
                break;

            }
            this.state = 306;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TibboBasicParser.ELSE) {
                this.state = 301;
                this.match(TibboBasicParser.ELSE);
                this.state = 304;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 302;
                    this.statement();
                    break;

                case 2:
                    this.state = 303;
                    this.jumpStmt();
                    break;

                }
            }

            this.state = 308;
            this.match(TibboBasicParser.NEWLINE);
            break;

        case 2:
            localctx = new BlockIfThenElseContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 310;
            this.match(TibboBasicParser.IF);
            this.state = 311;
            this.expression(0);
            this.state = 312;
            this.match(TibboBasicParser.THEN);
            this.state = 314; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 313;
                this.match(TibboBasicParser.NEWLINE);
                this.state = 316; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===TibboBasicParser.NEWLINE);
            this.state = 318;
            this.block();
            this.state = 326;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TibboBasicParser.ELSEIF) {
                this.state = 319;
                this.match(TibboBasicParser.ELSEIF);
                this.state = 320;
                this.ifConditionStmt();
                this.state = 321;
                this.match(TibboBasicParser.THEN);
                this.state = 322;
                this.block();
                this.state = 328;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 331;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TibboBasicParser.ELSE) {
                this.state = 329;
                this.match(TibboBasicParser.ELSE);
                this.state = 330;
                this.block();
            }

            this.state = 333;
            this.match(TibboBasicParser.END_IF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfConditionStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_ifConditionStmt;
    return this;
}

IfConditionStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfConditionStmtContext.prototype.constructor = IfConditionStmtContext;

IfConditionStmtContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IfConditionStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterIfConditionStmt(this);
	}
};

IfConditionStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitIfConditionStmt(this);
	}
};

IfConditionStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitIfConditionStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.IfConditionStmtContext = IfConditionStmtContext;

TibboBasicParser.prototype.ifConditionStmt = function() {

    var localctx = new IfConditionStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, TibboBasicParser.RULE_ifConditionStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 337;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PropertyDefineStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_propertyDefineStmt;
    this.object = null; // Token
    this.property = null; // Token
    return this;
}

PropertyDefineStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDefineStmtContext.prototype.constructor = PropertyDefineStmtContext;

PropertyDefineStmtContext.prototype.PROPERTY = function() {
    return this.getToken(TibboBasicParser.PROPERTY, 0);
};

PropertyDefineStmtContext.prototype.DOT = function() {
    return this.getToken(TibboBasicParser.DOT, 0);
};

PropertyDefineStmtContext.prototype.END_PROPERTY = function() {
    return this.getToken(TibboBasicParser.END_PROPERTY, 0);
};

PropertyDefineStmtContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.IDENTIFIER);
    } else {
        return this.getToken(TibboBasicParser.IDENTIFIER, i);
    }
};


PropertyDefineStmtContext.prototype.BANG = function() {
    return this.getToken(TibboBasicParser.BANG, 0);
};

PropertyDefineStmtContext.prototype.propertyDefineStmt_InStmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyDefineStmt_InStmtContext);
    } else {
        return this.getTypedRuleContext(PropertyDefineStmt_InStmtContext,i);
    }
};

PropertyDefineStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterPropertyDefineStmt(this);
	}
};

PropertyDefineStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitPropertyDefineStmt(this);
	}
};

PropertyDefineStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitPropertyDefineStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.PropertyDefineStmtContext = PropertyDefineStmtContext;

TibboBasicParser.prototype.propertyDefineStmt = function() {

    var localctx = new PropertyDefineStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, TibboBasicParser.RULE_propertyDefineStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 339;
        this.match(TibboBasicParser.PROPERTY);
        this.state = 341;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.BANG) {
            this.state = 340;
            this.match(TibboBasicParser.BANG);
        }

        this.state = 343;
        localctx.object = this.match(TibboBasicParser.IDENTIFIER);
        this.state = 344;
        this.match(TibboBasicParser.DOT);
        this.state = 345;
        localctx.property = this.match(TibboBasicParser.IDENTIFIER);
        this.state = 349;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TibboBasicParser.GET || _la===TibboBasicParser.SET) {
            this.state = 346;
            this.propertyDefineStmt_InStmt();
            this.state = 351;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 352;
        this.match(TibboBasicParser.END_PROPERTY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PropertyDefineStmt_InStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_propertyDefineStmt_InStmt;
    return this;
}

PropertyDefineStmt_InStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDefineStmt_InStmtContext.prototype.constructor = PropertyDefineStmt_InStmtContext;

PropertyDefineStmt_InStmtContext.prototype.propertyGetStmt = function() {
    return this.getTypedRuleContext(PropertyGetStmtContext,0);
};

PropertyDefineStmt_InStmtContext.prototype.propertySetStmt = function() {
    return this.getTypedRuleContext(PropertySetStmtContext,0);
};

PropertyDefineStmt_InStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterPropertyDefineStmt_InStmt(this);
	}
};

PropertyDefineStmt_InStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitPropertyDefineStmt_InStmt(this);
	}
};

PropertyDefineStmt_InStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitPropertyDefineStmt_InStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.PropertyDefineStmt_InStmtContext = PropertyDefineStmt_InStmtContext;

TibboBasicParser.prototype.propertyDefineStmt_InStmt = function() {

    var localctx = new PropertyDefineStmt_InStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, TibboBasicParser.RULE_propertyDefineStmt_InStmt);
    try {
        this.state = 356;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TibboBasicParser.GET:
            this.enterOuterAlt(localctx, 1);
            this.state = 354;
            this.propertyGetStmt();
            break;
        case TibboBasicParser.SET:
            this.enterOuterAlt(localctx, 2);
            this.state = 355;
            this.propertySetStmt();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PropertyGetStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_propertyGetStmt;
    return this;
}

PropertyGetStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyGetStmtContext.prototype.constructor = PropertyGetStmtContext;

PropertyGetStmtContext.prototype.GET = function() {
    return this.getToken(TibboBasicParser.GET, 0);
};

PropertyGetStmtContext.prototype.EQ = function() {
    return this.getToken(TibboBasicParser.EQ, 0);
};

PropertyGetStmtContext.prototype.SYSCALL = function() {
    return this.getToken(TibboBasicParser.SYSCALL, 0);
};

PropertyGetStmtContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

PropertyGetStmtContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

PropertyGetStmtContext.prototype.asTypeClause = function() {
    return this.getTypedRuleContext(AsTypeClauseContext,0);
};

PropertyGetStmtContext.prototype.INTEGERLITERAL = function() {
    return this.getToken(TibboBasicParser.INTEGERLITERAL, 0);
};

PropertyGetStmtContext.prototype.COMMA = function() {
    return this.getToken(TibboBasicParser.COMMA, 0);
};

PropertyGetStmtContext.prototype.STRINGLITERAL = function() {
    return this.getToken(TibboBasicParser.STRINGLITERAL, 0);
};

PropertyGetStmtContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

PropertyGetStmtContext.prototype.PLUS = function() {
    return this.getToken(TibboBasicParser.PLUS, 0);
};

PropertyGetStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterPropertyGetStmt(this);
	}
};

PropertyGetStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitPropertyGetStmt(this);
	}
};

PropertyGetStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitPropertyGetStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.PropertyGetStmtContext = PropertyGetStmtContext;

TibboBasicParser.prototype.propertyGetStmt = function() {

    var localctx = new PropertyGetStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, TibboBasicParser.RULE_propertyGetStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 358;
        this.match(TibboBasicParser.GET);
        this.state = 359;
        this.match(TibboBasicParser.EQ);
        this.state = 360;
        this.match(TibboBasicParser.SYSCALL);
        this.state = 361;
        this.match(TibboBasicParser.LPAREN);
        this.state = 370;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.INTEGERLITERAL) {
            this.state = 362;
            this.match(TibboBasicParser.INTEGERLITERAL);
            this.state = 368;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TibboBasicParser.COMMA) {
                this.state = 363;
                this.match(TibboBasicParser.COMMA);
                this.state = 364;
                _la = this._input.LA(1);
                if(!(_la===TibboBasicParser.STRINGLITERAL || _la===TibboBasicParser.IDENTIFIER)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 366;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TibboBasicParser.PLUS) {
                    this.state = 365;
                    this.match(TibboBasicParser.PLUS);
                }

            }

        }

        this.state = 372;
        this.match(TibboBasicParser.RPAREN);
        this.state = 373;
        this.asTypeClause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PropertySetStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_propertySetStmt;
    return this;
}

PropertySetStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertySetStmtContext.prototype.constructor = PropertySetStmtContext;

PropertySetStmtContext.prototype.SET = function() {
    return this.getToken(TibboBasicParser.SET, 0);
};

PropertySetStmtContext.prototype.EQ = function() {
    return this.getToken(TibboBasicParser.EQ, 0);
};

PropertySetStmtContext.prototype.SYSCALL = function() {
    return this.getToken(TibboBasicParser.SYSCALL, 0);
};

PropertySetStmtContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

PropertySetStmtContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

PropertySetStmtContext.prototype.paramList = function() {
    return this.getTypedRuleContext(ParamListContext,0);
};

PropertySetStmtContext.prototype.INTEGERLITERAL = function() {
    return this.getToken(TibboBasicParser.INTEGERLITERAL, 0);
};

PropertySetStmtContext.prototype.COMMA = function() {
    return this.getToken(TibboBasicParser.COMMA, 0);
};

PropertySetStmtContext.prototype.STRINGLITERAL = function() {
    return this.getToken(TibboBasicParser.STRINGLITERAL, 0);
};

PropertySetStmtContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

PropertySetStmtContext.prototype.PLUS = function() {
    return this.getToken(TibboBasicParser.PLUS, 0);
};

PropertySetStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterPropertySetStmt(this);
	}
};

PropertySetStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitPropertySetStmt(this);
	}
};

PropertySetStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitPropertySetStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.PropertySetStmtContext = PropertySetStmtContext;

TibboBasicParser.prototype.propertySetStmt = function() {

    var localctx = new PropertySetStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, TibboBasicParser.RULE_propertySetStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 375;
        this.match(TibboBasicParser.SET);
        this.state = 376;
        this.match(TibboBasicParser.EQ);
        this.state = 377;
        this.match(TibboBasicParser.SYSCALL);
        this.state = 378;
        this.match(TibboBasicParser.LPAREN);
        this.state = 387;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.INTEGERLITERAL) {
            this.state = 379;
            this.match(TibboBasicParser.INTEGERLITERAL);
            this.state = 385;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TibboBasicParser.COMMA) {
                this.state = 380;
                this.match(TibboBasicParser.COMMA);
                this.state = 381;
                _la = this._input.LA(1);
                if(!(_la===TibboBasicParser.STRINGLITERAL || _la===TibboBasicParser.IDENTIFIER)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 383;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TibboBasicParser.PLUS) {
                    this.state = 382;
                    this.match(TibboBasicParser.PLUS);
                }

            }

        }

        this.state = 389;
        this.match(TibboBasicParser.RPAREN);
        this.state = 390;
        this.paramList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EventDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_eventDeclaration;
    this.number = null; // Token
    this.name = null; // Token
    this.params = null; // ParamListContext
    return this;
}

EventDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventDeclarationContext.prototype.constructor = EventDeclarationContext;

EventDeclarationContext.prototype.EVENT = function() {
    return this.getToken(TibboBasicParser.EVENT, 0);
};

EventDeclarationContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

EventDeclarationContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

EventDeclarationContext.prototype.INTEGERLITERAL = function() {
    return this.getToken(TibboBasicParser.INTEGERLITERAL, 0);
};

EventDeclarationContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

EventDeclarationContext.prototype.paramList = function() {
    return this.getTypedRuleContext(ParamListContext,0);
};

EventDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterEventDeclaration(this);
	}
};

EventDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitEventDeclaration(this);
	}
};

EventDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitEventDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.EventDeclarationContext = EventDeclarationContext;

TibboBasicParser.prototype.eventDeclaration = function() {

    var localctx = new EventDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, TibboBasicParser.RULE_eventDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 392;
        this.match(TibboBasicParser.EVENT);
        this.state = 393;
        this.match(TibboBasicParser.LPAREN);
        this.state = 394;
        localctx.number = this.match(TibboBasicParser.INTEGERLITERAL);
        this.state = 395;
        this.match(TibboBasicParser.RPAREN);
        this.state = 396;
        localctx.name = this.match(TibboBasicParser.IDENTIFIER);
        this.state = 398;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.LPAREN) {
            this.state = 397;
            localctx.params = this.paramList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SyscallDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_syscallDeclaration;
    return this;
}

SyscallDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyscallDeclarationContext.prototype.constructor = SyscallDeclarationContext;

SyscallDeclarationContext.prototype.SYSCALL = function() {
    return this.getToken(TibboBasicParser.SYSCALL, 0);
};

SyscallDeclarationContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

SyscallDeclarationContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

SyscallDeclarationContext.prototype.syscallDeclarationInner = function() {
    return this.getTypedRuleContext(SyscallDeclarationInnerContext,0);
};

SyscallDeclarationContext.prototype.syscallInternalDeclarationInner = function() {
    return this.getTypedRuleContext(SyscallInternalDeclarationInnerContext,0);
};

SyscallDeclarationContext.prototype.INTEGERLITERAL = function() {
    return this.getToken(TibboBasicParser.INTEGERLITERAL, 0);
};

SyscallDeclarationContext.prototype.COMMA = function() {
    return this.getToken(TibboBasicParser.COMMA, 0);
};

SyscallDeclarationContext.prototype.STRINGLITERAL = function() {
    return this.getToken(TibboBasicParser.STRINGLITERAL, 0);
};

SyscallDeclarationContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

SyscallDeclarationContext.prototype.PLUS = function() {
    return this.getToken(TibboBasicParser.PLUS, 0);
};

SyscallDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterSyscallDeclaration(this);
	}
};

SyscallDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitSyscallDeclaration(this);
	}
};

SyscallDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitSyscallDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.SyscallDeclarationContext = SyscallDeclarationContext;

TibboBasicParser.prototype.syscallDeclaration = function() {

    var localctx = new SyscallDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, TibboBasicParser.RULE_syscallDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 400;
        this.match(TibboBasicParser.SYSCALL);
        this.state = 401;
        this.match(TibboBasicParser.LPAREN);
        this.state = 410;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.INTEGERLITERAL) {
            this.state = 402;
            this.match(TibboBasicParser.INTEGERLITERAL);
            this.state = 408;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TibboBasicParser.COMMA) {
                this.state = 403;
                this.match(TibboBasicParser.COMMA);
                this.state = 404;
                _la = this._input.LA(1);
                if(!(_la===TibboBasicParser.STRINGLITERAL || _la===TibboBasicParser.IDENTIFIER)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 406;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TibboBasicParser.PLUS) {
                    this.state = 405;
                    this.match(TibboBasicParser.PLUS);
                }

            }

        }

        this.state = 412;
        this.match(TibboBasicParser.RPAREN);
        this.state = 415;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TibboBasicParser.IDENTIFIER:
            this.state = 413;
            this.syscallDeclarationInner();
            break;
        case TibboBasicParser.BANG:
            this.state = 414;
            this.syscallInternalDeclarationInner();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SyscallDeclarationInnerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_syscallDeclarationInner;
    this.object = null; // Token
    this.property = null; // Token
    return this;
}

SyscallDeclarationInnerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyscallDeclarationInnerContext.prototype.constructor = SyscallDeclarationInnerContext;

SyscallDeclarationInnerContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.IDENTIFIER);
    } else {
        return this.getToken(TibboBasicParser.IDENTIFIER, i);
    }
};


SyscallDeclarationInnerContext.prototype.DOT = function() {
    return this.getToken(TibboBasicParser.DOT, 0);
};

SyscallDeclarationInnerContext.prototype.paramList = function() {
    return this.getTypedRuleContext(ParamListContext,0);
};

SyscallDeclarationInnerContext.prototype.asTypeClause = function() {
    return this.getTypedRuleContext(AsTypeClauseContext,0);
};

SyscallDeclarationInnerContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterSyscallDeclarationInner(this);
	}
};

SyscallDeclarationInnerContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitSyscallDeclarationInner(this);
	}
};

SyscallDeclarationInnerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitSyscallDeclarationInner(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.SyscallDeclarationInnerContext = SyscallDeclarationInnerContext;

TibboBasicParser.prototype.syscallDeclarationInner = function() {

    var localctx = new SyscallDeclarationInnerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, TibboBasicParser.RULE_syscallDeclarationInner);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 419;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
        if(la_===1) {
            this.state = 417;
            localctx.object = this.match(TibboBasicParser.IDENTIFIER);
            this.state = 418;
            this.match(TibboBasicParser.DOT);

        }
        this.state = 421;
        localctx.property = this.match(TibboBasicParser.IDENTIFIER);
        this.state = 423;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.LPAREN) {
            this.state = 422;
            this.paramList();
        }

        this.state = 426;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.AS) {
            this.state = 425;
            this.asTypeClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SyscallInternalDeclarationInnerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_syscallInternalDeclarationInner;
    this.object = null; // Token
    this.property = null; // Token
    return this;
}

SyscallInternalDeclarationInnerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyscallInternalDeclarationInnerContext.prototype.constructor = SyscallInternalDeclarationInnerContext;

SyscallInternalDeclarationInnerContext.prototype.BANG = function() {
    return this.getToken(TibboBasicParser.BANG, 0);
};

SyscallInternalDeclarationInnerContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.IDENTIFIER);
    } else {
        return this.getToken(TibboBasicParser.IDENTIFIER, i);
    }
};


SyscallInternalDeclarationInnerContext.prototype.DOT = function() {
    return this.getToken(TibboBasicParser.DOT, 0);
};

SyscallInternalDeclarationInnerContext.prototype.syscallInternalParamList = function() {
    return this.getTypedRuleContext(SyscallInternalParamListContext,0);
};

SyscallInternalDeclarationInnerContext.prototype.asTypeClause = function() {
    return this.getTypedRuleContext(AsTypeClauseContext,0);
};

SyscallInternalDeclarationInnerContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterSyscallInternalDeclarationInner(this);
	}
};

SyscallInternalDeclarationInnerContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitSyscallInternalDeclarationInner(this);
	}
};

SyscallInternalDeclarationInnerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitSyscallInternalDeclarationInner(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.SyscallInternalDeclarationInnerContext = SyscallInternalDeclarationInnerContext;

TibboBasicParser.prototype.syscallInternalDeclarationInner = function() {

    var localctx = new SyscallInternalDeclarationInnerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, TibboBasicParser.RULE_syscallInternalDeclarationInner);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 428;
        this.match(TibboBasicParser.BANG);
        this.state = 431;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        if(la_===1) {
            this.state = 429;
            localctx.object = this.match(TibboBasicParser.IDENTIFIER);
            this.state = 430;
            this.match(TibboBasicParser.DOT);

        }
        this.state = 433;
        localctx.property = this.match(TibboBasicParser.IDENTIFIER);
        this.state = 435;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.LPAREN) {
            this.state = 434;
            this.syscallInternalParamList();
        }

        this.state = 438;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.AS) {
            this.state = 437;
            this.asTypeClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SyscallInternalParamListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_syscallInternalParamList;
    return this;
}

SyscallInternalParamListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyscallInternalParamListContext.prototype.constructor = SyscallInternalParamListContext;

SyscallInternalParamListContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

SyscallInternalParamListContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

SyscallInternalParamListContext.prototype.paramInternal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParamInternalContext);
    } else {
        return this.getTypedRuleContext(ParamInternalContext,i);
    }
};

SyscallInternalParamListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.COMMA);
    } else {
        return this.getToken(TibboBasicParser.COMMA, i);
    }
};


SyscallInternalParamListContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterSyscallInternalParamList(this);
	}
};

SyscallInternalParamListContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitSyscallInternalParamList(this);
	}
};

SyscallInternalParamListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitSyscallInternalParamList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.SyscallInternalParamListContext = SyscallInternalParamListContext;

TibboBasicParser.prototype.syscallInternalParamList = function() {

    var localctx = new SyscallInternalParamListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, TibboBasicParser.RULE_syscallInternalParamList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 440;
        this.match(TibboBasicParser.LPAREN);
        this.state = 449;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.BYREF || _la===TibboBasicParser.BYVAL || _la===TibboBasicParser.IDENTIFIER) {
            this.state = 441;
            this.paramInternal();
            this.state = 446;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TibboBasicParser.COMMA) {
                this.state = 442;
                this.match(TibboBasicParser.COMMA);
                this.state = 443;
                this.paramInternal();
                this.state = 448;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 451;
        this.match(TibboBasicParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParamInternalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_paramInternal;
    return this;
}

ParamInternalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParamInternalContext.prototype.constructor = ParamInternalContext;

ParamInternalContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

ParamInternalContext.prototype.asTypeClause = function() {
    return this.getTypedRuleContext(AsTypeClauseContext,0);
};

ParamInternalContext.prototype.BYVAL = function() {
    return this.getToken(TibboBasicParser.BYVAL, 0);
};

ParamInternalContext.prototype.BYREF = function() {
    return this.getToken(TibboBasicParser.BYREF, 0);
};

ParamInternalContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterParamInternal(this);
	}
};

ParamInternalContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitParamInternal(this);
	}
};

ParamInternalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitParamInternal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.ParamInternalContext = ParamInternalContext;

TibboBasicParser.prototype.paramInternal = function() {

    var localctx = new ParamInternalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, TibboBasicParser.RULE_paramInternal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 454;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.BYREF || _la===TibboBasicParser.BYVAL) {
            this.state = 453;
            _la = this._input.LA(1);
            if(!(_la===TibboBasicParser.BYREF || _la===TibboBasicParser.BYVAL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 456;
        this.match(TibboBasicParser.IDENTIFIER);
        this.state = 458;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.AS) {
            this.state = 457;
            this.asTypeClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectCaseStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_selectCaseStmt;
    return this;
}

SelectCaseStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectCaseStmtContext.prototype.constructor = SelectCaseStmtContext;

SelectCaseStmtContext.prototype.SELECT = function() {
    return this.getToken(TibboBasicParser.SELECT, 0);
};

SelectCaseStmtContext.prototype.CASE = function() {
    return this.getToken(TibboBasicParser.CASE, 0);
};

SelectCaseStmtContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SelectCaseStmtContext.prototype.END_SELECT = function() {
    return this.getToken(TibboBasicParser.END_SELECT, 0);
};

SelectCaseStmtContext.prototype.COLON = function() {
    return this.getToken(TibboBasicParser.COLON, 0);
};

SelectCaseStmtContext.prototype.sC_Case = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SC_CaseContext);
    } else {
        return this.getTypedRuleContext(SC_CaseContext,i);
    }
};

SelectCaseStmtContext.prototype.sC_Default = function() {
    return this.getTypedRuleContext(SC_DefaultContext,0);
};

SelectCaseStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterSelectCaseStmt(this);
	}
};

SelectCaseStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitSelectCaseStmt(this);
	}
};

SelectCaseStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitSelectCaseStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.SelectCaseStmtContext = SelectCaseStmtContext;

TibboBasicParser.prototype.selectCaseStmt = function() {

    var localctx = new SelectCaseStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, TibboBasicParser.RULE_selectCaseStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 460;
        this.match(TibboBasicParser.SELECT);
        this.state = 461;
        this.match(TibboBasicParser.CASE);
        this.state = 462;
        this.expression(0);
        this.state = 464;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.COLON) {
            this.state = 463;
            this.match(TibboBasicParser.COLON);
        }

        this.state = 469;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TibboBasicParser.CASE) {
            this.state = 466;
            this.sC_Case();
            this.state = 471;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 473;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.CASE_ELSE) {
            this.state = 472;
            this.sC_Default();
        }

        this.state = 475;
        this.match(TibboBasicParser.END_SELECT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SC_CaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_sC_Case;
    return this;
}

SC_CaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SC_CaseContext.prototype.constructor = SC_CaseContext;

SC_CaseContext.prototype.CASE = function() {
    return this.getToken(TibboBasicParser.CASE, 0);
};

SC_CaseContext.prototype.sC_Cond = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SC_CondContext);
    } else {
        return this.getTypedRuleContext(SC_CondContext,i);
    }
};

SC_CaseContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

SC_CaseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.COMMA);
    } else {
        return this.getToken(TibboBasicParser.COMMA, i);
    }
};


SC_CaseContext.prototype.COLON = function() {
    return this.getToken(TibboBasicParser.COLON, 0);
};

SC_CaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterSC_Case(this);
	}
};

SC_CaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitSC_Case(this);
	}
};

SC_CaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitSC_Case(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.SC_CaseContext = SC_CaseContext;

TibboBasicParser.prototype.sC_Case = function() {

    var localctx = new SC_CaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, TibboBasicParser.RULE_sC_Case);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 477;
        this.match(TibboBasicParser.CASE);
        this.state = 478;
        this.sC_Cond();
        this.state = 483;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TibboBasicParser.COMMA) {
            this.state = 479;
            this.match(TibboBasicParser.COMMA);
            this.state = 480;
            this.sC_Cond();
            this.state = 485;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 487;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.COLON) {
            this.state = 486;
            this.match(TibboBasicParser.COLON);
        }

        this.state = 489;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SC_DefaultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_sC_Default;
    return this;
}

SC_DefaultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SC_DefaultContext.prototype.constructor = SC_DefaultContext;

SC_DefaultContext.prototype.CASE_ELSE = function() {
    return this.getToken(TibboBasicParser.CASE_ELSE, 0);
};

SC_DefaultContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

SC_DefaultContext.prototype.COLON = function() {
    return this.getToken(TibboBasicParser.COLON, 0);
};

SC_DefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterSC_Default(this);
	}
};

SC_DefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitSC_Default(this);
	}
};

SC_DefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitSC_Default(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.SC_DefaultContext = SC_DefaultContext;

TibboBasicParser.prototype.sC_Default = function() {

    var localctx = new SC_DefaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, TibboBasicParser.RULE_sC_Default);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 491;
        this.match(TibboBasicParser.CASE_ELSE);
        this.state = 493;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.COLON) {
            this.state = 492;
            this.match(TibboBasicParser.COLON);
        }

        this.state = 495;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SC_CondContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_sC_Cond;
    return this;
}

SC_CondContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SC_CondContext.prototype.constructor = SC_CondContext;

SC_CondContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SC_CondContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterSC_Cond(this);
	}
};

SC_CondContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitSC_Cond(this);
	}
};

SC_CondContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitSC_Cond(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.SC_CondContext = SC_CondContext;

TibboBasicParser.prototype.sC_Cond = function() {

    var localctx = new SC_CondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, TibboBasicParser.RULE_sC_Cond);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 497;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SubStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_subStmt;
    this.name = null; // Token
    return this;
}

SubStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubStmtContext.prototype.constructor = SubStmtContext;

SubStmtContext.prototype.SUB = function() {
    return this.getToken(TibboBasicParser.SUB, 0);
};

SubStmtContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

SubStmtContext.prototype.END_SUB = function() {
    return this.getToken(TibboBasicParser.END_SUB, 0);
};

SubStmtContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.IDENTIFIER);
    } else {
        return this.getToken(TibboBasicParser.IDENTIFIER, i);
    }
};


SubStmtContext.prototype.visibility = function() {
    return this.getTypedRuleContext(VisibilityContext,0);
};

SubStmtContext.prototype.DOT = function() {
    return this.getToken(TibboBasicParser.DOT, 0);
};

SubStmtContext.prototype.paramList = function() {
    return this.getTypedRuleContext(ParamListContext,0);
};

SubStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterSubStmt(this);
	}
};

SubStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitSubStmt(this);
	}
};

SubStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitSubStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.SubStmtContext = SubStmtContext;

TibboBasicParser.prototype.subStmt = function() {

    var localctx = new SubStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, TibboBasicParser.RULE_subStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 500;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.PUBLIC) {
            this.state = 499;
            this.visibility();
        }

        this.state = 502;
        this.match(TibboBasicParser.SUB);
        this.state = 505;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
        if(la_===1) {
            this.state = 503;
            this.match(TibboBasicParser.IDENTIFIER);
            this.state = 504;
            this.match(TibboBasicParser.DOT);

        }
        this.state = 507;
        localctx.name = this.match(TibboBasicParser.IDENTIFIER);
        this.state = 509;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
        if(la_===1) {
            this.state = 508;
            this.paramList();

        }
        this.state = 511;
        this.block();
        this.state = 512;
        this.match(TibboBasicParser.END_SUB);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_typeStmt;
    this.name = null; // Token
    return this;
}

TypeStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeStmtContext.prototype.constructor = TypeStmtContext;

TypeStmtContext.prototype.TYPE = function() {
    return this.getToken(TibboBasicParser.TYPE, 0);
};

TypeStmtContext.prototype.END_TYPE = function() {
    return this.getToken(TibboBasicParser.END_TYPE, 0);
};

TypeStmtContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

TypeStmtContext.prototype.visibility = function() {
    return this.getTypedRuleContext(VisibilityContext,0);
};

TypeStmtContext.prototype.typeStmtElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeStmtElementContext);
    } else {
        return this.getTypedRuleContext(TypeStmtElementContext,i);
    }
};

TypeStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterTypeStmt(this);
	}
};

TypeStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitTypeStmt(this);
	}
};

TypeStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitTypeStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.TypeStmtContext = TypeStmtContext;

TibboBasicParser.prototype.typeStmt = function() {

    var localctx = new TypeStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, TibboBasicParser.RULE_typeStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 515;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.PUBLIC) {
            this.state = 514;
            this.visibility();
        }

        this.state = 517;
        this.match(TibboBasicParser.TYPE);
        this.state = 518;
        localctx.name = this.match(TibboBasicParser.IDENTIFIER);
        this.state = 522;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TibboBasicParser.IDENTIFIER) {
            this.state = 519;
            this.typeStmtElement();
            this.state = 524;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 525;
        this.match(TibboBasicParser.END_TYPE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeStmtElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_typeStmtElement;
    this.valueType = null; // AsTypeClauseContext
    return this;
}

TypeStmtElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeStmtElementContext.prototype.constructor = TypeStmtElementContext;

TypeStmtElementContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

TypeStmtElementContext.prototype.asTypeClause = function() {
    return this.getTypedRuleContext(AsTypeClauseContext,0);
};

TypeStmtElementContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

TypeStmtElementContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

TypeStmtElementContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

TypeStmtElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterTypeStmtElement(this);
	}
};

TypeStmtElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitTypeStmtElement(this);
	}
};

TypeStmtElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitTypeStmtElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.TypeStmtElementContext = TypeStmtElementContext;

TibboBasicParser.prototype.typeStmtElement = function() {

    var localctx = new TypeStmtElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, TibboBasicParser.RULE_typeStmtElement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 527;
        this.match(TibboBasicParser.IDENTIFIER);
        this.state = 532;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.LPAREN) {
            this.state = 528;
            this.match(TibboBasicParser.LPAREN);
            this.state = 529;
            this.literal();
            this.state = 530;
            this.match(TibboBasicParser.RPAREN);
        }

        this.state = 534;
        localctx.valueType = this.asTypeClause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_expression;
    this.op = null; // Token
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

ExpressionContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

ExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

ExpressionContext.prototype.MULT = function() {
    return this.getToken(TibboBasicParser.MULT, 0);
};

ExpressionContext.prototype.DIV = function() {
    return this.getToken(TibboBasicParser.DIV, 0);
};

ExpressionContext.prototype.MOD = function() {
    return this.getToken(TibboBasicParser.MOD, 0);
};

ExpressionContext.prototype.PLUS = function() {
    return this.getToken(TibboBasicParser.PLUS, 0);
};

ExpressionContext.prototype.MINUS = function() {
    return this.getToken(TibboBasicParser.MINUS, 0);
};

ExpressionContext.prototype.LEQ = function() {
    return this.getToken(TibboBasicParser.LEQ, 0);
};

ExpressionContext.prototype.GEQ = function() {
    return this.getToken(TibboBasicParser.GEQ, 0);
};

ExpressionContext.prototype.LT = function() {
    return this.getToken(TibboBasicParser.LT, 0);
};

ExpressionContext.prototype.GT = function() {
    return this.getToken(TibboBasicParser.GT, 0);
};

ExpressionContext.prototype.NEQ = function() {
    return this.getToken(TibboBasicParser.NEQ, 0);
};

ExpressionContext.prototype.EQ = function() {
    return this.getToken(TibboBasicParser.EQ, 0);
};

ExpressionContext.prototype.SHL = function() {
    return this.getToken(TibboBasicParser.SHL, 0);
};

ExpressionContext.prototype.SHR = function() {
    return this.getToken(TibboBasicParser.SHR, 0);
};

ExpressionContext.prototype.NOT = function() {
    return this.getToken(TibboBasicParser.NOT, 0);
};

ExpressionContext.prototype.AND = function() {
    return this.getToken(TibboBasicParser.AND, 0);
};

ExpressionContext.prototype.XOR = function() {
    return this.getToken(TibboBasicParser.XOR, 0);
};

ExpressionContext.prototype.OR = function() {
    return this.getToken(TibboBasicParser.OR, 0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitExpression(this);
	}
};

ExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



TibboBasicParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 76;
    this.enterRecursionRule(localctx, 76, TibboBasicParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 542;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        switch(la_) {
        case 1:
            this.state = 537;
            this.unaryExpression();
            break;

        case 2:
            this.state = 538;
            this.match(TibboBasicParser.LPAREN);
            this.state = 539;
            this.expression(0);
            this.state = 540;
            this.match(TibboBasicParser.RPAREN);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 561;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,67,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 559;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, TibboBasicParser.RULE_expression);
                    this.state = 544;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 545;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===TibboBasicParser.MOD || _la===TibboBasicParser.DIV || _la===TibboBasicParser.MULT)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 546;
                    this.expression(7);
                    break;

                case 2:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, TibboBasicParser.RULE_expression);
                    this.state = 547;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 548;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===TibboBasicParser.MINUS || _la===TibboBasicParser.PLUS)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 549;
                    this.expression(6);
                    break;

                case 3:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, TibboBasicParser.RULE_expression);
                    this.state = 550;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 551;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (TibboBasicParser.GEQ - 85)) | (1 << (TibboBasicParser.GT - 85)) | (1 << (TibboBasicParser.LEQ - 85)) | (1 << (TibboBasicParser.LT - 85)))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 552;
                    this.expression(5);
                    break;

                case 4:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, TibboBasicParser.RULE_expression);
                    this.state = 553;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 554;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===TibboBasicParser.EQ || _la===TibboBasicParser.NEQ)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 555;
                    this.expression(4);
                    break;

                case 5:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, TibboBasicParser.RULE_expression);
                    this.state = 556;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 557;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===TibboBasicParser.AND || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (TibboBasicParser.NOT - 54)) | (1 << (TibboBasicParser.OR - 54)) | (1 << (TibboBasicParser.SHL - 54)) | (1 << (TibboBasicParser.SHR - 54)) | (1 << (TibboBasicParser.XOR - 54)))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 558;
                    this.expression(3);
                    break;

                } 
            }
            this.state = 563;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,67,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function UnaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_unaryExpression;
    return this;
}

UnaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryExpressionContext.prototype.constructor = UnaryExpressionContext;

UnaryExpressionContext.prototype.postfixExpression = function() {
    return this.getTypedRuleContext(PostfixExpressionContext,0);
};

UnaryExpressionContext.prototype.unaryOperator = function() {
    return this.getTypedRuleContext(UnaryOperatorContext,0);
};

UnaryExpressionContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

UnaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterUnaryExpression(this);
	}
};

UnaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitUnaryExpression(this);
	}
};

UnaryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitUnaryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.UnaryExpressionContext = UnaryExpressionContext;

TibboBasicParser.prototype.unaryExpression = function() {

    var localctx = new UnaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, TibboBasicParser.RULE_unaryExpression);
    try {
        this.state = 568;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 564;
            this.postfixExpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 565;
            this.unaryOperator();
            this.state = 566;
            this.primaryExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnaryOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_unaryOperator;
    return this;
}

UnaryOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryOperatorContext.prototype.constructor = UnaryOperatorContext;

UnaryOperatorContext.prototype.MINUS = function() {
    return this.getToken(TibboBasicParser.MINUS, 0);
};

UnaryOperatorContext.prototype.NOT = function() {
    return this.getToken(TibboBasicParser.NOT, 0);
};

UnaryOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterUnaryOperator(this);
	}
};

UnaryOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitUnaryOperator(this);
	}
};

UnaryOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitUnaryOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.UnaryOperatorContext = UnaryOperatorContext;

TibboBasicParser.prototype.unaryOperator = function() {

    var localctx = new UnaryOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, TibboBasicParser.RULE_unaryOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 570;
        _la = this._input.LA(1);
        if(!(_la===TibboBasicParser.NOT || _la===TibboBasicParser.MINUS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PostfixExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_postfixExpression;
    this.property = null; // Token
    return this;
}

PostfixExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostfixExpressionContext.prototype.constructor = PostfixExpressionContext;

PostfixExpressionContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

PostfixExpressionContext.prototype.postfix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PostfixContext);
    } else {
        return this.getTypedRuleContext(PostfixContext,i);
    }
};

PostfixExpressionContext.prototype.postfixExpression = function() {
    return this.getTypedRuleContext(PostfixExpressionContext,0);
};

PostfixExpressionContext.prototype.DOT = function() {
    return this.getToken(TibboBasicParser.DOT, 0);
};

PostfixExpressionContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

PostfixExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterPostfixExpression(this);
	}
};

PostfixExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitPostfixExpression(this);
	}
};

PostfixExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitPostfixExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



TibboBasicParser.prototype.postfixExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PostfixExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 82;
    this.enterRecursionRule(localctx, 82, TibboBasicParser.RULE_postfixExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 573;
        this.primaryExpression();
        this.state = 577;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,69,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 574;
                this.postfix(); 
            }
            this.state = 579;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,69,this._ctx);
        }

        this._ctx.stop = this._input.LT(-1);
        this.state = 591;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,71,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, TibboBasicParser.RULE_postfixExpression);
                this.state = 580;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 581;
                this.match(TibboBasicParser.DOT);
                this.state = 582;
                localctx.property = this.match(TibboBasicParser.IDENTIFIER);
                this.state = 586;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,70,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 583;
                        this.postfix(); 
                    }
                    this.state = 588;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,70,this._ctx);
                }
         
            }
            this.state = 593;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,71,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function PostfixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_postfix;
    return this;
}

PostfixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostfixContext.prototype.constructor = PostfixContext;

PostfixContext.prototype.argList = function() {
    return this.getTypedRuleContext(ArgListContext,0);
};

PostfixContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterPostfix(this);
	}
};

PostfixContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitPostfix(this);
	}
};

PostfixContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitPostfix(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.PostfixContext = PostfixContext;

TibboBasicParser.prototype.postfix = function() {

    var localctx = new PostfixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, TibboBasicParser.RULE_postfix);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 594;
        this.argList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_primaryExpression;
    return this;
}

PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;

PrimaryExpressionContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

PrimaryExpressionContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

PrimaryExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PrimaryExpressionContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

PrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterPrimaryExpression(this);
	}
};

PrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitPrimaryExpression(this);
	}
};

PrimaryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitPrimaryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.PrimaryExpressionContext = PrimaryExpressionContext;

TibboBasicParser.prototype.primaryExpression = function() {

    var localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, TibboBasicParser.RULE_primaryExpression);
    try {
        this.state = 601;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TibboBasicParser.FALSE:
        case TibboBasicParser.TRUE:
        case TibboBasicParser.STRINGLITERAL:
        case TibboBasicParser.TemplateStringLiteral:
        case TibboBasicParser.HEXLITERAL:
        case TibboBasicParser.BINLITERAL:
        case TibboBasicParser.INTEGERLITERAL:
        case TibboBasicParser.MINUS:
        case TibboBasicParser.PLUS:
        case TibboBasicParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 596;
            this.literal();
            break;
        case TibboBasicParser.LPAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 597;
            this.match(TibboBasicParser.LPAREN);
            this.state = 598;
            this.expression(0);
            this.state = 599;
            this.match(TibboBasicParser.RPAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_variableStmt;
    return this;
}

VariableStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableStmtContext.prototype.constructor = VariableStmtContext;

VariableStmtContext.prototype.DIM = function() {
    return this.getToken(TibboBasicParser.DIM, 0);
};

VariableStmtContext.prototype.variableListStmt = function() {
    return this.getTypedRuleContext(VariableListStmtContext,0);
};

VariableStmtContext.prototype.visibility = function() {
    return this.getTypedRuleContext(VisibilityContext,0);
};

VariableStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterVariableStmt(this);
	}
};

VariableStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitVariableStmt(this);
	}
};

VariableStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitVariableStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.VariableStmtContext = VariableStmtContext;

TibboBasicParser.prototype.variableStmt = function() {

    var localctx = new VariableStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, TibboBasicParser.RULE_variableStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 604;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.PUBLIC) {
            this.state = 603;
            this.visibility();
        }

        this.state = 606;
        this.match(TibboBasicParser.DIM);
        this.state = 607;
        this.variableListStmt();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableListStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_variableListStmt;
    this.variableType = null; // AsTypeClauseContext
    return this;
}

VariableListStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableListStmtContext.prototype.constructor = VariableListStmtContext;

VariableListStmtContext.prototype.variableListItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableListItemContext);
    } else {
        return this.getTypedRuleContext(VariableListItemContext,i);
    }
};

VariableListStmtContext.prototype.asTypeClause = function() {
    return this.getTypedRuleContext(AsTypeClauseContext,0);
};

VariableListStmtContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.COMMA);
    } else {
        return this.getToken(TibboBasicParser.COMMA, i);
    }
};


VariableListStmtContext.prototype.EQ = function() {
    return this.getToken(TibboBasicParser.EQ, 0);
};

VariableListStmtContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

VariableListStmtContext.prototype.arrayLiteral = function() {
    return this.getTypedRuleContext(ArrayLiteralContext,0);
};

VariableListStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterVariableListStmt(this);
	}
};

VariableListStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitVariableListStmt(this);
	}
};

VariableListStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitVariableListStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.VariableListStmtContext = VariableListStmtContext;

TibboBasicParser.prototype.variableListStmt = function() {

    var localctx = new VariableListStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, TibboBasicParser.RULE_variableListStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 609;
        this.variableListItem();
        this.state = 616;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TibboBasicParser.COMMA) {
            this.state = 610;
            this.match(TibboBasicParser.COMMA);
            this.state = 612;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TibboBasicParser.IDENTIFIER) {
                this.state = 611;
                this.variableListItem();
            }

            this.state = 618;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 619;
        localctx.variableType = this.asTypeClause();
        this.state = 625;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.EQ) {
            this.state = 620;
            this.match(TibboBasicParser.EQ);
            this.state = 623;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TibboBasicParser.FALSE:
            case TibboBasicParser.NOT:
            case TibboBasicParser.TRUE:
            case TibboBasicParser.STRINGLITERAL:
            case TibboBasicParser.TemplateStringLiteral:
            case TibboBasicParser.HEXLITERAL:
            case TibboBasicParser.BINLITERAL:
            case TibboBasicParser.INTEGERLITERAL:
            case TibboBasicParser.LPAREN:
            case TibboBasicParser.MINUS:
            case TibboBasicParser.PLUS:
            case TibboBasicParser.IDENTIFIER:
                this.state = 621;
                this.expression(0);
                break;
            case TibboBasicParser.L_CURLY_BRACKET:
                this.state = 622;
                this.arrayLiteral();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableListItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_variableListItem;
    return this;
}

VariableListItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableListItemContext.prototype.constructor = VariableListItemContext;

VariableListItemContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

VariableListItemContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

VariableListItemContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

VariableListItemContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

VariableListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterVariableListItem(this);
	}
};

VariableListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitVariableListItem(this);
	}
};

VariableListItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitVariableListItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.VariableListItemContext = VariableListItemContext;

TibboBasicParser.prototype.variableListItem = function() {

    var localctx = new VariableListItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, TibboBasicParser.RULE_variableListItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 627;
        this.match(TibboBasicParser.IDENTIFIER);
        this.state = 632;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.LPAREN) {
            this.state = 628;
            this.match(TibboBasicParser.LPAREN);
            this.state = 629;
            this.literal();
            this.state = 630;
            this.match(TibboBasicParser.RPAREN);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhileWendStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_whileWendStmt;
    return this;
}

WhileWendStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileWendStmtContext.prototype.constructor = WhileWendStmtContext;

WhileWendStmtContext.prototype.WHILE = function() {
    return this.getToken(TibboBasicParser.WHILE, 0);
};

WhileWendStmtContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WhileWendStmtContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

WhileWendStmtContext.prototype.WEND = function() {
    return this.getToken(TibboBasicParser.WEND, 0);
};

WhileWendStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterWhileWendStmt(this);
	}
};

WhileWendStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitWhileWendStmt(this);
	}
};

WhileWendStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitWhileWendStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.WhileWendStmtContext = WhileWendStmtContext;

TibboBasicParser.prototype.whileWendStmt = function() {

    var localctx = new WhileWendStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, TibboBasicParser.RULE_whileWendStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 634;
        this.match(TibboBasicParser.WHILE);
        this.state = 635;
        this.expression(0);
        this.state = 636;
        this.block();
        this.state = 637;
        this.match(TibboBasicParser.WEND);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_objectDeclaration;
    return this;
}

ObjectDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectDeclarationContext.prototype.constructor = ObjectDeclarationContext;

ObjectDeclarationContext.prototype.OBJECT = function() {
    return this.getToken(TibboBasicParser.OBJECT, 0);
};

ObjectDeclarationContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

ObjectDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterObjectDeclaration(this);
	}
};

ObjectDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitObjectDeclaration(this);
	}
};

ObjectDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitObjectDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.ObjectDeclarationContext = ObjectDeclarationContext;

TibboBasicParser.prototype.objectDeclaration = function() {

    var localctx = new ObjectDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, TibboBasicParser.RULE_objectDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 639;
        this.match(TibboBasicParser.OBJECT);
        this.state = 640;
        this.match(TibboBasicParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArgListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_argList;
    return this;
}

ArgListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgListContext.prototype.constructor = ArgListContext;

ArgListContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

ArgListContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

ArgListContext.prototype.arg = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgContext);
    } else {
        return this.getTypedRuleContext(ArgContext,i);
    }
};

ArgListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.COMMA);
    } else {
        return this.getToken(TibboBasicParser.COMMA, i);
    }
};


ArgListContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterArgList(this);
	}
};

ArgListContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitArgList(this);
	}
};

ArgListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitArgList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.ArgListContext = ArgListContext;

TibboBasicParser.prototype.argList = function() {

    var localctx = new ArgListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, TibboBasicParser.RULE_argList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 642;
        this.match(TibboBasicParser.LPAREN);
        this.state = 651;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (TibboBasicParser.FALSE - 38)) | (1 << (TibboBasicParser.NOT - 38)) | (1 << (TibboBasicParser.TRUE - 38)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (TibboBasicParser.STRINGLITERAL - 78)) | (1 << (TibboBasicParser.TemplateStringLiteral - 78)) | (1 << (TibboBasicParser.HEXLITERAL - 78)) | (1 << (TibboBasicParser.BINLITERAL - 78)) | (1 << (TibboBasicParser.INTEGERLITERAL - 78)) | (1 << (TibboBasicParser.LPAREN - 78)) | (1 << (TibboBasicParser.MINUS - 78)) | (1 << (TibboBasicParser.PLUS - 78)))) !== 0) || _la===TibboBasicParser.IDENTIFIER) {
            this.state = 643;
            this.arg();
            this.state = 648;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TibboBasicParser.COMMA) {
                this.state = 644;
                this.match(TibboBasicParser.COMMA);
                this.state = 645;
                this.arg();
                this.state = 650;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 653;
        this.match(TibboBasicParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArgContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_arg;
    return this;
}

ArgContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgContext.prototype.constructor = ArgContext;

ArgContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ArgContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterArg(this);
	}
};

ArgContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitArg(this);
	}
};

ArgContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitArg(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.ArgContext = ArgContext;

TibboBasicParser.prototype.arg = function() {

    var localctx = new ArgContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, TibboBasicParser.RULE_arg);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 655;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParamListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_paramList;
    return this;
}

ParamListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParamListContext.prototype.constructor = ParamListContext;

ParamListContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

ParamListContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

ParamListContext.prototype.param = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParamContext);
    } else {
        return this.getTypedRuleContext(ParamContext,i);
    }
};

ParamListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.COMMA);
    } else {
        return this.getToken(TibboBasicParser.COMMA, i);
    }
};


ParamListContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterParamList(this);
	}
};

ParamListContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitParamList(this);
	}
};

ParamListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitParamList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.ParamListContext = ParamListContext;

TibboBasicParser.prototype.paramList = function() {

    var localctx = new ParamListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, TibboBasicParser.RULE_paramList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 657;
        this.match(TibboBasicParser.LPAREN);
        this.state = 666;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.BYREF || _la===TibboBasicParser.BYVAL || _la===TibboBasicParser.IDENTIFIER) {
            this.state = 658;
            this.param();
            this.state = 663;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TibboBasicParser.COMMA) {
                this.state = 659;
                this.match(TibboBasicParser.COMMA);
                this.state = 660;
                this.param();
                this.state = 665;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 668;
        this.match(TibboBasicParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParamContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_param;
    this.name = null; // Token
    this.valueType = null; // AsTypeClauseContext
    return this;
}

ParamContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParamContext.prototype.constructor = ParamContext;

ParamContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

ParamContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

ParamContext.prototype.INTEGERLITERAL = function() {
    return this.getToken(TibboBasicParser.INTEGERLITERAL, 0);
};

ParamContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

ParamContext.prototype.BYVAL = function() {
    return this.getToken(TibboBasicParser.BYVAL, 0);
};

ParamContext.prototype.BYREF = function() {
    return this.getToken(TibboBasicParser.BYREF, 0);
};

ParamContext.prototype.asTypeClause = function() {
    return this.getTypedRuleContext(AsTypeClauseContext,0);
};

ParamContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterParam(this);
	}
};

ParamContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitParam(this);
	}
};

ParamContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitParam(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.ParamContext = ParamContext;

TibboBasicParser.prototype.param = function() {

    var localctx = new ParamContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, TibboBasicParser.RULE_param);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 671;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.BYREF || _la===TibboBasicParser.BYVAL) {
            this.state = 670;
            _la = this._input.LA(1);
            if(!(_la===TibboBasicParser.BYREF || _la===TibboBasicParser.BYVAL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 673;
        localctx.name = this.match(TibboBasicParser.IDENTIFIER);
        this.state = 677;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.LPAREN) {
            this.state = 674;
            this.match(TibboBasicParser.LPAREN);
            this.state = 675;
            this.match(TibboBasicParser.INTEGERLITERAL);
            this.state = 676;
            this.match(TibboBasicParser.RPAREN);
        }

        this.state = 680;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.AS) {
            this.state = 679;
            localctx.valueType = this.asTypeClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AsTypeClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_asTypeClause;
    this.valueType = null; // TypeContext
    return this;
}

AsTypeClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AsTypeClauseContext.prototype.constructor = AsTypeClauseContext;

AsTypeClauseContext.prototype.AS = function() {
    return this.getToken(TibboBasicParser.AS, 0);
};

AsTypeClauseContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

AsTypeClauseContext.prototype.ENUM = function() {
    return this.getToken(TibboBasicParser.ENUM, 0);
};

AsTypeClauseContext.prototype.fieldLength = function() {
    return this.getTypedRuleContext(FieldLengthContext,0);
};

AsTypeClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterAsTypeClause(this);
	}
};

AsTypeClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitAsTypeClause(this);
	}
};

AsTypeClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitAsTypeClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.AsTypeClauseContext = AsTypeClauseContext;

TibboBasicParser.prototype.asTypeClause = function() {

    var localctx = new AsTypeClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, TibboBasicParser.RULE_asTypeClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 682;
        this.match(TibboBasicParser.AS);
        this.state = 684;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.ENUM) {
            this.state = 683;
            this.match(TibboBasicParser.ENUM);
        }

        this.state = 686;
        localctx.valueType = this.type();
        this.state = 688;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.MULT) {
            this.state = 687;
            this.fieldLength();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BaseTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_baseType;
    return this;
}

BaseTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BaseTypeContext.prototype.constructor = BaseTypeContext;

BaseTypeContext.prototype.CHAR = function() {
    return this.getToken(TibboBasicParser.CHAR, 0);
};

BaseTypeContext.prototype.SHORT = function() {
    return this.getToken(TibboBasicParser.SHORT, 0);
};

BaseTypeContext.prototype.WORD = function() {
    return this.getToken(TibboBasicParser.WORD, 0);
};

BaseTypeContext.prototype.DWORD = function() {
    return this.getToken(TibboBasicParser.DWORD, 0);
};

BaseTypeContext.prototype.FLOAT = function() {
    return this.getToken(TibboBasicParser.FLOAT, 0);
};

BaseTypeContext.prototype.REAL = function() {
    return this.getToken(TibboBasicParser.REAL, 0);
};

BaseTypeContext.prototype.BOOLEAN = function() {
    return this.getToken(TibboBasicParser.BOOLEAN, 0);
};

BaseTypeContext.prototype.BYTE = function() {
    return this.getToken(TibboBasicParser.BYTE, 0);
};

BaseTypeContext.prototype.INTEGER = function() {
    return this.getToken(TibboBasicParser.INTEGER, 0);
};

BaseTypeContext.prototype.LONG = function() {
    return this.getToken(TibboBasicParser.LONG, 0);
};

BaseTypeContext.prototype.STRING = function() {
    return this.getToken(TibboBasicParser.STRING, 0);
};

BaseTypeContext.prototype.MULT = function() {
    return this.getToken(TibboBasicParser.MULT, 0);
};

BaseTypeContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BaseTypeContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.WS);
    } else {
        return this.getToken(TibboBasicParser.WS, i);
    }
};


BaseTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterBaseType(this);
	}
};

BaseTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitBaseType(this);
	}
};

BaseTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitBaseType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.BaseTypeContext = BaseTypeContext;

TibboBasicParser.prototype.baseType = function() {

    var localctx = new BaseTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, TibboBasicParser.RULE_baseType);
    var _la = 0; // Token type
    try {
        this.state = 711;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TibboBasicParser.CHAR:
            this.enterOuterAlt(localctx, 1);
            this.state = 690;
            this.match(TibboBasicParser.CHAR);
            break;
        case TibboBasicParser.SHORT:
            this.enterOuterAlt(localctx, 2);
            this.state = 691;
            this.match(TibboBasicParser.SHORT);
            break;
        case TibboBasicParser.WORD:
            this.enterOuterAlt(localctx, 3);
            this.state = 692;
            this.match(TibboBasicParser.WORD);
            break;
        case TibboBasicParser.DWORD:
            this.enterOuterAlt(localctx, 4);
            this.state = 693;
            this.match(TibboBasicParser.DWORD);
            break;
        case TibboBasicParser.FLOAT:
            this.enterOuterAlt(localctx, 5);
            this.state = 694;
            this.match(TibboBasicParser.FLOAT);
            break;
        case TibboBasicParser.REAL:
            this.enterOuterAlt(localctx, 6);
            this.state = 695;
            this.match(TibboBasicParser.REAL);
            break;
        case TibboBasicParser.BOOLEAN:
            this.enterOuterAlt(localctx, 7);
            this.state = 696;
            this.match(TibboBasicParser.BOOLEAN);
            break;
        case TibboBasicParser.BYTE:
            this.enterOuterAlt(localctx, 8);
            this.state = 697;
            this.match(TibboBasicParser.BYTE);
            break;
        case TibboBasicParser.INTEGER:
            this.enterOuterAlt(localctx, 9);
            this.state = 698;
            this.match(TibboBasicParser.INTEGER);
            break;
        case TibboBasicParser.LONG:
            this.enterOuterAlt(localctx, 10);
            this.state = 699;
            this.match(TibboBasicParser.LONG);
            break;
        case TibboBasicParser.STRING:
            this.enterOuterAlt(localctx, 11);
            this.state = 700;
            this.match(TibboBasicParser.STRING);
            this.state = 709;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
            if(la_===1) {
                this.state = 702;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TibboBasicParser.WS) {
                    this.state = 701;
                    this.match(TibboBasicParser.WS);
                }

                this.state = 704;
                this.match(TibboBasicParser.MULT);
                this.state = 706;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TibboBasicParser.WS) {
                    this.state = 705;
                    this.match(TibboBasicParser.WS);
                }

                this.state = 708;
                this.expression(0);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComplexTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_complexType;
    return this;
}

ComplexTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComplexTypeContext.prototype.constructor = ComplexTypeContext;

ComplexTypeContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.IDENTIFIER);
    } else {
        return this.getToken(TibboBasicParser.IDENTIFIER, i);
    }
};


ComplexTypeContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.DOT);
    } else {
        return this.getToken(TibboBasicParser.DOT, i);
    }
};


ComplexTypeContext.prototype.BANG = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.BANG);
    } else {
        return this.getToken(TibboBasicParser.BANG, i);
    }
};


ComplexTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterComplexType(this);
	}
};

ComplexTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitComplexType(this);
	}
};

ComplexTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitComplexType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.ComplexTypeContext = ComplexTypeContext;

TibboBasicParser.prototype.complexType = function() {

    var localctx = new ComplexTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, TibboBasicParser.RULE_complexType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 713;
        this.match(TibboBasicParser.IDENTIFIER);
        this.state = 718;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TibboBasicParser.DOT || _la===TibboBasicParser.BANG) {
            this.state = 714;
            _la = this._input.LA(1);
            if(!(_la===TibboBasicParser.DOT || _la===TibboBasicParser.BANG)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 715;
            this.match(TibboBasicParser.IDENTIFIER);
            this.state = 720;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldLengthContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_fieldLength;
    return this;
}

FieldLengthContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldLengthContext.prototype.constructor = FieldLengthContext;

FieldLengthContext.prototype.MULT = function() {
    return this.getToken(TibboBasicParser.MULT, 0);
};

FieldLengthContext.prototype.INTEGERLITERAL = function() {
    return this.getToken(TibboBasicParser.INTEGERLITERAL, 0);
};

FieldLengthContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

FieldLengthContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterFieldLength(this);
	}
};

FieldLengthContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitFieldLength(this);
	}
};

FieldLengthContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitFieldLength(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.FieldLengthContext = FieldLengthContext;

TibboBasicParser.prototype.fieldLength = function() {

    var localctx = new FieldLengthContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, TibboBasicParser.RULE_fieldLength);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 721;
        this.match(TibboBasicParser.MULT);
        this.state = 722;
        _la = this._input.LA(1);
        if(!(_la===TibboBasicParser.INTEGERLITERAL || _la===TibboBasicParser.IDENTIFIER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LineLabelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_lineLabel;
    return this;
}

LineLabelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LineLabelContext.prototype.constructor = LineLabelContext;

LineLabelContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

LineLabelContext.prototype.COLON = function() {
    return this.getToken(TibboBasicParser.COLON, 0);
};

LineLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterLineLabel(this);
	}
};

LineLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitLineLabel(this);
	}
};

LineLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitLineLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.LineLabelContext = LineLabelContext;

TibboBasicParser.prototype.lineLabel = function() {

    var localctx = new LineLabelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, TibboBasicParser.RULE_lineLabel);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 724;
        this.match(TibboBasicParser.IDENTIFIER);
        this.state = 725;
        this.match(TibboBasicParser.COLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.HEXLITERAL = function() {
    return this.getToken(TibboBasicParser.HEXLITERAL, 0);
};

LiteralContext.prototype.BINLITERAL = function() {
    return this.getToken(TibboBasicParser.BINLITERAL, 0);
};

LiteralContext.prototype.INTEGERLITERAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.INTEGERLITERAL);
    } else {
        return this.getToken(TibboBasicParser.INTEGERLITERAL, i);
    }
};


LiteralContext.prototype.DOT = function() {
    return this.getToken(TibboBasicParser.DOT, 0);
};

LiteralContext.prototype.PLUS = function() {
    return this.getToken(TibboBasicParser.PLUS, 0);
};

LiteralContext.prototype.MINUS = function() {
    return this.getToken(TibboBasicParser.MINUS, 0);
};

LiteralContext.prototype.STRINGLITERAL = function() {
    return this.getToken(TibboBasicParser.STRINGLITERAL, 0);
};

LiteralContext.prototype.TemplateStringLiteral = function() {
    return this.getToken(TibboBasicParser.TemplateStringLiteral, 0);
};

LiteralContext.prototype.TRUE = function() {
    return this.getToken(TibboBasicParser.TRUE, 0);
};

LiteralContext.prototype.FALSE = function() {
    return this.getToken(TibboBasicParser.FALSE, 0);
};

LiteralContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitLiteral(this);
	}
};

LiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.LiteralContext = LiteralContext;

TibboBasicParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, TibboBasicParser.RULE_literal);
    var _la = 0; // Token type
    try {
        this.state = 746;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TibboBasicParser.HEXLITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 727;
            this.match(TibboBasicParser.HEXLITERAL);
            break;
        case TibboBasicParser.BINLITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 728;
            this.match(TibboBasicParser.BINLITERAL);
            break;
        case TibboBasicParser.INTEGERLITERAL:
        case TibboBasicParser.MINUS:
        case TibboBasicParser.PLUS:
            this.enterOuterAlt(localctx, 3);
            this.state = 730;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TibboBasicParser.MINUS || _la===TibboBasicParser.PLUS) {
                this.state = 729;
                _la = this._input.LA(1);
                if(!(_la===TibboBasicParser.MINUS || _la===TibboBasicParser.PLUS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 738;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
            if(la_===1) {
                this.state = 733; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 732;
                    this.match(TibboBasicParser.INTEGERLITERAL);
                    this.state = 735; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===TibboBasicParser.INTEGERLITERAL);
                this.state = 737;
                this.match(TibboBasicParser.DOT);

            }
            this.state = 740;
            this.match(TibboBasicParser.INTEGERLITERAL);
            break;
        case TibboBasicParser.STRINGLITERAL:
            this.enterOuterAlt(localctx, 4);
            this.state = 741;
            this.match(TibboBasicParser.STRINGLITERAL);
            break;
        case TibboBasicParser.TemplateStringLiteral:
            this.enterOuterAlt(localctx, 5);
            this.state = 742;
            this.match(TibboBasicParser.TemplateStringLiteral);
            break;
        case TibboBasicParser.TRUE:
            this.enterOuterAlt(localctx, 6);
            this.state = 743;
            this.match(TibboBasicParser.TRUE);
            break;
        case TibboBasicParser.FALSE:
            this.enterOuterAlt(localctx, 7);
            this.state = 744;
            this.match(TibboBasicParser.FALSE);
            break;
        case TibboBasicParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 8);
            this.state = 745;
            this.match(TibboBasicParser.IDENTIFIER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_arrayLiteral;
    return this;
}

ArrayLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayLiteralContext.prototype.constructor = ArrayLiteralContext;

ArrayLiteralContext.prototype.L_CURLY_BRACKET = function() {
    return this.getToken(TibboBasicParser.L_CURLY_BRACKET, 0);
};

ArrayLiteralContext.prototype.R_CURLY_BRACKET = function() {
    return this.getToken(TibboBasicParser.R_CURLY_BRACKET, 0);
};

ArrayLiteralContext.prototype.literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LiteralContext);
    } else {
        return this.getTypedRuleContext(LiteralContext,i);
    }
};

ArrayLiteralContext.prototype.arrayLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArrayLiteralContext);
    } else {
        return this.getTypedRuleContext(ArrayLiteralContext,i);
    }
};

ArrayLiteralContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.COMMA);
    } else {
        return this.getToken(TibboBasicParser.COMMA, i);
    }
};


ArrayLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterArrayLiteral(this);
	}
};

ArrayLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitArrayLiteral(this);
	}
};

ArrayLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitArrayLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.ArrayLiteralContext = ArrayLiteralContext;

TibboBasicParser.prototype.arrayLiteral = function() {

    var localctx = new ArrayLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, TibboBasicParser.RULE_arrayLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 748;
        this.match(TibboBasicParser.L_CURLY_BRACKET);
        this.state = 751;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TibboBasicParser.FALSE:
        case TibboBasicParser.TRUE:
        case TibboBasicParser.STRINGLITERAL:
        case TibboBasicParser.TemplateStringLiteral:
        case TibboBasicParser.HEXLITERAL:
        case TibboBasicParser.BINLITERAL:
        case TibboBasicParser.INTEGERLITERAL:
        case TibboBasicParser.MINUS:
        case TibboBasicParser.PLUS:
        case TibboBasicParser.IDENTIFIER:
            this.state = 749;
            this.literal();
            break;
        case TibboBasicParser.L_CURLY_BRACKET:
            this.state = 750;
            this.arrayLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 760;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,99,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 753;
                this.match(TibboBasicParser.COMMA);
                this.state = 756;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TibboBasicParser.FALSE:
                case TibboBasicParser.TRUE:
                case TibboBasicParser.STRINGLITERAL:
                case TibboBasicParser.TemplateStringLiteral:
                case TibboBasicParser.HEXLITERAL:
                case TibboBasicParser.BINLITERAL:
                case TibboBasicParser.INTEGERLITERAL:
                case TibboBasicParser.MINUS:
                case TibboBasicParser.PLUS:
                case TibboBasicParser.IDENTIFIER:
                    this.state = 754;
                    this.literal();
                    break;
                case TibboBasicParser.L_CURLY_BRACKET:
                    this.state = 755;
                    this.arrayLiteral();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 762;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,99,this._ctx);
        }

        this.state = 764;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.COMMA) {
            this.state = 763;
            this.match(TibboBasicParser.COMMA);
        }

        this.state = 766;
        this.match(TibboBasicParser.R_CURLY_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.baseType = function() {
    return this.getTypedRuleContext(BaseTypeContext,0);
};

TypeContext.prototype.complexType = function() {
    return this.getTypedRuleContext(ComplexTypeContext,0);
};

TypeContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

TypeContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

TypeContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

TypeContext.prototype.INTEGERLITERAL = function() {
    return this.getToken(TibboBasicParser.INTEGERLITERAL, 0);
};

TypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterType(this);
	}
};

TypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitType(this);
	}
};

TypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.TypeContext = TypeContext;

TibboBasicParser.prototype.type = function() {

    var localctx = new TypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, TibboBasicParser.RULE_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 770;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TibboBasicParser.BOOLEAN:
        case TibboBasicParser.REAL:
        case TibboBasicParser.BYTE:
        case TibboBasicParser.CHAR:
        case TibboBasicParser.DWORD:
        case TibboBasicParser.FLOAT:
        case TibboBasicParser.INTEGER:
        case TibboBasicParser.LONG:
        case TibboBasicParser.SHORT:
        case TibboBasicParser.STRING:
        case TibboBasicParser.WORD:
            this.state = 768;
            this.baseType();
            break;
        case TibboBasicParser.IDENTIFIER:
            this.state = 769;
            this.complexType();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 775;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
        if(la_===1) {
            this.state = 772;
            this.match(TibboBasicParser.LPAREN);
            this.state = 773;
            _la = this._input.LA(1);
            if(!(_la===TibboBasicParser.INTEGERLITERAL || _la===TibboBasicParser.IDENTIFIER)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 774;
            this.match(TibboBasicParser.RPAREN);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VisibilityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_visibility;
    return this;
}

VisibilityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VisibilityContext.prototype.constructor = VisibilityContext;

VisibilityContext.prototype.PUBLIC = function() {
    return this.getToken(TibboBasicParser.PUBLIC, 0);
};

VisibilityContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterVisibility(this);
	}
};

VisibilityContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitVisibility(this);
	}
};

VisibilityContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitVisibility(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.VisibilityContext = VisibilityContext;

TibboBasicParser.prototype.visibility = function() {

    var localctx = new VisibilityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, TibboBasicParser.RULE_visibility);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 777;
        this.match(TibboBasicParser.PUBLIC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


TibboBasicParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 38:
			return this.expression_sempred(localctx, predIndex);
	case 41:
			return this.postfixExpression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

TibboBasicParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 6);
		case 1:
			return this.precpred(this._ctx, 5);
		case 2:
			return this.precpred(this._ctx, 4);
		case 3:
			return this.precpred(this._ctx, 3);
		case 4:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

TibboBasicParser.prototype.postfixExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 5:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.TibboBasicParser = TibboBasicParser;


/***/ }),

/***/ "./language/TibboBasic/lib/TibboBasicParserListener.js":
/*!*************************************************************!*\
  !*** ./language/TibboBasic/lib/TibboBasicParserListener.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Generated from /Users/jimmyhu/Projects/tibbo-basic/server/language/TibboBasic/TibboBasicParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = __webpack_require__(/*! antlr4/index */ "./node_modules/antlr4/index.js");

// This class defines a complete listener for a parse tree produced by TibboBasicParser.
function TibboBasicParserListener() {
	antlr4.tree.ParseTreeListener.call(this);
	return this;
}

TibboBasicParserListener.prototype = Object.create(antlr4.tree.ParseTreeListener.prototype);
TibboBasicParserListener.prototype.constructor = TibboBasicParserListener;

// Enter a parse tree produced by TibboBasicParser#startRule.
TibboBasicParserListener.prototype.enterStartRule = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#startRule.
TibboBasicParserListener.prototype.exitStartRule = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#topLevelDeclaration.
TibboBasicParserListener.prototype.enterTopLevelDeclaration = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#topLevelDeclaration.
TibboBasicParserListener.prototype.exitTopLevelDeclaration = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#includeStmt.
TibboBasicParserListener.prototype.enterIncludeStmt = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#includeStmt.
TibboBasicParserListener.prototype.exitIncludeStmt = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#includeppStmt.
TibboBasicParserListener.prototype.enterIncludeppStmt = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#includeppStmt.
TibboBasicParserListener.prototype.exitIncludeppStmt = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#block.
TibboBasicParserListener.prototype.enterBlock = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#block.
TibboBasicParserListener.prototype.exitBlock = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#statement.
TibboBasicParserListener.prototype.enterStatement = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#statement.
TibboBasicParserListener.prototype.exitStatement = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#constStmt.
TibboBasicParserListener.prototype.enterConstStmt = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#constStmt.
TibboBasicParserListener.prototype.exitConstStmt = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#constSubStmt.
TibboBasicParserListener.prototype.enterConstSubStmt = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#constSubStmt.
TibboBasicParserListener.prototype.exitConstSubStmt = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#declareVariableStmt.
TibboBasicParserListener.prototype.enterDeclareVariableStmt = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#declareVariableStmt.
TibboBasicParserListener.prototype.exitDeclareVariableStmt = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#declareSubStmt.
TibboBasicParserListener.prototype.enterDeclareSubStmt = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#declareSubStmt.
TibboBasicParserListener.prototype.exitDeclareSubStmt = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#declareFuncStmt.
TibboBasicParserListener.prototype.enterDeclareFuncStmt = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#declareFuncStmt.
TibboBasicParserListener.prototype.exitDeclareFuncStmt = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#doLoopStmt.
TibboBasicParserListener.prototype.enterDoLoopStmt = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#doLoopStmt.
TibboBasicParserListener.prototype.exitDoLoopStmt = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#enumerationStmt.
TibboBasicParserListener.prototype.enterEnumerationStmt = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#enumerationStmt.
TibboBasicParserListener.prototype.exitEnumerationStmt = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#enumerationStmt_Constant.
TibboBasicParserListener.prototype.enterEnumerationStmt_Constant = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#enumerationStmt_Constant.
TibboBasicParserListener.prototype.exitEnumerationStmt_Constant = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#exitStmt.
TibboBasicParserListener.prototype.enterExitStmt = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#exitStmt.
TibboBasicParserListener.prototype.exitExitStmt = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#forNextStmt.
TibboBasicParserListener.prototype.enterForNextStmt = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#forNextStmt.
TibboBasicParserListener.prototype.exitForNextStmt = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#functionStmt.
TibboBasicParserListener.prototype.enterFunctionStmt = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#functionStmt.
TibboBasicParserListener.prototype.exitFunctionStmt = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#jumpStmt.
TibboBasicParserListener.prototype.enterJumpStmt = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#jumpStmt.
TibboBasicParserListener.prototype.exitJumpStmt = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#goToStmt.
TibboBasicParserListener.prototype.enterGoToStmt = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#goToStmt.
TibboBasicParserListener.prototype.exitGoToStmt = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#inlineIfThenElse.
TibboBasicParserListener.prototype.enterInlineIfThenElse = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#inlineIfThenElse.
TibboBasicParserListener.prototype.exitInlineIfThenElse = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#blockIfThenElse.
TibboBasicParserListener.prototype.enterBlockIfThenElse = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#blockIfThenElse.
TibboBasicParserListener.prototype.exitBlockIfThenElse = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#ifConditionStmt.
TibboBasicParserListener.prototype.enterIfConditionStmt = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#ifConditionStmt.
TibboBasicParserListener.prototype.exitIfConditionStmt = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#propertyDefineStmt.
TibboBasicParserListener.prototype.enterPropertyDefineStmt = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#propertyDefineStmt.
TibboBasicParserListener.prototype.exitPropertyDefineStmt = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#propertyDefineStmt_InStmt.
TibboBasicParserListener.prototype.enterPropertyDefineStmt_InStmt = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#propertyDefineStmt_InStmt.
TibboBasicParserListener.prototype.exitPropertyDefineStmt_InStmt = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#propertyGetStmt.
TibboBasicParserListener.prototype.enterPropertyGetStmt = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#propertyGetStmt.
TibboBasicParserListener.prototype.exitPropertyGetStmt = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#propertySetStmt.
TibboBasicParserListener.prototype.enterPropertySetStmt = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#propertySetStmt.
TibboBasicParserListener.prototype.exitPropertySetStmt = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#eventDeclaration.
TibboBasicParserListener.prototype.enterEventDeclaration = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#eventDeclaration.
TibboBasicParserListener.prototype.exitEventDeclaration = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#syscallDeclaration.
TibboBasicParserListener.prototype.enterSyscallDeclaration = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#syscallDeclaration.
TibboBasicParserListener.prototype.exitSyscallDeclaration = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#syscallDeclarationInner.
TibboBasicParserListener.prototype.enterSyscallDeclarationInner = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#syscallDeclarationInner.
TibboBasicParserListener.prototype.exitSyscallDeclarationInner = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#syscallInternalDeclarationInner.
TibboBasicParserListener.prototype.enterSyscallInternalDeclarationInner = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#syscallInternalDeclarationInner.
TibboBasicParserListener.prototype.exitSyscallInternalDeclarationInner = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#syscallInternalParamList.
TibboBasicParserListener.prototype.enterSyscallInternalParamList = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#syscallInternalParamList.
TibboBasicParserListener.prototype.exitSyscallInternalParamList = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#paramInternal.
TibboBasicParserListener.prototype.enterParamInternal = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#paramInternal.
TibboBasicParserListener.prototype.exitParamInternal = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#selectCaseStmt.
TibboBasicParserListener.prototype.enterSelectCaseStmt = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#selectCaseStmt.
TibboBasicParserListener.prototype.exitSelectCaseStmt = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#sC_Case.
TibboBasicParserListener.prototype.enterSC_Case = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#sC_Case.
TibboBasicParserListener.prototype.exitSC_Case = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#sC_Default.
TibboBasicParserListener.prototype.enterSC_Default = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#sC_Default.
TibboBasicParserListener.prototype.exitSC_Default = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#sC_Cond.
TibboBasicParserListener.prototype.enterSC_Cond = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#sC_Cond.
TibboBasicParserListener.prototype.exitSC_Cond = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#subStmt.
TibboBasicParserListener.prototype.enterSubStmt = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#subStmt.
TibboBasicParserListener.prototype.exitSubStmt = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#typeStmt.
TibboBasicParserListener.prototype.enterTypeStmt = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#typeStmt.
TibboBasicParserListener.prototype.exitTypeStmt = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#typeStmtElement.
TibboBasicParserListener.prototype.enterTypeStmtElement = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#typeStmtElement.
TibboBasicParserListener.prototype.exitTypeStmtElement = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#expression.
TibboBasicParserListener.prototype.enterExpression = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#expression.
TibboBasicParserListener.prototype.exitExpression = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#unaryExpression.
TibboBasicParserListener.prototype.enterUnaryExpression = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#unaryExpression.
TibboBasicParserListener.prototype.exitUnaryExpression = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#unaryOperator.
TibboBasicParserListener.prototype.enterUnaryOperator = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#unaryOperator.
TibboBasicParserListener.prototype.exitUnaryOperator = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#postfixExpression.
TibboBasicParserListener.prototype.enterPostfixExpression = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#postfixExpression.
TibboBasicParserListener.prototype.exitPostfixExpression = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#postfix.
TibboBasicParserListener.prototype.enterPostfix = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#postfix.
TibboBasicParserListener.prototype.exitPostfix = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#primaryExpression.
TibboBasicParserListener.prototype.enterPrimaryExpression = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#primaryExpression.
TibboBasicParserListener.prototype.exitPrimaryExpression = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#variableStmt.
TibboBasicParserListener.prototype.enterVariableStmt = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#variableStmt.
TibboBasicParserListener.prototype.exitVariableStmt = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#variableListStmt.
TibboBasicParserListener.prototype.enterVariableListStmt = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#variableListStmt.
TibboBasicParserListener.prototype.exitVariableListStmt = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#variableListItem.
TibboBasicParserListener.prototype.enterVariableListItem = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#variableListItem.
TibboBasicParserListener.prototype.exitVariableListItem = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#whileWendStmt.
TibboBasicParserListener.prototype.enterWhileWendStmt = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#whileWendStmt.
TibboBasicParserListener.prototype.exitWhileWendStmt = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#objectDeclaration.
TibboBasicParserListener.prototype.enterObjectDeclaration = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#objectDeclaration.
TibboBasicParserListener.prototype.exitObjectDeclaration = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#argList.
TibboBasicParserListener.prototype.enterArgList = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#argList.
TibboBasicParserListener.prototype.exitArgList = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#arg.
TibboBasicParserListener.prototype.enterArg = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#arg.
TibboBasicParserListener.prototype.exitArg = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#paramList.
TibboBasicParserListener.prototype.enterParamList = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#paramList.
TibboBasicParserListener.prototype.exitParamList = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#param.
TibboBasicParserListener.prototype.enterParam = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#param.
TibboBasicParserListener.prototype.exitParam = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#asTypeClause.
TibboBasicParserListener.prototype.enterAsTypeClause = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#asTypeClause.
TibboBasicParserListener.prototype.exitAsTypeClause = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#baseType.
TibboBasicParserListener.prototype.enterBaseType = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#baseType.
TibboBasicParserListener.prototype.exitBaseType = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#complexType.
TibboBasicParserListener.prototype.enterComplexType = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#complexType.
TibboBasicParserListener.prototype.exitComplexType = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#fieldLength.
TibboBasicParserListener.prototype.enterFieldLength = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#fieldLength.
TibboBasicParserListener.prototype.exitFieldLength = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#lineLabel.
TibboBasicParserListener.prototype.enterLineLabel = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#lineLabel.
TibboBasicParserListener.prototype.exitLineLabel = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#literal.
TibboBasicParserListener.prototype.enterLiteral = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#literal.
TibboBasicParserListener.prototype.exitLiteral = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#arrayLiteral.
TibboBasicParserListener.prototype.enterArrayLiteral = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#arrayLiteral.
TibboBasicParserListener.prototype.exitArrayLiteral = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#type.
TibboBasicParserListener.prototype.enterType = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#type.
TibboBasicParserListener.prototype.exitType = function(ctx) {
};


// Enter a parse tree produced by TibboBasicParser#visibility.
TibboBasicParserListener.prototype.enterVisibility = function(ctx) {
};

// Exit a parse tree produced by TibboBasicParser#visibility.
TibboBasicParserListener.prototype.exitVisibility = function(ctx) {
};



exports.TibboBasicParserListener = TibboBasicParserListener;

/***/ }),

/***/ "./language/TibboBasic/lib/TibboBasicParserVisitor.js":
/*!************************************************************!*\
  !*** ./language/TibboBasic/lib/TibboBasicParserVisitor.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Generated from /Users/jimmyhu/Projects/tibbo-basic/server/language/TibboBasic/TibboBasicParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = __webpack_require__(/*! antlr4/index */ "./node_modules/antlr4/index.js");

// This class defines a complete generic visitor for a parse tree produced by TibboBasicParser.

function TibboBasicParserVisitor() {
	antlr4.tree.ParseTreeVisitor.call(this);
	return this;
}

TibboBasicParserVisitor.prototype = Object.create(antlr4.tree.ParseTreeVisitor.prototype);
TibboBasicParserVisitor.prototype.constructor = TibboBasicParserVisitor;

// Visit a parse tree produced by TibboBasicParser#startRule.
TibboBasicParserVisitor.prototype.visitStartRule = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#topLevelDeclaration.
TibboBasicParserVisitor.prototype.visitTopLevelDeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#includeStmt.
TibboBasicParserVisitor.prototype.visitIncludeStmt = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#includeppStmt.
TibboBasicParserVisitor.prototype.visitIncludeppStmt = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#block.
TibboBasicParserVisitor.prototype.visitBlock = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#statement.
TibboBasicParserVisitor.prototype.visitStatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#constStmt.
TibboBasicParserVisitor.prototype.visitConstStmt = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#constSubStmt.
TibboBasicParserVisitor.prototype.visitConstSubStmt = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#declareVariableStmt.
TibboBasicParserVisitor.prototype.visitDeclareVariableStmt = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#declareSubStmt.
TibboBasicParserVisitor.prototype.visitDeclareSubStmt = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#declareFuncStmt.
TibboBasicParserVisitor.prototype.visitDeclareFuncStmt = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#doLoopStmt.
TibboBasicParserVisitor.prototype.visitDoLoopStmt = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#enumerationStmt.
TibboBasicParserVisitor.prototype.visitEnumerationStmt = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#enumerationStmt_Constant.
TibboBasicParserVisitor.prototype.visitEnumerationStmt_Constant = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#exitStmt.
TibboBasicParserVisitor.prototype.visitExitStmt = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#forNextStmt.
TibboBasicParserVisitor.prototype.visitForNextStmt = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#functionStmt.
TibboBasicParserVisitor.prototype.visitFunctionStmt = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#jumpStmt.
TibboBasicParserVisitor.prototype.visitJumpStmt = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#goToStmt.
TibboBasicParserVisitor.prototype.visitGoToStmt = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#inlineIfThenElse.
TibboBasicParserVisitor.prototype.visitInlineIfThenElse = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#blockIfThenElse.
TibboBasicParserVisitor.prototype.visitBlockIfThenElse = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#ifConditionStmt.
TibboBasicParserVisitor.prototype.visitIfConditionStmt = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#propertyDefineStmt.
TibboBasicParserVisitor.prototype.visitPropertyDefineStmt = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#propertyDefineStmt_InStmt.
TibboBasicParserVisitor.prototype.visitPropertyDefineStmt_InStmt = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#propertyGetStmt.
TibboBasicParserVisitor.prototype.visitPropertyGetStmt = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#propertySetStmt.
TibboBasicParserVisitor.prototype.visitPropertySetStmt = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#eventDeclaration.
TibboBasicParserVisitor.prototype.visitEventDeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#syscallDeclaration.
TibboBasicParserVisitor.prototype.visitSyscallDeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#syscallDeclarationInner.
TibboBasicParserVisitor.prototype.visitSyscallDeclarationInner = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#syscallInternalDeclarationInner.
TibboBasicParserVisitor.prototype.visitSyscallInternalDeclarationInner = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#syscallInternalParamList.
TibboBasicParserVisitor.prototype.visitSyscallInternalParamList = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#paramInternal.
TibboBasicParserVisitor.prototype.visitParamInternal = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#selectCaseStmt.
TibboBasicParserVisitor.prototype.visitSelectCaseStmt = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#sC_Case.
TibboBasicParserVisitor.prototype.visitSC_Case = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#sC_Default.
TibboBasicParserVisitor.prototype.visitSC_Default = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#sC_Cond.
TibboBasicParserVisitor.prototype.visitSC_Cond = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#subStmt.
TibboBasicParserVisitor.prototype.visitSubStmt = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#typeStmt.
TibboBasicParserVisitor.prototype.visitTypeStmt = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#typeStmtElement.
TibboBasicParserVisitor.prototype.visitTypeStmtElement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#expression.
TibboBasicParserVisitor.prototype.visitExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#unaryExpression.
TibboBasicParserVisitor.prototype.visitUnaryExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#unaryOperator.
TibboBasicParserVisitor.prototype.visitUnaryOperator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#postfixExpression.
TibboBasicParserVisitor.prototype.visitPostfixExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#postfix.
TibboBasicParserVisitor.prototype.visitPostfix = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#primaryExpression.
TibboBasicParserVisitor.prototype.visitPrimaryExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#variableStmt.
TibboBasicParserVisitor.prototype.visitVariableStmt = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#variableListStmt.
TibboBasicParserVisitor.prototype.visitVariableListStmt = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#variableListItem.
TibboBasicParserVisitor.prototype.visitVariableListItem = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#whileWendStmt.
TibboBasicParserVisitor.prototype.visitWhileWendStmt = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#objectDeclaration.
TibboBasicParserVisitor.prototype.visitObjectDeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#argList.
TibboBasicParserVisitor.prototype.visitArgList = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#arg.
TibboBasicParserVisitor.prototype.visitArg = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#paramList.
TibboBasicParserVisitor.prototype.visitParamList = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#param.
TibboBasicParserVisitor.prototype.visitParam = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#asTypeClause.
TibboBasicParserVisitor.prototype.visitAsTypeClause = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#baseType.
TibboBasicParserVisitor.prototype.visitBaseType = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#complexType.
TibboBasicParserVisitor.prototype.visitComplexType = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#fieldLength.
TibboBasicParserVisitor.prototype.visitFieldLength = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#lineLabel.
TibboBasicParserVisitor.prototype.visitLineLabel = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#literal.
TibboBasicParserVisitor.prototype.visitLiteral = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#arrayLiteral.
TibboBasicParserVisitor.prototype.visitArrayLiteral = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#type.
TibboBasicParserVisitor.prototype.visitType = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicParser#visibility.
TibboBasicParserVisitor.prototype.visitVisibility = function(ctx) {
  return this.visitChildren(ctx);
};



exports.TibboBasicParserVisitor = TibboBasicParserVisitor;

/***/ }),

/***/ "./language/TibboBasic/lib/TibboBasicPreprocessorLexer.js":
/*!****************************************************************!*\
  !*** ./language/TibboBasic/lib/TibboBasicPreprocessorLexer.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Generated from /Users/jimmyhu/Projects/tibbo-basic/server/language/TibboBasic/TibboBasicPreprocessorLexer.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = __webpack_require__(/*! antlr4/index */ "./node_modules/antlr4/index.js");



var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0002&\u0233\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\u0004\u0002\t",
    "\u0002\u0004\u0003\t\u0003\u0004\u0004\t\u0004\u0004\u0005\t\u0005\u0004",
    "\u0006\t\u0006\u0004\u0007\t\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t",
    "\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004",
    "\u000f\t\u000f\u0004\u0010\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t",
    "\u0012\u0004\u0013\t\u0013\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004",
    "\u0016\t\u0016\u0004\u0017\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t",
    "\u0019\u0004\u001a\t\u001a\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004",
    "\u001d\t\u001d\u0004\u001e\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004",
    "!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'",
    "\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.",
    "\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u00043\t3\u00044\t4\u0004",
    "5\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004",
    "<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004",
    "C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004",
    "J\tJ\u0004K\tK\u0004L\tL\u0003\u0002\u0006\u0002\u009f\n\u0002\r\u0002",
    "\u000e\u0002\u00a0\u0003\u0002\u0003\u0002\u0003\u0003\u0007\u0003\u00a6",
    "\n\u0003\f\u0003\u000e\u0003\u00a9\u000b\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0006\u0003\u00b3\n\u0003\r\u0003\u000e\u0003\u00b4\u0003\u0003\u0003",
    "\u0003\u0003\u0004\u0007\u0004\u00ba\n\u0004\f\u0004\u000e\u0004\u00bd",
    "\u000b\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0006\u0004",
    "\u00c9\n\u0004\r\u0004\u000e\u0004\u00ca\u0003\u0004\u0003\u0004\u0003",
    "\u0005\u0007\u0005\u00d0\n\u0005\f\u0005\u000e\u0005\u00d3\u000b\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006",
    "\u0007\u0006\u00db\n\u0006\f\u0006\u000e\u0006\u00de\u000b\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\b\u0006\b\u00e7\n\b\r\b\u000e\b\u00e8\u0003\t\u0005\t\u00ec\n\t\u0003",
    "\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0006\u000b\u0100\n\u000b\r\u000b\u000e\u000b",
    "\u0101\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003",
    "\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003 \u0006 \u0159\n \r",
    " \u000e \u015a\u0003 \u0003 \u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0007",
    "\"\u0164\n\"\f\"\u000e\"\u0167\u000b\"\u0003#\u0006#\u016a\n#\r#\u000e",
    "#\u016b\u0003$\u0006$\u016f\n$\r$\u000e$\u0170\u0003$\u0003$\u0007$",
    "\u0175\n$\f$\u000e$\u0178\u000b$\u0003$\u0003$\u0006$\u017c\n$\r$\u000e",
    "$\u017d\u0005$\u0180\n$\u0003%\u0005%\u0183\n%\u0003%\u0003%\u0003%",
    "\u0003%\u0003%\u0003&\u0003&\u0007&\u018c\n&\f&\u000e&\u018f\u000b&",
    "\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0007\'\u0197\n\'\f\'",
    "\u000e\'\u019a\u000b\'\u0003\'\u0003\'\u0003\'\u0007\'\u019f\n\'\f\'",
    "\u000e\'\u01a2\u000b\'\u0003\'\u0005\'\u01a5\n\'\u0003\'\u0003\'\u0003",
    "\'\u0003(\u0005(\u01ab\n(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003)",
    "\u0006)\u01b3\n)\r)\u000e)\u01b4\u0003*\u0003*\u0005*\u01b9\n*\u0003",
    "*\u0003*\u0003*\u0003*\u0003+\u0005+\u01c0\n+\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0003,\u0003,\u0003,\u0003,\u0007,\u01cb\n,\f,\u000e,\u01ce",
    "\u000b,\u0003,\u0003,\u0003,\u0003,\u0003-\u0003-\u0003-\u0003-\u0005",
    "-\u01d8\n-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0005.\u01e3\n.\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "0\u00030\u00031\u00031\u00031\u00031\u00071\u01f2\n1\f1\u000e1\u01f5",
    "\u000b1\u00031\u00031\u00032\u00032\u00032\u00032\u00032\u00052\u01fe",
    "\n2\u00033\u00033\u00034\u00034\u00035\u00035\u00036\u00036\u00037\u0003",
    "7\u00038\u00038\u00039\u00039\u0003:\u0003:\u0003;\u0003;\u0003<\u0003",
    "<\u0003=\u0003=\u0003>\u0003>\u0003?\u0003?\u0003@\u0003@\u0003A\u0003",
    "A\u0003B\u0003B\u0003C\u0003C\u0003D\u0003D\u0003E\u0003E\u0003F\u0003",
    "F\u0003G\u0003G\u0003H\u0003H\u0003I\u0003I\u0003J\u0003J\u0003K\u0003",
    "K\u0003L\u0003L\u0002\u0002M\u0007\u0003\t\u0004\u000b\u0005\r\u0006",
    "\u000f\u0002\u0011\u0002\u0013\u0007\u0015\b\u0017\t\u0019\n\u001b\u000b",
    "\u001d\f\u001f\r!\u000e#\u000f%\u0010\'\u0011)\u0012+\u0013-\u0014/",
    "\u00151\u00163\u00175\u00187\u00199\u001a;\u001b=\u001c?\u001dA\u001e",
    "C\u001fE G!I\"K#M\u0002O\u0002Q\u0002S\u0002U$W%Y\u0002[&]\u0002_\u0002",
    "a\u0002c\u0002e\u0002g\u0002i\u0002k\u0002m\u0002o\u0002q\u0002s\u0002",
    "u\u0002w\u0002y\u0002{\u0002}\u0002\u007f\u0002\u0081\u0002\u0083\u0002",
    "\u0085\u0002\u0087\u0002\u0089\u0002\u008b\u0002\u008d\u0002\u008f\u0002",
    "\u0091\u0002\u0093\u0002\u0095\u0002\u0097\u0002\u0099\u0002\u009b\u0002",
    "\u0007\u0002\u0003\u0004\u0005\u0006/\u0004\u0002\u000b\u000b\"\"\u0004",
    "\u0002\f\f\u000f\u000f\u0006\u0002\f\f\u000f\u000f$%))\u0004\u00022",
    ";aa\u0003\u00022;\u0007\u0002\u000b\u000b\"\"..002;\u0005\u0002\f\f",
    "\u000f\u000f^^\u0004\u0002$$bb\u0005\u0002\f\f\u000f\u000f$$\n\u0002",
    "$$))^^ddhhppttvv\u0003\u000225\u0003\u000229\u0005\u00022;CHch\u0004",
    "\u0002$$^^\u0006\u0002&&C\\aac|\u0004\u0002\u0002\u0101\ud802\udc01",
    "\u0003\u0002\ud802\udc01\u0003\u0002\udc02\ue001\u0003\u0002\u00eb\u00eb",
    "\u0004\u0002CCcc\u0004\u0002DDdd\u0004\u0002EEee\u0004\u0002FFff\u0004",
    "\u0002GGgg\u0004\u0002HHhh\u0004\u0002IIii\u0004\u0002JJjj\u0004\u0002",
    "KKkk\u0004\u0002LLll\u0004\u0002MMmm\u0004\u0002NNnn\u0004\u0002OOo",
    "o\u0004\u0002PPpp\u0004\u0002QQqq\u0004\u0002RRrr\u0004\u0002SSss\u0004",
    "\u0002TTtt\u0004\u0002UUuu\u0004\u0002VVvv\u0004\u0002WWww\u0004\u0002",
    "XXxx\u0004\u0002YYyy\u0004\u0002ZZzz\u0004\u0002[[{{\u0004\u0002\\\\",
    "||\u0002\u0236\u0002\u0007\u0003\u0002\u0002\u0002\u0002\t\u0003\u0002",
    "\u0002\u0002\u0002\u000b\u0003\u0002\u0002\u0002\u0002\r\u0003\u0002",
    "\u0002\u0002\u0002\u000f\u0003\u0002\u0002\u0002\u0002\u0011\u0003\u0002",
    "\u0002\u0002\u0002\u0013\u0003\u0002\u0002\u0002\u0002\u0015\u0003\u0002",
    "\u0002\u0002\u0003\u0017\u0003\u0002\u0002\u0002\u0003\u0019\u0003\u0002",
    "\u0002\u0002\u0003\u001b\u0003\u0002\u0002\u0002\u0003\u001d\u0003\u0002",
    "\u0002\u0002\u0003\u001f\u0003\u0002\u0002\u0002\u0003!\u0003\u0002",
    "\u0002\u0002\u0003#\u0003\u0002\u0002\u0002\u0003%\u0003\u0002\u0002",
    "\u0002\u0003\'\u0003\u0002\u0002\u0002\u0003)\u0003\u0002\u0002\u0002",
    "\u0003+\u0003\u0002\u0002\u0002\u0003-\u0003\u0002\u0002\u0002\u0003",
    "/\u0003\u0002\u0002\u0002\u00031\u0003\u0002\u0002\u0002\u00033\u0003",
    "\u0002\u0002\u0002\u00035\u0003\u0002\u0002\u0002\u00037\u0003\u0002",
    "\u0002\u0002\u00039\u0003\u0002\u0002\u0002\u0003;\u0003\u0002\u0002",
    "\u0002\u0003=\u0003\u0002\u0002\u0002\u0003?\u0003\u0002\u0002\u0002",
    "\u0003A\u0003\u0002\u0002\u0002\u0003C\u0003\u0002\u0002\u0002\u0003",
    "E\u0003\u0002\u0002\u0002\u0003G\u0003\u0002\u0002\u0002\u0003I\u0003",
    "\u0002\u0002\u0002\u0003K\u0003\u0002\u0002\u0002\u0003M\u0003\u0002",
    "\u0002\u0002\u0003O\u0003\u0002\u0002\u0002\u0004Q\u0003\u0002\u0002",
    "\u0002\u0005S\u0003\u0002\u0002\u0002\u0005U\u0003\u0002\u0002\u0002",
    "\u0006W\u0003\u0002\u0002\u0002\u0006Y\u0003\u0002\u0002\u0002\u0006",
    "[\u0003\u0002\u0002\u0002\u0007\u009e\u0003\u0002\u0002\u0002\t\u00a7",
    "\u0003\u0002\u0002\u0002\u000b\u00bb\u0003\u0002\u0002\u0002\r\u00d1",
    "\u0003\u0002\u0002\u0002\u000f\u00d8\u0003\u0002\u0002\u0002\u0011\u00e1",
    "\u0003\u0002\u0002\u0002\u0013\u00e6\u0003\u0002\u0002\u0002\u0015\u00eb",
    "\u0003\u0002\u0002\u0002\u0017\u00ef\u0003\u0002\u0002\u0002\u0019\u00f8",
    "\u0003\u0002\u0002\u0002\u001b\u0105\u0003\u0002\u0002\u0002\u001d\u010d",
    "\u0003\u0002\u0002\u0002\u001f\u0110\u0003\u0002\u0002\u0002!\u0115",
    "\u0003\u0002\u0002\u0002#\u011a\u0003\u0002\u0002\u0002%\u0120\u0003",
    "\u0002\u0002\u0002\'\u0126\u0003\u0002\u0002\u0002)\u012d\u0003\u0002",
    "\u0002\u0002+\u0133\u0003\u0002\u0002\u0002-\u013b\u0003\u0002\u0002",
    "\u0002/\u013d\u0003\u0002\u0002\u00021\u013f\u0003\u0002\u0002\u0002",
    "3\u0141\u0003\u0002\u0002\u00025\u0143\u0003\u0002\u0002\u00027\u0146",
    "\u0003\u0002\u0002\u00029\u014a\u0003\u0002\u0002\u0002;\u014d\u0003",
    "\u0002\u0002\u0002=\u014f\u0003\u0002\u0002\u0002?\u0151\u0003\u0002",
    "\u0002\u0002A\u0154\u0003\u0002\u0002\u0002C\u0158\u0003\u0002\u0002",
    "\u0002E\u015e\u0003\u0002\u0002\u0002G\u0160\u0003\u0002\u0002\u0002",
    "I\u0169\u0003\u0002\u0002\u0002K\u017f\u0003\u0002\u0002\u0002M\u0182",
    "\u0003\u0002\u0002\u0002O\u0189\u0003\u0002\u0002\u0002Q\u0193\u0003",
    "\u0002\u0002\u0002S\u01aa\u0003\u0002\u0002\u0002U\u01b2\u0003\u0002",
    "\u0002\u0002W\u01b6\u0003\u0002\u0002\u0002Y\u01bf\u0003\u0002\u0002",
    "\u0002[\u01c6\u0003\u0002\u0002\u0002]\u01d7\u0003\u0002\u0002\u0002",
    "_\u01e2\u0003\u0002\u0002\u0002a\u01e4\u0003\u0002\u0002\u0002c\u01eb",
    "\u0003\u0002\u0002\u0002e\u01ed\u0003\u0002\u0002\u0002g\u01fd\u0003",
    "\u0002\u0002\u0002i\u01ff\u0003\u0002\u0002\u0002k\u0201\u0003\u0002",
    "\u0002\u0002m\u0203\u0003\u0002\u0002\u0002o\u0205\u0003\u0002\u0002",
    "\u0002q\u0207\u0003\u0002\u0002\u0002s\u0209\u0003\u0002\u0002\u0002",
    "u\u020b\u0003\u0002\u0002\u0002w\u020d\u0003\u0002\u0002\u0002y\u020f",
    "\u0003\u0002\u0002\u0002{\u0211\u0003\u0002\u0002\u0002}\u0213\u0003",
    "\u0002\u0002\u0002\u007f\u0215\u0003\u0002\u0002\u0002\u0081\u0217\u0003",
    "\u0002\u0002\u0002\u0083\u0219\u0003\u0002\u0002\u0002\u0085\u021b\u0003",
    "\u0002\u0002\u0002\u0087\u021d\u0003\u0002\u0002\u0002\u0089\u021f\u0003",
    "\u0002\u0002\u0002\u008b\u0221\u0003\u0002\u0002\u0002\u008d\u0223\u0003",
    "\u0002\u0002\u0002\u008f\u0225\u0003\u0002\u0002\u0002\u0091\u0227\u0003",
    "\u0002\u0002\u0002\u0093\u0229\u0003\u0002\u0002\u0002\u0095\u022b\u0003",
    "\u0002\u0002\u0002\u0097\u022d\u0003\u0002\u0002\u0002\u0099\u022f\u0003",
    "\u0002\u0002\u0002\u009b\u0231\u0003\u0002\u0002\u0002\u009d\u009f\t",
    "\u0002\u0002\u0002\u009e\u009d\u0003\u0002\u0002\u0002\u009f\u00a0\u0003",
    "\u0002\u0002\u0002\u00a0\u009e\u0003\u0002\u0002\u0002\u00a0\u00a1\u0003",
    "\u0002\u0002\u0002\u00a1\u00a2\u0003\u0002\u0002\u0002\u00a2\u00a3\b",
    "\u0002\u0002\u0002\u00a3\b\u0003\u0002\u0002\u0002\u00a4\u00a6\t\u0002",
    "\u0002\u0002\u00a5\u00a4\u0003\u0002\u0002\u0002\u00a6\u00a9\u0003\u0002",
    "\u0002\u0002\u00a7\u00a5\u0003\u0002\u0002\u0002\u00a7\u00a8\u0003\u0002",
    "\u0002\u0002\u00a8\u00aa\u0003\u0002\u0002\u0002\u00a9\u00a7\u0003\u0002",
    "\u0002\u0002\u00aa\u00ab\u0005y;\u0002\u00ab\u00ac\u0005\u0083@\u0002",
    "\u00ac\u00ad\u0005m5\u0002\u00ad\u00ae\u0005\u007f>\u0002\u00ae\u00af",
    "\u0005\u0091G\u0002\u00af\u00b0\u0005o6\u0002\u00b0\u00b2\u0005q7\u0002",
    "\u00b1\u00b3\t\u0002\u0002\u0002\u00b2\u00b1\u0003\u0002\u0002\u0002",
    "\u00b3\u00b4\u0003\u0002\u0002\u0002\u00b4\u00b2\u0003\u0002\u0002\u0002",
    "\u00b4\u00b5\u0003\u0002\u0002\u0002\u00b5\u00b6\u0003\u0002\u0002\u0002",
    "\u00b6\u00b7\b\u0003\u0003\u0002\u00b7\n\u0003\u0002\u0002\u0002\u00b8",
    "\u00ba\t\u0002\u0002\u0002\u00b9\u00b8\u0003\u0002\u0002\u0002\u00ba",
    "\u00bd\u0003\u0002\u0002\u0002\u00bb\u00b9\u0003\u0002\u0002\u0002\u00bb",
    "\u00bc\u0003\u0002\u0002\u0002\u00bc\u00be\u0003\u0002\u0002\u0002\u00bd",
    "\u00bb\u0003\u0002\u0002\u0002\u00be\u00bf\u0005y;\u0002\u00bf\u00c0",
    "\u0005\u0083@\u0002\u00c0\u00c1\u0005m5\u0002\u00c1\u00c2\u0005\u007f",
    ">\u0002\u00c2\u00c3\u0005\u0091G\u0002\u00c3\u00c4\u0005o6\u0002\u00c4",
    "\u00c5\u0005q7\u0002\u00c5\u00c6\u0005\u0087B\u0002\u00c6\u00c8\u0005",
    "\u0087B\u0002\u00c7\u00c9\t\u0002\u0002\u0002\u00c8\u00c7\u0003\u0002",
    "\u0002\u0002\u00c9\u00ca\u0003\u0002\u0002\u0002\u00ca\u00c8\u0003\u0002",
    "\u0002\u0002\u00ca\u00cb\u0003\u0002\u0002\u0002\u00cb\u00cc\u0003\u0002",
    "\u0002\u0002\u00cc\u00cd\b\u0004\u0003\u0002\u00cd\f\u0003\u0002\u0002",
    "\u0002\u00ce\u00d0\t\u0002\u0002\u0002\u00cf\u00ce\u0003\u0002\u0002",
    "\u0002\u00d0\u00d3\u0003\u0002\u0002\u0002\u00d1\u00cf\u0003\u0002\u0002",
    "\u0002\u00d1\u00d2\u0003\u0002\u0002\u0002\u00d2\u00d4\u0003\u0002\u0002",
    "\u0002\u00d3\u00d1\u0003\u0002\u0002\u0002\u00d4\u00d5\u0007%\u0002",
    "\u0002\u00d5\u00d6\u0003\u0002\u0002\u0002\u00d6\u00d7\b\u0005\u0004",
    "\u0002\u00d7\u000e\u0003\u0002\u0002\u0002\u00d8\u00dc\u0007)\u0002",
    "\u0002\u00d9\u00db\n\u0003\u0002\u0002\u00da\u00d9\u0003\u0002\u0002",
    "\u0002\u00db\u00de\u0003\u0002\u0002\u0002\u00dc\u00da\u0003\u0002\u0002",
    "\u0002\u00dc\u00dd\u0003\u0002\u0002\u0002\u00dd\u00df\u0003\u0002\u0002",
    "\u0002\u00de\u00dc\u0003\u0002\u0002\u0002\u00df\u00e0\b\u0006\u0005",
    "\u0002\u00e0\u0010\u0003\u0002\u0002\u0002\u00e1\u00e2\u0005e1\u0002",
    "\u00e2\u00e3\u0003\u0002\u0002\u0002\u00e3\u00e4\b\u0007\u0005\u0002",
    "\u00e4\u0012\u0003\u0002\u0002\u0002\u00e5\u00e7\n\u0004\u0002\u0002",
    "\u00e6\u00e5\u0003\u0002\u0002\u0002\u00e7\u00e8\u0003\u0002\u0002\u0002",
    "\u00e8\u00e6\u0003\u0002\u0002\u0002\u00e8\u00e9\u0003\u0002\u0002\u0002",
    "\u00e9\u0014\u0003\u0002\u0002\u0002\u00ea\u00ec\u0007\u000f\u0002\u0002",
    "\u00eb\u00ea\u0003\u0002\u0002\u0002\u00eb\u00ec\u0003\u0002\u0002\u0002",
    "\u00ec\u00ed\u0003\u0002\u0002\u0002\u00ed\u00ee\u0007\f\u0002\u0002",
    "\u00ee\u0016\u0003\u0002\u0002\u0002\u00ef\u00f0\u0005\u0087B\u0002",
    "\u00f0\u00f1\u0005\u008bD\u0002\u00f1\u00f2\u0005i3\u0002\u00f2\u00f3",
    "\u0005u9\u0002\u00f3\u00f4\u0005\u0081?\u0002\u00f4\u00f5\u0005i3\u0002",
    "\u00f5\u00f6\u0003\u0002\u0002\u0002\u00f6\u00f7\b\n\u0006\u0002\u00f7",
    "\u0018\u0003\u0002\u0002\u0002\u00f8\u00f9\u0005o6\u0002\u00f9\u00fa",
    "\u0005q7\u0002\u00fa\u00fb\u0005s8\u0002\u00fb\u00fc\u0005y;\u0002\u00fc",
    "\u00fd\u0005\u0083@\u0002\u00fd\u00ff\u0005q7\u0002\u00fe\u0100\t\u0002",
    "\u0002\u0002\u00ff\u00fe\u0003\u0002\u0002\u0002\u0100\u0101\u0003\u0002",
    "\u0002\u0002\u0101\u00ff\u0003\u0002\u0002\u0002\u0101\u0102\u0003\u0002",
    "\u0002\u0002\u0102\u0103\u0003\u0002\u0002\u0002\u0103\u0104\b\u000b",
    "\u0007\u0002\u0104\u001a\u0003\u0002\u0002\u0002\u0105\u0106\u0005o",
    "6\u0002\u0106\u0107\u0005q7\u0002\u0107\u0108\u0005s8\u0002\u0108\u0109",
    "\u0005y;\u0002\u0109\u010a\u0005\u0083@\u0002\u010a\u010b\u0005q7\u0002",
    "\u010b\u010c\u0005o6\u0002\u010c\u001c\u0003\u0002\u0002\u0002\u010d",
    "\u010e\u0005y;\u0002\u010e\u010f\u0005s8\u0002\u010f\u001e\u0003\u0002",
    "\u0002\u0002\u0110\u0111\u0005q7\u0002\u0111\u0112\u0005\u007f>\u0002",
    "\u0112\u0113\u0005y;\u0002\u0113\u0114\u0005s8\u0002\u0114 \u0003\u0002",
    "\u0002\u0002\u0115\u0116\u0005q7\u0002\u0116\u0117\u0005\u007f>\u0002",
    "\u0117\u0118\u0005\u008dE\u0002\u0118\u0119\u0005q7\u0002\u0119\"\u0003",
    "\u0002\u0002\u0002\u011a\u011b\u0005\u0091G\u0002\u011b\u011c\u0005",
    "\u0083@\u0002\u011c\u011d\u0005o6\u0002\u011d\u011e\u0005q7\u0002\u011e",
    "\u011f\u0005s8\u0002\u011f$\u0003\u0002\u0002\u0002\u0120\u0121\u0005",
    "y;\u0002\u0121\u0122\u0005s8\u0002\u0122\u0123\u0005o6\u0002\u0123\u0124",
    "\u0005q7\u0002\u0124\u0125\u0005s8\u0002\u0125&\u0003\u0002\u0002\u0002",
    "\u0126\u0127\u0005y;\u0002\u0127\u0128\u0005s8\u0002\u0128\u0129\u0005",
    "\u0083@\u0002\u0129\u012a\u0005o6\u0002\u012a\u012b\u0005q7\u0002\u012b",
    "\u012c\u0005s8\u0002\u012c(\u0003\u0002\u0002\u0002\u012d\u012e\u0005",
    "q7\u0002\u012e\u012f\u0005\u0083@\u0002\u012f\u0130\u0005o6\u0002\u0130",
    "\u0131\u0005y;\u0002\u0131\u0132\u0005s8\u0002\u0132*\u0003\u0002\u0002",
    "\u0002\u0133\u0134\u0005q7\u0002\u0134\u0135\u0005\u008bD\u0002\u0135",
    "\u0136\u0005\u008bD\u0002\u0136\u0137\u0005\u0085A\u0002\u0137\u0138",
    "\u0005\u008bD\u0002\u0138\u0139\u0003\u0002\u0002\u0002\u0139\u013a",
    "\b\u0014\u0006\u0002\u013a,\u0003\u0002\u0002\u0002\u013b\u013c\u0007",
    "#\u0002\u0002\u013c.\u0003\u0002\u0002\u0002\u013d\u013e\u0007*\u0002",
    "\u0002\u013e0\u0003\u0002\u0002\u0002\u013f\u0140\u0007+\u0002\u0002",
    "\u01402\u0003\u0002\u0002\u0002\u0141\u0142\u0007?\u0002\u0002\u0142",
    "4\u0003\u0002\u0002\u0002\u0143\u0144\u0007>\u0002\u0002\u0144\u0145",
    "\u0007@\u0002\u0002\u01456\u0003\u0002\u0002\u0002\u0146\u0147\u0005",
    "i3\u0002\u0147\u0148\u0005\u0083@\u0002\u0148\u0149\u0005o6\u0002\u0149",
    "8\u0003\u0002\u0002\u0002\u014a\u014b\u0005\u0085A\u0002\u014b\u014c",
    "\u0005\u008bD\u0002\u014c:\u0003\u0002\u0002\u0002\u014d\u014e\u0007",
    ">\u0002\u0002\u014e<\u0003\u0002\u0002\u0002\u014f\u0150\u0007@\u0002",
    "\u0002\u0150>\u0003\u0002\u0002\u0002\u0151\u0152\u0007>\u0002\u0002",
    "\u0152\u0153\u0007?\u0002\u0002\u0153@\u0003\u0002\u0002\u0002\u0154",
    "\u0155\u0007@\u0002\u0002\u0155\u0156\u0007?\u0002\u0002\u0156B\u0003",
    "\u0002\u0002\u0002\u0157\u0159\t\u0002\u0002\u0002\u0158\u0157\u0003",
    "\u0002\u0002\u0002\u0159\u015a\u0003\u0002\u0002\u0002\u015a\u0158\u0003",
    "\u0002\u0002\u0002\u015a\u015b\u0003\u0002\u0002\u0002\u015b\u015c\u0003",
    "\u0002\u0002\u0002\u015c\u015d\b \u0002\u0002\u015dD\u0003\u0002\u0002",
    "\u0002\u015e\u015f\u0005e1\u0002\u015fF\u0003\u0002\u0002\u0002\u0160",
    "\u0165\u0005g2\u0002\u0161\u0164\u0005g2\u0002\u0162\u0164\t\u0005\u0002",
    "\u0002\u0163\u0161\u0003\u0002\u0002\u0002\u0163\u0162\u0003\u0002\u0002",
    "\u0002\u0164\u0167\u0003\u0002\u0002\u0002\u0165\u0163\u0003\u0002\u0002",
    "\u0002\u0165\u0166\u0003\u0002\u0002\u0002\u0166H\u0003\u0002\u0002",
    "\u0002\u0167\u0165\u0003\u0002\u0002\u0002\u0168\u016a\t\u0006\u0002",
    "\u0002\u0169\u0168\u0003\u0002\u0002\u0002\u016a\u016b\u0003\u0002\u0002",
    "\u0002\u016b\u0169\u0003\u0002\u0002\u0002\u016b\u016c\u0003\u0002\u0002",
    "\u0002\u016cJ\u0003\u0002\u0002\u0002\u016d\u016f\t\u0006\u0002\u0002",
    "\u016e\u016d\u0003\u0002\u0002\u0002\u016f\u0170\u0003\u0002\u0002\u0002",
    "\u0170\u016e\u0003\u0002\u0002\u0002\u0170\u0171\u0003\u0002\u0002\u0002",
    "\u0171\u0172\u0003\u0002\u0002\u0002\u0172\u0176\u00070\u0002\u0002",
    "\u0173\u0175\t\u0006\u0002\u0002\u0174\u0173\u0003\u0002\u0002\u0002",
    "\u0175\u0178\u0003\u0002\u0002\u0002\u0176\u0174\u0003\u0002\u0002\u0002",
    "\u0176\u0177\u0003\u0002\u0002\u0002\u0177\u0180\u0003\u0002\u0002\u0002",
    "\u0178\u0176\u0003\u0002\u0002\u0002\u0179\u017b\u00070\u0002\u0002",
    "\u017a\u017c\t\u0006\u0002\u0002\u017b\u017a\u0003\u0002\u0002\u0002",
    "\u017c\u017d\u0003\u0002\u0002\u0002\u017d\u017b\u0003\u0002\u0002\u0002",
    "\u017d\u017e\u0003\u0002\u0002\u0002\u017e\u0180\u0003\u0002\u0002\u0002",
    "\u017f\u016e\u0003\u0002\u0002\u0002\u017f\u0179\u0003\u0002\u0002\u0002",
    "\u0180L\u0003\u0002\u0002\u0002\u0181\u0183\u0007\u000f\u0002\u0002",
    "\u0182\u0181\u0003\u0002\u0002\u0002\u0182\u0183\u0003\u0002\u0002\u0002",
    "\u0183\u0184\u0003\u0002\u0002\u0002\u0184\u0185\u0007\f\u0002\u0002",
    "\u0185\u0186\u0003\u0002\u0002\u0002\u0186\u0187\b%\b\u0002\u0187\u0188",
    "\b%\t\u0002\u0188N\u0003\u0002\u0002\u0002\u0189\u018d\u0007)\u0002",
    "\u0002\u018a\u018c\n\u0003\u0002\u0002\u018b\u018a\u0003\u0002\u0002",
    "\u0002\u018c\u018f\u0003\u0002\u0002\u0002\u018d\u018b\u0003\u0002\u0002",
    "\u0002\u018d\u018e\u0003\u0002\u0002\u0002\u018e\u0190\u0003\u0002\u0002",
    "\u0002\u018f\u018d\u0003\u0002\u0002\u0002\u0190\u0191\b&\u0005\u0002",
    "\u0191\u0192\b&\t\u0002\u0192P\u0003\u0002\u0002\u0002\u0193\u0198\u0005",
    "g2\u0002\u0194\u0197\u0005g2\u0002\u0195\u0197\t\u0006\u0002\u0002\u0196",
    "\u0194\u0003\u0002\u0002\u0002\u0196\u0195\u0003\u0002\u0002\u0002\u0197",
    "\u019a\u0003\u0002\u0002\u0002\u0198\u0196\u0003\u0002\u0002\u0002\u0198",
    "\u0199\u0003\u0002\u0002\u0002\u0199\u01a4\u0003\u0002\u0002\u0002\u019a",
    "\u0198\u0003\u0002\u0002\u0002\u019b\u01a0\u0007*\u0002\u0002\u019c",
    "\u019f\u0005g2\u0002\u019d\u019f\t\u0007\u0002\u0002\u019e\u019c\u0003",
    "\u0002\u0002\u0002\u019e\u019d\u0003\u0002\u0002\u0002\u019f\u01a2\u0003",
    "\u0002\u0002\u0002\u01a0\u019e\u0003\u0002\u0002\u0002\u01a0\u01a1\u0003",
    "\u0002\u0002\u0002\u01a1\u01a3\u0003\u0002\u0002\u0002\u01a2\u01a0\u0003",
    "\u0002\u0002\u0002\u01a3\u01a5\u0007+\u0002\u0002\u01a4\u019b\u0003",
    "\u0002\u0002\u0002\u01a4\u01a5\u0003\u0002\u0002\u0002\u01a5\u01a6\u0003",
    "\u0002\u0002\u0002\u01a6\u01a7\b\'\n\u0002\u01a7\u01a8\b\'\u0006\u0002",
    "\u01a8R\u0003\u0002\u0002\u0002\u01a9\u01ab\u0007\u000f\u0002\u0002",
    "\u01aa\u01a9\u0003\u0002\u0002\u0002\u01aa\u01ab\u0003\u0002\u0002\u0002",
    "\u01ab\u01ac\u0003\u0002\u0002\u0002\u01ac\u01ad\u0007\f\u0002\u0002",
    "\u01ad\u01ae\u0003\u0002\u0002\u0002\u01ae\u01af\b(\b\u0002\u01af\u01b0",
    "\b(\t\u0002\u01b0T\u0003\u0002\u0002\u0002\u01b1\u01b3\n\b\u0002\u0002",
    "\u01b2\u01b1\u0003\u0002\u0002\u0002\u01b3\u01b4\u0003\u0002\u0002\u0002",
    "\u01b4\u01b2\u0003\u0002\u0002\u0002\u01b4\u01b5\u0003\u0002\u0002\u0002",
    "\u01b5V\u0003\u0002\u0002\u0002\u01b6\u01b8\u0007^\u0002\u0002\u01b7",
    "\u01b9\u0007\u000f\u0002\u0002\u01b8\u01b7\u0003\u0002\u0002\u0002\u01b8",
    "\u01b9\u0003\u0002\u0002\u0002\u01b9\u01ba\u0003\u0002\u0002\u0002\u01ba",
    "\u01bb\u0007\f\u0002\u0002\u01bb\u01bc\u0003\u0002\u0002\u0002\u01bc",
    "\u01bd\b*\u0002\u0002\u01bdX\u0003\u0002\u0002\u0002\u01be\u01c0\u0007",
    "\u000f\u0002\u0002\u01bf\u01be\u0003\u0002\u0002\u0002\u01bf\u01c0\u0003",
    "\u0002\u0002\u0002\u01c0\u01c1\u0003\u0002\u0002\u0002\u01c1\u01c2\u0007",
    "\f\u0002\u0002\u01c2\u01c3\u0003\u0002\u0002\u0002\u01c3\u01c4\b+\b",
    "\u0002\u01c4\u01c5\b+\t\u0002\u01c5Z\u0003\u0002\u0002\u0002\u01c6\u01cc",
    "\t\t\u0002\u0002\u01c7\u01cb\n\n\u0002\u0002\u01c8\u01c9\u0007$\u0002",
    "\u0002\u01c9\u01cb\u0007$\u0002\u0002\u01ca\u01c7\u0003\u0002\u0002",
    "\u0002\u01ca\u01c8\u0003\u0002\u0002\u0002\u01cb\u01ce\u0003\u0002\u0002",
    "\u0002\u01cc\u01ca\u0003\u0002\u0002\u0002\u01cc\u01cd\u0003\u0002\u0002",
    "\u0002\u01cd\u01cf\u0003\u0002\u0002\u0002\u01ce\u01cc\u0003\u0002\u0002",
    "\u0002\u01cf\u01d0\t\t\u0002\u0002\u01d0\u01d1\u0003\u0002\u0002\u0002",
    "\u01d1\u01d2\b,\t\u0002\u01d2\\\u0003\u0002\u0002\u0002\u01d3\u01d4",
    "\u0007^\u0002\u0002\u01d4\u01d8\t\u000b\u0002\u0002\u01d5\u01d8\u0005",
    "_.\u0002\u01d6\u01d8\u0005a/\u0002\u01d7\u01d3\u0003\u0002\u0002\u0002",
    "\u01d7\u01d5\u0003\u0002\u0002\u0002\u01d7\u01d6\u0003\u0002\u0002\u0002",
    "\u01d8^\u0003\u0002\u0002\u0002\u01d9\u01da\u0007^\u0002\u0002\u01da",
    "\u01db\t\f\u0002\u0002\u01db\u01dc\t\r\u0002\u0002\u01dc\u01e3\t\r\u0002",
    "\u0002\u01dd\u01de\u0007^\u0002\u0002\u01de\u01df\t\r\u0002\u0002\u01df",
    "\u01e3\t\r\u0002\u0002\u01e0\u01e1\u0007^\u0002\u0002\u01e1\u01e3\t",
    "\r\u0002\u0002\u01e2\u01d9\u0003\u0002\u0002\u0002\u01e2\u01dd\u0003",
    "\u0002\u0002\u0002\u01e2\u01e0\u0003\u0002\u0002\u0002\u01e3`\u0003",
    "\u0002\u0002\u0002\u01e4\u01e5\u0007^\u0002\u0002\u01e5\u01e6\u0007",
    "w\u0002\u0002\u01e6\u01e7\u0005c0\u0002\u01e7\u01e8\u0005c0\u0002\u01e8",
    "\u01e9\u0005c0\u0002\u01e9\u01ea\u0005c0\u0002\u01eab\u0003\u0002\u0002",
    "\u0002\u01eb\u01ec\t\u000e\u0002\u0002\u01ecd\u0003\u0002\u0002\u0002",
    "\u01ed\u01f3\u0007$\u0002\u0002\u01ee\u01f2\n\u000f\u0002\u0002\u01ef",
    "\u01f0\u0007^\u0002\u0002\u01f0\u01f2\u000b\u0002\u0002\u0002\u01f1",
    "\u01ee\u0003\u0002\u0002\u0002\u01f1\u01ef\u0003\u0002\u0002\u0002\u01f2",
    "\u01f5\u0003\u0002\u0002\u0002\u01f3\u01f1\u0003\u0002\u0002\u0002\u01f3",
    "\u01f4\u0003\u0002\u0002\u0002\u01f4\u01f6\u0003\u0002\u0002\u0002\u01f5",
    "\u01f3\u0003\u0002\u0002\u0002\u01f6\u01f7\u0007$\u0002\u0002\u01f7",
    "f\u0003\u0002\u0002\u0002\u01f8\u01fe\t\u0010\u0002\u0002\u01f9\u01fe",
    "\n\u0011\u0002\u0002\u01fa\u01fb\t\u0012\u0002\u0002\u01fb\u01fe\t\u0013",
    "\u0002\u0002\u01fc\u01fe\t\u0014\u0002\u0002\u01fd\u01f8\u0003\u0002",
    "\u0002\u0002\u01fd\u01f9\u0003\u0002\u0002\u0002\u01fd\u01fa\u0003\u0002",
    "\u0002\u0002\u01fd\u01fc\u0003\u0002\u0002\u0002\u01feh\u0003\u0002",
    "\u0002\u0002\u01ff\u0200\t\u0015\u0002\u0002\u0200j\u0003\u0002\u0002",
    "\u0002\u0201\u0202\t\u0016\u0002\u0002\u0202l\u0003\u0002\u0002\u0002",
    "\u0203\u0204\t\u0017\u0002\u0002\u0204n\u0003\u0002\u0002\u0002\u0205",
    "\u0206\t\u0018\u0002\u0002\u0206p\u0003\u0002\u0002\u0002\u0207\u0208",
    "\t\u0019\u0002\u0002\u0208r\u0003\u0002\u0002\u0002\u0209\u020a\t\u001a",
    "\u0002\u0002\u020at\u0003\u0002\u0002\u0002\u020b\u020c\t\u001b\u0002",
    "\u0002\u020cv\u0003\u0002\u0002\u0002\u020d\u020e\t\u001c\u0002\u0002",
    "\u020ex\u0003\u0002\u0002\u0002\u020f\u0210\t\u001d\u0002\u0002\u0210",
    "z\u0003\u0002\u0002\u0002\u0211\u0212\t\u001e\u0002\u0002\u0212|\u0003",
    "\u0002\u0002\u0002\u0213\u0214\t\u001f\u0002\u0002\u0214~\u0003\u0002",
    "\u0002\u0002\u0215\u0216\t \u0002\u0002\u0216\u0080\u0003\u0002\u0002",
    "\u0002\u0217\u0218\t!\u0002\u0002\u0218\u0082\u0003\u0002\u0002\u0002",
    "\u0219\u021a\t\"\u0002\u0002\u021a\u0084\u0003\u0002\u0002\u0002\u021b",
    "\u021c\t#\u0002\u0002\u021c\u0086\u0003\u0002\u0002\u0002\u021d\u021e",
    "\t$\u0002\u0002\u021e\u0088\u0003\u0002\u0002\u0002\u021f\u0220\t%\u0002",
    "\u0002\u0220\u008a\u0003\u0002\u0002\u0002\u0221\u0222\t&\u0002\u0002",
    "\u0222\u008c\u0003\u0002\u0002\u0002\u0223\u0224\t\'\u0002\u0002\u0224",
    "\u008e\u0003\u0002\u0002\u0002\u0225\u0226\t(\u0002\u0002\u0226\u0090",
    "\u0003\u0002\u0002\u0002\u0227\u0228\t)\u0002\u0002\u0228\u0092\u0003",
    "\u0002\u0002\u0002\u0229\u022a\t*\u0002\u0002\u022a\u0094\u0003\u0002",
    "\u0002\u0002\u022b\u022c\t+\u0002\u0002\u022c\u0096\u0003\u0002\u0002",
    "\u0002\u022d\u022e\t,\u0002\u0002\u022e\u0098\u0003\u0002\u0002\u0002",
    "\u022f\u0230\t-\u0002\u0002\u0230\u009a\u0003\u0002\u0002\u0002\u0231",
    "\u0232\t.\u0002\u0002\u0232\u009c\u0003\u0002\u0002\u0002+\u0002\u0003",
    "\u0004\u0005\u0006\u00a0\u00a7\u00b4\u00bb\u00ca\u00d1\u00dc\u00e8\u00eb",
    "\u0101\u015a\u0163\u0165\u016b\u0170\u0176\u017d\u017f\u0182\u018d\u0196",
    "\u0198\u019e\u01a0\u01a4\u01aa\u01b4\u01b8\u01bf\u01ca\u01cc\u01d7\u01e2",
    "\u01f1\u01f3\u01fd\u000b\u0002\u0003\u0002\u0004\u0006\u0002\u0004\u0003",
    "\u0002\t\u0007\u0002\u0004\u0005\u0002\u0004\u0004\u0002\t\b\u0002\u0004",
    "\u0002\u0002\t!\u0002"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

function TibboBasicPreprocessorLexer(input) {
	antlr4.Lexer.call(this, input);
    this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    return this;
}

TibboBasicPreprocessorLexer.prototype = Object.create(antlr4.Lexer.prototype);
TibboBasicPreprocessorLexer.prototype.constructor = TibboBasicPreprocessorLexer;

Object.defineProperty(TibboBasicPreprocessorLexer.prototype, "atn", {
        get : function() {
                return atn;
        }
});

TibboBasicPreprocessorLexer.EOF = antlr4.Token.EOF;
TibboBasicPreprocessorLexer.WS = 1;
TibboBasicPreprocessorLexer.INCLUDE = 2;
TibboBasicPreprocessorLexer.INCLUDEPP = 3;
TibboBasicPreprocessorLexer.SHARP = 4;
TibboBasicPreprocessorLexer.CODE = 5;
TibboBasicPreprocessorLexer.NEW_LINE = 6;
TibboBasicPreprocessorLexer.PRAGMA = 7;
TibboBasicPreprocessorLexer.DEFINE = 8;
TibboBasicPreprocessorLexer.DEFINED = 9;
TibboBasicPreprocessorLexer.IF = 10;
TibboBasicPreprocessorLexer.ELIF = 11;
TibboBasicPreprocessorLexer.ELSE = 12;
TibboBasicPreprocessorLexer.UNDEF = 13;
TibboBasicPreprocessorLexer.IFDEF = 14;
TibboBasicPreprocessorLexer.IFNDEF = 15;
TibboBasicPreprocessorLexer.ENDIF = 16;
TibboBasicPreprocessorLexer.ERROR = 17;
TibboBasicPreprocessorLexer.BANG = 18;
TibboBasicPreprocessorLexer.LPAREN = 19;
TibboBasicPreprocessorLexer.RPAREN = 20;
TibboBasicPreprocessorLexer.EQUAL = 21;
TibboBasicPreprocessorLexer.NOTEQUAL = 22;
TibboBasicPreprocessorLexer.AND = 23;
TibboBasicPreprocessorLexer.OR = 24;
TibboBasicPreprocessorLexer.LT = 25;
TibboBasicPreprocessorLexer.GT = 26;
TibboBasicPreprocessorLexer.LE = 27;
TibboBasicPreprocessorLexer.GE = 28;
TibboBasicPreprocessorLexer.DIRECTIVE_WHITESPACES = 29;
TibboBasicPreprocessorLexer.DIRECTIVE_STRING = 30;
TibboBasicPreprocessorLexer.CONDITIONAL_SYMBOL = 31;
TibboBasicPreprocessorLexer.DECIMAL_LITERAL = 32;
TibboBasicPreprocessorLexer.FLOAT = 33;
TibboBasicPreprocessorLexer.TEXT = 34;
TibboBasicPreprocessorLexer.INCLUDE_DIRECITVE_TEXT_NEW_LINE = 35;
TibboBasicPreprocessorLexer.INCLUDE_FILE = 36;

TibboBasicPreprocessorLexer.COMMENTS_CHANNEL = 2;

TibboBasicPreprocessorLexer.DIRECTIVE_MODE = 1;
TibboBasicPreprocessorLexer.DIRECTIVE_DEFINE = 2;
TibboBasicPreprocessorLexer.DIRECTIVE_TEXT = 3;
TibboBasicPreprocessorLexer.DIRECTIVE_INCLUDE_TEXT = 4;

TibboBasicPreprocessorLexer.prototype.channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN", 
                                                                                          "COMMENTS_CHANNEL" ];

TibboBasicPreprocessorLexer.prototype.modeNames = [ "DEFAULT_MODE", "DIRECTIVE_MODE", 
                                                    "DIRECTIVE_DEFINE", 
                                                    "DIRECTIVE_TEXT", "DIRECTIVE_INCLUDE_TEXT" ];

TibboBasicPreprocessorLexer.prototype.literalNames = [ null, null, null, 
                                                       null, null, null, 
                                                       null, null, null, 
                                                       null, null, null, 
                                                       null, null, null, 
                                                       null, null, null, 
                                                       "'!'", "'('", "')'", 
                                                       "'='", "'<>'", null, 
                                                       null, "'<'", "'>'", 
                                                       "'<='", "'>='" ];

TibboBasicPreprocessorLexer.prototype.symbolicNames = [ null, "WS", "INCLUDE", 
                                                        "INCLUDEPP", "SHARP", 
                                                        "CODE", "NEW_LINE", 
                                                        "PRAGMA", "DEFINE", 
                                                        "DEFINED", "IF", 
                                                        "ELIF", "ELSE", 
                                                        "UNDEF", "IFDEF", 
                                                        "IFNDEF", "ENDIF", 
                                                        "ERROR", "BANG", 
                                                        "LPAREN", "RPAREN", 
                                                        "EQUAL", "NOTEQUAL", 
                                                        "AND", "OR", "LT", 
                                                        "GT", "LE", "GE", 
                                                        "DIRECTIVE_WHITESPACES", 
                                                        "DIRECTIVE_STRING", 
                                                        "CONDITIONAL_SYMBOL", 
                                                        "DECIMAL_LITERAL", 
                                                        "FLOAT", "TEXT", 
                                                        "INCLUDE_DIRECITVE_TEXT_NEW_LINE", 
                                                        "INCLUDE_FILE" ];

TibboBasicPreprocessorLexer.prototype.ruleNames = [ "WS", "INCLUDE", "INCLUDEPP", 
                                                    "SHARP", "COMMENT", 
                                                    "STRING", "CODE", "NEW_LINE", 
                                                    "PRAGMA", "DEFINE", 
                                                    "DEFINED", "IF", "ELIF", 
                                                    "ELSE", "UNDEF", "IFDEF", 
                                                    "IFNDEF", "ENDIF", "ERROR", 
                                                    "BANG", "LPAREN", "RPAREN", 
                                                    "EQUAL", "NOTEQUAL", 
                                                    "AND", "OR", "LT", "GT", 
                                                    "LE", "GE", "DIRECTIVE_WHITESPACES", 
                                                    "DIRECTIVE_STRING", 
                                                    "CONDITIONAL_SYMBOL", 
                                                    "DECIMAL_LITERAL", "FLOAT", 
                                                    "DIRECTIVE_NEW_LINE", 
                                                    "DIRECTIVE_COMMENT", 
                                                    "DIRECTIVE_DEFINE_CONDITIONAL_SYMBOL", 
                                                    "TEXT_NEW_LINE", "TEXT", 
                                                    "INCLUDE_DIRECITVE_TEXT_NEW_LINE", 
                                                    "INCLUDE_TEXT_NEW_LINE", 
                                                    "INCLUDE_FILE", "EscapeSequence", 
                                                    "OctalEscape", "UnicodeEscape", 
                                                    "HexDigit", "StringFragment", 
                                                    "LETTER", "A", "B", 
                                                    "C", "D", "E", "F", 
                                                    "G", "H", "I", "J", 
                                                    "K", "L", "M", "N", 
                                                    "O", "P", "Q", "R", 
                                                    "S", "T", "U", "V", 
                                                    "W", "X", "Y", "Z" ];

TibboBasicPreprocessorLexer.prototype.grammarFileName = "TibboBasicPreprocessorLexer.g4";


exports.TibboBasicPreprocessorLexer = TibboBasicPreprocessorLexer;



/***/ }),

/***/ "./language/TibboBasic/lib/TibboBasicPreprocessorParser.js":
/*!*****************************************************************!*\
  !*** ./language/TibboBasic/lib/TibboBasicPreprocessorParser.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Generated from /Users/jimmyhu/Projects/TIDEDesktopService/language/TibboBasic/TibboBasicPreprocessorParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = __webpack_require__(/*! antlr4/index */ "./node_modules/antlr4/index.js");
var TibboBasicPreprocessorParserListener = __webpack_require__(/*! ./TibboBasicPreprocessorParserListener */ "./language/TibboBasic/lib/TibboBasicPreprocessorParserListener.js").TibboBasicPreprocessorParserListener;
var TibboBasicPreprocessorParserVisitor = __webpack_require__(/*! ./TibboBasicPreprocessorParserVisitor */ "./language/TibboBasic/lib/TibboBasicPreprocessorParserVisitor.js").TibboBasicPreprocessorParserVisitor;

var grammarFileName = "TibboBasicPreprocessorParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003&}\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t\u0004",
    "\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004\b",
    "\t\b\u0004\t\t\t\u0004\n\t\n\u0003\u0002\u0007\u0002\u0016\n\u0002\f",
    "\u0002\u000e\u0002\u0019\u000b\u0002\u0003\u0002\u0007\u0002\u001c\n",
    "\u0002\f\u0002\u000e\u0002\u001f\u000b\u0002\u0003\u0002\u0005\u0002",
    "\"\n\u0002\u0003\u0003\u0007\u0003%\n\u0003\f\u0003\u000e\u0003(\u000b",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0005",
    "\u0004/\n\u0004\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0005\u0006P\n\u0006\u0005\u0006R\n\u0006",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\b\u0006\bX\n\b\r\b\u000e",
    "\bY\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0005\td\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0005\tn\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0007\tv\n\t\f\t\u000e\ty\u000b\t\u0003\n\u0003\n\u0003\n\u0002\u0003",
    "\u0010\u000b\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0002\u0006\u0003",
    "\u0002\u0004\u0005\u0003\u0002\u0017\u0018\u0003\u0002\u001b\u001e\u0003",
    "\u0002 \"\u0002\u008b\u0002\u0017\u0003\u0002\u0002\u0002\u0004&\u0003",
    "\u0002\u0002\u0002\u0006.\u0003\u0002\u0002\u0002\b0\u0003\u0002\u0002",
    "\u0002\nQ\u0003\u0002\u0002\u0002\fS\u0003\u0002\u0002\u0002\u000eW",
    "\u0003\u0002\u0002\u0002\u0010m\u0003\u0002\u0002\u0002\u0012z\u0003",
    "\u0002\u0002\u0002\u0014\u0016\u0005\u0004\u0003\u0002\u0015\u0014\u0003",
    "\u0002\u0002\u0002\u0016\u0019\u0003\u0002\u0002\u0002\u0017\u0015\u0003",
    "\u0002\u0002\u0002\u0017\u0018\u0003\u0002\u0002\u0002\u0018!\u0003",
    "\u0002\u0002\u0002\u0019\u0017\u0003\u0002\u0002\u0002\u001a\u001c\u0007",
    "\b\u0002\u0002\u001b\u001a\u0003\u0002\u0002\u0002\u001c\u001f\u0003",
    "\u0002\u0002\u0002\u001d\u001b\u0003\u0002\u0002\u0002\u001d\u001e\u0003",
    "\u0002\u0002\u0002\u001e\"\u0003\u0002\u0002\u0002\u001f\u001d\u0003",
    "\u0002\u0002\u0002 \"\u0007\u0002\u0002\u0003!\u001d\u0003\u0002\u0002",
    "\u0002! \u0003\u0002\u0002\u0002\"\u0003\u0003\u0002\u0002\u0002#%\u0007",
    "\b\u0002\u0002$#\u0003\u0002\u0002\u0002%(\u0003\u0002\u0002\u0002&",
    "$\u0003\u0002\u0002\u0002&\'\u0003\u0002\u0002\u0002\')\u0003\u0002",
    "\u0002\u0002(&\u0003\u0002\u0002\u0002)*\u0005\u0006\u0004\u0002*\u0005",
    "\u0003\u0002\u0002\u0002+/\u0005\f\u0007\u0002,/\u0005\n\u0006\u0002",
    "-/\u0005\b\u0005\u0002.+\u0003\u0002\u0002\u0002.,\u0003\u0002\u0002",
    "\u0002.-\u0003\u0002\u0002\u0002/\u0007\u0003\u0002\u0002\u000201\u0007",
    "\u0007\u0002\u00021\t\u0003\u0002\u0002\u000223\u0007\u0006\u0002\u0002",
    "34\u0007\f\u0002\u00024R\u0005\u0010\t\u000256\u0007\u0006\u0002\u0002",
    "67\u0007\r\u0002\u00027R\u0005\u0010\t\u000289\u0007\u0006\u0002\u0002",
    "9R\u0007\u000e\u0002\u0002:;\u0007\u0006\u0002\u0002;R\u0007\u0012\u0002",
    "\u0002<=\u0007\u0006\u0002\u0002=>\u0007\u0010\u0002\u0002>R\u0007!",
    "\u0002\u0002?@\u0007\u0006\u0002\u0002@A\u0007\u0011\u0002\u0002AR\u0007",
    "!\u0002\u0002BC\u0007\u0006\u0002\u0002CD\u0007\u000f\u0002\u0002DR",
    "\u0007!\u0002\u0002EF\u0007\u0006\u0002\u0002FG\u0007\t\u0002\u0002",
    "GR\u0005\u000e\b\u0002HI\u0007\u0006\u0002\u0002IJ\u0007\u0013\u0002",
    "\u0002JR\u0005\u000e\b\u0002KL\u0007\u0006\u0002\u0002LM\u0007\n\u0002",
    "\u0002MO\u0007!\u0002\u0002NP\u0005\u000e\b\u0002ON\u0003\u0002\u0002",
    "\u0002OP\u0003\u0002\u0002\u0002PR\u0003\u0002\u0002\u0002Q2\u0003\u0002",
    "\u0002\u0002Q5\u0003\u0002\u0002\u0002Q8\u0003\u0002\u0002\u0002Q:\u0003",
    "\u0002\u0002\u0002Q<\u0003\u0002\u0002\u0002Q?\u0003\u0002\u0002\u0002",
    "QB\u0003\u0002\u0002\u0002QE\u0003\u0002\u0002\u0002QH\u0003\u0002\u0002",
    "\u0002QK\u0003\u0002\u0002\u0002R\u000b\u0003\u0002\u0002\u0002ST\t",
    "\u0002\u0002\u0002TU\u0007&\u0002\u0002U\r\u0003\u0002\u0002\u0002V",
    "X\u0007$\u0002\u0002WV\u0003\u0002\u0002\u0002XY\u0003\u0002\u0002\u0002",
    "YW\u0003\u0002\u0002\u0002YZ\u0003\u0002\u0002\u0002Z\u000f\u0003\u0002",
    "\u0002\u0002[\\\b\t\u0001\u0002\\n\u0007\"\u0002\u0002]n\u0007 \u0002",
    "\u0002^c\u0007!\u0002\u0002_`\u0007\u0015\u0002\u0002`a\u0005\u0010",
    "\t\u0002ab\u0007\u0016\u0002\u0002bd\u0003\u0002\u0002\u0002c_\u0003",
    "\u0002\u0002\u0002cd\u0003\u0002\u0002\u0002dn\u0003\u0002\u0002\u0002",
    "ef\u0005\u0012\n\u0002fg\t\u0003\u0002\u0002gh\u0005\u0012\n\u0002h",
    "n\u0003\u0002\u0002\u0002ij\u0005\u0012\n\u0002jk\t\u0004\u0002\u0002",
    "kl\u0005\u0012\n\u0002ln\u0003\u0002\u0002\u0002m[\u0003\u0002\u0002",
    "\u0002m]\u0003\u0002\u0002\u0002m^\u0003\u0002\u0002\u0002me\u0003\u0002",
    "\u0002\u0002mi\u0003\u0002\u0002\u0002nw\u0003\u0002\u0002\u0002op\f",
    "\u0005\u0002\u0002pq\u0007\u0019\u0002\u0002qv\u0005\u0010\t\u0006r",
    "s\f\u0004\u0002\u0002st\u0007\u001a\u0002\u0002tv\u0005\u0010\t\u0005",
    "uo\u0003\u0002\u0002\u0002ur\u0003\u0002\u0002\u0002vy\u0003\u0002\u0002",
    "\u0002wu\u0003\u0002\u0002\u0002wx\u0003\u0002\u0002\u0002x\u0011\u0003",
    "\u0002\u0002\u0002yw\u0003\u0002\u0002\u0002z{\t\u0005\u0002\u0002{",
    "\u0013\u0003\u0002\u0002\u0002\u000e\u0017\u001d!&.OQYcmuw"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     "'!'", "'('", "')'", "'='", "'<>'", null, null, "'<'", 
                     "'>'", "'<='", "'>='" ];

var symbolicNames = [ null, "WS", "INCLUDE", "INCLUDEPP", "SHARP", "CODE", 
                      "NEW_LINE", "PRAGMA", "DEFINE", "DEFINED", "IF", "ELIF", 
                      "ELSE", "UNDEF", "IFDEF", "IFNDEF", "ENDIF", "ERROR", 
                      "BANG", "LPAREN", "RPAREN", "EQUAL", "NOTEQUAL", "AND", 
                      "OR", "LT", "GT", "LE", "GE", "DIRECTIVE_WHITESPACES", 
                      "DIRECTIVE_STRING", "CONDITIONAL_SYMBOL", "DECIMAL_LITERAL", 
                      "FLOAT", "TEXT", "INCLUDE_DIRECITVE_TEXT_NEW_LINE", 
                      "INCLUDE_FILE" ];

var ruleNames =  [ "preprocessor", "line", "text", "codeLine", "directive", 
                   "include_file", "directive_text", "preprocessor_expression", 
                   "preprocessor_item" ];

function TibboBasicPreprocessorParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

TibboBasicPreprocessorParser.prototype = Object.create(antlr4.Parser.prototype);
TibboBasicPreprocessorParser.prototype.constructor = TibboBasicPreprocessorParser;

Object.defineProperty(TibboBasicPreprocessorParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

TibboBasicPreprocessorParser.EOF = antlr4.Token.EOF;
TibboBasicPreprocessorParser.WS = 1;
TibboBasicPreprocessorParser.INCLUDE = 2;
TibboBasicPreprocessorParser.INCLUDEPP = 3;
TibboBasicPreprocessorParser.SHARP = 4;
TibboBasicPreprocessorParser.CODE = 5;
TibboBasicPreprocessorParser.NEW_LINE = 6;
TibboBasicPreprocessorParser.PRAGMA = 7;
TibboBasicPreprocessorParser.DEFINE = 8;
TibboBasicPreprocessorParser.DEFINED = 9;
TibboBasicPreprocessorParser.IF = 10;
TibboBasicPreprocessorParser.ELIF = 11;
TibboBasicPreprocessorParser.ELSE = 12;
TibboBasicPreprocessorParser.UNDEF = 13;
TibboBasicPreprocessorParser.IFDEF = 14;
TibboBasicPreprocessorParser.IFNDEF = 15;
TibboBasicPreprocessorParser.ENDIF = 16;
TibboBasicPreprocessorParser.ERROR = 17;
TibboBasicPreprocessorParser.BANG = 18;
TibboBasicPreprocessorParser.LPAREN = 19;
TibboBasicPreprocessorParser.RPAREN = 20;
TibboBasicPreprocessorParser.EQUAL = 21;
TibboBasicPreprocessorParser.NOTEQUAL = 22;
TibboBasicPreprocessorParser.AND = 23;
TibboBasicPreprocessorParser.OR = 24;
TibboBasicPreprocessorParser.LT = 25;
TibboBasicPreprocessorParser.GT = 26;
TibboBasicPreprocessorParser.LE = 27;
TibboBasicPreprocessorParser.GE = 28;
TibboBasicPreprocessorParser.DIRECTIVE_WHITESPACES = 29;
TibboBasicPreprocessorParser.DIRECTIVE_STRING = 30;
TibboBasicPreprocessorParser.CONDITIONAL_SYMBOL = 31;
TibboBasicPreprocessorParser.DECIMAL_LITERAL = 32;
TibboBasicPreprocessorParser.FLOAT = 33;
TibboBasicPreprocessorParser.TEXT = 34;
TibboBasicPreprocessorParser.INCLUDE_DIRECITVE_TEXT_NEW_LINE = 35;
TibboBasicPreprocessorParser.INCLUDE_FILE = 36;

TibboBasicPreprocessorParser.RULE_preprocessor = 0;
TibboBasicPreprocessorParser.RULE_line = 1;
TibboBasicPreprocessorParser.RULE_text = 2;
TibboBasicPreprocessorParser.RULE_codeLine = 3;
TibboBasicPreprocessorParser.RULE_directive = 4;
TibboBasicPreprocessorParser.RULE_include_file = 5;
TibboBasicPreprocessorParser.RULE_directive_text = 6;
TibboBasicPreprocessorParser.RULE_preprocessor_expression = 7;
TibboBasicPreprocessorParser.RULE_preprocessor_item = 8;


function PreprocessorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicPreprocessorParser.RULE_preprocessor;
    return this;
}

PreprocessorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PreprocessorContext.prototype.constructor = PreprocessorContext;

PreprocessorContext.prototype.EOF = function() {
    return this.getToken(TibboBasicPreprocessorParser.EOF, 0);
};

PreprocessorContext.prototype.line = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LineContext);
    } else {
        return this.getTypedRuleContext(LineContext,i);
    }
};

PreprocessorContext.prototype.NEW_LINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicPreprocessorParser.NEW_LINE);
    } else {
        return this.getToken(TibboBasicPreprocessorParser.NEW_LINE, i);
    }
};


PreprocessorContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.enterPreprocessor(this);
	}
};

PreprocessorContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.exitPreprocessor(this);
	}
};

PreprocessorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicPreprocessorParserVisitor ) {
        return visitor.visitPreprocessor(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicPreprocessorParser.PreprocessorContext = PreprocessorContext;

TibboBasicPreprocessorParser.prototype.preprocessor = function() {

    var localctx = new PreprocessorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, TibboBasicPreprocessorParser.RULE_preprocessor);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 21;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 18;
                this.line(); 
            }
            this.state = 23;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
        }

        this.state = 31;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.state = 27;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TibboBasicPreprocessorParser.NEW_LINE) {
                this.state = 24;
                this.match(TibboBasicPreprocessorParser.NEW_LINE);
                this.state = 29;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.state = 30;
            this.match(TibboBasicPreprocessorParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicPreprocessorParser.RULE_line;
    return this;
}

LineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LineContext.prototype.constructor = LineContext;

LineContext.prototype.text = function() {
    return this.getTypedRuleContext(TextContext,0);
};

LineContext.prototype.NEW_LINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicPreprocessorParser.NEW_LINE);
    } else {
        return this.getToken(TibboBasicPreprocessorParser.NEW_LINE, i);
    }
};


LineContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.enterLine(this);
	}
};

LineContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.exitLine(this);
	}
};

LineContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicPreprocessorParserVisitor ) {
        return visitor.visitLine(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicPreprocessorParser.LineContext = LineContext;

TibboBasicPreprocessorParser.prototype.line = function() {

    var localctx = new LineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, TibboBasicPreprocessorParser.RULE_line);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 36;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TibboBasicPreprocessorParser.NEW_LINE) {
            this.state = 33;
            this.match(TibboBasicPreprocessorParser.NEW_LINE);
            this.state = 38;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 39;
        this.text();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TextContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicPreprocessorParser.RULE_text;
    return this;
}

TextContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TextContext.prototype.constructor = TextContext;

TextContext.prototype.include_file = function() {
    return this.getTypedRuleContext(Include_fileContext,0);
};

TextContext.prototype.directive = function() {
    return this.getTypedRuleContext(DirectiveContext,0);
};

TextContext.prototype.codeLine = function() {
    return this.getTypedRuleContext(CodeLineContext,0);
};

TextContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.enterText(this);
	}
};

TextContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.exitText(this);
	}
};

TextContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicPreprocessorParserVisitor ) {
        return visitor.visitText(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicPreprocessorParser.TextContext = TextContext;

TibboBasicPreprocessorParser.prototype.text = function() {

    var localctx = new TextContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, TibboBasicPreprocessorParser.RULE_text);
    try {
        this.state = 44;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TibboBasicPreprocessorParser.INCLUDE:
        case TibboBasicPreprocessorParser.INCLUDEPP:
            this.enterOuterAlt(localctx, 1);
            this.state = 41;
            this.include_file();
            break;
        case TibboBasicPreprocessorParser.SHARP:
            this.enterOuterAlt(localctx, 2);
            this.state = 42;
            this.directive();
            break;
        case TibboBasicPreprocessorParser.CODE:
            this.enterOuterAlt(localctx, 3);
            this.state = 43;
            this.codeLine();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CodeLineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicPreprocessorParser.RULE_codeLine;
    return this;
}

CodeLineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CodeLineContext.prototype.constructor = CodeLineContext;

CodeLineContext.prototype.CODE = function() {
    return this.getToken(TibboBasicPreprocessorParser.CODE, 0);
};

CodeLineContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.enterCodeLine(this);
	}
};

CodeLineContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.exitCodeLine(this);
	}
};

CodeLineContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicPreprocessorParserVisitor ) {
        return visitor.visitCodeLine(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicPreprocessorParser.CodeLineContext = CodeLineContext;

TibboBasicPreprocessorParser.prototype.codeLine = function() {

    var localctx = new CodeLineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, TibboBasicPreprocessorParser.RULE_codeLine);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 46;
        this.match(TibboBasicPreprocessorParser.CODE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DirectiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicPreprocessorParser.RULE_directive;
    return this;
}

DirectiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DirectiveContext.prototype.constructor = DirectiveContext;


 
DirectiveContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PreprocessorDefContext(parser, ctx) {
	DirectiveContext.call(this, parser);
    DirectiveContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PreprocessorDefContext.prototype = Object.create(DirectiveContext.prototype);
PreprocessorDefContext.prototype.constructor = PreprocessorDefContext;

TibboBasicPreprocessorParser.PreprocessorDefContext = PreprocessorDefContext;

PreprocessorDefContext.prototype.SHARP = function() {
    return this.getToken(TibboBasicPreprocessorParser.SHARP, 0);
};

PreprocessorDefContext.prototype.IFDEF = function() {
    return this.getToken(TibboBasicPreprocessorParser.IFDEF, 0);
};

PreprocessorDefContext.prototype.CONDITIONAL_SYMBOL = function() {
    return this.getToken(TibboBasicPreprocessorParser.CONDITIONAL_SYMBOL, 0);
};

PreprocessorDefContext.prototype.IFNDEF = function() {
    return this.getToken(TibboBasicPreprocessorParser.IFNDEF, 0);
};
PreprocessorDefContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.enterPreprocessorDef(this);
	}
};

PreprocessorDefContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.exitPreprocessorDef(this);
	}
};

PreprocessorDefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicPreprocessorParserVisitor ) {
        return visitor.visitPreprocessorDef(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PreprocessorErrorContext(parser, ctx) {
	DirectiveContext.call(this, parser);
    DirectiveContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PreprocessorErrorContext.prototype = Object.create(DirectiveContext.prototype);
PreprocessorErrorContext.prototype.constructor = PreprocessorErrorContext;

TibboBasicPreprocessorParser.PreprocessorErrorContext = PreprocessorErrorContext;

PreprocessorErrorContext.prototype.SHARP = function() {
    return this.getToken(TibboBasicPreprocessorParser.SHARP, 0);
};

PreprocessorErrorContext.prototype.ERROR = function() {
    return this.getToken(TibboBasicPreprocessorParser.ERROR, 0);
};

PreprocessorErrorContext.prototype.directive_text = function() {
    return this.getTypedRuleContext(Directive_textContext,0);
};
PreprocessorErrorContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.enterPreprocessorError(this);
	}
};

PreprocessorErrorContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.exitPreprocessorError(this);
	}
};

PreprocessorErrorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicPreprocessorParserVisitor ) {
        return visitor.visitPreprocessorError(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PreprocessorUndefContext(parser, ctx) {
	DirectiveContext.call(this, parser);
    DirectiveContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PreprocessorUndefContext.prototype = Object.create(DirectiveContext.prototype);
PreprocessorUndefContext.prototype.constructor = PreprocessorUndefContext;

TibboBasicPreprocessorParser.PreprocessorUndefContext = PreprocessorUndefContext;

PreprocessorUndefContext.prototype.SHARP = function() {
    return this.getToken(TibboBasicPreprocessorParser.SHARP, 0);
};

PreprocessorUndefContext.prototype.UNDEF = function() {
    return this.getToken(TibboBasicPreprocessorParser.UNDEF, 0);
};

PreprocessorUndefContext.prototype.CONDITIONAL_SYMBOL = function() {
    return this.getToken(TibboBasicPreprocessorParser.CONDITIONAL_SYMBOL, 0);
};
PreprocessorUndefContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.enterPreprocessorUndef(this);
	}
};

PreprocessorUndefContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.exitPreprocessorUndef(this);
	}
};

PreprocessorUndefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicPreprocessorParserVisitor ) {
        return visitor.visitPreprocessorUndef(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PreprocessorConditionalContext(parser, ctx) {
	DirectiveContext.call(this, parser);
    DirectiveContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PreprocessorConditionalContext.prototype = Object.create(DirectiveContext.prototype);
PreprocessorConditionalContext.prototype.constructor = PreprocessorConditionalContext;

TibboBasicPreprocessorParser.PreprocessorConditionalContext = PreprocessorConditionalContext;

PreprocessorConditionalContext.prototype.SHARP = function() {
    return this.getToken(TibboBasicPreprocessorParser.SHARP, 0);
};

PreprocessorConditionalContext.prototype.IF = function() {
    return this.getToken(TibboBasicPreprocessorParser.IF, 0);
};

PreprocessorConditionalContext.prototype.preprocessor_expression = function() {
    return this.getTypedRuleContext(Preprocessor_expressionContext,0);
};

PreprocessorConditionalContext.prototype.ELIF = function() {
    return this.getToken(TibboBasicPreprocessorParser.ELIF, 0);
};

PreprocessorConditionalContext.prototype.ELSE = function() {
    return this.getToken(TibboBasicPreprocessorParser.ELSE, 0);
};
PreprocessorConditionalContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.enterPreprocessorConditional(this);
	}
};

PreprocessorConditionalContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.exitPreprocessorConditional(this);
	}
};

PreprocessorConditionalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicPreprocessorParserVisitor ) {
        return visitor.visitPreprocessorConditional(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PreprocessorPragmaContext(parser, ctx) {
	DirectiveContext.call(this, parser);
    DirectiveContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PreprocessorPragmaContext.prototype = Object.create(DirectiveContext.prototype);
PreprocessorPragmaContext.prototype.constructor = PreprocessorPragmaContext;

TibboBasicPreprocessorParser.PreprocessorPragmaContext = PreprocessorPragmaContext;

PreprocessorPragmaContext.prototype.SHARP = function() {
    return this.getToken(TibboBasicPreprocessorParser.SHARP, 0);
};

PreprocessorPragmaContext.prototype.PRAGMA = function() {
    return this.getToken(TibboBasicPreprocessorParser.PRAGMA, 0);
};

PreprocessorPragmaContext.prototype.directive_text = function() {
    return this.getTypedRuleContext(Directive_textContext,0);
};
PreprocessorPragmaContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.enterPreprocessorPragma(this);
	}
};

PreprocessorPragmaContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.exitPreprocessorPragma(this);
	}
};

PreprocessorPragmaContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicPreprocessorParserVisitor ) {
        return visitor.visitPreprocessorPragma(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PreprocessorDefineContext(parser, ctx) {
	DirectiveContext.call(this, parser);
    DirectiveContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PreprocessorDefineContext.prototype = Object.create(DirectiveContext.prototype);
PreprocessorDefineContext.prototype.constructor = PreprocessorDefineContext;

TibboBasicPreprocessorParser.PreprocessorDefineContext = PreprocessorDefineContext;

PreprocessorDefineContext.prototype.SHARP = function() {
    return this.getToken(TibboBasicPreprocessorParser.SHARP, 0);
};

PreprocessorDefineContext.prototype.DEFINE = function() {
    return this.getToken(TibboBasicPreprocessorParser.DEFINE, 0);
};

PreprocessorDefineContext.prototype.CONDITIONAL_SYMBOL = function() {
    return this.getToken(TibboBasicPreprocessorParser.CONDITIONAL_SYMBOL, 0);
};

PreprocessorDefineContext.prototype.directive_text = function() {
    return this.getTypedRuleContext(Directive_textContext,0);
};
PreprocessorDefineContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.enterPreprocessorDefine(this);
	}
};

PreprocessorDefineContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.exitPreprocessorDefine(this);
	}
};

PreprocessorDefineContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicPreprocessorParserVisitor ) {
        return visitor.visitPreprocessorDefine(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PreprocessorEndConditionalContext(parser, ctx) {
	DirectiveContext.call(this, parser);
    DirectiveContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PreprocessorEndConditionalContext.prototype = Object.create(DirectiveContext.prototype);
PreprocessorEndConditionalContext.prototype.constructor = PreprocessorEndConditionalContext;

TibboBasicPreprocessorParser.PreprocessorEndConditionalContext = PreprocessorEndConditionalContext;

PreprocessorEndConditionalContext.prototype.SHARP = function() {
    return this.getToken(TibboBasicPreprocessorParser.SHARP, 0);
};

PreprocessorEndConditionalContext.prototype.ENDIF = function() {
    return this.getToken(TibboBasicPreprocessorParser.ENDIF, 0);
};
PreprocessorEndConditionalContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.enterPreprocessorEndConditional(this);
	}
};

PreprocessorEndConditionalContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.exitPreprocessorEndConditional(this);
	}
};

PreprocessorEndConditionalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicPreprocessorParserVisitor ) {
        return visitor.visitPreprocessorEndConditional(this);
    } else {
        return visitor.visitChildren(this);
    }
};



TibboBasicPreprocessorParser.DirectiveContext = DirectiveContext;

TibboBasicPreprocessorParser.prototype.directive = function() {

    var localctx = new DirectiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, TibboBasicPreprocessorParser.RULE_directive);
    var _la = 0; // Token type
    try {
        this.state = 79;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PreprocessorConditionalContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 48;
            this.match(TibboBasicPreprocessorParser.SHARP);
            this.state = 49;
            this.match(TibboBasicPreprocessorParser.IF);
            this.state = 50;
            this.preprocessor_expression(0);
            break;

        case 2:
            localctx = new PreprocessorConditionalContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 51;
            this.match(TibboBasicPreprocessorParser.SHARP);
            this.state = 52;
            this.match(TibboBasicPreprocessorParser.ELIF);
            this.state = 53;
            this.preprocessor_expression(0);
            break;

        case 3:
            localctx = new PreprocessorConditionalContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 54;
            this.match(TibboBasicPreprocessorParser.SHARP);
            this.state = 55;
            this.match(TibboBasicPreprocessorParser.ELSE);
            break;

        case 4:
            localctx = new PreprocessorEndConditionalContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 56;
            this.match(TibboBasicPreprocessorParser.SHARP);
            this.state = 57;
            this.match(TibboBasicPreprocessorParser.ENDIF);
            break;

        case 5:
            localctx = new PreprocessorDefContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 58;
            this.match(TibboBasicPreprocessorParser.SHARP);
            this.state = 59;
            this.match(TibboBasicPreprocessorParser.IFDEF);
            this.state = 60;
            this.match(TibboBasicPreprocessorParser.CONDITIONAL_SYMBOL);
            break;

        case 6:
            localctx = new PreprocessorDefContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 61;
            this.match(TibboBasicPreprocessorParser.SHARP);
            this.state = 62;
            this.match(TibboBasicPreprocessorParser.IFNDEF);
            this.state = 63;
            this.match(TibboBasicPreprocessorParser.CONDITIONAL_SYMBOL);
            break;

        case 7:
            localctx = new PreprocessorUndefContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 64;
            this.match(TibboBasicPreprocessorParser.SHARP);
            this.state = 65;
            this.match(TibboBasicPreprocessorParser.UNDEF);
            this.state = 66;
            this.match(TibboBasicPreprocessorParser.CONDITIONAL_SYMBOL);
            break;

        case 8:
            localctx = new PreprocessorPragmaContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 67;
            this.match(TibboBasicPreprocessorParser.SHARP);
            this.state = 68;
            this.match(TibboBasicPreprocessorParser.PRAGMA);
            this.state = 69;
            this.directive_text();
            break;

        case 9:
            localctx = new PreprocessorErrorContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 70;
            this.match(TibboBasicPreprocessorParser.SHARP);
            this.state = 71;
            this.match(TibboBasicPreprocessorParser.ERROR);
            this.state = 72;
            this.directive_text();
            break;

        case 10:
            localctx = new PreprocessorDefineContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 73;
            this.match(TibboBasicPreprocessorParser.SHARP);
            this.state = 74;
            this.match(TibboBasicPreprocessorParser.DEFINE);
            this.state = 75;
            this.match(TibboBasicPreprocessorParser.CONDITIONAL_SYMBOL);
            this.state = 77;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TibboBasicPreprocessorParser.TEXT) {
                this.state = 76;
                this.directive_text();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Include_fileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicPreprocessorParser.RULE_include_file;
    return this;
}

Include_fileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Include_fileContext.prototype.constructor = Include_fileContext;


 
Include_fileContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PreprocessorIncludeContext(parser, ctx) {
	Include_fileContext.call(this, parser);
    Include_fileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PreprocessorIncludeContext.prototype = Object.create(Include_fileContext.prototype);
PreprocessorIncludeContext.prototype.constructor = PreprocessorIncludeContext;

TibboBasicPreprocessorParser.PreprocessorIncludeContext = PreprocessorIncludeContext;

PreprocessorIncludeContext.prototype.INCLUDE_FILE = function() {
    return this.getToken(TibboBasicPreprocessorParser.INCLUDE_FILE, 0);
};

PreprocessorIncludeContext.prototype.INCLUDE = function() {
    return this.getToken(TibboBasicPreprocessorParser.INCLUDE, 0);
};

PreprocessorIncludeContext.prototype.INCLUDEPP = function() {
    return this.getToken(TibboBasicPreprocessorParser.INCLUDEPP, 0);
};
PreprocessorIncludeContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.enterPreprocessorInclude(this);
	}
};

PreprocessorIncludeContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.exitPreprocessorInclude(this);
	}
};

PreprocessorIncludeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicPreprocessorParserVisitor ) {
        return visitor.visitPreprocessorInclude(this);
    } else {
        return visitor.visitChildren(this);
    }
};



TibboBasicPreprocessorParser.Include_fileContext = Include_fileContext;

TibboBasicPreprocessorParser.prototype.include_file = function() {

    var localctx = new Include_fileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, TibboBasicPreprocessorParser.RULE_include_file);
    var _la = 0; // Token type
    try {
        localctx = new PreprocessorIncludeContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 81;
        _la = this._input.LA(1);
        if(!(_la===TibboBasicPreprocessorParser.INCLUDE || _la===TibboBasicPreprocessorParser.INCLUDEPP)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 82;
        this.match(TibboBasicPreprocessorParser.INCLUDE_FILE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Directive_textContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicPreprocessorParser.RULE_directive_text;
    return this;
}

Directive_textContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Directive_textContext.prototype.constructor = Directive_textContext;

Directive_textContext.prototype.TEXT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicPreprocessorParser.TEXT);
    } else {
        return this.getToken(TibboBasicPreprocessorParser.TEXT, i);
    }
};


Directive_textContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.enterDirective_text(this);
	}
};

Directive_textContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.exitDirective_text(this);
	}
};

Directive_textContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicPreprocessorParserVisitor ) {
        return visitor.visitDirective_text(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicPreprocessorParser.Directive_textContext = Directive_textContext;

TibboBasicPreprocessorParser.prototype.directive_text = function() {

    var localctx = new Directive_textContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, TibboBasicPreprocessorParser.RULE_directive_text);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 85; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 84;
            this.match(TibboBasicPreprocessorParser.TEXT);
            this.state = 87; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===TibboBasicPreprocessorParser.TEXT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Preprocessor_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicPreprocessorParser.RULE_preprocessor_expression;
    return this;
}

Preprocessor_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Preprocessor_expressionContext.prototype.constructor = Preprocessor_expressionContext;


 
Preprocessor_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function PreprocessorBinaryContext(parser, ctx) {
	Preprocessor_expressionContext.call(this, parser);
    this.op = null; // Token;
    Preprocessor_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PreprocessorBinaryContext.prototype = Object.create(Preprocessor_expressionContext.prototype);
PreprocessorBinaryContext.prototype.constructor = PreprocessorBinaryContext;

TibboBasicPreprocessorParser.PreprocessorBinaryContext = PreprocessorBinaryContext;

PreprocessorBinaryContext.prototype.preprocessor_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Preprocessor_itemContext);
    } else {
        return this.getTypedRuleContext(Preprocessor_itemContext,i);
    }
};

PreprocessorBinaryContext.prototype.EQUAL = function() {
    return this.getToken(TibboBasicPreprocessorParser.EQUAL, 0);
};

PreprocessorBinaryContext.prototype.NOTEQUAL = function() {
    return this.getToken(TibboBasicPreprocessorParser.NOTEQUAL, 0);
};

PreprocessorBinaryContext.prototype.LT = function() {
    return this.getToken(TibboBasicPreprocessorParser.LT, 0);
};

PreprocessorBinaryContext.prototype.GT = function() {
    return this.getToken(TibboBasicPreprocessorParser.GT, 0);
};

PreprocessorBinaryContext.prototype.LE = function() {
    return this.getToken(TibboBasicPreprocessorParser.LE, 0);
};

PreprocessorBinaryContext.prototype.GE = function() {
    return this.getToken(TibboBasicPreprocessorParser.GE, 0);
};

PreprocessorBinaryContext.prototype.preprocessor_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Preprocessor_expressionContext);
    } else {
        return this.getTypedRuleContext(Preprocessor_expressionContext,i);
    }
};

PreprocessorBinaryContext.prototype.AND = function() {
    return this.getToken(TibboBasicPreprocessorParser.AND, 0);
};

PreprocessorBinaryContext.prototype.OR = function() {
    return this.getToken(TibboBasicPreprocessorParser.OR, 0);
};
PreprocessorBinaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.enterPreprocessorBinary(this);
	}
};

PreprocessorBinaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.exitPreprocessorBinary(this);
	}
};

PreprocessorBinaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicPreprocessorParserVisitor ) {
        return visitor.visitPreprocessorBinary(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PreprocessorConstantContext(parser, ctx) {
	Preprocessor_expressionContext.call(this, parser);
    Preprocessor_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PreprocessorConstantContext.prototype = Object.create(Preprocessor_expressionContext.prototype);
PreprocessorConstantContext.prototype.constructor = PreprocessorConstantContext;

TibboBasicPreprocessorParser.PreprocessorConstantContext = PreprocessorConstantContext;

PreprocessorConstantContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(TibboBasicPreprocessorParser.DECIMAL_LITERAL, 0);
};

PreprocessorConstantContext.prototype.DIRECTIVE_STRING = function() {
    return this.getToken(TibboBasicPreprocessorParser.DIRECTIVE_STRING, 0);
};
PreprocessorConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.enterPreprocessorConstant(this);
	}
};

PreprocessorConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.exitPreprocessorConstant(this);
	}
};

PreprocessorConstantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicPreprocessorParserVisitor ) {
        return visitor.visitPreprocessorConstant(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PreprocessorConditionalSymbolContext(parser, ctx) {
	Preprocessor_expressionContext.call(this, parser);
    Preprocessor_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PreprocessorConditionalSymbolContext.prototype = Object.create(Preprocessor_expressionContext.prototype);
PreprocessorConditionalSymbolContext.prototype.constructor = PreprocessorConditionalSymbolContext;

TibboBasicPreprocessorParser.PreprocessorConditionalSymbolContext = PreprocessorConditionalSymbolContext;

PreprocessorConditionalSymbolContext.prototype.CONDITIONAL_SYMBOL = function() {
    return this.getToken(TibboBasicPreprocessorParser.CONDITIONAL_SYMBOL, 0);
};

PreprocessorConditionalSymbolContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicPreprocessorParser.LPAREN, 0);
};

PreprocessorConditionalSymbolContext.prototype.preprocessor_expression = function() {
    return this.getTypedRuleContext(Preprocessor_expressionContext,0);
};

PreprocessorConditionalSymbolContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicPreprocessorParser.RPAREN, 0);
};
PreprocessorConditionalSymbolContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.enterPreprocessorConditionalSymbol(this);
	}
};

PreprocessorConditionalSymbolContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.exitPreprocessorConditionalSymbol(this);
	}
};

PreprocessorConditionalSymbolContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicPreprocessorParserVisitor ) {
        return visitor.visitPreprocessorConditionalSymbol(this);
    } else {
        return visitor.visitChildren(this);
    }
};



TibboBasicPreprocessorParser.prototype.preprocessor_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Preprocessor_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 14;
    this.enterRecursionRule(localctx, 14, TibboBasicPreprocessorParser.RULE_preprocessor_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 107;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PreprocessorConstantContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 90;
            this.match(TibboBasicPreprocessorParser.DECIMAL_LITERAL);
            break;

        case 2:
            localctx = new PreprocessorConstantContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 91;
            this.match(TibboBasicPreprocessorParser.DIRECTIVE_STRING);
            break;

        case 3:
            localctx = new PreprocessorConditionalSymbolContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 92;
            this.match(TibboBasicPreprocessorParser.CONDITIONAL_SYMBOL);
            this.state = 97;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
            if(la_===1) {
                this.state = 93;
                this.match(TibboBasicPreprocessorParser.LPAREN);
                this.state = 94;
                this.preprocessor_expression(0);
                this.state = 95;
                this.match(TibboBasicPreprocessorParser.RPAREN);

            }
            break;

        case 4:
            localctx = new PreprocessorBinaryContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 99;
            this.preprocessor_item();
            this.state = 100;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===TibboBasicPreprocessorParser.EQUAL || _la===TibboBasicPreprocessorParser.NOTEQUAL)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 101;
            this.preprocessor_item();
            break;

        case 5:
            localctx = new PreprocessorBinaryContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 103;
            this.preprocessor_item();
            this.state = 104;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << TibboBasicPreprocessorParser.LT) | (1 << TibboBasicPreprocessorParser.GT) | (1 << TibboBasicPreprocessorParser.LE) | (1 << TibboBasicPreprocessorParser.GE))) !== 0))) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 105;
            this.preprocessor_item();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 117;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,11,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 115;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new PreprocessorBinaryContext(this, new Preprocessor_expressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, TibboBasicPreprocessorParser.RULE_preprocessor_expression);
                    this.state = 109;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 110;
                    localctx.op = this.match(TibboBasicPreprocessorParser.AND);
                    this.state = 111;
                    this.preprocessor_expression(4);
                    break;

                case 2:
                    localctx = new PreprocessorBinaryContext(this, new Preprocessor_expressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, TibboBasicPreprocessorParser.RULE_preprocessor_expression);
                    this.state = 112;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 113;
                    localctx.op = this.match(TibboBasicPreprocessorParser.OR);
                    this.state = 114;
                    this.preprocessor_expression(3);
                    break;

                } 
            }
            this.state = 119;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,11,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Preprocessor_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicPreprocessorParser.RULE_preprocessor_item;
    return this;
}

Preprocessor_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Preprocessor_itemContext.prototype.constructor = Preprocessor_itemContext;

Preprocessor_itemContext.prototype.CONDITIONAL_SYMBOL = function() {
    return this.getToken(TibboBasicPreprocessorParser.CONDITIONAL_SYMBOL, 0);
};

Preprocessor_itemContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(TibboBasicPreprocessorParser.DECIMAL_LITERAL, 0);
};

Preprocessor_itemContext.prototype.DIRECTIVE_STRING = function() {
    return this.getToken(TibboBasicPreprocessorParser.DIRECTIVE_STRING, 0);
};

Preprocessor_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.enterPreprocessor_item(this);
	}
};

Preprocessor_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicPreprocessorParserListener ) {
        listener.exitPreprocessor_item(this);
	}
};

Preprocessor_itemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicPreprocessorParserVisitor ) {
        return visitor.visitPreprocessor_item(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicPreprocessorParser.Preprocessor_itemContext = Preprocessor_itemContext;

TibboBasicPreprocessorParser.prototype.preprocessor_item = function() {

    var localctx = new Preprocessor_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, TibboBasicPreprocessorParser.RULE_preprocessor_item);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 120;
        _la = this._input.LA(1);
        if(!(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (TibboBasicPreprocessorParser.DIRECTIVE_STRING - 30)) | (1 << (TibboBasicPreprocessorParser.CONDITIONAL_SYMBOL - 30)) | (1 << (TibboBasicPreprocessorParser.DECIMAL_LITERAL - 30)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


TibboBasicPreprocessorParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 7:
			return this.preprocessor_expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

TibboBasicPreprocessorParser.prototype.preprocessor_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 3);
		case 1:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.TibboBasicPreprocessorParser = TibboBasicPreprocessorParser;


/***/ }),

/***/ "./language/TibboBasic/lib/TibboBasicPreprocessorParserListener.js":
/*!*************************************************************************!*\
  !*** ./language/TibboBasic/lib/TibboBasicPreprocessorParserListener.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Generated from /Users/jimmyhu/Projects/TIDEDesktopService/language/TibboBasic/TibboBasicPreprocessorParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = __webpack_require__(/*! antlr4/index */ "./node_modules/antlr4/index.js");

// This class defines a complete listener for a parse tree produced by TibboBasicPreprocessorParser.
function TibboBasicPreprocessorParserListener() {
	antlr4.tree.ParseTreeListener.call(this);
	return this;
}

TibboBasicPreprocessorParserListener.prototype = Object.create(antlr4.tree.ParseTreeListener.prototype);
TibboBasicPreprocessorParserListener.prototype.constructor = TibboBasicPreprocessorParserListener;

// Enter a parse tree produced by TibboBasicPreprocessorParser#preprocessor.
TibboBasicPreprocessorParserListener.prototype.enterPreprocessor = function(ctx) {
};

// Exit a parse tree produced by TibboBasicPreprocessorParser#preprocessor.
TibboBasicPreprocessorParserListener.prototype.exitPreprocessor = function(ctx) {
};


// Enter a parse tree produced by TibboBasicPreprocessorParser#line.
TibboBasicPreprocessorParserListener.prototype.enterLine = function(ctx) {
};

// Exit a parse tree produced by TibboBasicPreprocessorParser#line.
TibboBasicPreprocessorParserListener.prototype.exitLine = function(ctx) {
};


// Enter a parse tree produced by TibboBasicPreprocessorParser#text.
TibboBasicPreprocessorParserListener.prototype.enterText = function(ctx) {
};

// Exit a parse tree produced by TibboBasicPreprocessorParser#text.
TibboBasicPreprocessorParserListener.prototype.exitText = function(ctx) {
};


// Enter a parse tree produced by TibboBasicPreprocessorParser#codeLine.
TibboBasicPreprocessorParserListener.prototype.enterCodeLine = function(ctx) {
};

// Exit a parse tree produced by TibboBasicPreprocessorParser#codeLine.
TibboBasicPreprocessorParserListener.prototype.exitCodeLine = function(ctx) {
};


// Enter a parse tree produced by TibboBasicPreprocessorParser#preprocessorConditional.
TibboBasicPreprocessorParserListener.prototype.enterPreprocessorConditional = function(ctx) {
};

// Exit a parse tree produced by TibboBasicPreprocessorParser#preprocessorConditional.
TibboBasicPreprocessorParserListener.prototype.exitPreprocessorConditional = function(ctx) {
};


// Enter a parse tree produced by TibboBasicPreprocessorParser#preprocessorEndConditional.
TibboBasicPreprocessorParserListener.prototype.enterPreprocessorEndConditional = function(ctx) {
};

// Exit a parse tree produced by TibboBasicPreprocessorParser#preprocessorEndConditional.
TibboBasicPreprocessorParserListener.prototype.exitPreprocessorEndConditional = function(ctx) {
};


// Enter a parse tree produced by TibboBasicPreprocessorParser#preprocessorDef.
TibboBasicPreprocessorParserListener.prototype.enterPreprocessorDef = function(ctx) {
};

// Exit a parse tree produced by TibboBasicPreprocessorParser#preprocessorDef.
TibboBasicPreprocessorParserListener.prototype.exitPreprocessorDef = function(ctx) {
};


// Enter a parse tree produced by TibboBasicPreprocessorParser#preprocessorUndef.
TibboBasicPreprocessorParserListener.prototype.enterPreprocessorUndef = function(ctx) {
};

// Exit a parse tree produced by TibboBasicPreprocessorParser#preprocessorUndef.
TibboBasicPreprocessorParserListener.prototype.exitPreprocessorUndef = function(ctx) {
};


// Enter a parse tree produced by TibboBasicPreprocessorParser#preprocessorPragma.
TibboBasicPreprocessorParserListener.prototype.enterPreprocessorPragma = function(ctx) {
};

// Exit a parse tree produced by TibboBasicPreprocessorParser#preprocessorPragma.
TibboBasicPreprocessorParserListener.prototype.exitPreprocessorPragma = function(ctx) {
};


// Enter a parse tree produced by TibboBasicPreprocessorParser#preprocessorError.
TibboBasicPreprocessorParserListener.prototype.enterPreprocessorError = function(ctx) {
};

// Exit a parse tree produced by TibboBasicPreprocessorParser#preprocessorError.
TibboBasicPreprocessorParserListener.prototype.exitPreprocessorError = function(ctx) {
};


// Enter a parse tree produced by TibboBasicPreprocessorParser#preprocessorDefine.
TibboBasicPreprocessorParserListener.prototype.enterPreprocessorDefine = function(ctx) {
};

// Exit a parse tree produced by TibboBasicPreprocessorParser#preprocessorDefine.
TibboBasicPreprocessorParserListener.prototype.exitPreprocessorDefine = function(ctx) {
};


// Enter a parse tree produced by TibboBasicPreprocessorParser#preprocessorInclude.
TibboBasicPreprocessorParserListener.prototype.enterPreprocessorInclude = function(ctx) {
};

// Exit a parse tree produced by TibboBasicPreprocessorParser#preprocessorInclude.
TibboBasicPreprocessorParserListener.prototype.exitPreprocessorInclude = function(ctx) {
};


// Enter a parse tree produced by TibboBasicPreprocessorParser#directive_text.
TibboBasicPreprocessorParserListener.prototype.enterDirective_text = function(ctx) {
};

// Exit a parse tree produced by TibboBasicPreprocessorParser#directive_text.
TibboBasicPreprocessorParserListener.prototype.exitDirective_text = function(ctx) {
};


// Enter a parse tree produced by TibboBasicPreprocessorParser#preprocessorBinary.
TibboBasicPreprocessorParserListener.prototype.enterPreprocessorBinary = function(ctx) {
};

// Exit a parse tree produced by TibboBasicPreprocessorParser#preprocessorBinary.
TibboBasicPreprocessorParserListener.prototype.exitPreprocessorBinary = function(ctx) {
};


// Enter a parse tree produced by TibboBasicPreprocessorParser#preprocessorConstant.
TibboBasicPreprocessorParserListener.prototype.enterPreprocessorConstant = function(ctx) {
};

// Exit a parse tree produced by TibboBasicPreprocessorParser#preprocessorConstant.
TibboBasicPreprocessorParserListener.prototype.exitPreprocessorConstant = function(ctx) {
};


// Enter a parse tree produced by TibboBasicPreprocessorParser#preprocessorConditionalSymbol.
TibboBasicPreprocessorParserListener.prototype.enterPreprocessorConditionalSymbol = function(ctx) {
};

// Exit a parse tree produced by TibboBasicPreprocessorParser#preprocessorConditionalSymbol.
TibboBasicPreprocessorParserListener.prototype.exitPreprocessorConditionalSymbol = function(ctx) {
};


// Enter a parse tree produced by TibboBasicPreprocessorParser#preprocessor_item.
TibboBasicPreprocessorParserListener.prototype.enterPreprocessor_item = function(ctx) {
};

// Exit a parse tree produced by TibboBasicPreprocessorParser#preprocessor_item.
TibboBasicPreprocessorParserListener.prototype.exitPreprocessor_item = function(ctx) {
};



exports.TibboBasicPreprocessorParserListener = TibboBasicPreprocessorParserListener;

/***/ }),

/***/ "./language/TibboBasic/lib/TibboBasicPreprocessorParserVisitor.js":
/*!************************************************************************!*\
  !*** ./language/TibboBasic/lib/TibboBasicPreprocessorParserVisitor.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Generated from /Users/jimmyhu/Projects/TIDEDesktopService/language/TibboBasic/TibboBasicPreprocessorParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = __webpack_require__(/*! antlr4/index */ "./node_modules/antlr4/index.js");

// This class defines a complete generic visitor for a parse tree produced by TibboBasicPreprocessorParser.

function TibboBasicPreprocessorParserVisitor() {
	antlr4.tree.ParseTreeVisitor.call(this);
	return this;
}

TibboBasicPreprocessorParserVisitor.prototype = Object.create(antlr4.tree.ParseTreeVisitor.prototype);
TibboBasicPreprocessorParserVisitor.prototype.constructor = TibboBasicPreprocessorParserVisitor;

// Visit a parse tree produced by TibboBasicPreprocessorParser#preprocessor.
TibboBasicPreprocessorParserVisitor.prototype.visitPreprocessor = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicPreprocessorParser#line.
TibboBasicPreprocessorParserVisitor.prototype.visitLine = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicPreprocessorParser#text.
TibboBasicPreprocessorParserVisitor.prototype.visitText = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicPreprocessorParser#codeLine.
TibboBasicPreprocessorParserVisitor.prototype.visitCodeLine = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicPreprocessorParser#preprocessorConditional.
TibboBasicPreprocessorParserVisitor.prototype.visitPreprocessorConditional = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicPreprocessorParser#preprocessorEndConditional.
TibboBasicPreprocessorParserVisitor.prototype.visitPreprocessorEndConditional = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicPreprocessorParser#preprocessorDef.
TibboBasicPreprocessorParserVisitor.prototype.visitPreprocessorDef = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicPreprocessorParser#preprocessorUndef.
TibboBasicPreprocessorParserVisitor.prototype.visitPreprocessorUndef = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicPreprocessorParser#preprocessorPragma.
TibboBasicPreprocessorParserVisitor.prototype.visitPreprocessorPragma = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicPreprocessorParser#preprocessorError.
TibboBasicPreprocessorParserVisitor.prototype.visitPreprocessorError = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicPreprocessorParser#preprocessorDefine.
TibboBasicPreprocessorParserVisitor.prototype.visitPreprocessorDefine = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicPreprocessorParser#preprocessorInclude.
TibboBasicPreprocessorParserVisitor.prototype.visitPreprocessorInclude = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicPreprocessorParser#directive_text.
TibboBasicPreprocessorParserVisitor.prototype.visitDirective_text = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicPreprocessorParser#preprocessorBinary.
TibboBasicPreprocessorParserVisitor.prototype.visitPreprocessorBinary = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicPreprocessorParser#preprocessorConstant.
TibboBasicPreprocessorParserVisitor.prototype.visitPreprocessorConstant = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicPreprocessorParser#preprocessorConditionalSymbol.
TibboBasicPreprocessorParserVisitor.prototype.visitPreprocessorConditionalSymbol = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by TibboBasicPreprocessorParser#preprocessor_item.
TibboBasicPreprocessorParserVisitor.prototype.visitPreprocessor_item = function(ctx) {
  return this.visitChildren(ctx);
};



exports.TibboBasicPreprocessorParserVisitor = TibboBasicPreprocessorParserVisitor;

/***/ }),

/***/ "./node_modules/antlr4/BufferedTokenStream.js":
/*!****************************************************!*\
  !*** ./node_modules/antlr4/BufferedTokenStream.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// This implementation of {@link TokenStream} loads tokens from a
// {@link TokenSource} on-demand, and places the tokens in a buffer to provide
// access to any previous token by index.
//
// <p>
// This token stream ignores the value of {@link Token//getChannel}. If your
// parser requires the token stream filter tokens to only those on a particular
// channel, such as {@link Token//DEFAULT_CHANNEL} or
// {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a
// {@link CommonTokenStream}.</p>

var Token = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/Token.js").Token;
var Lexer = __webpack_require__(/*! ./Lexer */ "./node_modules/antlr4/Lexer.js").Lexer;
var Interval = __webpack_require__(/*! ./IntervalSet */ "./node_modules/antlr4/IntervalSet.js").Interval;

// this is just to keep meaningful parameter types to Parser
function TokenStream() {
	return this;
}

function BufferedTokenStream(tokenSource) {

	TokenStream.call(this);
	// The {@link TokenSource} from which tokens for this stream are fetched.
	this.tokenSource = tokenSource;

	// A collection of all tokens fetched from the token source. The list is
	// considered a complete view of the input once {@link //fetchedEOF} is set
	// to {@code true}.
	this.tokens = [];

	// The index into {@link //tokens} of the current token (next token to
	// {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should
	// be
	// {@link //LT LT(1)}.
	//
	// <p>This field is set to -1 when the stream is first constructed or when
	// {@link //setTokenSource} is called, indicating that the first token has
	// not yet been fetched from the token source. For additional information,
	// see the documentation of {@link IntStream} for a description of
	// Initializing Methods.</p>
	this.index = -1;

	// Indicates whether the {@link Token//EOF} token has been fetched from
	// {@link //tokenSource} and added to {@link //tokens}. This field improves
	// performance for the following cases:
	//
	// <ul>
	// <li>{@link //consume}: The lookahead check in {@link //consume} to
	// prevent
	// consuming the EOF symbol is optimized by checking the values of
	// {@link //fetchedEOF} and {@link //p} instead of calling {@link
	// //LA}.</li>
	// <li>{@link //fetch}: The check to prevent adding multiple EOF symbols
	// into
	// {@link //tokens} is trivial with this field.</li>
	// <ul>
	this.fetchedEOF = false;
	return this;
}

BufferedTokenStream.prototype = Object.create(TokenStream.prototype);
BufferedTokenStream.prototype.constructor = BufferedTokenStream;

BufferedTokenStream.prototype.mark = function() {
	return 0;
};

BufferedTokenStream.prototype.release = function(marker) {
	// no resources to release
};

BufferedTokenStream.prototype.reset = function() {
	this.seek(0);
};

BufferedTokenStream.prototype.seek = function(index) {
	this.lazyInit();
	this.index = this.adjustSeekIndex(index);
};

BufferedTokenStream.prototype.get = function(index) {
	this.lazyInit();
	return this.tokens[index];
};

BufferedTokenStream.prototype.consume = function() {
	var skipEofCheck = false;
	if (this.index >= 0) {
		if (this.fetchedEOF) {
			// the last token in tokens is EOF. skip check if p indexes any
			// fetched token except the last.
			skipEofCheck = this.index < this.tokens.length - 1;
		} else {
			// no EOF token in tokens. skip check if p indexes a fetched token.
			skipEofCheck = this.index < this.tokens.length;
		}
	} else {
		// not yet initialized
		skipEofCheck = false;
	}
	if (!skipEofCheck && this.LA(1) === Token.EOF) {
		throw "cannot consume EOF";
	}
	if (this.sync(this.index + 1)) {
		this.index = this.adjustSeekIndex(this.index + 1);
	}
};

// Make sure index {@code i} in tokens has a token.
//
// @return {@code true} if a token is located at index {@code i}, otherwise
// {@code false}.
// @see //get(int i)
// /
BufferedTokenStream.prototype.sync = function(i) {
	var n = i - this.tokens.length + 1; // how many more elements we need?
	if (n > 0) {
		var fetched = this.fetch(n);
		return fetched >= n;
	}
	return true;
};

// Add {@code n} elements to buffer.
//
// @return The actual number of elements added to the buffer.
// /
BufferedTokenStream.prototype.fetch = function(n) {
	if (this.fetchedEOF) {
		return 0;
	}
	for (var i = 0; i < n; i++) {
		var t = this.tokenSource.nextToken();
		t.tokenIndex = this.tokens.length;
		this.tokens.push(t);
		if (t.type === Token.EOF) {
			this.fetchedEOF = true;
			return i + 1;
		}
	}
	return n;
};

// Get all tokens from start..stop inclusively///
BufferedTokenStream.prototype.getTokens = function(start, stop, types) {
	if (types === undefined) {
		types = null;
	}
	if (start < 0 || stop < 0) {
		return null;
	}
	this.lazyInit();
	var subset = [];
	if (stop >= this.tokens.length) {
		stop = this.tokens.length - 1;
	}
	for (var i = start; i < stop; i++) {
		var t = this.tokens[i];
		if (t.type === Token.EOF) {
			break;
		}
		if (types === null || types.contains(t.type)) {
			subset.push(t);
		}
	}
	return subset;
};

BufferedTokenStream.prototype.LA = function(i) {
	return this.LT(i).type;
};

BufferedTokenStream.prototype.LB = function(k) {
	if (this.index - k < 0) {
		return null;
	}
	return this.tokens[this.index - k];
};

BufferedTokenStream.prototype.LT = function(k) {
	this.lazyInit();
	if (k === 0) {
		return null;
	}
	if (k < 0) {
		return this.LB(-k);
	}
	var i = this.index + k - 1;
	this.sync(i);
	if (i >= this.tokens.length) { // return EOF token
		// EOF must be last token
		return this.tokens[this.tokens.length - 1];
	}
	return this.tokens[i];
};

// Allowed derived classes to modify the behavior of operations which change
// the current stream position by adjusting the target token index of a seek
// operation. The default implementation simply returns {@code i}. If an
// exception is thrown in this method, the current stream index should not be
// changed.
//
// <p>For example, {@link CommonTokenStream} overrides this method to ensure
// that
// the seek target is always an on-channel token.</p>
//
// @param i The target token index.
// @return The adjusted target token index.

BufferedTokenStream.prototype.adjustSeekIndex = function(i) {
	return i;
};

BufferedTokenStream.prototype.lazyInit = function() {
	if (this.index === -1) {
		this.setup();
	}
};

BufferedTokenStream.prototype.setup = function() {
	this.sync(0);
	this.index = this.adjustSeekIndex(0);
};

// Reset this token stream by setting its token source.///
BufferedTokenStream.prototype.setTokenSource = function(tokenSource) {
	this.tokenSource = tokenSource;
	this.tokens = [];
	this.index = -1;
	this.fetchedEOF = false;
};


// Given a starting index, return the index of the next token on channel.
// Return i if tokens[i] is on channel. Return -1 if there are no tokens
// on channel between i and EOF.
// /
BufferedTokenStream.prototype.nextTokenOnChannel = function(i, channel) {
	this.sync(i);
	if (i >= this.tokens.length) {
		return -1;
	}
	var token = this.tokens[i];
	while (token.channel !== this.channel) {
		if (token.type === Token.EOF) {
			return -1;
		}
		i += 1;
		this.sync(i);
		token = this.tokens[i];
	}
	return i;
};

// Given a starting index, return the index of the previous token on channel.
// Return i if tokens[i] is on channel. Return -1 if there are no tokens
// on channel between i and 0.
BufferedTokenStream.prototype.previousTokenOnChannel = function(i, channel) {
	while (i >= 0 && this.tokens[i].channel !== channel) {
		i -= 1;
	}
	return i;
};

// Collect all tokens on specified channel to the right of
// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or
// EOF. If channel is -1, find any non default channel token.
BufferedTokenStream.prototype.getHiddenTokensToRight = function(tokenIndex,
		channel) {
	if (channel === undefined) {
		channel = -1;
	}
	this.lazyInit();
	if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
		throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
	}
	var nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL);
	var from_ = tokenIndex + 1;
	// if none onchannel to right, nextOnChannel=-1 so set to = last token
	var to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;
	return this.filterForChannel(from_, to, channel);
};

// Collect all tokens on specified channel to the left of
// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.
// If channel is -1, find any non default channel token.
BufferedTokenStream.prototype.getHiddenTokensToLeft = function(tokenIndex,
		channel) {
	if (channel === undefined) {
		channel = -1;
	}
	this.lazyInit();
	if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
		throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
	}
	var prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);
	if (prevOnChannel === tokenIndex - 1) {
		return null;
	}
	// if none on channel to left, prevOnChannel=-1 then from=0
	var from_ = prevOnChannel + 1;
	var to = tokenIndex - 1;
	return this.filterForChannel(from_, to, channel);
};

BufferedTokenStream.prototype.filterForChannel = function(left, right, channel) {
	var hidden = [];
	for (var i = left; i < right + 1; i++) {
		var t = this.tokens[i];
		if (channel === -1) {
			if (t.channel !== Lexer.DEFAULT_TOKEN_CHANNEL) {
				hidden.push(t);
			}
		} else if (t.channel === channel) {
			hidden.push(t);
		}
	}
	if (hidden.length === 0) {
		return null;
	}
	return hidden;
};

BufferedTokenStream.prototype.getSourceName = function() {
	return this.tokenSource.getSourceName();
};

// Get the text of all tokens in this buffer.///
BufferedTokenStream.prototype.getText = function(interval) {
	this.lazyInit();
	this.fill();
	if (interval === undefined || interval === null) {
		interval = new Interval(0, this.tokens.length - 1);
	}
	var start = interval.start;
	if (start instanceof Token) {
		start = start.tokenIndex;
	}
	var stop = interval.stop;
	if (stop instanceof Token) {
		stop = stop.tokenIndex;
	}
	if (start === null || stop === null || start < 0 || stop < 0) {
		return "";
	}
	if (stop >= this.tokens.length) {
		stop = this.tokens.length - 1;
	}
	var s = "";
	for (var i = start; i < stop + 1; i++) {
		var t = this.tokens[i];
		if (t.type === Token.EOF) {
			break;
		}
		s = s + t.text;
	}
	return s;
};

// Get all tokens from lexer until EOF///
BufferedTokenStream.prototype.fill = function() {
	this.lazyInit();
	while (this.fetch(1000) === 1000) {
		continue;
	}
};

exports.BufferedTokenStream = BufferedTokenStream;


/***/ }),

/***/ "./node_modules/antlr4/CharStreams.js":
/*!********************************************!*\
  !*** ./node_modules/antlr4/CharStreams.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var InputStream = __webpack_require__(/*! ./InputStream */ "./node_modules/antlr4/InputStream.js").InputStream;

var isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';
var fs = isNodeJs ? __webpack_require__(/*! fs */ "fs") : null;

// Utility functions to create InputStreams from various sources.
//
// All returned InputStreams support the full range of Unicode
// up to U+10FFFF (the default behavior of InputStream only supports
// code points up to U+FFFF).
var CharStreams = {
  // Creates an InputStream from a string.
  fromString: function(str) {
    return new InputStream(str, true);
  },

  // Asynchronously creates an InputStream from a blob given the
  // encoding of the bytes in that blob (defaults to 'utf8' if
  // encoding is null).
  //
  // Invokes onLoad(result) on success, onError(error) on
  // failure.
  fromBlob: function(blob, encoding, onLoad, onError) {
    var reader = FileReader();
    reader.onload = function(e) {
      var is = new InputStream(e.target.result, true);
      onLoad(is);
    };
    reader.onerror = onError;
    reader.readAsText(blob, encoding);
  },

  // Creates an InputStream from a Buffer given the
  // encoding of the bytes in that buffer (defaults to 'utf8' if
  // encoding is null).
  fromBuffer: function(buffer, encoding) {
    return new InputStream(buffer.toString(encoding), true);
  },

  // Asynchronously creates an InputStream from a file on disk given
  // the encoding of the bytes in that file (defaults to 'utf8' if
  // encoding is null).
  //
  // Invokes callback(error, result) on completion.
  fromPath: function(path, encoding, callback) {
    fs.readFile(path, encoding, function(err, data) {
      var is = null;
      if (data !== null) {
        is = new InputStream(data, true);
      }
      callback(err, is);
    });
  },

  // Synchronously creates an InputStream given a path to a file
  // on disk and the encoding of the bytes in that file (defaults to
  // 'utf8' if encoding is null).
  fromPathSync: function(path, encoding) {
    var data = fs.readFileSync(path, encoding);
    return new InputStream(data, true);
  }
};

exports.CharStreams = CharStreams;


/***/ }),

/***/ "./node_modules/antlr4/CommonTokenFactory.js":
/*!***************************************************!*\
  !*** ./node_modules/antlr4/CommonTokenFactory.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// This default implementation of {@link TokenFactory} creates
// {@link CommonToken} objects.
//

var CommonToken = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/Token.js").CommonToken;

function TokenFactory() {
	return this;
}

function CommonTokenFactory(copyText) {
	TokenFactory.call(this);
    // Indicates whether {@link CommonToken//setText} should be called after
    // constructing tokens to explicitly set the text. This is useful for cases
    // where the input stream might not be able to provide arbitrary substrings
    // of text from the input after the lexer creates a token (e.g. the
    // implementation of {@link CharStream//getText} in
    // {@link UnbufferedCharStream} throws an
    // {@link UnsupportedOperationException}). Explicitly setting the token text
    // allows {@link Token//getText} to be called at any time regardless of the
    // input stream implementation.
    //
    // <p>
    // The default value is {@code false} to avoid the performance and memory
    // overhead of copying text for every token unless explicitly requested.</p>
    //
    this.copyText = copyText===undefined ? false : copyText;
	return this;
}

CommonTokenFactory.prototype = Object.create(TokenFactory.prototype);
CommonTokenFactory.prototype.constructor = CommonTokenFactory;

//
// The default {@link CommonTokenFactory} instance.
//
// <p>
// This token factory does not explicitly copy token text when constructing
// tokens.</p>
//
CommonTokenFactory.DEFAULT = new CommonTokenFactory();

CommonTokenFactory.prototype.create = function(source, type, text, channel, start, stop, line, column) {
    var t = new CommonToken(source, type, channel, start, stop);
    t.line = line;
    t.column = column;
    if (text !==null) {
        t.text = text;
    } else if (this.copyText && source[1] !==null) {
        t.text = source[1].getText(start,stop);
    }
    return t;
};

CommonTokenFactory.prototype.createThin = function(type, text) {
    var t = new CommonToken(null, type);
    t.text = text;
    return t;
};

exports.CommonTokenFactory = CommonTokenFactory;


/***/ }),

/***/ "./node_modules/antlr4/CommonTokenStream.js":
/*!**************************************************!*\
  !*** ./node_modules/antlr4/CommonTokenStream.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

//
// This class extends {@link BufferedTokenStream} with functionality to filter
// token streams to tokens on a particular channel (tokens where
// {@link Token//getChannel} returns a particular value).
//
// <p>
// This token stream provides access to all tokens by index or when calling
// methods like {@link //getText}. The channel filtering is only used for code
// accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and
// {@link //LB}.</p>
//
// <p>
// By default, tokens are placed on the default channel
// ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the
// {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to
// call {@link Lexer//setChannel}.
// </p>
//
// <p>
// Note: lexer rules which use the {@code ->skip} lexer command or call
// {@link Lexer//skip} do not produce tokens at all, so input text matched by
// such a rule will not be available as part of the token stream, regardless of
// channel.</p>
///

var Token = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/Token.js").Token;
var BufferedTokenStream = __webpack_require__(/*! ./BufferedTokenStream */ "./node_modules/antlr4/BufferedTokenStream.js").BufferedTokenStream;

function CommonTokenStream(lexer, channel) {
	BufferedTokenStream.call(this, lexer);
    this.channel = channel===undefined ? Token.DEFAULT_CHANNEL : channel;
    return this;
}

CommonTokenStream.prototype = Object.create(BufferedTokenStream.prototype);
CommonTokenStream.prototype.constructor = CommonTokenStream;

CommonTokenStream.prototype.adjustSeekIndex = function(i) {
    return this.nextTokenOnChannel(i, this.channel);
};

CommonTokenStream.prototype.LB = function(k) {
    if (k===0 || this.index-k<0) {
        return null;
    }
    var i = this.index;
    var n = 1;
    // find k good tokens looking backwards
    while (n <= k) {
        // skip off-channel tokens
        i = this.previousTokenOnChannel(i - 1, this.channel);
        n += 1;
    }
    if (i < 0) {
        return null;
    }
    return this.tokens[i];
};

CommonTokenStream.prototype.LT = function(k) {
    this.lazyInit();
    if (k === 0) {
        return null;
    }
    if (k < 0) {
        return this.LB(-k);
    }
    var i = this.index;
    var n = 1; // we know tokens[pos] is a good one
    // find k good tokens
    while (n < k) {
        // skip off-channel tokens, but make sure to not look past EOF
        if (this.sync(i + 1)) {
            i = this.nextTokenOnChannel(i + 1, this.channel);
        }
        n += 1;
    }
    return this.tokens[i];
};

// Count EOF just once.///
CommonTokenStream.prototype.getNumberOfOnChannelTokens = function() {
    var n = 0;
    this.fill();
    for (var i =0; i< this.tokens.length;i++) {
        var t = this.tokens[i];
        if( t.channel===this.channel) {
            n += 1;
        }
        if( t.type===Token.EOF) {
            break;
        }
    }
    return n;
};

exports.CommonTokenStream = CommonTokenStream;

/***/ }),

/***/ "./node_modules/antlr4/FileStream.js":
/*!*******************************************!*\
  !*** ./node_modules/antlr4/FileStream.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
//  This is an InputStream that is loaded from a file all at once
//  when you construct the object.
//
var InputStream = __webpack_require__(/*! ./InputStream */ "./node_modules/antlr4/InputStream.js").InputStream;
var isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';
var fs = isNodeJs ? __webpack_require__(/*! fs */ "fs") : null;

function FileStream(fileName, decodeToUnicodeCodePoints) {
	var data = fs.readFileSync(fileName, "utf8");
	InputStream.call(this, data, decodeToUnicodeCodePoints);
	this.fileName = fileName;
	return this;
}

FileStream.prototype = Object.create(InputStream.prototype);
FileStream.prototype.constructor = FileStream;

exports.FileStream = FileStream;


/***/ }),

/***/ "./node_modules/antlr4/InputStream.js":
/*!********************************************!*\
  !*** ./node_modules/antlr4/InputStream.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/Token.js").Token;
__webpack_require__(/*! ./polyfills/codepointat */ "./node_modules/antlr4/polyfills/codepointat.js");
__webpack_require__(/*! ./polyfills/fromcodepoint */ "./node_modules/antlr4/polyfills/fromcodepoint.js");

// Vacuum all input from a string and then treat it like a buffer.

function _loadString(stream) {
	stream._index = 0;
	stream.data = [];
	if (stream.decodeToUnicodeCodePoints) {
		for (var i = 0; i < stream.strdata.length; ) {
			var codePoint = stream.strdata.codePointAt(i);
			stream.data.push(codePoint);
			i += codePoint <= 0xFFFF ? 1 : 2;
		}
	} else {
		for (var i = 0; i < stream.strdata.length; i++) {
			var codeUnit = stream.strdata.charCodeAt(i);
			stream.data.push(codeUnit);
		}
	}
	stream._size = stream.data.length;
}

// If decodeToUnicodeCodePoints is true, the input is treated
// as a series of Unicode code points.
//
// Otherwise, the input is treated as a series of 16-bit UTF-16 code
// units.
function InputStream(data, decodeToUnicodeCodePoints) {
	this.name = "<empty>";
	this.strdata = data;
	this.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false;
	_loadString(this);
	return this;
}

Object.defineProperty(InputStream.prototype, "index", {
	get : function() {
		return this._index;
	}
});

Object.defineProperty(InputStream.prototype, "size", {
	get : function() {
		return this._size;
	}
});

// Reset the stream so that it's in the same state it was
// when the object was created *except* the data array is not
// touched.
//
InputStream.prototype.reset = function() {
	this._index = 0;
};

InputStream.prototype.consume = function() {
	if (this._index >= this._size) {
		// assert this.LA(1) == Token.EOF
		throw ("cannot consume EOF");
	}
	this._index += 1;
};

InputStream.prototype.LA = function(offset) {
	if (offset === 0) {
		return 0; // undefined
	}
	if (offset < 0) {
		offset += 1; // e.g., translate LA(-1) to use offset=0
	}
	var pos = this._index + offset - 1;
	if (pos < 0 || pos >= this._size) { // invalid
		return Token.EOF;
	}
	return this.data[pos];
};

InputStream.prototype.LT = function(offset) {
	return this.LA(offset);
};

// mark/release do nothing; we have entire buffer
InputStream.prototype.mark = function() {
	return -1;
};

InputStream.prototype.release = function(marker) {
};

// consume() ahead until p==_index; can't just set p=_index as we must
// update line and column. If we seek backwards, just set p
//
InputStream.prototype.seek = function(_index) {
	if (_index <= this._index) {
		this._index = _index; // just jump; don't update stream state (line,
								// ...)
		return;
	}
	// seek forward
	this._index = Math.min(_index, this._size);
};

InputStream.prototype.getText = function(start, stop) {
	if (stop >= this._size) {
		stop = this._size - 1;
	}
	if (start >= this._size) {
		return "";
	} else {
		if (this.decodeToUnicodeCodePoints) {
			var result = "";
			for (var i = start; i <= stop; i++) {
				result += String.fromCodePoint(this.data[i]);
			}
			return result;
		} else {
			return this.strdata.slice(start, stop + 1);
		}
	}
};

InputStream.prototype.toString = function() {
	return this.strdata;
};

exports.InputStream = InputStream;


/***/ }),

/***/ "./node_modules/antlr4/IntervalSet.js":
/*!********************************************!*\
  !*** ./node_modules/antlr4/IntervalSet.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/*jslint smarttabs:true */

var Token = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/Token.js").Token;

/* stop is not included! */
function Interval(start, stop) {
	this.start = start;
	this.stop = stop;
	return this;
}

Interval.prototype.contains = function(item) {
	return item >= this.start && item < this.stop;
};

Interval.prototype.toString = function() {
	if(this.start===this.stop-1) {
		return this.start.toString();
	} else {
		return this.start.toString() + ".." + (this.stop-1).toString();
	}
};


Object.defineProperty(Interval.prototype, "length", {
	get : function() {
		return this.stop - this.start;
	}
});

function IntervalSet() {
	this.intervals = null;
	this.readOnly = false;
}

IntervalSet.prototype.first = function(v) {
	if (this.intervals === null || this.intervals.length===0) {
		return Token.INVALID_TYPE;
	} else {
		return this.intervals[0].start;
	}
};

IntervalSet.prototype.addOne = function(v) {
	this.addInterval(new Interval(v, v + 1));
};

IntervalSet.prototype.addRange = function(l, h) {
	this.addInterval(new Interval(l, h + 1));
};

IntervalSet.prototype.addInterval = function(v) {
	if (this.intervals === null) {
		this.intervals = [];
		this.intervals.push(v);
	} else {
		// find insert pos
		for (var k = 0; k < this.intervals.length; k++) {
			var i = this.intervals[k];
			// distinct range -> insert
			if (v.stop < i.start) {
				this.intervals.splice(k, 0, v);
				return;
			}
			// contiguous range -> adjust
			else if (v.stop === i.start) {
				this.intervals[k].start = v.start;
				return;
			}
			// overlapping range -> adjust and reduce
			else if (v.start <= i.stop) {
				this.intervals[k] = new Interval(Math.min(i.start, v.start), Math.max(i.stop, v.stop));
				this.reduce(k);
				return;
			}
		}
		// greater than any existing
		this.intervals.push(v);
	}
};

IntervalSet.prototype.addSet = function(other) {
	if (other.intervals !== null) {
		for (var k = 0; k < other.intervals.length; k++) {
			var i = other.intervals[k];
			this.addInterval(new Interval(i.start, i.stop));
		}
	}
	return this;
};

IntervalSet.prototype.reduce = function(k) {
	// only need to reduce if k is not the last
	if (k < this.intervalslength - 1) {
		var l = this.intervals[k];
		var r = this.intervals[k + 1];
		// if r contained in l
		if (l.stop >= r.stop) {
			this.intervals.pop(k + 1);
			this.reduce(k);
		} else if (l.stop >= r.start) {
			this.intervals[k] = new Interval(l.start, r.stop);
			this.intervals.pop(k + 1);
		}
	}
};

IntervalSet.prototype.complement = function(start, stop) {
    var result = new IntervalSet();
    result.addInterval(new Interval(start,stop+1));
    for(var i=0; i<this.intervals.length; i++) {
        result.removeRange(this.intervals[i]);
    }
    return result;
};

IntervalSet.prototype.contains = function(item) {
	if (this.intervals === null) {
		return false;
	} else {
		for (var k = 0; k < this.intervals.length; k++) {
			if(this.intervals[k].contains(item)) {
				return true;
			}
		}
		return false;
	}
};

Object.defineProperty(IntervalSet.prototype, "length", {
	get : function() {
		var len = 0;
		this.intervals.map(function(i) {len += i.length;});
		return len;
	}
});

IntervalSet.prototype.removeRange = function(v) {
    if(v.start===v.stop-1) {
        this.removeOne(v.start);
    } else if (this.intervals!==null) {
        var k = 0;
        for(var n=0; n<this.intervals.length; n++) {
            var i = this.intervals[k];
            // intervals are ordered
            if (v.stop<=i.start) {
                return;
            }
            // check for including range, split it
            else if(v.start>i.start && v.stop<i.stop) {
                this.intervals[k] = new Interval(i.start, v.start);
                var x = new Interval(v.stop, i.stop);
                this.intervals.splice(k, 0, x);
                return;
            }
            // check for included range, remove it
            else if(v.start<=i.start && v.stop>=i.stop) {
                this.intervals.splice(k, 1);
                k = k - 1; // need another pass
            }
            // check for lower boundary
            else if(v.start<i.stop) {
                this.intervals[k] = new Interval(i.start, v.start);
            }
            // check for upper boundary
            else if(v.stop<i.stop) {
                this.intervals[k] = new Interval(v.stop, i.stop);
            }
            k += 1;
        }
    }
};

IntervalSet.prototype.removeOne = function(v) {
	if (this.intervals !== null) {
		for (var k = 0; k < this.intervals.length; k++) {
			var i = this.intervals[k];
			// intervals is ordered
			if (v < i.start) {
				return;
			}
			// check for single value range
			else if (v === i.start && v === i.stop - 1) {
				this.intervals.splice(k, 1);
				return;
			}
			// check for lower boundary
			else if (v === i.start) {
				this.intervals[k] = new Interval(i.start + 1, i.stop);
				return;
			}
			// check for upper boundary
			else if (v === i.stop - 1) {
				this.intervals[k] = new Interval(i.start, i.stop - 1);
				return;
			}
			// split existing range
			else if (v < i.stop - 1) {
				var x = new Interval(i.start, v);
				i.start = v + 1;
				this.intervals.splice(k, 0, x);
				return;
			}
		}
	}
};

IntervalSet.prototype.toString = function(literalNames, symbolicNames, elemsAreChar) {
	literalNames = literalNames || null;
	symbolicNames = symbolicNames || null;
	elemsAreChar = elemsAreChar || false;
	if (this.intervals === null) {
		return "{}";
	} else if(literalNames!==null || symbolicNames!==null) {
		return this.toTokenString(literalNames, symbolicNames);
	} else if(elemsAreChar) {
		return this.toCharString();
	} else {
		return this.toIndexString();
	}
};

IntervalSet.prototype.toCharString = function() {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		if(v.stop===v.start+1) {
			if ( v.start===Token.EOF ) {
				names.push("<EOF>");
			} else {
				names.push("'" + String.fromCharCode(v.start) + "'");
			}
		} else {
			names.push("'" + String.fromCharCode(v.start) + "'..'" + String.fromCharCode(v.stop-1) + "'");
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};


IntervalSet.prototype.toIndexString = function() {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		if(v.stop===v.start+1) {
			if ( v.start===Token.EOF ) {
				names.push("<EOF>");
			} else {
				names.push(v.start.toString());
			}
		} else {
			names.push(v.start.toString() + ".." + (v.stop-1).toString());
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};


IntervalSet.prototype.toTokenString = function(literalNames, symbolicNames) {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		for (var j = v.start; j < v.stop; j++) {
			names.push(this.elementName(literalNames, symbolicNames, j));
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};

IntervalSet.prototype.elementName = function(literalNames, symbolicNames, a) {
	if (a === Token.EOF) {
		return "<EOF>";
	} else if (a === Token.EPSILON) {
		return "<EPSILON>";
	} else {
		return literalNames[a] || symbolicNames[a];
	}
};

exports.Interval = Interval;
exports.IntervalSet = IntervalSet;


/***/ }),

/***/ "./node_modules/antlr4/LL1Analyzer.js":
/*!********************************************!*\
  !*** ./node_modules/antlr4/LL1Analyzer.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var Set = __webpack_require__(/*! ./Utils */ "./node_modules/antlr4/Utils.js").Set;
var BitSet = __webpack_require__(/*! ./Utils */ "./node_modules/antlr4/Utils.js").BitSet;
var Token = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/Token.js").Token;
var ATNConfig = __webpack_require__(/*! ./atn/ATNConfig */ "./node_modules/antlr4/atn/ATNConfig.js").ATNConfig;
var Interval = __webpack_require__(/*! ./IntervalSet */ "./node_modules/antlr4/IntervalSet.js").Interval;
var IntervalSet = __webpack_require__(/*! ./IntervalSet */ "./node_modules/antlr4/IntervalSet.js").IntervalSet;
var RuleStopState = __webpack_require__(/*! ./atn/ATNState */ "./node_modules/antlr4/atn/ATNState.js").RuleStopState;
var RuleTransition = __webpack_require__(/*! ./atn/Transition */ "./node_modules/antlr4/atn/Transition.js").RuleTransition;
var NotSetTransition = __webpack_require__(/*! ./atn/Transition */ "./node_modules/antlr4/atn/Transition.js").NotSetTransition;
var WildcardTransition = __webpack_require__(/*! ./atn/Transition */ "./node_modules/antlr4/atn/Transition.js").WildcardTransition;
var AbstractPredicateTransition = __webpack_require__(/*! ./atn/Transition */ "./node_modules/antlr4/atn/Transition.js").AbstractPredicateTransition;

var pc = __webpack_require__(/*! ./PredictionContext */ "./node_modules/antlr4/PredictionContext.js");
var predictionContextFromRuleContext = pc.predictionContextFromRuleContext;
var PredictionContext = pc.PredictionContext;
var SingletonPredictionContext = pc.SingletonPredictionContext;

function LL1Analyzer (atn) {
    this.atn = atn;
}

//* Special value added to the lookahead sets to indicate that we hit
//  a predicate during analysis if {@code seeThruPreds==false}.
///
LL1Analyzer.HIT_PRED = Token.INVALID_TYPE;


//*
// Calculates the SLL(1) expected lookahead set for each outgoing transition
// of an {@link ATNState}. The returned array has one element for each
// outgoing transition in {@code s}. If the closure from transition
// <em>i</em> leads to a semantic predicate before matching a symbol, the
// element at index <em>i</em> of the result will be {@code null}.
//
// @param s the ATN state
// @return the expected symbols for each outgoing transition of {@code s}.
///
LL1Analyzer.prototype.getDecisionLookahead = function(s) {
    if (s === null) {
        return null;
    }
    var count = s.transitions.length;
    var look = [];
    for(var alt=0; alt< count; alt++) {
        look[alt] = new IntervalSet();
        var lookBusy = new Set();
        var seeThruPreds = false; // fail to get lookahead upon pred
        this._LOOK(s.transition(alt).target, null, PredictionContext.EMPTY,
              look[alt], lookBusy, new BitSet(), seeThruPreds, false);
        // Wipe out lookahead for this alternative if we found nothing
        // or we had a predicate when we !seeThruPreds
        if (look[alt].length===0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {
            look[alt] = null;
        }
    }
    return look;
};

//*
// Compute set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
//
// <p>If {@code ctx} is {@code null} and the end of the rule containing
// {@code s} is reached, {@link Token//EPSILON} is added to the result set.
// If {@code ctx} is not {@code null} and the end of the outermost rule is
// reached, {@link Token//EOF} is added to the result set.</p>
//
// @param s the ATN state
// @param stopState the ATN state to stop at. This can be a
// {@link BlockEndState} to detect epsilon paths through a closure.
// @param ctx the complete parser context, or {@code null} if the context
// should be ignored
//
// @return The set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
///
LL1Analyzer.prototype.LOOK = function(s, stopState, ctx) {
    var r = new IntervalSet();
    var seeThruPreds = true; // ignore preds; get all lookahead
	ctx = ctx || null;
    var lookContext = ctx!==null ? predictionContextFromRuleContext(s.atn, ctx) : null;
    this._LOOK(s, stopState, lookContext, r, new Set(), new BitSet(), seeThruPreds, true);
    return r;
};

//*
// Compute set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
//
// <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the
// rule containing {@code s} is reached, {@link Token//EPSILON} is added to
// the result set. If {@code ctx} is not {@code null} and {@code addEOF} is
// {@code true} and {@code stopState} or the end of the outermost rule is
// reached, {@link Token//EOF} is added to the result set.</p>
//
// @param s the ATN state.
// @param stopState the ATN state to stop at. This can be a
// {@link BlockEndState} to detect epsilon paths through a closure.
// @param ctx The outer context, or {@code null} if the outer context should
// not be used.
// @param look The result lookahead set.
// @param lookBusy A set used for preventing epsilon closures in the ATN
// from causing a stack overflow. Outside code should pass
// {@code new Set<ATNConfig>} for this argument.
// @param calledRuleStack A set used for preventing left recursion in the
// ATN from causing a stack overflow. Outside code should pass
// {@code new BitSet()} for this argument.
// @param seeThruPreds {@code true} to true semantic predicates as
// implicitly {@code true} and "see through them", otherwise {@code false}
// to treat semantic predicates as opaque and add {@link //HIT_PRED} to the
// result if one is encountered.
// @param addEOF Add {@link Token//EOF} to the result if the end of the
// outermost context is reached. This parameter has no effect if {@code ctx}
// is {@code null}.
///
LL1Analyzer.prototype._LOOK = function(s, stopState , ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {
    var c = new ATNConfig({state:s, alt:0, context: ctx}, null);
    if (lookBusy.contains(c)) {
        return;
    }
    lookBusy.add(c);
    if (s === stopState) {
        if (ctx ===null) {
            look.addOne(Token.EPSILON);
            return;
        } else if (ctx.isEmpty() && addEOF) {
            look.addOne(Token.EOF);
            return;
        }
    }
    if (s instanceof RuleStopState ) {
        if (ctx ===null) {
            look.addOne(Token.EPSILON);
            return;
        } else if (ctx.isEmpty() && addEOF) {
            look.addOne(Token.EOF);
            return;
        }
        if (ctx !== PredictionContext.EMPTY) {
            // run thru all possible stack tops in ctx
            for(var i=0; i<ctx.length; i++) {
                var returnState = this.atn.states[ctx.getReturnState(i)];
                var removed = calledRuleStack.contains(returnState.ruleIndex);
                try {
                    calledRuleStack.remove(returnState.ruleIndex);
                    this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                } finally {
                    if (removed) {
                        calledRuleStack.add(returnState.ruleIndex);
                    }
                }
            }
            return;
        }
    }
    for(var j=0; j<s.transitions.length; j++) {
        var t = s.transitions[j];
        if (t.constructor === RuleTransition) {
            if (calledRuleStack.contains(t.target.ruleIndex)) {
                continue;
            }
            var newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber);
            try {
                calledRuleStack.add(t.target.ruleIndex);
                this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            } finally {
                calledRuleStack.remove(t.target.ruleIndex);
            }
        } else if (t instanceof AbstractPredicateTransition ) {
            if (seeThruPreds) {
                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            } else {
                look.addOne(LL1Analyzer.HIT_PRED);
            }
        } else if( t.isEpsilon) {
            this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
        } else if (t.constructor === WildcardTransition) {
            look.addRange( Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType );
        } else {
            var set = t.label;
            if (set !== null) {
                if (t instanceof NotSetTransition) {
                    set = set.complement(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);
                }
                look.addSet(set);
            }
        }
    }
};

exports.LL1Analyzer = LL1Analyzer;



/***/ }),

/***/ "./node_modules/antlr4/Lexer.js":
/*!**************************************!*\
  !*** ./node_modules/antlr4/Lexer.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// A lexer is recognizer that draws input symbols from a character stream.
//  lexer grammars result in a subclass of this object. A Lexer object
//  uses simplified match() and error recovery mechanisms in the interest of speed.

var Token = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/Token.js").Token;
var Recognizer = __webpack_require__(/*! ./Recognizer */ "./node_modules/antlr4/Recognizer.js").Recognizer;
var CommonTokenFactory = __webpack_require__(/*! ./CommonTokenFactory */ "./node_modules/antlr4/CommonTokenFactory.js").CommonTokenFactory;
var RecognitionException  = __webpack_require__(/*! ./error/Errors */ "./node_modules/antlr4/error/Errors.js").RecognitionException;
var LexerNoViableAltException = __webpack_require__(/*! ./error/Errors */ "./node_modules/antlr4/error/Errors.js").LexerNoViableAltException;

function TokenSource() {
	return this;
}

function Lexer(input) {
	Recognizer.call(this);
	this._input = input;
	this._factory = CommonTokenFactory.DEFAULT;
	this._tokenFactorySourcePair = [ this, input ];

	this._interp = null; // child classes must populate this

	// The goal of all lexer rules/methods is to create a token object.
	// this is an instance variable as multiple rules may collaborate to
	// create a single token. nextToken will return this object after
	// matching lexer rule(s). If you subclass to allow multiple token
	// emissions, then set this to the last token to be matched or
	// something nonnull so that the auto token emit mechanism will not
	// emit another token.
	this._token = null;

	// What character index in the stream did the current token start at?
	// Needed, for example, to get the text for current token. Set at
	// the start of nextToken.
	this._tokenStartCharIndex = -1;

	// The line on which the first character of the token resides///
	this._tokenStartLine = -1;

	// The character position of first character within the line///
	this._tokenStartColumn = -1;

	// Once we see EOF on char stream, next token will be EOF.
	// If you have DONE : EOF ; then you see DONE EOF.
	this._hitEOF = false;

	// The channel number for the current token///
	this._channel = Token.DEFAULT_CHANNEL;

	// The token type for the current token///
	this._type = Token.INVALID_TYPE;

	this._modeStack = [];
	this._mode = Lexer.DEFAULT_MODE;

	// You can set the text for the current token to override what is in
	// the input char buffer. Use setText() or can set this instance var.
	// /
	this._text = null;

	return this;
}

Lexer.prototype = Object.create(Recognizer.prototype);
Lexer.prototype.constructor = Lexer;

Lexer.DEFAULT_MODE = 0;
Lexer.MORE = -2;
Lexer.SKIP = -3;

Lexer.DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL;
Lexer.HIDDEN = Token.HIDDEN_CHANNEL;
Lexer.MIN_CHAR_VALUE = 0x0000;
Lexer.MAX_CHAR_VALUE = 0x10FFFF;

Lexer.prototype.reset = function() {
	// wack Lexer state variables
	if (this._input !== null) {
		this._input.seek(0); // rewind the input
	}
	this._token = null;
	this._type = Token.INVALID_TYPE;
	this._channel = Token.DEFAULT_CHANNEL;
	this._tokenStartCharIndex = -1;
	this._tokenStartColumn = -1;
	this._tokenStartLine = -1;
	this._text = null;

	this._hitEOF = false;
	this._mode = Lexer.DEFAULT_MODE;
	this._modeStack = [];

	this._interp.reset();
};

// Return a token from this source; i.e., match a token on the char stream.
Lexer.prototype.nextToken = function() {
	if (this._input === null) {
		throw "nextToken requires a non-null input stream.";
	}

	// Mark start location in char stream so unbuffered streams are
	// guaranteed at least have text of current token
	var tokenStartMarker = this._input.mark();
	try {
		while (true) {
			if (this._hitEOF) {
				this.emitEOF();
				return this._token;
			}
			this._token = null;
			this._channel = Token.DEFAULT_CHANNEL;
			this._tokenStartCharIndex = this._input.index;
			this._tokenStartColumn = this._interp.column;
			this._tokenStartLine = this._interp.line;
			this._text = null;
			var continueOuter = false;
			while (true) {
				this._type = Token.INVALID_TYPE;
				var ttype = Lexer.SKIP;
				try {
					ttype = this._interp.match(this._input, this._mode);
				} catch (e) {
				    if(e instanceof RecognitionException) {
                        this.notifyListeners(e); // report error
                        this.recover(e);
                    } else {
                        console.log(e.stack);
                        throw e;
                    }
				}
				if (this._input.LA(1) === Token.EOF) {
					this._hitEOF = true;
				}
				if (this._type === Token.INVALID_TYPE) {
					this._type = ttype;
				}
				if (this._type === Lexer.SKIP) {
					continueOuter = true;
					break;
				}
				if (this._type !== Lexer.MORE) {
					break;
				}
			}
			if (continueOuter) {
				continue;
			}
			if (this._token === null) {
				this.emit();
			}
			return this._token;
		}
	} finally {
		// make sure we release marker after match or
		// unbuffered char stream will keep buffering
		this._input.release(tokenStartMarker);
	}
};

// Instruct the lexer to skip creating a token for current lexer rule
// and look for another token. nextToken() knows to keep looking when
// a lexer rule finishes with token set to SKIP_TOKEN. Recall that
// if token==null at end of any token rule, it creates one for you
// and emits it.
// /
Lexer.prototype.skip = function() {
	this._type = Lexer.SKIP;
};

Lexer.prototype.more = function() {
	this._type = Lexer.MORE;
};

Lexer.prototype.mode = function(m) {
	this._mode = m;
};

Lexer.prototype.pushMode = function(m) {
	if (this._interp.debug) {
		console.log("pushMode " + m);
	}
	this._modeStack.push(this._mode);
	this.mode(m);
};

Lexer.prototype.popMode = function() {
	if (this._modeStack.length === 0) {
		throw "Empty Stack";
	}
	if (this._interp.debug) {
		console.log("popMode back to " + this._modeStack.slice(0, -1));
	}
	this.mode(this._modeStack.pop());
	return this._mode;
};

// Set the char stream and reset the lexer
Object.defineProperty(Lexer.prototype, "inputStream", {
	get : function() {
		return this._input;
	},
	set : function(input) {
		this._input = null;
		this._tokenFactorySourcePair = [ this, this._input ];
		this.reset();
		this._input = input;
		this._tokenFactorySourcePair = [ this, this._input ];
	}
});

Object.defineProperty(Lexer.prototype, "sourceName", {
	get : function sourceName() {
		return this._input.sourceName;
	}
});

// By default does not support multiple emits per nextToken invocation
// for efficiency reasons. Subclass and override this method, nextToken,
// and getToken (to push tokens into a list and pull from that list
// rather than a single variable as this implementation does).
// /
Lexer.prototype.emitToken = function(token) {
	this._token = token;
};

// The standard method called to automatically emit a token at the
// outermost lexical rule. The token object should point into the
// char buffer start..stop. If there is a text override in 'text',
// use that to set the token's text. Override this method to emit
// custom Token objects or provide a new factory.
// /
Lexer.prototype.emit = function() {
	var t = this._factory.create(this._tokenFactorySourcePair, this._type,
			this._text, this._channel, this._tokenStartCharIndex, this
					.getCharIndex() - 1, this._tokenStartLine,
			this._tokenStartColumn);
	this.emitToken(t);
	return t;
};

Lexer.prototype.emitEOF = function() {
	var cpos = this.column;
	var lpos = this.line;
	var eof = this._factory.create(this._tokenFactorySourcePair, Token.EOF,
			null, Token.DEFAULT_CHANNEL, this._input.index,
			this._input.index - 1, lpos, cpos);
	this.emitToken(eof);
	return eof;
};

Object.defineProperty(Lexer.prototype, "type", {
	get : function() {
		return this.type;
	},
	set : function(type) {
		this._type = type;
	}
});

Object.defineProperty(Lexer.prototype, "line", {
	get : function() {
		return this._interp.line;
	},
	set : function(line) {
		this._interp.line = line;
	}
});

Object.defineProperty(Lexer.prototype, "column", {
	get : function() {
		return this._interp.column;
	},
	set : function(column) {
		this._interp.column = column;
	}
});


// What is the index of the current character of lookahead?///
Lexer.prototype.getCharIndex = function() {
	return this._input.index;
};

// Return the text matched so far for the current token or any text override.
//Set the complete text of this token; it wipes any previous changes to the text.
Object.defineProperty(Lexer.prototype, "text", {
	get : function() {
		if (this._text !== null) {
			return this._text;
		} else {
			return this._interp.getText(this._input);
		}
	},
	set : function(text) {
		this._text = text;
	}
});
// Return a list of all Token objects in input char stream.
// Forces load of all tokens. Does not include EOF token.
// /
Lexer.prototype.getAllTokens = function() {
	var tokens = [];
	var t = this.nextToken();
	while (t.type !== Token.EOF) {
		tokens.push(t);
		t = this.nextToken();
	}
	return tokens;
};

Lexer.prototype.notifyListeners = function(e) {
	var start = this._tokenStartCharIndex;
	var stop = this._input.index;
	var text = this._input.getText(start, stop);
	var msg = "token recognition error at: '" + this.getErrorDisplay(text) + "'";
	var listener = this.getErrorListenerDispatch();
	listener.syntaxError(this, null, this._tokenStartLine,
			this._tokenStartColumn, msg, e);
};

Lexer.prototype.getErrorDisplay = function(s) {
	var d = [];
	for (var i = 0; i < s.length; i++) {
		d.push(s[i]);
	}
	return d.join('');
};

Lexer.prototype.getErrorDisplayForChar = function(c) {
	if (c.charCodeAt(0) === Token.EOF) {
		return "<EOF>";
	} else if (c === '\n') {
		return "\\n";
	} else if (c === '\t') {
		return "\\t";
	} else if (c === '\r') {
		return "\\r";
	} else {
		return c;
	}
};

Lexer.prototype.getCharErrorDisplay = function(c) {
	return "'" + this.getErrorDisplayForChar(c) + "'";
};

// Lexers can normally match any char in it's vocabulary after matching
// a token, so do the easy thing and just kill a character and hope
// it all works out. You can instead use the rule invocation stack
// to do sophisticated error recovery if you are in a fragment rule.
// /
Lexer.prototype.recover = function(re) {
	if (this._input.LA(1) !== Token.EOF) {
		if (re instanceof LexerNoViableAltException) {
			// skip a char and try again
			this._interp.consume(this._input);
		} else {
			// TODO: Do we lose character or line position information?
			this._input.consume();
		}
	}
};

exports.Lexer = Lexer;


/***/ }),

/***/ "./node_modules/antlr4/Parser.js":
/*!***************************************!*\
  !*** ./node_modules/antlr4/Parser.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Token = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/Token.js").Token;
var ParseTreeListener = __webpack_require__(/*! ./tree/Tree */ "./node_modules/antlr4/tree/Tree.js").ParseTreeListener;
var Recognizer = __webpack_require__(/*! ./Recognizer */ "./node_modules/antlr4/Recognizer.js").Recognizer;
var DefaultErrorStrategy = __webpack_require__(/*! ./error/ErrorStrategy */ "./node_modules/antlr4/error/ErrorStrategy.js").DefaultErrorStrategy;
var ATNDeserializer = __webpack_require__(/*! ./atn/ATNDeserializer */ "./node_modules/antlr4/atn/ATNDeserializer.js").ATNDeserializer;
var ATNDeserializationOptions = __webpack_require__(/*! ./atn/ATNDeserializationOptions */ "./node_modules/antlr4/atn/ATNDeserializationOptions.js").ATNDeserializationOptions;
var TerminalNode = __webpack_require__(/*! ./tree/Tree */ "./node_modules/antlr4/tree/Tree.js").TerminalNode;
var ErrorNode = __webpack_require__(/*! ./tree/Tree */ "./node_modules/antlr4/tree/Tree.js").ErrorNode;

function TraceListener(parser) {
	ParseTreeListener.call(this);
    this.parser = parser;
	return this;
}

TraceListener.prototype = Object.create(ParseTreeListener.prototype);
TraceListener.prototype.constructor = TraceListener;

TraceListener.prototype.enterEveryRule = function(ctx) {
	console.log("enter   " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
};

TraceListener.prototype.visitTerminal = function( node) {
	console.log("consume " + node.symbol + " rule " + this.parser.ruleNames[this.parser._ctx.ruleIndex]);
};

TraceListener.prototype.exitEveryRule = function(ctx) {
	console.log("exit    " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
};

// this is all the parsing support code essentially; most of it is error
// recovery stuff.//
function Parser(input) {
	Recognizer.call(this);
	// The input stream.
	this._input = null;
	// The error handling strategy for the parser. The default value is a new
	// instance of {@link DefaultErrorStrategy}.
	this._errHandler = new DefaultErrorStrategy();
	this._precedenceStack = [];
	this._precedenceStack.push(0);
	// The {@link ParserRuleContext} object for the currently executing rule.
	// this is always non-null during the parsing process.
	this._ctx = null;
	// Specifies whether or not the parser should construct a parse tree during
	// the parsing process. The default value is {@code true}.
	this.buildParseTrees = true;
	// When {@link //setTrace}{@code (true)} is called, a reference to the
	// {@link TraceListener} is stored here so it can be easily removed in a
	// later call to {@link //setTrace}{@code (false)}. The listener itself is
	// implemented as a parser listener so this field is not directly used by
	// other parser methods.
	this._tracer = null;
	// The list of {@link ParseTreeListener} listeners registered to receive
	// events during the parse.
	this._parseListeners = null;
	// The number of syntax errors reported during parsing. this value is
	// incremented each time {@link //notifyErrorListeners} is called.
	this._syntaxErrors = 0;
	this.setInputStream(input);
	return this;
}

Parser.prototype = Object.create(Recognizer.prototype);
Parser.prototype.contructor = Parser;

// this field maps from the serialized ATN string to the deserialized {@link
// ATN} with
// bypass alternatives.
//
// @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()
//
Parser.bypassAltsAtnCache = {};

// reset the parser's state//
Parser.prototype.reset = function() {
	if (this._input !== null) {
		this._input.seek(0);
	}
	this._errHandler.reset(this);
	this._ctx = null;
	this._syntaxErrors = 0;
	this.setTrace(false);
	this._precedenceStack = [];
	this._precedenceStack.push(0);
	if (this._interp !== null) {
		this._interp.reset();
	}
};

// Match current input symbol against {@code ttype}. If the symbol type
// matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are
// called to complete the match process.
//
// <p>If the symbol type does not match,
// {@link ANTLRErrorStrategy//recoverInline} is called on the current error
// strategy to attempt recovery. If {@link //getBuildParseTree} is
// {@code true} and the token index of the symbol returned by
// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
//
// @param ttype the token type to match
// @return the matched symbol
// @throws RecognitionException if the current input symbol did not match
// {@code ttype} and the error strategy could not recover from the
// mismatched symbol

Parser.prototype.match = function(ttype) {
	var t = this.getCurrentToken();
	if (t.type === ttype) {
		this._errHandler.reportMatch(this);
		this.consume();
	} else {
		t = this._errHandler.recoverInline(this);
		if (this.buildParseTrees && t.tokenIndex === -1) {
			// we must have conjured up a new token during single token
			// insertion
			// if it's not the current symbol
			this._ctx.addErrorNode(t);
		}
	}
	return t;
};
// Match current input symbol as a wildcard. If the symbol type matches
// (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}
// and {@link //consume} are called to complete the match process.
//
// <p>If the symbol type does not match,
// {@link ANTLRErrorStrategy//recoverInline} is called on the current error
// strategy to attempt recovery. If {@link //getBuildParseTree} is
// {@code true} and the token index of the symbol returned by
// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
//
// @return the matched symbol
// @throws RecognitionException if the current input symbol did not match
// a wildcard and the error strategy could not recover from the mismatched
// symbol

Parser.prototype.matchWildcard = function() {
	var t = this.getCurrentToken();
	if (t.type > 0) {
		this._errHandler.reportMatch(this);
		this.consume();
	} else {
		t = this._errHandler.recoverInline(this);
		if (this._buildParseTrees && t.tokenIndex === -1) {
			// we must have conjured up a new token during single token
			// insertion
			// if it's not the current symbol
			this._ctx.addErrorNode(t);
		}
	}
	return t;
};

Parser.prototype.getParseListeners = function() {
	return this._parseListeners || [];
};

// Registers {@code listener} to receive events during the parsing process.
//
// <p>To support output-preserving grammar transformations (including but not
// limited to left-recursion removal, automated left-factoring, and
// optimized code generation), calls to listener methods during the parse
// may differ substantially from calls made by
// {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In
// particular, rule entry and exit events may occur in a different order
// during the parse than after the parser. In addition, calls to certain
// rule entry methods may be omitted.</p>
//
// <p>With the following specific exceptions, calls to listener events are
// <em>deterministic</em>, i.e. for identical input the calls to listener
// methods will be the same.</p>
//
// <ul>
// <li>Alterations to the grammar used to generate code may change the
// behavior of the listener calls.</li>
// <li>Alterations to the command line options passed to ANTLR 4 when
// generating the parser may change the behavior of the listener calls.</li>
// <li>Changing the version of the ANTLR Tool used to generate the parser
// may change the behavior of the listener calls.</li>
// </ul>
//
// @param listener the listener to add
//
// @throws NullPointerException if {@code} listener is {@code null}
//
Parser.prototype.addParseListener = function(listener) {
	if (listener === null) {
		throw "listener";
	}
	if (this._parseListeners === null) {
		this._parseListeners = [];
	}
	this._parseListeners.push(listener);
};

//
// Remove {@code listener} from the list of parse listeners.
//
// <p>If {@code listener} is {@code null} or has not been added as a parse
// listener, this method does nothing.</p>
// @param listener the listener to remove
//
Parser.prototype.removeParseListener = function(listener) {
	if (this._parseListeners !== null) {
		var idx = this._parseListeners.indexOf(listener);
		if (idx >= 0) {
			this._parseListeners.splice(idx, 1);
		}
		if (this._parseListeners.length === 0) {
			this._parseListeners = null;
		}
	}
};

// Remove all parse listeners.
Parser.prototype.removeParseListeners = function() {
	this._parseListeners = null;
};

// Notify any parse listeners of an enter rule event.
Parser.prototype.triggerEnterRuleEvent = function() {
	if (this._parseListeners !== null) {
        var ctx = this._ctx;
		this._parseListeners.map(function(listener) {
			listener.enterEveryRule(ctx);
			ctx.enterRule(listener);
		});
	}
};

//
// Notify any parse listeners of an exit rule event.
//
// @see //addParseListener
//
Parser.prototype.triggerExitRuleEvent = function() {
	if (this._parseListeners !== null) {
		// reverse order walk of listeners
        var ctx = this._ctx;
		this._parseListeners.slice(0).reverse().map(function(listener) {
			ctx.exitRule(listener);
			listener.exitEveryRule(ctx);
		});
	}
};

Parser.prototype.getTokenFactory = function() {
	return this._input.tokenSource._factory;
};

// Tell our token source and error strategy about a new way to create tokens.//
Parser.prototype.setTokenFactory = function(factory) {
	this._input.tokenSource._factory = factory;
};

// The ATN with bypass alternatives is expensive to create so we create it
// lazily.
//
// @throws UnsupportedOperationException if the current parser does not
// implement the {@link //getSerializedATN()} method.
//
Parser.prototype.getATNWithBypassAlts = function() {
	var serializedAtn = this.getSerializedATN();
	if (serializedAtn === null) {
		throw "The current parser does not support an ATN with bypass alternatives.";
	}
	var result = this.bypassAltsAtnCache[serializedAtn];
	if (result === null) {
		var deserializationOptions = new ATNDeserializationOptions();
		deserializationOptions.generateRuleBypassTransitions = true;
		result = new ATNDeserializer(deserializationOptions)
				.deserialize(serializedAtn);
		this.bypassAltsAtnCache[serializedAtn] = result;
	}
	return result;
};

// The preferred method of getting a tree pattern. For example, here's a
// sample use:
//
// <pre>
// ParseTree t = parser.expr();
// ParseTreePattern p = parser.compileParseTreePattern("&lt;ID&gt;+0",
// MyParser.RULE_expr);
// ParseTreeMatch m = p.match(t);
// String id = m.get("ID");
// </pre>

var Lexer = __webpack_require__(/*! ./Lexer */ "./node_modules/antlr4/Lexer.js").Lexer;

Parser.prototype.compileParseTreePattern = function(pattern, patternRuleIndex, lexer) {
	lexer = lexer || null;
	if (lexer === null) {
		if (this.getTokenStream() !== null) {
			var tokenSource = this.getTokenStream().tokenSource;
			if (tokenSource instanceof Lexer) {
				lexer = tokenSource;
			}
		}
	}
	if (lexer === null) {
		throw "Parser can't discover a lexer to use";
	}
	var m = new ParseTreePatternMatcher(lexer, this);
	return m.compile(pattern, patternRuleIndex);
};

Parser.prototype.getInputStream = function() {
	return this.getTokenStream();
};

Parser.prototype.setInputStream = function(input) {
	this.setTokenStream(input);
};

Parser.prototype.getTokenStream = function() {
	return this._input;
};

// Set the token stream and reset the parser.//
Parser.prototype.setTokenStream = function(input) {
	this._input = null;
	this.reset();
	this._input = input;
};

// Match needs to return the current input symbol, which gets put
// into the label for the associated token ref; e.g., x=ID.
//
Parser.prototype.getCurrentToken = function() {
	return this._input.LT(1);
};

Parser.prototype.notifyErrorListeners = function(msg, offendingToken, err) {
	offendingToken = offendingToken || null;
	err = err || null;
	if (offendingToken === null) {
		offendingToken = this.getCurrentToken();
	}
	this._syntaxErrors += 1;
	var line = offendingToken.line;
	var column = offendingToken.column;
	var listener = this.getErrorListenerDispatch();
	listener.syntaxError(this, offendingToken, line, column, msg, err);
};

//
// Consume and return the {@linkplain //getCurrentToken current symbol}.
//
// <p>E.g., given the following input with {@code A} being the current
// lookahead symbol, this function moves the cursor to {@code B} and returns
// {@code A}.</p>
//
// <pre>
// A B
// ^
// </pre>
//
// If the parser is not in error recovery mode, the consumed symbol is added
// to the parse tree using {@link ParserRuleContext//addChild(Token)}, and
// {@link ParseTreeListener//visitTerminal} is called on any parse listeners.
// If the parser <em>is</em> in error recovery mode, the consumed symbol is
// added to the parse tree using
// {@link ParserRuleContext//addErrorNode(Token)}, and
// {@link ParseTreeListener//visitErrorNode} is called on any parse
// listeners.
//
Parser.prototype.consume = function() {
	var o = this.getCurrentToken();
	if (o.type !== Token.EOF) {
		this.getInputStream().consume();
	}
	var hasListener = this._parseListeners !== null && this._parseListeners.length > 0;
	if (this.buildParseTrees || hasListener) {
		var node;
		if (this._errHandler.inErrorRecoveryMode(this)) {
			node = this._ctx.addErrorNode(o);
		} else {
			node = this._ctx.addTokenNode(o);
		}
        node.invokingState = this.state;
		if (hasListener) {
			this._parseListeners.map(function(listener) {
				if (node instanceof ErrorNode || (node.isErrorNode !== undefined && node.isErrorNode())) {
					listener.visitErrorNode(node);
				} else if (node instanceof TerminalNode) {
					listener.visitTerminal(node);
				}
			});
		}
	}
	return o;
};

Parser.prototype.addContextToParseTree = function() {
	// add current context to parent if we have a parent
	if (this._ctx.parentCtx !== null) {
		this._ctx.parentCtx.addChild(this._ctx);
	}
};

// Always called by generated parsers upon entry to a rule. Access field
// {@link //_ctx} get the current context.

Parser.prototype.enterRule = function(localctx, state, ruleIndex) {
	this.state = state;
	this._ctx = localctx;
	this._ctx.start = this._input.LT(1);
	if (this.buildParseTrees) {
		this.addContextToParseTree();
	}
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent();
	}
};

Parser.prototype.exitRule = function() {
	this._ctx.stop = this._input.LT(-1);
	// trigger event on _ctx, before it reverts to parent
	if (this._parseListeners !== null) {
		this.triggerExitRuleEvent();
	}
	this.state = this._ctx.invokingState;
	this._ctx = this._ctx.parentCtx;
};

Parser.prototype.enterOuterAlt = function(localctx, altNum) {
   	localctx.setAltNumber(altNum);
	// if we have new localctx, make sure we replace existing ctx
	// that is previous child of parse tree
	if (this.buildParseTrees && this._ctx !== localctx) {
		if (this._ctx.parentCtx !== null) {
			this._ctx.parentCtx.removeLastChild();
			this._ctx.parentCtx.addChild(localctx);
		}
	}
	this._ctx = localctx;
};

// Get the precedence level for the top-most precedence rule.
//
// @return The precedence level for the top-most precedence rule, or -1 if
// the parser context is not nested within a precedence rule.

Parser.prototype.getPrecedence = function() {
	if (this._precedenceStack.length === 0) {
		return -1;
	} else {
		return this._precedenceStack[this._precedenceStack.length-1];
	}
};

Parser.prototype.enterRecursionRule = function(localctx, state, ruleIndex,
		precedence) {
	this.state = state;
	this._precedenceStack.push(precedence);
	this._ctx = localctx;
	this._ctx.start = this._input.LT(1);
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent(); // simulates rule entry for
										// left-recursive rules
	}
};

//
// Like {@link //enterRule} but for recursive rules.

Parser.prototype.pushNewRecursionContext = function(localctx, state, ruleIndex) {
	var previous = this._ctx;
	previous.parentCtx = localctx;
	previous.invokingState = state;
	previous.stop = this._input.LT(-1);

	this._ctx = localctx;
	this._ctx.start = previous.start;
	if (this.buildParseTrees) {
		this._ctx.addChild(previous);
	}
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent(); // simulates rule entry for
										// left-recursive rules
	}
};

Parser.prototype.unrollRecursionContexts = function(parentCtx) {
	this._precedenceStack.pop();
	this._ctx.stop = this._input.LT(-1);
	var retCtx = this._ctx; // save current ctx (return value)
	// unroll so _ctx is as it was before call to recursive method
	if (this._parseListeners !== null) {
		while (this._ctx !== parentCtx) {
			this.triggerExitRuleEvent();
			this._ctx = this._ctx.parentCtx;
		}
	} else {
		this._ctx = parentCtx;
	}
	// hook into tree
	retCtx.parentCtx = parentCtx;
	if (this.buildParseTrees && parentCtx !== null) {
		// add return ctx into invoking rule's tree
		parentCtx.addChild(retCtx);
	}
};

Parser.prototype.getInvokingContext = function(ruleIndex) {
	var ctx = this._ctx;
	while (ctx !== null) {
		if (ctx.ruleIndex === ruleIndex) {
			return ctx;
		}
		ctx = ctx.parentCtx;
	}
	return null;
};

Parser.prototype.precpred = function(localctx, precedence) {
	return precedence >= this._precedenceStack[this._precedenceStack.length-1];
};

Parser.prototype.inContext = function(context) {
	// TODO: useful in parser?
	return false;
};

//
// Checks whether or not {@code symbol} can follow the current state in the
// ATN. The behavior of this method is equivalent to the following, but is
// implemented such that the complete context-sensitive follow set does not
// need to be explicitly constructed.
//
// <pre>
// return getExpectedTokens().contains(symbol);
// </pre>
//
// @param symbol the symbol type to check
// @return {@code true} if {@code symbol} can follow the current state in
// the ATN, otherwise {@code false}.

Parser.prototype.isExpectedToken = function(symbol) {
	var atn = this._interp.atn;
	var ctx = this._ctx;
	var s = atn.states[this.state];
	var following = atn.nextTokens(s);
	if (following.contains(symbol)) {
		return true;
	}
	if (!following.contains(Token.EPSILON)) {
		return false;
	}
	while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
		var invokingState = atn.states[ctx.invokingState];
		var rt = invokingState.transitions[0];
		following = atn.nextTokens(rt.followState);
		if (following.contains(symbol)) {
			return true;
		}
		ctx = ctx.parentCtx;
	}
	if (following.contains(Token.EPSILON) && symbol === Token.EOF) {
		return true;
	} else {
		return false;
	}
};

// Computes the set of input symbols which could follow the current parser
// state and context, as given by {@link //getState} and {@link //getContext},
// respectively.
//
// @see ATN//getExpectedTokens(int, RuleContext)
//
Parser.prototype.getExpectedTokens = function() {
	return this._interp.atn.getExpectedTokens(this.state, this._ctx);
};

Parser.prototype.getExpectedTokensWithinCurrentRule = function() {
	var atn = this._interp.atn;
	var s = atn.states[this.state];
	return atn.nextTokens(s);
};

// Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.//
Parser.prototype.getRuleIndex = function(ruleName) {
	var ruleIndex = this.getRuleIndexMap()[ruleName];
	if (ruleIndex !== null) {
		return ruleIndex;
	} else {
		return -1;
	}
};

// Return List&lt;String&gt; of the rule names in your parser instance
// leading up to a call to the current rule. You could override if
// you want more details such as the file/line info of where
// in the ATN a rule is invoked.
//
// this is very useful for error messages.
//
Parser.prototype.getRuleInvocationStack = function(p) {
	p = p || null;
	if (p === null) {
		p = this._ctx;
	}
	var stack = [];
	while (p !== null) {
		// compute what follows who invoked us
		var ruleIndex = p.ruleIndex;
		if (ruleIndex < 0) {
			stack.push("n/a");
		} else {
			stack.push(this.ruleNames[ruleIndex]);
		}
		p = p.parentCtx;
	}
	return stack;
};

// For debugging and other purposes.//
Parser.prototype.getDFAStrings = function() {
	return this._interp.decisionToDFA.toString();
};
// For debugging and other purposes.//
Parser.prototype.dumpDFA = function() {
	var seenOne = false;
	for (var i = 0; i < this._interp.decisionToDFA.length; i++) {
		var dfa = this._interp.decisionToDFA[i];
		if (dfa.states.length > 0) {
			if (seenOne) {
				console.log();
			}
			this.printer.println("Decision " + dfa.decision + ":");
			this.printer.print(dfa.toString(this.literalNames, this.symbolicNames));
			seenOne = true;
		}
	}
};

/*
"			printer = function() {\r\n" +
"				this.println = function(s) { document.getElementById('output') += s + '\\n'; }\r\n" +
"				this.print = function(s) { document.getElementById('output') += s; }\r\n" +
"			};\r\n" +
*/

Parser.prototype.getSourceName = function() {
	return this._input.sourceName;
};

// During a parse is sometimes useful to listen in on the rule entry and exit
// events as well as token matches. this is for quick and dirty debugging.
//
Parser.prototype.setTrace = function(trace) {
	if (!trace) {
		this.removeParseListener(this._tracer);
		this._tracer = null;
	} else {
		if (this._tracer !== null) {
			this.removeParseListener(this._tracer);
		}
		this._tracer = new TraceListener(this);
		this.addParseListener(this._tracer);
	}
};

exports.Parser = Parser;

/***/ }),

/***/ "./node_modules/antlr4/ParserRuleContext.js":
/*!**************************************************!*\
  !*** ./node_modules/antlr4/ParserRuleContext.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

//* A rule invocation record for parsing.
//
//  Contains all of the information about the current rule not stored in the
//  RuleContext. It handles parse tree children list, Any ATN state
//  tracing, and the default values available for rule indications:
//  start, stop, rule index, current alt number, current
//  ATN state.
//
//  Subclasses made for each rule and grammar track the parameters,
//  return values, locals, and labels specific to that rule. These
//  are the objects that are returned from rules.
//
//  Note text is not an actual field of a rule return value; it is computed
//  from start and stop using the input stream's toString() method.  I
//  could add a ctor to this so that we can pass in and store the input
//  stream, but I'm not sure we want to do that.  It would seem to be undefined
//  to get the .text property anyway if the rule matches tokens from multiple
//  input streams.
//
//  I do not use getters for fields of objects that are used simply to
//  group values such as this aggregate.  The getters/setters are there to
//  satisfy the superclass interface.

var RuleContext = __webpack_require__(/*! ./RuleContext */ "./node_modules/antlr4/RuleContext.js").RuleContext;
var Tree = __webpack_require__(/*! ./tree/Tree */ "./node_modules/antlr4/tree/Tree.js");
var INVALID_INTERVAL = Tree.INVALID_INTERVAL;
var TerminalNode = Tree.TerminalNode;
var TerminalNodeImpl = Tree.TerminalNodeImpl;
var ErrorNodeImpl = Tree.ErrorNodeImpl;
var Interval = __webpack_require__(/*! ./IntervalSet */ "./node_modules/antlr4/IntervalSet.js").Interval;

function ParserRuleContext(parent, invokingStateNumber) {
	parent = parent || null;
	invokingStateNumber = invokingStateNumber || null;
	RuleContext.call(this, parent, invokingStateNumber);
	this.ruleIndex = -1;
    // * If we are debugging or building a parse tree for a visitor,
    // we need to track all of the tokens and rule invocations associated
    // with this rule's context. This is empty for parsing w/o tree constr.
    // operation because we don't the need to track the details about
    // how we parse this rule.
    // /
    this.children = null;
    this.start = null;
    this.stop = null;
    // The exception that forced this rule to return. If the rule successfully
    // completed, this is {@code null}.
    this.exception = null;
}

ParserRuleContext.prototype = Object.create(RuleContext.prototype);
ParserRuleContext.prototype.constructor = ParserRuleContext;

// * COPY a ctx (I'm deliberately not using copy constructor)///
ParserRuleContext.prototype.copyFrom = function(ctx) {
    // from RuleContext
    this.parentCtx = ctx.parentCtx;
    this.invokingState = ctx.invokingState;
    this.children = null;
    this.start = ctx.start;
    this.stop = ctx.stop;
    // copy any error nodes to alt label node
    if(ctx.children) {
        this.children = [];
        // reset parent pointer for any error nodes
    	ctx.children.map(function(child) {
    		if (child instanceof ErrorNodeImpl) {
                this.children.push(child);
                child.parentCtx = this;
            }
		}, this);
	}
};

// Double dispatch methods for listeners
ParserRuleContext.prototype.enterRule = function(listener) {
};

ParserRuleContext.prototype.exitRule = function(listener) {
};

// * Does not set parent link; other add methods do that///
ParserRuleContext.prototype.addChild = function(child) {
    if (this.children === null) {
        this.children = [];
    }
    this.children.push(child);
    return child;
};

// * Used by enterOuterAlt to toss out a RuleContext previously added as
// we entered a rule. If we have // label, we will need to remove
// generic ruleContext object.
// /
ParserRuleContext.prototype.removeLastChild = function() {
    if (this.children !== null) {
        this.children.pop();
    }
};

ParserRuleContext.prototype.addTokenNode = function(token) {
    var node = new TerminalNodeImpl(token);
    this.addChild(node);
    node.parentCtx = this;
    return node;
};

ParserRuleContext.prototype.addErrorNode = function(badToken) {
    var node = new ErrorNodeImpl(badToken);
    this.addChild(node);
    node.parentCtx = this;
    return node;
};

ParserRuleContext.prototype.getChild = function(i, type) {
	type = type || null;
	if (this.children === null || i < 0 || i >= this.children.length) {
		return null;
	}
	if (type === null) {
		return this.children[i];
	} else {
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if(child instanceof type) {
				if(i===0) {
					return child;
				} else {
					i -= 1;
				}
			}
		}
		return null;
    }
};


ParserRuleContext.prototype.getToken = function(ttype, i) {
	if (this.children === null || i < 0 || i >= this.children.length) {
		return null;
	}
	for(var j=0; j<this.children.length; j++) {
		var child = this.children[j];
		if (child instanceof TerminalNode) {
			if (child.symbol.type === ttype) {
				if(i===0) {
					return child;
				} else {
					i -= 1;
				}
			}
        }
	}
    return null;
};

ParserRuleContext.prototype.getTokens = function(ttype ) {
    if (this.children=== null) {
        return [];
    } else {
		var tokens = [];
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if (child instanceof TerminalNode) {
				if (child.symbol.type === ttype) {
					tokens.push(child);
				}
			}
		}
		return tokens;
    }
};

ParserRuleContext.prototype.getTypedRuleContext = function(ctxType, i) {
    return this.getChild(i, ctxType);
};

ParserRuleContext.prototype.getTypedRuleContexts = function(ctxType) {
    if (this.children=== null) {
        return [];
    } else {
		var contexts = [];
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if (child instanceof ctxType) {
				contexts.push(child);
			}
		}
		return contexts;
	}
};

ParserRuleContext.prototype.getChildCount = function() {
	if (this.children=== null) {
		return 0;
	} else {
		return this.children.length;
	}
};

ParserRuleContext.prototype.getSourceInterval = function() {
    if( this.start === null || this.stop === null) {
        return INVALID_INTERVAL;
    } else {
        return new Interval(this.start.tokenIndex, this.stop.tokenIndex);
    }
};

RuleContext.EMPTY = new ParserRuleContext();

function InterpreterRuleContext(parent, invokingStateNumber, ruleIndex) {
	ParserRuleContext.call(parent, invokingStateNumber);
    this.ruleIndex = ruleIndex;
    return this;
}

InterpreterRuleContext.prototype = Object.create(ParserRuleContext.prototype);
InterpreterRuleContext.prototype.constructor = InterpreterRuleContext;

exports.ParserRuleContext = ParserRuleContext;

/***/ }),

/***/ "./node_modules/antlr4/PredictionContext.js":
/*!**************************************************!*\
  !*** ./node_modules/antlr4/PredictionContext.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var RuleContext = __webpack_require__(/*! ./RuleContext */ "./node_modules/antlr4/RuleContext.js").RuleContext;
var Hash = __webpack_require__(/*! ./Utils */ "./node_modules/antlr4/Utils.js").Hash;

function PredictionContext(cachedHashCode) {
	this.cachedHashCode = cachedHashCode;
}

// Represents {@code $} in local context prediction, which means wildcard.
// {@code//+x =//}.
// /
PredictionContext.EMPTY = null;

// Represents {@code $} in an array in full context mode, when {@code $}
// doesn't mean wildcard: {@code $ + x = [$,x]}. Here,
// {@code $} = {@link //EMPTY_RETURN_STATE}.
// /
PredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;

PredictionContext.globalNodeCount = 1;
PredictionContext.id = PredictionContext.globalNodeCount;

// Stores the computed hash code of this {@link PredictionContext}. The hash
// code is computed in parts to match the following reference algorithm.
//
// <pre>
// private int referenceHashCode() {
// int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link
// //INITIAL_HASH});
//
// for (int i = 0; i &lt; {@link //size()}; i++) {
// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent
// getParent}(i));
// }
//
// for (int i = 0; i &lt; {@link //size()}; i++) {
// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link
// //getReturnState getReturnState}(i));
// }
//
// hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link
// //size()});
// return hash;
// }
// </pre>
// /

// This means only the {@link //EMPTY} context is in set.
PredictionContext.prototype.isEmpty = function() {
	return this === PredictionContext.EMPTY;
};

PredictionContext.prototype.hasEmptyPath = function() {
	return this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;
};

PredictionContext.prototype.hashCode = function() {
	return this.cachedHashCode;
};


PredictionContext.prototype.updateHashCode = function(hash) {
    hash.update(this.cachedHashCode);
};
/*
function calculateHashString(parent, returnState) {
	return "" + parent + returnState;
}
*/

// Used to cache {@link PredictionContext} objects. Its used for the shared
// context cash associated with contexts in DFA states. This cache
// can be used for both lexers and parsers.

function PredictionContextCache() {
	this.cache = {};
	return this;
}

// Add a context to the cache and return it. If the context already exists,
// return that one instead and do not add a new context to the cache.
// Protect shared cache from unsafe thread access.
//
PredictionContextCache.prototype.add = function(ctx) {
	if (ctx === PredictionContext.EMPTY) {
		return PredictionContext.EMPTY;
	}
	var existing = this.cache[ctx] || null;
	if (existing !== null) {
		return existing;
	}
	this.cache[ctx] = ctx;
	return ctx;
};

PredictionContextCache.prototype.get = function(ctx) {
	return this.cache[ctx] || null;
};

Object.defineProperty(PredictionContextCache.prototype, "length", {
	get : function() {
		return this.cache.length;
	}
});

function SingletonPredictionContext(parent, returnState) {
	var hashCode = 0;
	if(parent !== null) {
		var hash = new Hash();
		hash.update(parent, returnState);
        hashCode = hash.finish();
	}
	PredictionContext.call(this, hashCode);
	this.parentCtx = parent;
	this.returnState = returnState;
}

SingletonPredictionContext.prototype = Object.create(PredictionContext.prototype);
SingletonPredictionContext.prototype.contructor = SingletonPredictionContext;

SingletonPredictionContext.create = function(parent, returnState) {
	if (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {
		// someone can pass in the bits of an array ctx that mean $
		return PredictionContext.EMPTY;
	} else {
		return new SingletonPredictionContext(parent, returnState);
	}
};

Object.defineProperty(SingletonPredictionContext.prototype, "length", {
	get : function() {
		return 1;
	}
});

SingletonPredictionContext.prototype.getParent = function(index) {
	return this.parentCtx;
};

SingletonPredictionContext.prototype.getReturnState = function(index) {
	return this.returnState;
};

SingletonPredictionContext.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof SingletonPredictionContext)) {
		return false;
	} else if (this.hashCode() !== other.hashCode()) {
		return false; // can't be same if hash is different
	} else {
		if(this.returnState !== other.returnState)
            return false;
        else if(this.parentCtx==null)
            return other.parentCtx==null
		else
            return this.parentCtx.equals(other.parentCtx);
	}
};

SingletonPredictionContext.prototype.toString = function() {
	var up = this.parentCtx === null ? "" : this.parentCtx.toString();
	if (up.length === 0) {
		if (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {
			return "$";
		} else {
			return "" + this.returnState;
		}
	} else {
		return "" + this.returnState + " " + up;
	}
};

function EmptyPredictionContext() {
	SingletonPredictionContext.call(this, null, PredictionContext.EMPTY_RETURN_STATE);
	return this;
}

EmptyPredictionContext.prototype = Object.create(SingletonPredictionContext.prototype);
EmptyPredictionContext.prototype.constructor = EmptyPredictionContext;

EmptyPredictionContext.prototype.isEmpty = function() {
	return true;
};

EmptyPredictionContext.prototype.getParent = function(index) {
	return null;
};

EmptyPredictionContext.prototype.getReturnState = function(index) {
	return this.returnState;
};

EmptyPredictionContext.prototype.equals = function(other) {
	return this === other;
};

EmptyPredictionContext.prototype.toString = function() {
	return "$";
};

PredictionContext.EMPTY = new EmptyPredictionContext();

function ArrayPredictionContext(parents, returnStates) {
	// Parent can be null only if full ctx mode and we make an array
	// from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using
	// null parent and
	// returnState == {@link //EMPTY_RETURN_STATE}.
	var h = new Hash();
	h.update(parents, returnStates);
	var hashCode = h.finish();
	PredictionContext.call(this, hashCode);
	this.parents = parents;
	this.returnStates = returnStates;
	return this;
}

ArrayPredictionContext.prototype = Object.create(PredictionContext.prototype);
ArrayPredictionContext.prototype.constructor = ArrayPredictionContext;

ArrayPredictionContext.prototype.isEmpty = function() {
	// since EMPTY_RETURN_STATE can only appear in the last position, we
	// don't need to verify that size==1
	return this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;
};

Object.defineProperty(ArrayPredictionContext.prototype, "length", {
	get : function() {
		return this.returnStates.length;
	}
});

ArrayPredictionContext.prototype.getParent = function(index) {
	return this.parents[index];
};

ArrayPredictionContext.prototype.getReturnState = function(index) {
	return this.returnStates[index];
};

ArrayPredictionContext.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof ArrayPredictionContext)) {
		return false;
	} else if (this.hashCode() !== other.hashCode()) {
		return false; // can't be same if hash is different
	} else {
		return this.returnStates === other.returnStates &&
				this.parents === other.parents;
	}
};

ArrayPredictionContext.prototype.toString = function() {
	if (this.isEmpty()) {
		return "[]";
	} else {
		var s = "[";
		for (var i = 0; i < this.returnStates.length; i++) {
			if (i > 0) {
				s = s + ", ";
			}
			if (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {
				s = s + "$";
				continue;
			}
			s = s + this.returnStates[i];
			if (this.parents[i] !== null) {
				s = s + " " + this.parents[i];
			} else {
				s = s + "null";
			}
		}
		return s + "]";
	}
};

// Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.
// Return {@link //EMPTY} if {@code outerContext} is empty or null.
// /
function predictionContextFromRuleContext(atn, outerContext) {
	if (outerContext === undefined || outerContext === null) {
		outerContext = RuleContext.EMPTY;
	}
	// if we are in RuleContext of start rule, s, then PredictionContext
	// is EMPTY. Nobody called us. (if we are empty, return empty)
	if (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {
		return PredictionContext.EMPTY;
	}
	// If we have a parent, convert it to a PredictionContext graph
	var parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);
	var state = atn.states[outerContext.invokingState];
	var transition = state.transitions[0];
	return SingletonPredictionContext.create(parent, transition.followState.stateNumber);
}
/*
function calculateListsHashString(parents, returnStates) {
	var s = "";
	parents.map(function(p) {
		s = s + p;
	});
	returnStates.map(function(r) {
		s = s + r;
	});
	return s;
}
*/
function merge(a, b, rootIsWildcard, mergeCache) {
	// share same graph if both same
	if (a === b) {
		return a;
	}
	if (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {
		return mergeSingletons(a, b, rootIsWildcard, mergeCache);
	}
	// At least one of a or b is array
	// If one is $ and rootIsWildcard, return $ as// wildcard
	if (rootIsWildcard) {
		if (a instanceof EmptyPredictionContext) {
			return a;
		}
		if (b instanceof EmptyPredictionContext) {
			return b;
		}
	}
	// convert singleton so both are arrays to normalize
	if (a instanceof SingletonPredictionContext) {
		a = new ArrayPredictionContext([a.getParent()], [a.returnState]);
	}
	if (b instanceof SingletonPredictionContext) {
		b = new ArrayPredictionContext([b.getParent()], [b.returnState]);
	}
	return mergeArrays(a, b, rootIsWildcard, mergeCache);
}

//
// Merge two {@link SingletonPredictionContext} instances.
//
// <p>Stack tops equal, parents merge is same; return left graph.<br>
// <embed src="images/SingletonMerge_SameRootSamePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Same stack top, parents differ; merge parents giving array node, then
// remainders of those graphs. A new root node is created to point to the
// merged parents.<br>
// <embed src="images/SingletonMerge_SameRootDiffPar.svg"
// type="image/svg+xml"/></p>
//
// <p>Different stack tops pointing to same parent. Make array node for the
// root where both element in the root point to the same (original)
// parent.<br>
// <embed src="images/SingletonMerge_DiffRootSamePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Different stack tops pointing to different parents. Make array node for
// the root where each element points to the corresponding original
// parent.<br>
// <embed src="images/SingletonMerge_DiffRootDiffPar.svg"
// type="image/svg+xml"/></p>
//
// @param a the first {@link SingletonPredictionContext}
// @param b the second {@link SingletonPredictionContext}
// @param rootIsWildcard {@code true} if this is a local-context merge,
// otherwise false to indicate a full-context merge
// @param mergeCache
// /
function mergeSingletons(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		var previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}

	var rootMerge = mergeRoot(a, b, rootIsWildcard);
	if (rootMerge !== null) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, rootMerge);
		}
		return rootMerge;
	}
	if (a.returnState === b.returnState) {
		var parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);
		// if parent is same as existing a or b parent or reduced to a parent,
		// return it
		if (parent === a.parentCtx) {
			return a; // ax + bx = ax, if a=b
		}
		if (parent === b.parentCtx) {
			return b; // ax + bx = bx, if a=b
		}
		// else: ax + ay = a'[x,y]
		// merge parents x and y, giving array node with x,y then remainders
		// of those graphs. dup a, a' points at merged array
		// new joined parent so create new singleton pointing to it, a'
		var spc = SingletonPredictionContext.create(parent, a.returnState);
		if (mergeCache !== null) {
			mergeCache.set(a, b, spc);
		}
		return spc;
	} else { // a != b payloads differ
		// see if we can collapse parents due to $+x parents if local ctx
		var singleParent = null;
		if (a === b || (a.parentCtx !== null && a.parentCtx === b.parentCtx)) { // ax +
																				// bx =
																				// [a,b]x
			singleParent = a.parentCtx;
		}
		if (singleParent !== null) { // parents are same
			// sort payloads and use same parent
			var payloads = [ a.returnState, b.returnState ];
			if (a.returnState > b.returnState) {
				payloads[0] = b.returnState;
				payloads[1] = a.returnState;
			}
			var parents = [ singleParent, singleParent ];
			var apc = new ArrayPredictionContext(parents, payloads);
			if (mergeCache !== null) {
				mergeCache.set(a, b, apc);
			}
			return apc;
		}
		// parents differ and can't merge them. Just pack together
		// into array; can't merge.
		// ax + by = [ax,by]
		var payloads = [ a.returnState, b.returnState ];
		var parents = [ a.parentCtx, b.parentCtx ];
		if (a.returnState > b.returnState) { // sort by payload
			payloads[0] = b.returnState;
			payloads[1] = a.returnState;
			parents = [ b.parentCtx, a.parentCtx ];
		}
		var a_ = new ArrayPredictionContext(parents, payloads);
		if (mergeCache !== null) {
			mergeCache.set(a, b, a_);
		}
		return a_;
	}
}

//
// Handle case where at least one of {@code a} or {@code b} is
// {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used
// to represent {@link //EMPTY}.
//
// <h2>Local-Context Merges</h2>
//
// <p>These local-context merge operations are used when {@code rootIsWildcard}
// is true.</p>
//
// <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>
// <embed src="images/LocalMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
//
// <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is
// {@code //EMPTY}; return left graph.<br>
// <embed src="images/LocalMerge_EmptyParent.svg" type="image/svg+xml"/></p>
//
// <p>Special case of last merge if local context.<br>
// <embed src="images/LocalMerge_DiffRoots.svg" type="image/svg+xml"/></p>
//
// <h2>Full-Context Merges</h2>
//
// <p>These full-context merge operations are used when {@code rootIsWildcard}
// is false.</p>
//
// <p><embed src="images/FullMerge_EmptyRoots.svg" type="image/svg+xml"/></p>
//
// <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and
// null parent).<br>
// <embed src="images/FullMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
//
// <p><embed src="images/FullMerge_SameRoot.svg" type="image/svg+xml"/></p>
//
// @param a the first {@link SingletonPredictionContext}
// @param b the second {@link SingletonPredictionContext}
// @param rootIsWildcard {@code true} if this is a local-context merge,
// otherwise false to indicate a full-context merge
// /
function mergeRoot(a, b, rootIsWildcard) {
	if (rootIsWildcard) {
		if (a === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // // + b =//
		}
		if (b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // a +// =//
		}
	} else {
		if (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // $ + $ = $
		} else if (a === PredictionContext.EMPTY) { // $ + x = [$,x]
			var payloads = [ b.returnState,
					PredictionContext.EMPTY_RETURN_STATE ];
			var parents = [ b.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		} else if (b === PredictionContext.EMPTY) { // x + $ = [$,x] ($ is always first if present)
			var payloads = [ a.returnState, PredictionContext.EMPTY_RETURN_STATE ];
			var parents = [ a.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		}
	}
	return null;
}

//
// Merge two {@link ArrayPredictionContext} instances.
//
// <p>Different tops, different parents.<br>
// <embed src="images/ArrayMerge_DiffTopDiffPar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, same parents.<br>
// <embed src="images/ArrayMerge_ShareTopSamePar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, different parents.<br>
// <embed src="images/ArrayMerge_ShareTopDiffPar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, all shared parents.<br>
// <embed src="images/ArrayMerge_ShareTopSharePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Equal tops, merge parents and reduce top to
// {@link SingletonPredictionContext}.<br>
// <embed src="images/ArrayMerge_EqualTop.svg" type="image/svg+xml"/></p>
// /
function mergeArrays(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		var previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}
	// merge sorted payloads a + b => M
	var i = 0; // walks a
	var j = 0; // walks b
	var k = 0; // walks target M array

	var mergedReturnStates = [];
	var mergedParents = [];
	// walk and merge to yield mergedParents, mergedReturnStates
	while (i < a.returnStates.length && j < b.returnStates.length) {
		var a_parent = a.parents[i];
		var b_parent = b.parents[j];
		if (a.returnStates[i] === b.returnStates[j]) {
			// same payload (stack tops are equal), must yield merged singleton
			var payload = a.returnStates[i];
			// $+$ = $
			var bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE &&
					a_parent === null && b_parent === null;
			var ax_ax = (a_parent !== null && b_parent !== null && a_parent === b_parent); // ax+ax
																							// ->
																							// ax
			if (bothDollars || ax_ax) {
				mergedParents[k] = a_parent; // choose left
				mergedReturnStates[k] = payload;
			} else { // ax+ay -> a'[x,y]
				var mergedParent = merge(a_parent, b_parent, rootIsWildcard, mergeCache);
				mergedParents[k] = mergedParent;
				mergedReturnStates[k] = payload;
			}
			i += 1; // hop over left one as usual
			j += 1; // but also skip one in right side since we merge
		} else if (a.returnStates[i] < b.returnStates[j]) { // copy a[i] to M
			mergedParents[k] = a_parent;
			mergedReturnStates[k] = a.returnStates[i];
			i += 1;
		} else { // b > a, copy b[j] to M
			mergedParents[k] = b_parent;
			mergedReturnStates[k] = b.returnStates[j];
			j += 1;
		}
		k += 1;
	}
	// copy over any payloads remaining in either array
	if (i < a.returnStates.length) {
		for (var p = i; p < a.returnStates.length; p++) {
			mergedParents[k] = a.parents[p];
			mergedReturnStates[k] = a.returnStates[p];
			k += 1;
		}
	} else {
		for (var p = j; p < b.returnStates.length; p++) {
			mergedParents[k] = b.parents[p];
			mergedReturnStates[k] = b.returnStates[p];
			k += 1;
		}
	}
	// trim merged if we combined a few that had same stack tops
	if (k < mergedParents.length) { // write index < last position; trim
		if (k === 1) { // for just one merged element, return singleton top
			var a_ = SingletonPredictionContext.create(mergedParents[0],
					mergedReturnStates[0]);
			if (mergeCache !== null) {
				mergeCache.set(a, b, a_);
			}
			return a_;
		}
		mergedParents = mergedParents.slice(0, k);
		mergedReturnStates = mergedReturnStates.slice(0, k);
	}

	var M = new ArrayPredictionContext(mergedParents, mergedReturnStates);

	// if we created same array as a or b, return that instead
	// TODO: track whether this is possible above during merge sort for speed
	if (M === a) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, a);
		}
		return a;
	}
	if (M === b) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, b);
		}
		return b;
	}
	combineCommonParents(mergedParents);

	if (mergeCache !== null) {
		mergeCache.set(a, b, M);
	}
	return M;
}

//
// Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}
// ones.
// /
function combineCommonParents(parents) {
	var uniqueParents = {};

	for (var p = 0; p < parents.length; p++) {
		var parent = parents[p];
		if (!(parent in uniqueParents)) {
			uniqueParents[parent] = parent;
		}
	}
	for (var q = 0; q < parents.length; q++) {
		parents[q] = uniqueParents[parents[q]];
	}
}

function getCachedPredictionContext(context, contextCache, visited) {
	if (context.isEmpty()) {
		return context;
	}
	var existing = visited[context] || null;
	if (existing !== null) {
		return existing;
	}
	existing = contextCache.get(context);
	if (existing !== null) {
		visited[context] = existing;
		return existing;
	}
	var changed = false;
	var parents = [];
	for (var i = 0; i < parents.length; i++) {
		var parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);
		if (changed || parent !== context.getParent(i)) {
			if (!changed) {
				parents = [];
				for (var j = 0; j < context.length; j++) {
					parents[j] = context.getParent(j);
				}
				changed = true;
			}
			parents[i] = parent;
		}
	}
	if (!changed) {
		contextCache.add(context);
		visited[context] = context;
		return context;
	}
	var updated = null;
	if (parents.length === 0) {
		updated = PredictionContext.EMPTY;
	} else if (parents.length === 1) {
		updated = SingletonPredictionContext.create(parents[0], context
				.getReturnState(0));
	} else {
		updated = new ArrayPredictionContext(parents, context.returnStates);
	}
	contextCache.add(updated);
	visited[updated] = updated;
	visited[context] = updated;

	return updated;
}

// ter's recursive version of Sam's getAllNodes()
function getAllContextNodes(context, nodes, visited) {
	if (nodes === null) {
		nodes = [];
		return getAllContextNodes(context, nodes, visited);
	} else if (visited === null) {
		visited = {};
		return getAllContextNodes(context, nodes, visited);
	} else {
		if (context === null || visited[context] !== null) {
			return nodes;
		}
		visited[context] = context;
		nodes.push(context);
		for (var i = 0; i < context.length; i++) {
			getAllContextNodes(context.getParent(i), nodes, visited);
		}
		return nodes;
	}
}

exports.merge = merge;
exports.PredictionContext = PredictionContext;
exports.PredictionContextCache = PredictionContextCache;
exports.SingletonPredictionContext = SingletonPredictionContext;
exports.predictionContextFromRuleContext = predictionContextFromRuleContext;
exports.getCachedPredictionContext = getCachedPredictionContext;


/***/ }),

/***/ "./node_modules/antlr4/Recognizer.js":
/*!*******************************************!*\
  !*** ./node_modules/antlr4/Recognizer.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/Token.js").Token;
var ConsoleErrorListener = __webpack_require__(/*! ./error/ErrorListener */ "./node_modules/antlr4/error/ErrorListener.js").ConsoleErrorListener;
var ProxyErrorListener = __webpack_require__(/*! ./error/ErrorListener */ "./node_modules/antlr4/error/ErrorListener.js").ProxyErrorListener;

function Recognizer() {
    this._listeners = [ ConsoleErrorListener.INSTANCE ];
    this._interp = null;
    this._stateNumber = -1;
    return this;
}

Recognizer.tokenTypeMapCache = {};
Recognizer.ruleIndexMapCache = {};


Recognizer.prototype.checkVersion = function(toolVersion) {
    var runtimeVersion = "4.7.2";
    if (runtimeVersion!==toolVersion) {
        console.log("ANTLR runtime and generated code versions disagree: "+runtimeVersion+"!="+toolVersion);
    }
};

Recognizer.prototype.addErrorListener = function(listener) {
    this._listeners.push(listener);
};

Recognizer.prototype.removeErrorListeners = function() {
    this._listeners = [];
};

Recognizer.prototype.getTokenTypeMap = function() {
    var tokenNames = this.getTokenNames();
    if (tokenNames===null) {
        throw("The current recognizer does not provide a list of token names.");
    }
    var result = this.tokenTypeMapCache[tokenNames];
    if(result===undefined) {
        result = tokenNames.reduce(function(o, k, i) { o[k] = i; });
        result.EOF = Token.EOF;
        this.tokenTypeMapCache[tokenNames] = result;
    }
    return result;
};

// Get a map from rule names to rule indexes.
//
// <p>Used for XPath and tree pattern compilation.</p>
//
Recognizer.prototype.getRuleIndexMap = function() {
    var ruleNames = this.ruleNames;
    if (ruleNames===null) {
        throw("The current recognizer does not provide a list of rule names.");
    }
    var result = this.ruleIndexMapCache[ruleNames];
    if(result===undefined) {
        result = ruleNames.reduce(function(o, k, i) { o[k] = i; });
        this.ruleIndexMapCache[ruleNames] = result;
    }
    return result;
};

Recognizer.prototype.getTokenType = function(tokenName) {
    var ttype = this.getTokenTypeMap()[tokenName];
    if (ttype !==undefined) {
        return ttype;
    } else {
        return Token.INVALID_TYPE;
    }
};


// What is the error header, normally line/character position information?//
Recognizer.prototype.getErrorHeader = function(e) {
    var line = e.getOffendingToken().line;
    var column = e.getOffendingToken().column;
    return "line " + line + ":" + column;
};


// How should a token be displayed in an error message? The default
//  is to display just the text, but during development you might
//  want to have a lot of information spit out.  Override in that case
//  to use t.toString() (which, for CommonToken, dumps everything about
//  the token). This is better than forcing you to override a method in
//  your token objects because you don't have to go modify your lexer
//  so that it creates a new Java type.
//
// @deprecated This method is not called by the ANTLR 4 Runtime. Specific
// implementations of {@link ANTLRErrorStrategy} may provide a similar
// feature when necessary. For example, see
// {@link DefaultErrorStrategy//getTokenErrorDisplay}.
//
Recognizer.prototype.getTokenErrorDisplay = function(t) {
    if (t===null) {
        return "<no token>";
    }
    var s = t.text;
    if (s===null) {
        if (t.type===Token.EOF) {
            s = "<EOF>";
        } else {
            s = "<" + t.type + ">";
        }
    }
    s = s.replace("\n","\\n").replace("\r","\\r").replace("\t","\\t");
    return "'" + s + "'";
};

Recognizer.prototype.getErrorListenerDispatch = function() {
    return new ProxyErrorListener(this._listeners);
};

// subclass needs to override these if there are sempreds or actions
// that the ATN interp needs to execute
Recognizer.prototype.sempred = function(localctx, ruleIndex, actionIndex) {
    return true;
};

Recognizer.prototype.precpred = function(localctx , precedence) {
    return true;
};

//Indicate that the recognizer has changed internal state that is
//consistent with the ATN state passed in.  This way we always know
//where we are in the ATN as the parser goes along. The rule
//context objects form a stack that lets us see the stack of
//invoking rules. Combine this and we have complete ATN
//configuration information.

Object.defineProperty(Recognizer.prototype, "state", {
	get : function() {
		return this._stateNumber;
	},
	set : function(state) {
		this._stateNumber = state;
	}
});


exports.Recognizer = Recognizer;


/***/ }),

/***/ "./node_modules/antlr4/RuleContext.js":
/*!********************************************!*\
  !*** ./node_modules/antlr4/RuleContext.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

//  A rule context is a record of a single rule invocation. It knows
//  which context invoked it, if any. If there is no parent context, then
//  naturally the invoking state is not valid.  The parent link
//  provides a chain upwards from the current rule invocation to the root
//  of the invocation tree, forming a stack. We actually carry no
//  information about the rule associated with this context (except
//  when parsing). We keep only the state number of the invoking state from
//  the ATN submachine that invoked this. Contrast this with the s
//  pointer inside ParserRuleContext that tracks the current state
//  being "executed" for the current rule.
//
//  The parent contexts are useful for computing lookahead sets and
//  getting error information.
//
//  These objects are used during parsing and prediction.
//  For the special case of parsers, we use the subclass
//  ParserRuleContext.
//
//  @see ParserRuleContext
///

var RuleNode = __webpack_require__(/*! ./tree/Tree */ "./node_modules/antlr4/tree/Tree.js").RuleNode;
var INVALID_INTERVAL = __webpack_require__(/*! ./tree/Tree */ "./node_modules/antlr4/tree/Tree.js").INVALID_INTERVAL;
var INVALID_ALT_NUMBER = __webpack_require__(/*! ./atn/ATN */ "./node_modules/antlr4/atn/ATN.js").INVALID_ALT_NUMBER;

function RuleContext(parent, invokingState) {
	RuleNode.call(this);
	// What context invoked this rule?
	this.parentCtx = parent || null;
	// What state invoked the rule associated with this context?
	// The "return address" is the followState of invokingState
	// If parent is null, this should be -1.
	this.invokingState = invokingState || -1;
	return this;
}

RuleContext.prototype = Object.create(RuleNode.prototype);
RuleContext.prototype.constructor = RuleContext;

RuleContext.prototype.depth = function() {
	var n = 0;
	var p = this;
	while (p !== null) {
		p = p.parentCtx;
		n += 1;
	}
	return n;
};

// A context is empty if there is no invoking state; meaning nobody call
// current context.
RuleContext.prototype.isEmpty = function() {
	return this.invokingState === -1;
};

// satisfy the ParseTree / SyntaxTree interface

RuleContext.prototype.getSourceInterval = function() {
	return INVALID_INTERVAL;
};

RuleContext.prototype.getRuleContext = function() {
	return this;
};

RuleContext.prototype.getPayload = function() {
	return this;
};

// Return the combined text of all child nodes. This method only considers
// tokens which have been added to the parse tree.
// <p>
// Since tokens on hidden channels (e.g. whitespace or comments) are not
// added to the parse trees, they will not appear in the output of this
// method.
// /
RuleContext.prototype.getText = function() {
	if (this.getChildCount() === 0) {
		return "";
	} else {
		return this.children.map(function(child) {
			return child.getText();
		}).join("");
	}
};

// For rule associated with this parse tree internal node, return
// the outer alternative number used to match the input. Default
// implementation does not compute nor store this alt num. Create
// a subclass of ParserRuleContext with backing field and set
// option contextSuperClass.
// to set it.
RuleContext.prototype.getAltNumber = function() { return INVALID_ALT_NUMBER; }

// Set the outer alternative number for this context node. Default
// implementation does nothing to avoid backing field overhead for
// trees that don't need it.  Create
// a subclass of ParserRuleContext with backing field and set
// option contextSuperClass.
RuleContext.prototype.setAltNumber = function(altNumber) { }

RuleContext.prototype.getChild = function(i) {
	return null;
};

RuleContext.prototype.getChildCount = function() {
	return 0;
};

RuleContext.prototype.accept = function(visitor) {
	return visitor.visitChildren(this);
};

//need to manage circular dependencies, so export now
exports.RuleContext = RuleContext;
var Trees = __webpack_require__(/*! ./tree/Trees */ "./node_modules/antlr4/tree/Trees.js").Trees;


// Print out a whole tree, not just a node, in LISP format
// (root child1 .. childN). Print just a node if this is a leaf.
//

RuleContext.prototype.toStringTree = function(ruleNames, recog) {
	return Trees.toStringTree(this, ruleNames, recog);
};

RuleContext.prototype.toString = function(ruleNames, stop) {
	ruleNames = ruleNames || null;
	stop = stop || null;
	var p = this;
	var s = "[";
	while (p !== null && p !== stop) {
		if (ruleNames === null) {
			if (!p.isEmpty()) {
				s += p.invokingState;
			}
		} else {
			var ri = p.ruleIndex;
			var ruleName = (ri >= 0 && ri < ruleNames.length) ? ruleNames[ri]
					: "" + ri;
			s += ruleName;
		}
		if (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {
			s += " ";
		}
		p = p.parentCtx;
	}
	s += "]";
	return s;
};



/***/ }),

/***/ "./node_modules/antlr4/Token.js":
/*!**************************************!*\
  !*** ./node_modules/antlr4/Token.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// A token has properties: text, type, line, character position in the line
// (so we can ignore tabs), token channel, index, and source from which
// we obtained this token.

function Token() {
	this.source = null;
	this.type = null; // token type of the token
	this.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL
	this.start = null; // optional; return -1 if not implemented.
	this.stop = null; // optional; return -1 if not implemented.
	this.tokenIndex = null; // from 0..n-1 of the token object in the input stream
	this.line = null; // line=1..n of the 1st character
	this.column = null; // beginning of the line at which it occurs, 0..n-1
	this._text = null; // text of the token.
	return this;
}

Token.INVALID_TYPE = 0;

// During lookahead operations, this "token" signifies we hit rule end ATN state
// and did not follow it despite needing to.
Token.EPSILON = -2;

Token.MIN_USER_TOKEN_TYPE = 1;

Token.EOF = -1;

// All tokens go to the parser (unless skip() is called in that rule)
// on a particular "channel". The parser tunes to a particular channel
// so that whitespace etc... can go to the parser on a "hidden" channel.

Token.DEFAULT_CHANNEL = 0;

// Anything on different channel than DEFAULT_CHANNEL is not parsed
// by parser.

Token.HIDDEN_CHANNEL = 1;

// Explicitly set the text for this token. If {code text} is not
// {@code null}, then {@link //getText} will return this value rather than
// extracting the text from the input.
//
// @param text The explicit text of the token, or {@code null} if the text
// should be obtained from the input along with the start and stop indexes
// of the token.

Object.defineProperty(Token.prototype, "text", {
	get : function() {
		return this._text;
	},
	set : function(text) {
		this._text = text;
	}
});

Token.prototype.getTokenSource = function() {
	return this.source[0];
};

Token.prototype.getInputStream = function() {
	return this.source[1];
};

function CommonToken(source, type, channel, start, stop) {
	Token.call(this);
	this.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;
	this.type = type !== undefined ? type : null;
	this.channel = channel !== undefined ? channel : Token.DEFAULT_CHANNEL;
	this.start = start !== undefined ? start : -1;
	this.stop = stop !== undefined ? stop : -1;
	this.tokenIndex = -1;
	if (this.source[0] !== null) {
		this.line = source[0].line;
		this.column = source[0].column;
	} else {
		this.column = -1;
	}
	return this;
}

CommonToken.prototype = Object.create(Token.prototype);
CommonToken.prototype.constructor = CommonToken;

// An empty {@link Pair} which is used as the default value of
// {@link //source} for tokens that do not have a source.
CommonToken.EMPTY_SOURCE = [ null, null ];

// Constructs a new {@link CommonToken} as a copy of another {@link Token}.
//
// <p>
// If {@code oldToken} is also a {@link CommonToken} instance, the newly
// constructed token will share a reference to the {@link //text} field and
// the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will
// be assigned the result of calling {@link //getText}, and {@link //source}
// will be constructed from the result of {@link Token//getTokenSource} and
// {@link Token//getInputStream}.</p>
//
// @param oldToken The token to copy.
//
CommonToken.prototype.clone = function() {
	var t = new CommonToken(this.source, this.type, this.channel, this.start,
			this.stop);
	t.tokenIndex = this.tokenIndex;
	t.line = this.line;
	t.column = this.column;
	t.text = this.text;
	return t;
};

Object.defineProperty(CommonToken.prototype, "text", {
	get : function() {
		if (this._text !== null) {
			return this._text;
		}
		var input = this.getInputStream();
		if (input === null) {
			return null;
		}
		var n = input.size;
		if (this.start < n && this.stop < n) {
			return input.getText(this.start, this.stop);
		} else {
			return "<EOF>";
		}
	},
	set : function(text) {
		this._text = text;
	}
});

CommonToken.prototype.toString = function() {
	var txt = this.text;
	if (txt !== null) {
		txt = txt.replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t");
	} else {
		txt = "<no text>";
	}
	return "[@" + this.tokenIndex + "," + this.start + ":" + this.stop + "='" +
			txt + "',<" + this.type + ">" +
			(this.channel > 0 ? ",channel=" + this.channel : "") + "," +
			this.line + ":" + this.column + "]";
};

exports.Token = Token;
exports.CommonToken = CommonToken;


/***/ }),

/***/ "./node_modules/antlr4/Utils.js":
/*!**************************************!*\
  !*** ./node_modules/antlr4/Utils.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

function arrayToString(a) {
    return "[" + a.join(", ") + "]";
}

String.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));

String.prototype.hashCode = function () {
    var remainder, bytes, h1, h1b, c1, c1b, c2, c2b, k1, i,
        key = this.toString();

    remainder = key.length & 3; // key.length % 4
    bytes = key.length - remainder;
    h1 = String.prototype.seed;
    c1 = 0xcc9e2d51;
    c2 = 0x1b873593;
    i = 0;

    while (i < bytes) {
        k1 =
            ((key.charCodeAt(i) & 0xff)) |
            ((key.charCodeAt(++i) & 0xff) << 8) |
            ((key.charCodeAt(++i) & 0xff) << 16) |
            ((key.charCodeAt(++i) & 0xff) << 24);
        ++i;

        k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;
        k1 = (k1 << 15) | (k1 >>> 17);
        k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;

        h1 ^= k1;
        h1 = (h1 << 13) | (h1 >>> 19);
        h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;
        h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));
    }

    k1 = 0;

    switch (remainder) {
        case 3:
            k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;
        case 2:
            k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;
        case 1:
            k1 ^= (key.charCodeAt(i) & 0xff);

            k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;
            k1 = (k1 << 15) | (k1 >>> 17);
            k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;
            h1 ^= k1;
    }

    h1 ^= key.length;

    h1 ^= h1 >>> 16;
    h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;
    h1 ^= h1 >>> 13;
    h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;
    h1 ^= h1 >>> 16;

    return h1 >>> 0;
};

function standardEqualsFunction(a, b) {
    return a.equals(b);
}

function standardHashCodeFunction(a) {
    return a.hashCode();
}

function Set(hashFunction, equalsFunction) {
    this.data = {};
    this.hashFunction = hashFunction || standardHashCodeFunction;
    this.equalsFunction = equalsFunction || standardEqualsFunction;
    return this;
}

Object.defineProperty(Set.prototype, "length", {
    get: function () {
        var l = 0;
        for (var key in this.data) {
            if (key.indexOf("hash_") === 0) {
                l = l + this.data[key].length;
            }
        }
        return l;
    }
});

Set.prototype.add = function (value) {
    var hash = this.hashFunction(value);
    var key = "hash_" + hash;
    if (key in this.data) {
        var values = this.data[key];
        for (var i = 0; i < values.length; i++) {
            if (this.equalsFunction(value, values[i])) {
                return values[i];
            }
        }
        values.push(value);
        return value;
    } else {
        this.data[key] = [value];
        return value;
    }
};

Set.prototype.contains = function (value) {
    return this.get(value) != null;
};

Set.prototype.get = function (value) {
    var hash = this.hashFunction(value);
    var key = "hash_" + hash;
    if (key in this.data) {
        var values = this.data[key];
        for (var i = 0; i < values.length; i++) {
            if (this.equalsFunction(value, values[i])) {
                return values[i];
            }
        }
    }
    return null;
};

Set.prototype.values = function () {
    var l = [];
    for (var key in this.data) {
        if (key.indexOf("hash_") === 0) {
            l = l.concat(this.data[key]);
        }
    }
    return l;
};

Set.prototype.toString = function () {
    return arrayToString(this.values());
};

function BitSet() {
    this.data = [];
    return this;
}

BitSet.prototype.add = function (value) {
    this.data[value] = true;
};

BitSet.prototype.or = function (set) {
    var bits = this;
    Object.keys(set.data).map(function (alt) {
        bits.add(alt);
    });
};

BitSet.prototype.remove = function (value) {
    delete this.data[value];
};

BitSet.prototype.contains = function (value) {
    return this.data[value] === true;
};

BitSet.prototype.values = function () {
    return Object.keys(this.data);
};

BitSet.prototype.minValue = function () {
    return Math.min.apply(null, this.values());
};

BitSet.prototype.hashCode = function () {
    var hash = new Hash();
    hash.update(this.values());
    return hash.finish();
};

BitSet.prototype.equals = function (other) {
    if (!(other instanceof BitSet)) {
        return false;
    }
    return this.hashCode() === other.hashCode();
};

Object.defineProperty(BitSet.prototype, "length", {
    get: function () {
        return this.values().length;
    }
});

BitSet.prototype.toString = function () {
    return "{" + this.values().join(", ") + "}";
};

function Map(hashFunction, equalsFunction) {
    this.data = {};
    this.hashFunction = hashFunction || standardHashCodeFunction;
    this.equalsFunction = equalsFunction || standardEqualsFunction;
    return this;
}

Object.defineProperty(Map.prototype, "length", {
    get: function () {
        var l = 0;
        for (var hashKey in this.data) {
            if (hashKey.indexOf("hash_") === 0) {
                l = l + this.data[hashKey].length;
            }
        }
        return l;
    }
});

Map.prototype.put = function (key, value) {
    var hashKey = "hash_" + this.hashFunction(key);
    if (hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key)) {
                var oldValue = entry.value;
                entry.value = value;
                return oldValue;
            }
        }
        entries.push({key:key, value:value});
        return value;
    } else {
        this.data[hashKey] = [{key:key, value:value}];
        return value;
    }
};

Map.prototype.containsKey = function (key) {
    var hashKey = "hash_" + this.hashFunction(key);
    if(hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key))
                return true;
        }
    }
    return false;
};

Map.prototype.get = function (key) {
    var hashKey = "hash_" + this.hashFunction(key);
    if(hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key))
                return entry.value;
        }
    }
    return null;
};

Map.prototype.entries = function () {
    var l = [];
    for (var key in this.data) {
        if (key.indexOf("hash_") === 0) {
            l = l.concat(this.data[key]);
        }
    }
    return l;
};


Map.prototype.getKeys = function () {
    return this.entries().map(function(e) {
        return e.key;
    });
};


Map.prototype.getValues = function () {
    return this.entries().map(function(e) {
            return e.value;
    });
};


Map.prototype.toString = function () {
    var ss = this.entries().map(function(entry) {
        return '{' + entry.key + ':' + entry.value + '}';
    });
    return '[' + ss.join(", ") + ']';
};


function AltDict() {
    this.data = {};
    return this;
}


AltDict.prototype.get = function (key) {
    key = "k-" + key;
    if (key in this.data) {
        return this.data[key];
    } else {
        return null;
    }
};

AltDict.prototype.put = function (key, value) {
    key = "k-" + key;
    this.data[key] = value;
};

AltDict.prototype.values = function () {
    var data = this.data;
    var keys = Object.keys(this.data);
    return keys.map(function (key) {
        return data[key];
    });
};

function DoubleDict() {
    return this;
}

function Hash() {
    this.count = 0;
    this.hash = 0;
    return this;
}

Hash.prototype.update = function () {
    for(var i=0;i<arguments.length;i++) {
        var value = arguments[i];
        if (value == null)
            continue;
        if(Array.isArray(value))
            this.update.apply(value);
        else {
            var k = 0;
            switch (typeof(value)) {
                case 'undefined':
                case 'function':
                    continue;
                case 'number':
                case 'boolean':
                    k = value;
                    break;
                case 'string':
                    k = value.hashCode();
                    break;
                default:
                    value.updateHashCode(this);
                    continue;
            }
            k = k * 0xCC9E2D51;
            k = (k << 15) | (k >>> (32 - 15));
            k = k * 0x1B873593;
            this.count = this.count + 1;
            var hash = this.hash ^ k;
            hash = (hash << 13) | (hash >>> (32 - 13));
            hash = hash * 5 + 0xE6546B64;
            this.hash = hash;
        }
    }
}

Hash.prototype.finish = function () {
    var hash = this.hash ^ (this.count * 4);
    hash = hash ^ (hash >>> 16);
    hash = hash * 0x85EBCA6B;
    hash = hash ^ (hash >>> 13);
    hash = hash * 0xC2B2AE35;
    hash = hash ^ (hash >>> 16);
    return hash;
}

function hashStuff() {
    var hash = new Hash();
    hash.update.apply(arguments);
    return hash.finish();
}

DoubleDict.prototype.get = function (a, b) {
    var d = this[a] || null;
    return d === null ? null : (d[b] || null);
};

DoubleDict.prototype.set = function (a, b, o) {
    var d = this[a] || null;
    if (d === null) {
        d = {};
        this[a] = d;
    }
    d[b] = o;
};


function escapeWhitespace(s, escapeSpaces) {
    s = s.replace(/\t/g, "\\t")
         .replace(/\n/g, "\\n")
         .replace(/\r/g, "\\r");
    if (escapeSpaces) {
        s = s.replace(/ /g, "\u00B7");
    }
    return s;
}

function titleCase(str) {
    return str.replace(/\w\S*/g, function (txt) {
        return txt.charAt(0).toUpperCase() + txt.substr(1);
    });
};

function equalArrays(a, b)
{
    if (!Array.isArray(a) || !Array.isArray(b))
        return false;
    if (a == b)
        return true;
    if (a.length != b.length)
        return false;
    for (var i = 0; i < a.length; i++) {
        if (a[i] == b[i])
            continue;
        if (!a[i].equals(b[i]))
            return false;
    }
    return true;
};

exports.Hash = Hash;
exports.Set = Set;
exports.Map = Map;
exports.BitSet = BitSet;
exports.AltDict = AltDict;
exports.DoubleDict = DoubleDict;
exports.hashStuff = hashStuff;
exports.escapeWhitespace = escapeWhitespace;
exports.arrayToString = arrayToString;
exports.titleCase = titleCase;
exports.equalArrays = equalArrays;


/***/ }),

/***/ "./node_modules/antlr4/atn/ATN.js":
/*!****************************************!*\
  !*** ./node_modules/antlr4/atn/ATN.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var LL1Analyzer = __webpack_require__(/*! ./../LL1Analyzer */ "./node_modules/antlr4/LL1Analyzer.js").LL1Analyzer;
var IntervalSet = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/IntervalSet.js").IntervalSet;

function ATN(grammarType , maxTokenType) {

    // Used for runtime deserialization of ATNs from strings///
    // The type of the ATN.
    this.grammarType = grammarType;
    // The maximum value for any symbol recognized by a transition in the ATN.
    this.maxTokenType = maxTokenType;
    this.states = [];
    // Each subrule/rule is a decision point and we must track them so we
    //  can go back later and build DFA predictors for them.  This includes
    //  all the rules, subrules, optional blocks, ()+, ()* etc...
    this.decisionToState = [];
    // Maps from rule index to starting state number.
    this.ruleToStartState = [];
    // Maps from rule index to stop state number.
    this.ruleToStopState = null;
    this.modeNameToStartState = {};
    // For lexer ATNs, this maps the rule index to the resulting token type.
    // For parser ATNs, this maps the rule index to the generated bypass token
    // type if the
    // {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}
    // deserialization option was specified; otherwise, this is {@code null}.
    this.ruleToTokenType = null;
    // For lexer ATNs, this is an array of {@link LexerAction} objects which may
    // be referenced by action transitions in the ATN.
    this.lexerActions = null;
    this.modeToStartState = [];

    return this;
}

// Compute the set of valid tokens that can occur starting in state {@code s}.
//  If {@code ctx} is null, the set of tokens will not include what can follow
//  the rule surrounding {@code s}. In other words, the set will be
//  restricted to tokens reachable staying within {@code s}'s rule.
ATN.prototype.nextTokensInContext = function(s, ctx) {
    var anal = new LL1Analyzer(this);
    return anal.LOOK(s, null, ctx);
};

// Compute the set of valid tokens that can occur starting in {@code s} and
// staying in same rule. {@link Token//EPSILON} is in set if we reach end of
// rule.
ATN.prototype.nextTokensNoContext = function(s) {
    if (s.nextTokenWithinRule !== null ) {
        return s.nextTokenWithinRule;
    }
    s.nextTokenWithinRule = this.nextTokensInContext(s, null);
    s.nextTokenWithinRule.readOnly = true;
    return s.nextTokenWithinRule;
};

ATN.prototype.nextTokens = function(s, ctx) {
    if ( ctx===undefined ) {
        return this.nextTokensNoContext(s);
    } else {
        return this.nextTokensInContext(s, ctx);
    }
};

ATN.prototype.addState = function( state) {
    if ( state !== null ) {
        state.atn = this;
        state.stateNumber = this.states.length;
    }
    this.states.push(state);
};

ATN.prototype.removeState = function( state) {
    this.states[state.stateNumber] = null; // just free mem, don't shift states in list
};

ATN.prototype.defineDecisionState = function( s) {
    this.decisionToState.push(s);
    s.decision = this.decisionToState.length-1;
    return s.decision;
};

ATN.prototype.getDecisionState = function( decision) {
    if (this.decisionToState.length===0) {
        return null;
    } else {
        return this.decisionToState[decision];
    }
};

// Computes the set of input symbols which could follow ATN state number
// {@code stateNumber} in the specified full {@code context}. This method
// considers the complete parser context, but does not evaluate semantic
// predicates (i.e. all predicates encountered during the calculation are
// assumed true). If a path in the ATN exists from the starting state to the
// {@link RuleStopState} of the outermost context without matching any
// symbols, {@link Token//EOF} is added to the returned set.
//
// <p>If {@code context} is {@code null}, it is treated as
// {@link ParserRuleContext//EMPTY}.</p>
//
// @param stateNumber the ATN state number
// @param context the full parse context
// @return The set of potentially valid input symbols which could follow the
// specified state in the specified context.
// @throws IllegalArgumentException if the ATN does not contain a state with
// number {@code stateNumber}
var Token = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/Token.js").Token;

ATN.prototype.getExpectedTokens = function( stateNumber, ctx ) {
    if ( stateNumber < 0 || stateNumber >= this.states.length ) {
        throw("Invalid state number.");
    }
    var s = this.states[stateNumber];
    var following = this.nextTokens(s);
    if (!following.contains(Token.EPSILON)) {
        return following;
    }
    var expected = new IntervalSet();
    expected.addSet(following);
    expected.removeOne(Token.EPSILON);
    while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
        var invokingState = this.states[ctx.invokingState];
        var rt = invokingState.transitions[0];
        following = this.nextTokens(rt.followState);
        expected.addSet(following);
        expected.removeOne(Token.EPSILON);
        ctx = ctx.parentCtx;
    }
    if (following.contains(Token.EPSILON)) {
        expected.addOne(Token.EOF);
    }
    return expected;
};

ATN.INVALID_ALT_NUMBER = 0;

exports.ATN = ATN;

/***/ }),

/***/ "./node_modules/antlr4/atn/ATNConfig.js":
/*!**********************************************!*\
  !*** ./node_modules/antlr4/atn/ATNConfig.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// A tuple: (ATN state, predicted alt, syntactic, semantic context).
//  The syntactic context is a graph-structured stack node whose
//  path(s) to the root is the rule invocation(s)
//  chain used to arrive at the state.  The semantic context is
//  the tree of semantic predicates encountered before reaching
//  an ATN state.
///

var DecisionState = __webpack_require__(/*! ./ATNState */ "./node_modules/antlr4/atn/ATNState.js").DecisionState;
var SemanticContext = __webpack_require__(/*! ./SemanticContext */ "./node_modules/antlr4/atn/SemanticContext.js").SemanticContext;
var Hash = __webpack_require__(/*! ../Utils */ "./node_modules/antlr4/Utils.js").Hash;


function checkParams(params, isCfg) {
	if(params===null) {
		var result = { state:null, alt:null, context:null, semanticContext:null };
		if(isCfg) {
			result.reachesIntoOuterContext = 0;
		}
		return result;
	} else {
		var props = {};
		props.state = params.state || null;
		props.alt = (params.alt === undefined) ? null : params.alt;
		props.context = params.context || null;
		props.semanticContext = params.semanticContext || null;
		if(isCfg) {
			props.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;
			props.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;
		}
		return props;
	}
}

function ATNConfig(params, config) {
	this.checkContext(params, config);
	params = checkParams(params);
	config = checkParams(config, true);
    // The ATN state associated with this configuration///
    this.state = params.state!==null ? params.state : config.state;
    // What alt (or lexer rule) is predicted by this configuration///
    this.alt = params.alt!==null ? params.alt : config.alt;
    // The stack of invoking states leading to the rule/states associated
    //  with this config.  We track only those contexts pushed during
    //  execution of the ATN simulator.
    this.context = params.context!==null ? params.context : config.context;
    this.semanticContext = params.semanticContext!==null ? params.semanticContext :
        (config.semanticContext!==null ? config.semanticContext : SemanticContext.NONE);
    // We cannot execute predicates dependent upon local context unless
    // we know for sure we are in the correct context. Because there is
    // no way to do this efficiently, we simply cannot evaluate
    // dependent predicates unless we are in the rule that initially
    // invokes the ATN simulator.
    //
    // closure() tracks the depth of how far we dip into the
    // outer context: depth &gt; 0.  Note that it may not be totally
    // accurate depth since I don't ever decrement. TODO: make it a boolean then
    this.reachesIntoOuterContext = config.reachesIntoOuterContext;
    this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;
    return this;
}

ATNConfig.prototype.checkContext = function(params, config) {
	if((params.context===null || params.context===undefined) &&
			(config===null || config.context===null || config.context===undefined)) {
		this.context = null;
	}
};


ATNConfig.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish();
};


ATNConfig.prototype.updateHashCode = function(hash) {
    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);
};

// An ATN configuration is equal to another if both have
//  the same state, they predict the same alternative, and
//  syntactic/semantic contexts are the same.

ATNConfig.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof ATNConfig)) {
        return false;
    } else {
        return this.state.stateNumber===other.state.stateNumber &&
            this.alt===other.alt &&
            (this.context===null ? other.context===null : this.context.equals(other.context)) &&
            this.semanticContext.equals(other.semanticContext) &&
            this.precedenceFilterSuppressed===other.precedenceFilterSuppressed;
    }
};


ATNConfig.prototype.hashCodeForConfigSet = function() {
    var hash = new Hash();
    hash.update(this.state.stateNumber, this.alt, this.semanticContext);
    return hash.finish();
};


ATNConfig.prototype.equalsForConfigSet = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof ATNConfig)) {
        return false;
    } else {
        return this.state.stateNumber===other.state.stateNumber &&
            this.alt===other.alt &&
            this.semanticContext.equals(other.semanticContext);
    }
};


ATNConfig.prototype.toString = function() {
    return "(" + this.state + "," + this.alt +
        (this.context!==null ? ",[" + this.context.toString() + "]" : "") +
        (this.semanticContext !== SemanticContext.NONE ?
                ("," + this.semanticContext.toString())
                : "") +
        (this.reachesIntoOuterContext>0 ?
                (",up=" + this.reachesIntoOuterContext)
                : "") + ")";
};


function LexerATNConfig(params, config) {
	ATNConfig.call(this, params, config);

    // This is the backing field for {@link //getLexerActionExecutor}.
	var lexerActionExecutor = params.lexerActionExecutor || null;
    this.lexerActionExecutor = lexerActionExecutor || (config!==null ? config.lexerActionExecutor : null);
    this.passedThroughNonGreedyDecision = config!==null ? this.checkNonGreedyDecision(config, this.state) : false;
    return this;
}

LexerATNConfig.prototype = Object.create(ATNConfig.prototype);
LexerATNConfig.prototype.constructor = LexerATNConfig;

LexerATNConfig.prototype.updateHashCode = function(hash) {
    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);
};

LexerATNConfig.prototype.equals = function(other) {
    return this === other ||
            (other instanceof LexerATNConfig &&
            this.passedThroughNonGreedyDecision == other.passedThroughNonGreedyDecision &&
            (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) &&
            ATNConfig.prototype.equals.call(this, other));
};

LexerATNConfig.prototype.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;

LexerATNConfig.prototype.equalsForConfigSet = LexerATNConfig.prototype.equals;


LexerATNConfig.prototype.checkNonGreedyDecision = function(source, target) {
    return source.passedThroughNonGreedyDecision ||
        (target instanceof DecisionState) && target.nonGreedy;
};

exports.ATNConfig = ATNConfig;
exports.LexerATNConfig = LexerATNConfig;

/***/ }),

/***/ "./node_modules/antlr4/atn/ATNConfigSet.js":
/*!*************************************************!*\
  !*** ./node_modules/antlr4/atn/ATNConfigSet.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

//
// Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track
// info about the set, with support for combining similar configurations using a
// graph-structured stack.
///

var ATN = __webpack_require__(/*! ./ATN */ "./node_modules/antlr4/atn/ATN.js").ATN;
var Utils = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js");
var Hash = Utils.Hash;
var Set = Utils.Set;
var SemanticContext = __webpack_require__(/*! ./SemanticContext */ "./node_modules/antlr4/atn/SemanticContext.js").SemanticContext;
var merge = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/PredictionContext.js").merge;

function hashATNConfig(c) {
	return c.hashCodeForConfigSet();
}

function equalATNConfigs(a, b) {
	if ( a===b ) {
		return true;
	} else if ( a===null || b===null ) {
		return false;
	} else
       return a.equalsForConfigSet(b);
 }


function ATNConfigSet(fullCtx) {
	//
	// The reason that we need this is because we don't want the hash map to use
	// the standard hash code and equals. We need all configurations with the
	// same
	// {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively
	// doubles
	// the number of objects associated with ATNConfigs. The other solution is
	// to
	// use a hash table that lets us specify the equals/hashcode operation.
	// All configs but hashed by (s, i, _, pi) not including context. Wiped out
	// when we go readonly as this set becomes a DFA state.
	this.configLookup = new Set(hashATNConfig, equalATNConfigs);
	// Indicates that this configuration set is part of a full context
	// LL prediction. It will be used to determine how to merge $. With SLL
	// it's a wildcard whereas it is not for LL context merge.
	this.fullCtx = fullCtx === undefined ? true : fullCtx;
	// Indicates that the set of configurations is read-only. Do not
	// allow any code to manipulate the set; DFA states will point at
	// the sets and they must not change. This does not protect the other
	// fields; in particular, conflictingAlts is set after
	// we've made this readonly.
	this.readOnly = false;
	// Track the elements as they are added to the set; supports get(i)///
	this.configs = [];

	// TODO: these fields make me pretty uncomfortable but nice to pack up info
	// together, saves recomputation
	// TODO: can we track conflicts as they are added to save scanning configs
	// later?
	this.uniqueAlt = 0;
	this.conflictingAlts = null;

	// Used in parser and lexer. In lexer, it indicates we hit a pred
	// while computing a closure operation. Don't make a DFA state from this.
	this.hasSemanticContext = false;
	this.dipsIntoOuterContext = false;

	this.cachedHashCode = -1;

	return this;
}

// Adding a new config means merging contexts with existing configs for
// {@code (s, i, pi, _)}, where {@code s} is the
// {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and
// {@code pi} is the {@link ATNConfig//semanticContext}. We use
// {@code (s,i,pi)} as key.
//
// <p>This method updates {@link //dipsIntoOuterContext} and
// {@link //hasSemanticContext} when necessary.</p>
// /
ATNConfigSet.prototype.add = function(config, mergeCache) {
	if (mergeCache === undefined) {
		mergeCache = null;
	}
	if (this.readOnly) {
		throw "This set is readonly";
	}
	if (config.semanticContext !== SemanticContext.NONE) {
		this.hasSemanticContext = true;
	}
	if (config.reachesIntoOuterContext > 0) {
		this.dipsIntoOuterContext = true;
	}
	var existing = this.configLookup.add(config);
	if (existing === config) {
		this.cachedHashCode = -1;
		this.configs.push(config); // track order here
		return true;
	}
	// a previous (s,i,pi,_), merge with it and save result
	var rootIsWildcard = !this.fullCtx;
	var merged = merge(existing.context, config.context, rootIsWildcard, mergeCache);
	// no need to check for existing.context, config.context in cache
	// since only way to create new graphs is "call rule" and here. We
	// cache at both places.
	existing.reachesIntoOuterContext = Math.max( existing.reachesIntoOuterContext, config.reachesIntoOuterContext);
	// make sure to preserve the precedence filter suppression during the merge
	if (config.precedenceFilterSuppressed) {
		existing.precedenceFilterSuppressed = true;
	}
	existing.context = merged; // replace context; no need to alt mapping
	return true;
};

ATNConfigSet.prototype.getStates = function() {
	var states = new Set();
	for (var i = 0; i < this.configs.length; i++) {
		states.add(this.configs[i].state);
	}
	return states;
};

ATNConfigSet.prototype.getPredicates = function() {
	var preds = [];
	for (var i = 0; i < this.configs.length; i++) {
		var c = this.configs[i].semanticContext;
		if (c !== SemanticContext.NONE) {
			preds.push(c.semanticContext);
		}
	}
	return preds;
};

Object.defineProperty(ATNConfigSet.prototype, "items", {
	get : function() {
		return this.configs;
	}
});

ATNConfigSet.prototype.optimizeConfigs = function(interpreter) {
	if (this.readOnly) {
		throw "This set is readonly";
	}
	if (this.configLookup.length === 0) {
		return;
	}
	for (var i = 0; i < this.configs.length; i++) {
		var config = this.configs[i];
		config.context = interpreter.getCachedContext(config.context);
	}
};

ATNConfigSet.prototype.addAll = function(coll) {
	for (var i = 0; i < coll.length; i++) {
		this.add(coll[i]);
	}
	return false;
};

ATNConfigSet.prototype.equals = function(other) {
	return this === other ||
		(other instanceof ATNConfigSet &&
		Utils.equalArrays(this.configs, other.configs) &&
		this.fullCtx === other.fullCtx &&
		this.uniqueAlt === other.uniqueAlt &&
		this.conflictingAlts === other.conflictingAlts &&
		this.hasSemanticContext === other.hasSemanticContext &&
		this.dipsIntoOuterContext === other.dipsIntoOuterContext);
};

ATNConfigSet.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish();
};


ATNConfigSet.prototype.updateHashCode = function(hash) {
	if (this.readOnly) {
		if (this.cachedHashCode === -1) {
            var hash = new Hash();
            hash.update(this.configs);
			this.cachedHashCode = hash.finish();
		}
        hash.update(this.cachedHashCode);
	} else {
        hash.update(this.configs);
	}
};


Object.defineProperty(ATNConfigSet.prototype, "length", {
	get : function() {
		return this.configs.length;
	}
});

ATNConfigSet.prototype.isEmpty = function() {
	return this.configs.length === 0;
};

ATNConfigSet.prototype.contains = function(item) {
	if (this.configLookup === null) {
		throw "This method is not implemented for readonly sets.";
	}
	return this.configLookup.contains(item);
};

ATNConfigSet.prototype.containsFast = function(item) {
	if (this.configLookup === null) {
		throw "This method is not implemented for readonly sets.";
	}
	return this.configLookup.containsFast(item);
};

ATNConfigSet.prototype.clear = function() {
	if (this.readOnly) {
		throw "This set is readonly";
	}
	this.configs = [];
	this.cachedHashCode = -1;
	this.configLookup = new Set();
};

ATNConfigSet.prototype.setReadonly = function(readOnly) {
	this.readOnly = readOnly;
	if (readOnly) {
		this.configLookup = null; // can't mod, no need for lookup cache
	}
};

ATNConfigSet.prototype.toString = function() {
	return Utils.arrayToString(this.configs) +
		(this.hasSemanticContext ? ",hasSemanticContext=" + this.hasSemanticContext : "") +
		(this.uniqueAlt !== ATN.INVALID_ALT_NUMBER ? ",uniqueAlt=" + this.uniqueAlt : "") +
		(this.conflictingAlts !== null ? ",conflictingAlts=" + this.conflictingAlts : "") +
		(this.dipsIntoOuterContext ? ",dipsIntoOuterContext" : "");
};

function OrderedATNConfigSet() {
	ATNConfigSet.call(this);
	this.configLookup = new Set();
	return this;
}

OrderedATNConfigSet.prototype = Object.create(ATNConfigSet.prototype);
OrderedATNConfigSet.prototype.constructor = OrderedATNConfigSet;

exports.ATNConfigSet = ATNConfigSet;
exports.OrderedATNConfigSet = OrderedATNConfigSet;


/***/ }),

/***/ "./node_modules/antlr4/atn/ATNDeserializationOptions.js":
/*!**************************************************************!*\
  !*** ./node_modules/antlr4/atn/ATNDeserializationOptions.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

function ATNDeserializationOptions(copyFrom) {
	if(copyFrom===undefined) {
		copyFrom = null;
	}
	this.readOnly = false;
    this.verifyATN = copyFrom===null ? true : copyFrom.verifyATN;
    this.generateRuleBypassTransitions = copyFrom===null ? false : copyFrom.generateRuleBypassTransitions;

    return this;
}

ATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();
ATNDeserializationOptions.defaultOptions.readOnly = true;

//    def __setattr__(self, key, value):
//        if key!="readOnly" and self.readOnly:
//            raise Exception("The object is read only.")
//        super(type(self), self).__setattr__(key,value)

exports.ATNDeserializationOptions = ATNDeserializationOptions;


/***/ }),

/***/ "./node_modules/antlr4/atn/ATNDeserializer.js":
/*!****************************************************!*\
  !*** ./node_modules/antlr4/atn/ATNDeserializer.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Token = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/Token.js").Token;
var ATN = __webpack_require__(/*! ./ATN */ "./node_modules/antlr4/atn/ATN.js").ATN;
var ATNType = __webpack_require__(/*! ./ATNType */ "./node_modules/antlr4/atn/ATNType.js").ATNType;
var ATNStates = __webpack_require__(/*! ./ATNState */ "./node_modules/antlr4/atn/ATNState.js");
var ATNState = ATNStates.ATNState;
var BasicState = ATNStates.BasicState;
var DecisionState = ATNStates.DecisionState;
var BlockStartState = ATNStates.BlockStartState;
var BlockEndState = ATNStates.BlockEndState;
var LoopEndState = ATNStates.LoopEndState;
var RuleStartState = ATNStates.RuleStartState;
var RuleStopState = ATNStates.RuleStopState;
var TokensStartState = ATNStates.TokensStartState;
var PlusLoopbackState = ATNStates.PlusLoopbackState;
var StarLoopbackState = ATNStates.StarLoopbackState;
var StarLoopEntryState = ATNStates.StarLoopEntryState;
var PlusBlockStartState = ATNStates.PlusBlockStartState;
var StarBlockStartState = ATNStates.StarBlockStartState;
var BasicBlockStartState = ATNStates.BasicBlockStartState;
var Transitions = __webpack_require__(/*! ./Transition */ "./node_modules/antlr4/atn/Transition.js");
var Transition = Transitions.Transition;
var AtomTransition = Transitions.AtomTransition;
var SetTransition = Transitions.SetTransition;
var NotSetTransition = Transitions.NotSetTransition;
var RuleTransition = Transitions.RuleTransition;
var RangeTransition = Transitions.RangeTransition;
var ActionTransition = Transitions.ActionTransition;
var EpsilonTransition = Transitions.EpsilonTransition;
var WildcardTransition = Transitions.WildcardTransition;
var PredicateTransition = Transitions.PredicateTransition;
var PrecedencePredicateTransition = Transitions.PrecedencePredicateTransition;
var IntervalSet = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/IntervalSet.js").IntervalSet;
var Interval = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/IntervalSet.js").Interval;
var ATNDeserializationOptions = __webpack_require__(/*! ./ATNDeserializationOptions */ "./node_modules/antlr4/atn/ATNDeserializationOptions.js").ATNDeserializationOptions;
var LexerActions = __webpack_require__(/*! ./LexerAction */ "./node_modules/antlr4/atn/LexerAction.js");
var LexerActionType = LexerActions.LexerActionType;
var LexerSkipAction = LexerActions.LexerSkipAction;
var LexerChannelAction = LexerActions.LexerChannelAction;
var LexerCustomAction = LexerActions.LexerCustomAction;
var LexerMoreAction = LexerActions.LexerMoreAction;
var LexerTypeAction = LexerActions.LexerTypeAction;
var LexerPushModeAction = LexerActions.LexerPushModeAction;
var LexerPopModeAction = LexerActions.LexerPopModeAction;
var LexerModeAction = LexerActions.LexerModeAction;
// This is the earliest supported serialized UUID.
// stick to serialized version for now, we don't need a UUID instance
var BASE_SERIALIZED_UUID = "AADB8D7E-AEEF-4415-AD2B-8204D6CF042E";

//
// This UUID indicates the serialized ATN contains two sets of
// IntervalSets, where the second set's values are encoded as
// 32-bit integers to support the full Unicode SMP range up to U+10FFFF.
//
var ADDED_UNICODE_SMP = "59627784-3BE5-417A-B9EB-8131A7286089";

// This list contains all of the currently supported UUIDs, ordered by when
// the feature first appeared in this branch.
var SUPPORTED_UUIDS = [ BASE_SERIALIZED_UUID, ADDED_UNICODE_SMP ];

var SERIALIZED_VERSION = 3;

// This is the current serialized UUID.
var SERIALIZED_UUID = ADDED_UNICODE_SMP;

function initArray( length, value) {
	var tmp = [];
	tmp[length-1] = value;
	return tmp.map(function(i) {return value;});
}

function ATNDeserializer (options) {

    if ( options=== undefined || options === null ) {
        options = ATNDeserializationOptions.defaultOptions;
    }
    this.deserializationOptions = options;
    this.stateFactories = null;
    this.actionFactories = null;

    return this;
}

// Determines if a particular serialized representation of an ATN supports
// a particular feature, identified by the {@link UUID} used for serializing
// the ATN at the time the feature was first introduced.
//
// @param feature The {@link UUID} marking the first time the feature was
// supported in the serialized ATN.
// @param actualUuid The {@link UUID} of the actual serialized ATN which is
// currently being deserialized.
// @return {@code true} if the {@code actualUuid} value represents a
// serialized ATN at or after the feature identified by {@code feature} was
// introduced; otherwise, {@code false}.

ATNDeserializer.prototype.isFeatureSupported = function(feature, actualUuid) {
    var idx1 = SUPPORTED_UUIDS.indexOf(feature);
    if (idx1<0) {
        return false;
    }
    var idx2 = SUPPORTED_UUIDS.indexOf(actualUuid);
    return idx2 >= idx1;
};

ATNDeserializer.prototype.deserialize = function(data) {
    this.reset(data);
    this.checkVersion();
    this.checkUUID();
    var atn = this.readATN();
    this.readStates(atn);
    this.readRules(atn);
    this.readModes(atn);
    var sets = [];
    // First, deserialize sets with 16-bit arguments <= U+FFFF.
    this.readSets(atn, sets, this.readInt.bind(this));
    // Next, if the ATN was serialized with the Unicode SMP feature,
    // deserialize sets with 32-bit arguments <= U+10FFFF.
    if (this.isFeatureSupported(ADDED_UNICODE_SMP, this.uuid)) {
        this.readSets(atn, sets, this.readInt32.bind(this));
    }
    this.readEdges(atn, sets);
    this.readDecisions(atn);
    this.readLexerActions(atn);
    this.markPrecedenceDecisions(atn);
    this.verifyATN(atn);
    if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER ) {
        this.generateRuleBypassTransitions(atn);
        // re-verify after modification
        this.verifyATN(atn);
    }
    return atn;
};

ATNDeserializer.prototype.reset = function(data) {
	var adjust = function(c) {
        var v = c.charCodeAt(0);
        return v>1  ? v-2 : v + 65533;
	};
    var temp = data.split("").map(adjust);
    // don't adjust the first value since that's the version number
    temp[0] = data.charCodeAt(0);
    this.data = temp;
    this.pos = 0;
};

ATNDeserializer.prototype.checkVersion = function() {
    var version = this.readInt();
    if ( version !== SERIALIZED_VERSION ) {
        throw ("Could not deserialize ATN with version " + version + " (expected " + SERIALIZED_VERSION + ").");
    }
};

ATNDeserializer.prototype.checkUUID = function() {
    var uuid = this.readUUID();
    if (SUPPORTED_UUIDS.indexOf(uuid)<0) {
        throw ("Could not deserialize ATN with UUID: " + uuid +
                        " (expected " + SERIALIZED_UUID + " or a legacy UUID).", uuid, SERIALIZED_UUID);
    }
    this.uuid = uuid;
};

ATNDeserializer.prototype.readATN = function() {
    var grammarType = this.readInt();
    var maxTokenType = this.readInt();
    return new ATN(grammarType, maxTokenType);
};

ATNDeserializer.prototype.readStates = function(atn) {
	var j, pair, stateNumber;
    var loopBackStateNumbers = [];
    var endStateNumbers = [];
    var nstates = this.readInt();
    for(var i=0; i<nstates; i++) {
        var stype = this.readInt();
        // ignore bad type of states
        if (stype===ATNState.INVALID_TYPE) {
            atn.addState(null);
            continue;
        }
        var ruleIndex = this.readInt();
        if (ruleIndex === 0xFFFF) {
            ruleIndex = -1;
        }
        var s = this.stateFactory(stype, ruleIndex);
        if (stype === ATNState.LOOP_END) { // special case
            var loopBackStateNumber = this.readInt();
            loopBackStateNumbers.push([s, loopBackStateNumber]);
        } else if(s instanceof BlockStartState) {
            var endStateNumber = this.readInt();
            endStateNumbers.push([s, endStateNumber]);
        }
        atn.addState(s);
    }
    // delay the assignment of loop back and end states until we know all the
	// state instances have been initialized
    for (j=0; j<loopBackStateNumbers.length; j++) {
        pair = loopBackStateNumbers[j];
        pair[0].loopBackState = atn.states[pair[1]];
    }

    for (j=0; j<endStateNumbers.length; j++) {
        pair = endStateNumbers[j];
        pair[0].endState = atn.states[pair[1]];
    }

    var numNonGreedyStates = this.readInt();
    for (j=0; j<numNonGreedyStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].nonGreedy = true;
    }

    var numPrecedenceStates = this.readInt();
    for (j=0; j<numPrecedenceStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].isPrecedenceRule = true;
    }
};

ATNDeserializer.prototype.readRules = function(atn) {
    var i;
    var nrules = this.readInt();
    if (atn.grammarType === ATNType.LEXER ) {
        atn.ruleToTokenType = initArray(nrules, 0);
    }
    atn.ruleToStartState = initArray(nrules, 0);
    for (i=0; i<nrules; i++) {
        var s = this.readInt();
        var startState = atn.states[s];
        atn.ruleToStartState[i] = startState;
        if ( atn.grammarType === ATNType.LEXER ) {
            var tokenType = this.readInt();
            if (tokenType === 0xFFFF) {
                tokenType = Token.EOF;
            }
            atn.ruleToTokenType[i] = tokenType;
        }
    }
    atn.ruleToStopState = initArray(nrules, 0);
    for (i=0; i<atn.states.length; i++) {
        var state = atn.states[i];
        if (!(state instanceof RuleStopState)) {
            continue;
        }
        atn.ruleToStopState[state.ruleIndex] = state;
        atn.ruleToStartState[state.ruleIndex].stopState = state;
    }
};

ATNDeserializer.prototype.readModes = function(atn) {
    var nmodes = this.readInt();
    for (var i=0; i<nmodes; i++) {
        var s = this.readInt();
        atn.modeToStartState.push(atn.states[s]);
    }
};

ATNDeserializer.prototype.readSets = function(atn, sets, readUnicode) {
    var m = this.readInt();
    for (var i=0; i<m; i++) {
        var iset = new IntervalSet();
        sets.push(iset);
        var n = this.readInt();
        var containsEof = this.readInt();
        if (containsEof!==0) {
            iset.addOne(-1);
        }
        for (var j=0; j<n; j++) {
            var i1 = readUnicode();
            var i2 = readUnicode();
            iset.addRange(i1, i2);
        }
    }
};

ATNDeserializer.prototype.readEdges = function(atn, sets) {
	var i, j, state, trans, target;
    var nedges = this.readInt();
    for (i=0; i<nedges; i++) {
        var src = this.readInt();
        var trg = this.readInt();
        var ttype = this.readInt();
        var arg1 = this.readInt();
        var arg2 = this.readInt();
        var arg3 = this.readInt();
        trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);
        var srcState = atn.states[src];
        srcState.addTransition(trans);
    }
    // edges for rule stop states can be derived, so they aren't serialized
    for (i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        for (j=0; j<state.transitions.length; j++) {
            var t = state.transitions[j];
            if (!(t instanceof RuleTransition)) {
                continue;
            }
			var outermostPrecedenceReturn = -1;
			if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {
				if (t.precedence === 0) {
					outermostPrecedenceReturn = t.target.ruleIndex;
				}
			}

			trans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);
            atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);
        }
    }

    for (i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        if (state instanceof BlockStartState) {
            // we need to know the end state to set its start state
            if (state.endState === null) {
                throw ("IllegalState");
            }
            // block end states can only be associated to a single block start
			// state
            if ( state.endState.startState !== null) {
                throw ("IllegalState");
            }
            state.endState.startState = state;
        }
        if (state instanceof PlusLoopbackState) {
            for (j=0; j<state.transitions.length; j++) {
                target = state.transitions[j].target;
                if (target instanceof PlusBlockStartState) {
                    target.loopBackState = state;
                }
            }
        } else if (state instanceof StarLoopbackState) {
            for (j=0; j<state.transitions.length; j++) {
                target = state.transitions[j].target;
                if (target instanceof StarLoopEntryState) {
                    target.loopBackState = state;
                }
            }
        }
    }
};

ATNDeserializer.prototype.readDecisions = function(atn) {
    var ndecisions = this.readInt();
    for (var i=0; i<ndecisions; i++) {
        var s = this.readInt();
        var decState = atn.states[s];
        atn.decisionToState.push(decState);
        decState.decision = i;
    }
};

ATNDeserializer.prototype.readLexerActions = function(atn) {
    if (atn.grammarType === ATNType.LEXER) {
        var count = this.readInt();
        atn.lexerActions = initArray(count, null);
        for (var i=0; i<count; i++) {
            var actionType = this.readInt();
            var data1 = this.readInt();
            if (data1 === 0xFFFF) {
                data1 = -1;
            }
            var data2 = this.readInt();
            if (data2 === 0xFFFF) {
                data2 = -1;
            }
            var lexerAction = this.lexerActionFactory(actionType, data1, data2);
            atn.lexerActions[i] = lexerAction;
        }
    }
};

ATNDeserializer.prototype.generateRuleBypassTransitions = function(atn) {
	var i;
    var count = atn.ruleToStartState.length;
    for(i=0; i<count; i++) {
        atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;
    }
    for(i=0; i<count; i++) {
        this.generateRuleBypassTransition(atn, i);
    }
};

ATNDeserializer.prototype.generateRuleBypassTransition = function(atn, idx) {
	var i, state;
    var bypassStart = new BasicBlockStartState();
    bypassStart.ruleIndex = idx;
    atn.addState(bypassStart);

    var bypassStop = new BlockEndState();
    bypassStop.ruleIndex = idx;
    atn.addState(bypassStop);

    bypassStart.endState = bypassStop;
    atn.defineDecisionState(bypassStart);

    bypassStop.startState = bypassStart;

    var excludeTransition = null;
    var endState = null;

    if (atn.ruleToStartState[idx].isPrecedenceRule) {
        // wrap from the beginning of the rule to the StarLoopEntryState
        endState = null;
        for(i=0; i<atn.states.length; i++) {
            state = atn.states[i];
            if (this.stateIsEndStateFor(state, idx)) {
                endState = state;
                excludeTransition = state.loopBackState.transitions[0];
                break;
            }
        }
        if (excludeTransition === null) {
            throw ("Couldn't identify final state of the precedence rule prefix section.");
        }
    } else {
        endState = atn.ruleToStopState[idx];
    }

    // all non-excluded transitions that currently target end state need to
	// target blockEnd instead
    for(i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        for(var j=0; j<state.transitions.length; j++) {
            var transition = state.transitions[j];
            if (transition === excludeTransition) {
                continue;
            }
            if (transition.target === endState) {
                transition.target = bypassStop;
            }
        }
    }

    // all transitions leaving the rule start state need to leave blockStart
	// instead
    var ruleToStartState = atn.ruleToStartState[idx];
    var count = ruleToStartState.transitions.length;
    while ( count > 0) {
        bypassStart.addTransition(ruleToStartState.transitions[count-1]);
        ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);
    }
    // link the new states
    atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));
    bypassStop.addTransition(new EpsilonTransition(endState));

    var matchState = new BasicState();
    atn.addState(matchState);
    matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[idx]));
    bypassStart.addTransition(new EpsilonTransition(matchState));
};

ATNDeserializer.prototype.stateIsEndStateFor = function(state, idx) {
    if ( state.ruleIndex !== idx) {
        return null;
    }
    if (!( state instanceof StarLoopEntryState)) {
        return null;
    }
    var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
    if (!( maybeLoopEndState instanceof LoopEndState)) {
        return null;
    }
    if (maybeLoopEndState.epsilonOnlyTransitions &&
        (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
        return state;
    } else {
        return null;
    }
};

//
// Analyze the {@link StarLoopEntryState} states in the specified ATN to set
// the {@link StarLoopEntryState//isPrecedenceDecision} field to the
// correct value.
//
// @param atn The ATN.
//
ATNDeserializer.prototype.markPrecedenceDecisions = function(atn) {
	for(var i=0; i<atn.states.length; i++) {
		var state = atn.states[i];
		if (!( state instanceof StarLoopEntryState)) {
            continue;
        }
        // We analyze the ATN to determine if this ATN decision state is the
        // decision for the closure block that determines whether a
        // precedence rule should continue or complete.
        //
        if ( atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {
            var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
            if (maybeLoopEndState instanceof LoopEndState) {
                if ( maybeLoopEndState.epsilonOnlyTransitions &&
                        (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
                    state.isPrecedenceDecision = true;
                }
            }
        }
	}
};

ATNDeserializer.prototype.verifyATN = function(atn) {
    if (!this.deserializationOptions.verifyATN) {
        return;
    }
    // verify assumptions
	for(var i=0; i<atn.states.length; i++) {
        var state = atn.states[i];
        if (state === null) {
            continue;
        }
        this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);
        if (state instanceof PlusBlockStartState) {
            this.checkCondition(state.loopBackState !== null);
        } else  if (state instanceof StarLoopEntryState) {
            this.checkCondition(state.loopBackState !== null);
            this.checkCondition(state.transitions.length === 2);
            if (state.transitions[0].target instanceof StarBlockStartState) {
                this.checkCondition(state.transitions[1].target instanceof LoopEndState);
                this.checkCondition(!state.nonGreedy);
            } else if (state.transitions[0].target instanceof LoopEndState) {
                this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);
                this.checkCondition(state.nonGreedy);
            } else {
                throw("IllegalState");
            }
        } else if (state instanceof StarLoopbackState) {
            this.checkCondition(state.transitions.length === 1);
            this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);
        } else if (state instanceof LoopEndState) {
            this.checkCondition(state.loopBackState !== null);
        } else if (state instanceof RuleStartState) {
            this.checkCondition(state.stopState !== null);
        } else if (state instanceof BlockStartState) {
            this.checkCondition(state.endState !== null);
        } else if (state instanceof BlockEndState) {
            this.checkCondition(state.startState !== null);
        } else if (state instanceof DecisionState) {
            this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);
        } else {
            this.checkCondition(state.transitions.length <= 1 || (state instanceof RuleStopState));
        }
	}
};

ATNDeserializer.prototype.checkCondition = function(condition, message) {
    if (!condition) {
        if (message === undefined || message===null) {
            message = "IllegalState";
        }
        throw (message);
    }
};

ATNDeserializer.prototype.readInt = function() {
    return this.data[this.pos++];
};

ATNDeserializer.prototype.readInt32 = function() {
    var low = this.readInt();
    var high = this.readInt();
    return low | (high << 16);
};

ATNDeserializer.prototype.readLong = function() {
    var low = this.readInt32();
    var high = this.readInt32();
    return (low & 0x00000000FFFFFFFF) | (high << 32);
};

function createByteToHex() {
	var bth = [];
	for (var i = 0; i < 256; i++) {
		bth[i] = (i + 0x100).toString(16).substr(1).toUpperCase();
	}
	return bth;
}

var byteToHex = createByteToHex();

ATNDeserializer.prototype.readUUID = function() {
	var bb = [];
	for(var i=7;i>=0;i--) {
		var int = this.readInt();
		/* jshint bitwise: false */
		bb[(2*i)+1] = int & 0xFF;
		bb[2*i] = (int >> 8) & 0xFF;
	}
    return byteToHex[bb[0]] + byteToHex[bb[1]] +
    byteToHex[bb[2]] + byteToHex[bb[3]] + '-' +
    byteToHex[bb[4]] + byteToHex[bb[5]] + '-' +
    byteToHex[bb[6]] + byteToHex[bb[7]] + '-' +
    byteToHex[bb[8]] + byteToHex[bb[9]] + '-' +
    byteToHex[bb[10]] + byteToHex[bb[11]] +
    byteToHex[bb[12]] + byteToHex[bb[13]] +
    byteToHex[bb[14]] + byteToHex[bb[15]];
};

ATNDeserializer.prototype.edgeFactory = function(atn, type, src, trg, arg1, arg2, arg3, sets) {
    var target = atn.states[trg];
    switch(type) {
    case Transition.EPSILON:
        return new EpsilonTransition(target);
    case Transition.RANGE:
        return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);
    case Transition.RULE:
        return new RuleTransition(atn.states[arg1], arg2, arg3, target);
    case Transition.PREDICATE:
        return new PredicateTransition(target, arg1, arg2, arg3 !== 0);
    case Transition.PRECEDENCE:
        return new PrecedencePredicateTransition(target, arg1);
    case Transition.ATOM:
        return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);
    case Transition.ACTION:
        return new ActionTransition(target, arg1, arg2, arg3 !== 0);
    case Transition.SET:
        return new SetTransition(target, sets[arg1]);
    case Transition.NOT_SET:
        return new NotSetTransition(target, sets[arg1]);
    case Transition.WILDCARD:
        return new WildcardTransition(target);
    default:
        throw "The specified transition type: " + type + " is not valid.";
    }
};

ATNDeserializer.prototype.stateFactory = function(type, ruleIndex) {
    if (this.stateFactories === null) {
        var sf = [];
        sf[ATNState.INVALID_TYPE] = null;
        sf[ATNState.BASIC] = function() { return new BasicState(); };
        sf[ATNState.RULE_START] = function() { return new RuleStartState(); };
        sf[ATNState.BLOCK_START] = function() { return new BasicBlockStartState(); };
        sf[ATNState.PLUS_BLOCK_START] = function() { return new PlusBlockStartState(); };
        sf[ATNState.STAR_BLOCK_START] = function() { return new StarBlockStartState(); };
        sf[ATNState.TOKEN_START] = function() { return new TokensStartState(); };
        sf[ATNState.RULE_STOP] = function() { return new RuleStopState(); };
        sf[ATNState.BLOCK_END] = function() { return new BlockEndState(); };
        sf[ATNState.STAR_LOOP_BACK] = function() { return new StarLoopbackState(); };
        sf[ATNState.STAR_LOOP_ENTRY] = function() { return new StarLoopEntryState(); };
        sf[ATNState.PLUS_LOOP_BACK] = function() { return new PlusLoopbackState(); };
        sf[ATNState.LOOP_END] = function() { return new LoopEndState(); };
        this.stateFactories = sf;
    }
    if (type>this.stateFactories.length || this.stateFactories[type] === null) {
        throw("The specified state type " + type + " is not valid.");
    } else {
        var s = this.stateFactories[type]();
        if (s!==null) {
            s.ruleIndex = ruleIndex;
            return s;
        }
    }
};

ATNDeserializer.prototype.lexerActionFactory = function(type, data1, data2) {
    if (this.actionFactories === null) {
        var af = [];
        af[LexerActionType.CHANNEL] = function(data1, data2) { return new LexerChannelAction(data1); };
        af[LexerActionType.CUSTOM] = function(data1, data2) { return new LexerCustomAction(data1, data2); };
        af[LexerActionType.MODE] = function(data1, data2) { return new LexerModeAction(data1); };
        af[LexerActionType.MORE] = function(data1, data2) { return LexerMoreAction.INSTANCE; };
        af[LexerActionType.POP_MODE] = function(data1, data2) { return LexerPopModeAction.INSTANCE; };
        af[LexerActionType.PUSH_MODE] = function(data1, data2) { return new LexerPushModeAction(data1); };
        af[LexerActionType.SKIP] = function(data1, data2) { return LexerSkipAction.INSTANCE; };
        af[LexerActionType.TYPE] = function(data1, data2) { return new LexerTypeAction(data1); };
        this.actionFactories = af;
    }
    if (type>this.actionFactories.length || this.actionFactories[type] === null) {
        throw("The specified lexer action type " + type + " is not valid.");
    } else {
        return this.actionFactories[type](data1, data2);
    }
};


exports.ATNDeserializer = ATNDeserializer;

/***/ }),

/***/ "./node_modules/antlr4/atn/ATNSimulator.js":
/*!*************************************************!*\
  !*** ./node_modules/antlr4/atn/ATNSimulator.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var DFAState = __webpack_require__(/*! ./../dfa/DFAState */ "./node_modules/antlr4/dfa/DFAState.js").DFAState;
var ATNConfigSet = __webpack_require__(/*! ./ATNConfigSet */ "./node_modules/antlr4/atn/ATNConfigSet.js").ATNConfigSet;
var getCachedPredictionContext = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/PredictionContext.js").getCachedPredictionContext;

function ATNSimulator(atn, sharedContextCache) {

    // The context cache maps all PredictionContext objects that are ==
    //  to a single cached copy. This cache is shared across all contexts
    //  in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet
    //  to use only cached nodes/graphs in addDFAState(). We don't want to
    //  fill this during closure() since there are lots of contexts that
    //  pop up but are not used ever again. It also greatly slows down closure().
    //
    //  <p>This cache makes a huge difference in memory and a little bit in speed.
    //  For the Java grammar on java.*, it dropped the memory requirements
    //  at the end from 25M to 16M. We don't store any of the full context
    //  graphs in the DFA because they are limited to local context only,
    //  but apparently there's a lot of repetition there as well. We optimize
    //  the config contexts before storing the config set in the DFA states
    //  by literally rebuilding them with cached subgraphs only.</p>
    //
    //  <p>I tried a cache for use during closure operations, that was
    //  whacked after each adaptivePredict(). It cost a little bit
    //  more time I think and doesn't save on the overall footprint
    //  so it's not worth the complexity.</p>
    ///
    this.atn = atn;
    this.sharedContextCache = sharedContextCache;
    return this;
}

// Must distinguish between missing edge and edge we know leads nowhere///
ATNSimulator.ERROR = new DFAState(0x7FFFFFFF, new ATNConfigSet());


ATNSimulator.prototype.getCachedContext = function(context) {
    if (this.sharedContextCache ===null) {
        return context;
    }
    var visited = {};
    return getCachedPredictionContext(context, this.sharedContextCache, visited);
};

exports.ATNSimulator = ATNSimulator;


/***/ }),

/***/ "./node_modules/antlr4/atn/ATNState.js":
/*!*********************************************!*\
  !*** ./node_modules/antlr4/atn/ATNState.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// The following images show the relation of states and
// {@link ATNState//transitions} for various grammar constructs.
//
// <ul>
//
// <li>Solid edges marked with an &//0949; indicate a required
// {@link EpsilonTransition}.</li>
//
// <li>Dashed edges indicate locations where any transition derived from
// {@link Transition} might appear.</li>
//
// <li>Dashed nodes are place holders for either a sequence of linked
// {@link BasicState} states or the inclusion of a block representing a nested
// construct in one of the forms below.</li>
//
// <li>Nodes showing multiple outgoing alternatives with a {@code ...} support
// any number of alternatives (one or more). Nodes without the {@code ...} only
// support the exact number of alternatives shown in the diagram.</li>
//
// </ul>
//
// <h2>Basic Blocks</h2>
//
// <h3>Rule</h3>
//
// <embed src="images/Rule.svg" type="image/svg+xml"/>
//
// <h3>Block of 1 or more alternatives</h3>
//
// <embed src="images/Block.svg" type="image/svg+xml"/>
//
// <h2>Greedy Loops</h2>
//
// <h3>Greedy Closure: {@code (...)*}</h3>
//
// <embed src="images/ClosureGreedy.svg" type="image/svg+xml"/>
//
// <h3>Greedy Positive Closure: {@code (...)+}</h3>
//
// <embed src="images/PositiveClosureGreedy.svg" type="image/svg+xml"/>
//
// <h3>Greedy Optional: {@code (...)?}</h3>
//
// <embed src="images/OptionalGreedy.svg" type="image/svg+xml"/>
//
// <h2>Non-Greedy Loops</h2>
//
// <h3>Non-Greedy Closure: {@code (...)*?}</h3>
//
// <embed src="images/ClosureNonGreedy.svg" type="image/svg+xml"/>
//
// <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>
//
// <embed src="images/PositiveClosureNonGreedy.svg" type="image/svg+xml"/>
//
// <h3>Non-Greedy Optional: {@code (...)??}</h3>
//
// <embed src="images/OptionalNonGreedy.svg" type="image/svg+xml"/>
//

var INITIAL_NUM_TRANSITIONS = 4;

function ATNState() {
    // Which ATN are we in?
    this.atn = null;
    this.stateNumber = ATNState.INVALID_STATE_NUMBER;
    this.stateType = null;
    this.ruleIndex = 0; // at runtime, we don't have Rule objects
    this.epsilonOnlyTransitions = false;
    // Track the transitions emanating from this ATN state.
    this.transitions = [];
    // Used to cache lookahead during parsing, not used during construction
    this.nextTokenWithinRule = null;
    return this;
}

// constants for serialization
ATNState.INVALID_TYPE = 0;
ATNState.BASIC = 1;
ATNState.RULE_START = 2;
ATNState.BLOCK_START = 3;
ATNState.PLUS_BLOCK_START = 4;
ATNState.STAR_BLOCK_START = 5;
ATNState.TOKEN_START = 6;
ATNState.RULE_STOP = 7;
ATNState.BLOCK_END = 8;
ATNState.STAR_LOOP_BACK = 9;
ATNState.STAR_LOOP_ENTRY = 10;
ATNState.PLUS_LOOP_BACK = 11;
ATNState.LOOP_END = 12;

ATNState.serializationNames = [
            "INVALID",
            "BASIC",
            "RULE_START",
            "BLOCK_START",
            "PLUS_BLOCK_START",
            "STAR_BLOCK_START",
            "TOKEN_START",
            "RULE_STOP",
            "BLOCK_END",
            "STAR_LOOP_BACK",
            "STAR_LOOP_ENTRY",
            "PLUS_LOOP_BACK",
            "LOOP_END" ];

ATNState.INVALID_STATE_NUMBER = -1;

ATNState.prototype.toString = function() {
	return this.stateNumber;
};

ATNState.prototype.equals = function(other) {
    if (other instanceof ATNState) {
        return this.stateNumber===other.stateNumber;
    } else {
        return false;
    }
};

ATNState.prototype.isNonGreedyExitState = function() {
    return false;
};


ATNState.prototype.addTransition = function(trans, index) {
	if(index===undefined) {
		index = -1;
	}
    if (this.transitions.length===0) {
        this.epsilonOnlyTransitions = trans.isEpsilon;
    } else if(this.epsilonOnlyTransitions !== trans.isEpsilon) {
        this.epsilonOnlyTransitions = false;
    }
    if (index===-1) {
        this.transitions.push(trans);
    } else {
        this.transitions.splice(index, 1, trans);
    }
};

function BasicState() {
	ATNState.call(this);
    this.stateType = ATNState.BASIC;
    return this;
}

BasicState.prototype = Object.create(ATNState.prototype);
BasicState.prototype.constructor = BasicState;


function DecisionState() {
	ATNState.call(this);
    this.decision = -1;
    this.nonGreedy = false;
    return this;
}

DecisionState.prototype = Object.create(ATNState.prototype);
DecisionState.prototype.constructor = DecisionState;


//  The start of a regular {@code (...)} block.
function BlockStartState() {
	DecisionState.call(this);
	this.endState = null;
	return this;
}

BlockStartState.prototype = Object.create(DecisionState.prototype);
BlockStartState.prototype.constructor = BlockStartState;


function BasicBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.BLOCK_START;
	return this;
}

BasicBlockStartState.prototype = Object.create(BlockStartState.prototype);
BasicBlockStartState.prototype.constructor = BasicBlockStartState;


// Terminal node of a simple {@code (a|b|c)} block.
function BlockEndState() {
	ATNState.call(this);
	this.stateType = ATNState.BLOCK_END;
    this.startState = null;
    return this;
}

BlockEndState.prototype = Object.create(ATNState.prototype);
BlockEndState.prototype.constructor = BlockEndState;


// The last node in the ATN for a rule, unless that rule is the start symbol.
//  In that case, there is one transition to EOF. Later, we might encode
//  references to all calls to this rule to compute FOLLOW sets for
//  error handling.
//
function RuleStopState() {
	ATNState.call(this);
    this.stateType = ATNState.RULE_STOP;
    return this;
}

RuleStopState.prototype = Object.create(ATNState.prototype);
RuleStopState.prototype.constructor = RuleStopState;

function RuleStartState() {
	ATNState.call(this);
	this.stateType = ATNState.RULE_START;
	this.stopState = null;
	this.isPrecedenceRule = false;
	return this;
}

RuleStartState.prototype = Object.create(ATNState.prototype);
RuleStartState.prototype.constructor = RuleStartState;

// Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:
//  one to the loop back to start of the block and one to exit.
//
function PlusLoopbackState() {
	DecisionState.call(this);
	this.stateType = ATNState.PLUS_LOOP_BACK;
	return this;
}

PlusLoopbackState.prototype = Object.create(DecisionState.prototype);
PlusLoopbackState.prototype.constructor = PlusLoopbackState;


// Start of {@code (A|B|...)+} loop. Technically a decision state, but
//  we don't use for code generation; somebody might need it, so I'm defining
//  it for completeness. In reality, the {@link PlusLoopbackState} node is the
//  real decision-making note for {@code A+}.
//
function PlusBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.PLUS_BLOCK_START;
    this.loopBackState = null;
    return this;
}

PlusBlockStartState.prototype = Object.create(BlockStartState.prototype);
PlusBlockStartState.prototype.constructor = PlusBlockStartState;

// The block that begins a closure loop.
function StarBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.STAR_BLOCK_START;
	return this;
}

StarBlockStartState.prototype = Object.create(BlockStartState.prototype);
StarBlockStartState.prototype.constructor = StarBlockStartState;


function StarLoopbackState() {
	ATNState.call(this);
	this.stateType = ATNState.STAR_LOOP_BACK;
	return this;
}

StarLoopbackState.prototype = Object.create(ATNState.prototype);
StarLoopbackState.prototype.constructor = StarLoopbackState;


function StarLoopEntryState() {
	DecisionState.call(this);
	this.stateType = ATNState.STAR_LOOP_ENTRY;
    this.loopBackState = null;
    // Indicates whether this state can benefit from a precedence DFA during SLL decision making.
    this.isPrecedenceDecision = null;
    return this;
}

StarLoopEntryState.prototype = Object.create(DecisionState.prototype);
StarLoopEntryState.prototype.constructor = StarLoopEntryState;


// Mark the end of a * or + loop.
function LoopEndState() {
	ATNState.call(this);
	this.stateType = ATNState.LOOP_END;
	this.loopBackState = null;
	return this;
}

LoopEndState.prototype = Object.create(ATNState.prototype);
LoopEndState.prototype.constructor = LoopEndState;


// The Tokens rule start state linking to each lexer rule start state */
function TokensStartState() {
	DecisionState.call(this);
	this.stateType = ATNState.TOKEN_START;
	return this;
}

TokensStartState.prototype = Object.create(DecisionState.prototype);
TokensStartState.prototype.constructor = TokensStartState;

exports.ATNState = ATNState;
exports.BasicState = BasicState;
exports.DecisionState = DecisionState;
exports.BlockStartState = BlockStartState;
exports.BlockEndState = BlockEndState;
exports.LoopEndState = LoopEndState;
exports.RuleStartState = RuleStartState;
exports.RuleStopState = RuleStopState;
exports.TokensStartState = TokensStartState;
exports.PlusLoopbackState = PlusLoopbackState;
exports.StarLoopbackState = StarLoopbackState;
exports.StarLoopEntryState = StarLoopEntryState;
exports.PlusBlockStartState = PlusBlockStartState;
exports.StarBlockStartState = StarBlockStartState;
exports.BasicBlockStartState = BasicBlockStartState;


/***/ }),

/***/ "./node_modules/antlr4/atn/ATNType.js":
/*!********************************************!*\
  !*** ./node_modules/antlr4/atn/ATNType.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// Represents the type of recognizer an ATN applies to.

function ATNType() {

}

ATNType.LEXER = 0;
ATNType.PARSER = 1;

exports.ATNType = ATNType;



/***/ }),

/***/ "./node_modules/antlr4/atn/LexerATNSimulator.js":
/*!******************************************************!*\
  !*** ./node_modules/antlr4/atn/LexerATNSimulator.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// When we hit an accept state in either the DFA or the ATN, we
//  have to notify the character stream to start buffering characters
//  via {@link IntStream//mark} and record the current state. The current sim state
//  includes the current index into the input, the current line,
//  and current character position in that line. Note that the Lexer is
//  tracking the starting line and characterization of the token. These
//  variables track the "state" of the simulator when it hits an accept state.
//
//  <p>We track these variables separately for the DFA and ATN simulation
//  because the DFA simulation often has to fail over to the ATN
//  simulation. If the ATN simulation fails, we need the DFA to fall
//  back to its previously accepted state, if any. If the ATN succeeds,
//  then the ATN does the accept and the DFA simulator that invoked it
//  can simply return the predicted token type.</p>
///

var Token = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/Token.js").Token;
var Lexer = __webpack_require__(/*! ./../Lexer */ "./node_modules/antlr4/Lexer.js").Lexer;
var ATN = __webpack_require__(/*! ./ATN */ "./node_modules/antlr4/atn/ATN.js").ATN;
var ATNSimulator = __webpack_require__(/*! ./ATNSimulator */ "./node_modules/antlr4/atn/ATNSimulator.js").ATNSimulator;
var DFAState = __webpack_require__(/*! ./../dfa/DFAState */ "./node_modules/antlr4/dfa/DFAState.js").DFAState;
var ATNConfigSet = __webpack_require__(/*! ./ATNConfigSet */ "./node_modules/antlr4/atn/ATNConfigSet.js").ATNConfigSet;
var OrderedATNConfigSet = __webpack_require__(/*! ./ATNConfigSet */ "./node_modules/antlr4/atn/ATNConfigSet.js").OrderedATNConfigSet;
var PredictionContext = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/PredictionContext.js").PredictionContext;
var SingletonPredictionContext = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/PredictionContext.js").SingletonPredictionContext;
var RuleStopState = __webpack_require__(/*! ./ATNState */ "./node_modules/antlr4/atn/ATNState.js").RuleStopState;
var LexerATNConfig = __webpack_require__(/*! ./ATNConfig */ "./node_modules/antlr4/atn/ATNConfig.js").LexerATNConfig;
var Transition = __webpack_require__(/*! ./Transition */ "./node_modules/antlr4/atn/Transition.js").Transition;
var LexerActionExecutor = __webpack_require__(/*! ./LexerActionExecutor */ "./node_modules/antlr4/atn/LexerActionExecutor.js").LexerActionExecutor;
var LexerNoViableAltException = __webpack_require__(/*! ./../error/Errors */ "./node_modules/antlr4/error/Errors.js").LexerNoViableAltException;

function resetSimState(sim) {
	sim.index = -1;
	sim.line = 0;
	sim.column = -1;
	sim.dfaState = null;
}

function SimState() {
	resetSimState(this);
	return this;
}

SimState.prototype.reset = function() {
	resetSimState(this);
};

function LexerATNSimulator(recog, atn, decisionToDFA, sharedContextCache) {
	ATNSimulator.call(this, atn, sharedContextCache);
	this.decisionToDFA = decisionToDFA;
	this.recog = recog;
	// The current token's starting index into the character stream.
	// Shared across DFA to ATN simulation in case the ATN fails and the
	// DFA did not have a previous accept state. In this case, we use the
	// ATN-generated exception object.
	this.startIndex = -1;
	// line number 1..n within the input///
	this.line = 1;
	// The index of the character relative to the beginning of the line
	// 0..n-1///
	this.column = 0;
	this.mode = Lexer.DEFAULT_MODE;
	// Used during DFA/ATN exec to record the most recent accept configuration
	// info
	this.prevAccept = new SimState();
	// done
	return this;
}

LexerATNSimulator.prototype = Object.create(ATNSimulator.prototype);
LexerATNSimulator.prototype.constructor = LexerATNSimulator;

LexerATNSimulator.debug = false;
LexerATNSimulator.dfa_debug = false;

LexerATNSimulator.MIN_DFA_EDGE = 0;
LexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN

LexerATNSimulator.match_calls = 0;

LexerATNSimulator.prototype.copyState = function(simulator) {
	this.column = simulator.column;
	this.line = simulator.line;
	this.mode = simulator.mode;
	this.startIndex = simulator.startIndex;
};

LexerATNSimulator.prototype.match = function(input, mode) {
	this.match_calls += 1;
	this.mode = mode;
	var mark = input.mark();
	try {
		this.startIndex = input.index;
		this.prevAccept.reset();
		var dfa = this.decisionToDFA[mode];
		if (dfa.s0 === null) {
			return this.matchATN(input);
		} else {
			return this.execATN(input, dfa.s0);
		}
	} finally {
		input.release(mark);
	}
};

LexerATNSimulator.prototype.reset = function() {
	this.prevAccept.reset();
	this.startIndex = -1;
	this.line = 1;
	this.column = 0;
	this.mode = Lexer.DEFAULT_MODE;
};

LexerATNSimulator.prototype.matchATN = function(input) {
	var startState = this.atn.modeToStartState[this.mode];

	if (LexerATNSimulator.debug) {
		console.log("matchATN mode " + this.mode + " start: " + startState);
	}
	var old_mode = this.mode;
	var s0_closure = this.computeStartState(input, startState);
	var suppressEdge = s0_closure.hasSemanticContext;
	s0_closure.hasSemanticContext = false;

	var next = this.addDFAState(s0_closure);
	if (!suppressEdge) {
		this.decisionToDFA[this.mode].s0 = next;
	}

	var predict = this.execATN(input, next);

	if (LexerATNSimulator.debug) {
		console.log("DFA after matchATN: " + this.decisionToDFA[old_mode].toLexerString());
	}
	return predict;
};

LexerATNSimulator.prototype.execATN = function(input, ds0) {
	if (LexerATNSimulator.debug) {
		console.log("start state closure=" + ds0.configs);
	}
	if (ds0.isAcceptState) {
		// allow zero-length tokens
		this.captureSimState(this.prevAccept, input, ds0);
	}
	var t = input.LA(1);
	var s = ds0; // s is current/from DFA state

	while (true) { // while more work
		if (LexerATNSimulator.debug) {
			console.log("execATN loop starting closure: " + s.configs);
		}

		// As we move src->trg, src->trg, we keep track of the previous trg to
		// avoid looking up the DFA state again, which is expensive.
		// If the previous target was already part of the DFA, we might
		// be able to avoid doing a reach operation upon t. If s!=null,
		// it means that semantic predicates didn't prevent us from
		// creating a DFA state. Once we know s!=null, we check to see if
		// the DFA state has an edge already for t. If so, we can just reuse
		// it's configuration set; there's no point in re-computing it.
		// This is kind of like doing DFA simulation within the ATN
		// simulation because DFA simulation is really just a way to avoid
		// computing reach/closure sets. Technically, once we know that
		// we have a previously added DFA state, we could jump over to
		// the DFA simulator. But, that would mean popping back and forth
		// a lot and making things more complicated algorithmically.
		// This optimization makes a lot of sense for loops within DFA.
		// A character will take us back to an existing DFA state
		// that already has lots of edges out of it. e.g., .* in comments.
		// print("Target for:" + str(s) + " and:" + str(t))
		var target = this.getExistingTargetState(s, t);
		// print("Existing:" + str(target))
		if (target === null) {
			target = this.computeTargetState(input, s, t);
			// print("Computed:" + str(target))
		}
		if (target === ATNSimulator.ERROR) {
			break;
		}
		// If this is a consumable input element, make sure to consume before
		// capturing the accept state so the input index, line, and char
		// position accurately reflect the state of the interpreter at the
		// end of the token.
		if (t !== Token.EOF) {
			this.consume(input);
		}
		if (target.isAcceptState) {
			this.captureSimState(this.prevAccept, input, target);
			if (t === Token.EOF) {
				break;
			}
		}
		t = input.LA(1);
		s = target; // flip; current DFA target becomes new src/from state
	}
	return this.failOrAccept(this.prevAccept, input, s.configs, t);
};

// Get an existing target state for an edge in the DFA. If the target state
// for the edge has not yet been computed or is otherwise not available,
// this method returns {@code null}.
//
// @param s The current DFA state
// @param t The next input symbol
// @return The existing target DFA state for the given input symbol
// {@code t}, or {@code null} if the target state for this edge is not
// already cached
LexerATNSimulator.prototype.getExistingTargetState = function(s, t) {
	if (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {
		return null;
	}

	var target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];
	if(target===undefined) {
		target = null;
	}
	if (LexerATNSimulator.debug && target !== null) {
		console.log("reuse state " + s.stateNumber + " edge to " + target.stateNumber);
	}
	return target;
};

// Compute a target state for an edge in the DFA, and attempt to add the
// computed state and corresponding edge to the DFA.
//
// @param input The input stream
// @param s The current DFA state
// @param t The next input symbol
//
// @return The computed target DFA state for the given input symbol
// {@code t}. If {@code t} does not lead to a valid DFA state, this method
// returns {@link //ERROR}.
LexerATNSimulator.prototype.computeTargetState = function(input, s, t) {
	var reach = new OrderedATNConfigSet();
	// if we don't find an existing DFA state
	// Fill reach starting from closure, following t transitions
	this.getReachableConfigSet(input, s.configs, reach, t);

	if (reach.items.length === 0) { // we got nowhere on t from s
		if (!reach.hasSemanticContext) {
			// we got nowhere on t, don't throw out this knowledge; it'd
			// cause a failover from DFA later.
			this.addDFAEdge(s, t, ATNSimulator.ERROR);
		}
		// stop when we can't match any more char
		return ATNSimulator.ERROR;
	}
	// Add an edge from s to target DFA found/created for reach
	return this.addDFAEdge(s, t, null, reach);
};

LexerATNSimulator.prototype.failOrAccept = function(prevAccept, input, reach, t) {
	if (this.prevAccept.dfaState !== null) {
		var lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;
		this.accept(input, lexerActionExecutor, this.startIndex,
				prevAccept.index, prevAccept.line, prevAccept.column);
		return prevAccept.dfaState.prediction;
	} else {
		// if no accept and EOF is first char, return EOF
		if (t === Token.EOF && input.index === this.startIndex) {
			return Token.EOF;
		}
		throw new LexerNoViableAltException(this.recog, input, this.startIndex, reach);
	}
};

// Given a starting configuration set, figure out all ATN configurations
// we can reach upon input {@code t}. Parameter {@code reach} is a return
// parameter.
LexerATNSimulator.prototype.getReachableConfigSet = function(input, closure,
		reach, t) {
	// this is used to skip processing for configs which have a lower priority
	// than a config that already reached an accept state for the same rule
	var skipAlt = ATN.INVALID_ALT_NUMBER;
	for (var i = 0; i < closure.items.length; i++) {
		var cfg = closure.items[i];
		var currentAltReachedAcceptState = (cfg.alt === skipAlt);
		if (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {
			continue;
		}
		if (LexerATNSimulator.debug) {
			console.log("testing %s at %s\n", this.getTokenName(t), cfg
					.toString(this.recog, true));
		}
		for (var j = 0; j < cfg.state.transitions.length; j++) {
			var trans = cfg.state.transitions[j]; // for each transition
			var target = this.getReachableTarget(trans, t);
			if (target !== null) {
				var lexerActionExecutor = cfg.lexerActionExecutor;
				if (lexerActionExecutor !== null) {
					lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);
				}
				var treatEofAsEpsilon = (t === Token.EOF);
				var config = new LexerATNConfig({state:target, lexerActionExecutor:lexerActionExecutor}, cfg);
				if (this.closure(input, config, reach,
						currentAltReachedAcceptState, true, treatEofAsEpsilon)) {
					// any remaining configs for this alt have a lower priority
					// than the one that just reached an accept state.
					skipAlt = cfg.alt;
				}
			}
		}
	}
};

LexerATNSimulator.prototype.accept = function(input, lexerActionExecutor,
		startIndex, index, line, charPos) {
	if (LexerATNSimulator.debug) {
		console.log("ACTION %s\n", lexerActionExecutor);
	}
	// seek to after last char in token
	input.seek(index);
	this.line = line;
	this.column = charPos;
	if (lexerActionExecutor !== null && this.recog !== null) {
		lexerActionExecutor.execute(this.recog, input, startIndex);
	}
};

LexerATNSimulator.prototype.getReachableTarget = function(trans, t) {
	if (trans.matches(t, 0, Lexer.MAX_CHAR_VALUE)) {
		return trans.target;
	} else {
		return null;
	}
};

LexerATNSimulator.prototype.computeStartState = function(input, p) {
	var initialContext = PredictionContext.EMPTY;
	var configs = new OrderedATNConfigSet();
	for (var i = 0; i < p.transitions.length; i++) {
		var target = p.transitions[i].target;
        var cfg = new LexerATNConfig({state:target, alt:i+1, context:initialContext}, null);
		this.closure(input, cfg, configs, false, false, false);
	}
	return configs;
};

// Since the alternatives within any lexer decision are ordered by
// preference, this method stops pursuing the closure as soon as an accept
// state is reached. After the first accept state is reached by depth-first
// search from {@code config}, all other (potentially reachable) states for
// this rule would have a lower priority.
//
// @return {@code true} if an accept state is reached, otherwise
// {@code false}.
LexerATNSimulator.prototype.closure = function(input, config, configs,
		currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {
	var cfg = null;
	if (LexerATNSimulator.debug) {
		console.log("closure(" + config.toString(this.recog, true) + ")");
	}
	if (config.state instanceof RuleStopState) {
		if (LexerATNSimulator.debug) {
			if (this.recog !== null) {
				console.log("closure at %s rule stop %s\n", this.recog.ruleNames[config.state.ruleIndex], config);
			} else {
				console.log("closure at rule stop %s\n", config);
			}
		}
		if (config.context === null || config.context.hasEmptyPath()) {
			if (config.context === null || config.context.isEmpty()) {
				configs.add(config);
				return true;
			} else {
				configs.add(new LexerATNConfig({ state:config.state, context:PredictionContext.EMPTY}, config));
				currentAltReachedAcceptState = true;
			}
		}
		if (config.context !== null && !config.context.isEmpty()) {
			for (var i = 0; i < config.context.length; i++) {
				if (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {
					var newContext = config.context.getParent(i); // "pop" return state
					var returnState = this.atn.states[config.context.getReturnState(i)];
					cfg = new LexerATNConfig({ state:returnState, context:newContext }, config);
					currentAltReachedAcceptState = this.closure(input, cfg,
							configs, currentAltReachedAcceptState, speculative,
							treatEofAsEpsilon);
				}
			}
		}
		return currentAltReachedAcceptState;
	}
	// optimization
	if (!config.state.epsilonOnlyTransitions) {
		if (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {
			configs.add(config);
		}
	}
	for (var j = 0; j < config.state.transitions.length; j++) {
		var trans = config.state.transitions[j];
		cfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);
		if (cfg !== null) {
			currentAltReachedAcceptState = this.closure(input, cfg, configs,
					currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
		}
	}
	return currentAltReachedAcceptState;
};

// side-effect: can alter configs.hasSemanticContext
LexerATNSimulator.prototype.getEpsilonTarget = function(input, config, trans,
		configs, speculative, treatEofAsEpsilon) {
	var cfg = null;
	if (trans.serializationType === Transition.RULE) {
		var newContext = SingletonPredictionContext.create(config.context, trans.followState.stateNumber);
		cfg = new LexerATNConfig( { state:trans.target, context:newContext}, config);
	} else if (trans.serializationType === Transition.PRECEDENCE) {
		throw "Precedence predicates are not supported in lexers.";
	} else if (trans.serializationType === Transition.PREDICATE) {
		// Track traversing semantic predicates. If we traverse,
		// we cannot add a DFA state for this "reach" computation
		// because the DFA would not test the predicate again in the
		// future. Rather than creating collections of semantic predicates
		// like v3 and testing them on prediction, v4 will test them on the
		// fly all the time using the ATN not the DFA. This is slower but
		// semantically it's not used that often. One of the key elements to
		// this predicate mechanism is not adding DFA states that see
		// predicates immediately afterwards in the ATN. For example,

		// a : ID {p1}? | ID {p2}? ;

		// should create the start state for rule 'a' (to save start state
		// competition), but should not create target of ID state. The
		// collection of ATN states the following ID references includes
		// states reached by traversing predicates. Since this is when we
		// test them, we cannot cash the DFA state target of ID.

		if (LexerATNSimulator.debug) {
			console.log("EVAL rule " + trans.ruleIndex + ":" + trans.predIndex);
		}
		configs.hasSemanticContext = true;
		if (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {
			cfg = new LexerATNConfig({ state:trans.target}, config);
		}
	} else if (trans.serializationType === Transition.ACTION) {
		if (config.context === null || config.context.hasEmptyPath()) {
			// execute actions anywhere in the start rule for a token.
			//
			// TODO: if the entry rule is invoked recursively, some
			// actions may be executed during the recursive call. The
			// problem can appear when hasEmptyPath() is true but
			// isEmpty() is false. In this case, the config needs to be
			// split into two contexts - one with just the empty path
			// and another with everything but the empty path.
			// Unfortunately, the current algorithm does not allow
			// getEpsilonTarget to return two configurations, so
			// additional modifications are needed before we can support
			// the split operation.
			var lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor,
					this.atn.lexerActions[trans.actionIndex]);
			cfg = new LexerATNConfig({ state:trans.target, lexerActionExecutor:lexerActionExecutor }, config);
		} else {
			// ignore actions in referenced rules
			cfg = new LexerATNConfig( { state:trans.target}, config);
		}
	} else if (trans.serializationType === Transition.EPSILON) {
		cfg = new LexerATNConfig({ state:trans.target}, config);
	} else if (trans.serializationType === Transition.ATOM ||
				trans.serializationType === Transition.RANGE ||
				trans.serializationType === Transition.SET) {
		if (treatEofAsEpsilon) {
			if (trans.matches(Token.EOF, 0, Lexer.MAX_CHAR_VALUE)) {
				cfg = new LexerATNConfig( { state:trans.target }, config);
			}
		}
	}
	return cfg;
};

// Evaluate a predicate specified in the lexer.
//
// <p>If {@code speculative} is {@code true}, this method was called before
// {@link //consume} for the matched character. This method should call
// {@link //consume} before evaluating the predicate to ensure position
// sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},
// and {@link Lexer//getcolumn}, properly reflect the current
// lexer state. This method should restore {@code input} and the simulator
// to the original state before returning (i.e. undo the actions made by the
// call to {@link //consume}.</p>
//
// @param input The input stream.
// @param ruleIndex The rule containing the predicate.
// @param predIndex The index of the predicate within the rule.
// @param speculative {@code true} if the current index in {@code input} is
// one character before the predicate's location.
//
// @return {@code true} if the specified predicate evaluates to
// {@code true}.
// /
LexerATNSimulator.prototype.evaluatePredicate = function(input, ruleIndex,
		predIndex, speculative) {
	// assume true if no recognizer was provided
	if (this.recog === null) {
		return true;
	}
	if (!speculative) {
		return this.recog.sempred(null, ruleIndex, predIndex);
	}
	var savedcolumn = this.column;
	var savedLine = this.line;
	var index = input.index;
	var marker = input.mark();
	try {
		this.consume(input);
		return this.recog.sempred(null, ruleIndex, predIndex);
	} finally {
		this.column = savedcolumn;
		this.line = savedLine;
		input.seek(index);
		input.release(marker);
	}
};

LexerATNSimulator.prototype.captureSimState = function(settings, input, dfaState) {
	settings.index = input.index;
	settings.line = this.line;
	settings.column = this.column;
	settings.dfaState = dfaState;
};

LexerATNSimulator.prototype.addDFAEdge = function(from_, tk, to, cfgs) {
	if (to === undefined) {
		to = null;
	}
	if (cfgs === undefined) {
		cfgs = null;
	}
	if (to === null && cfgs !== null) {
		// leading to this call, ATNConfigSet.hasSemanticContext is used as a
		// marker indicating dynamic predicate evaluation makes this edge
		// dependent on the specific input sequence, so the static edge in the
		// DFA should be omitted. The target DFAState is still created since
		// execATN has the ability to resynchronize with the DFA state cache
		// following the predicate evaluation step.
		//
		// TJP notes: next time through the DFA, we see a pred again and eval.
		// If that gets us to a previously created (but dangling) DFA
		// state, we can continue in pure DFA mode from there.
		// /
		var suppressEdge = cfgs.hasSemanticContext;
		cfgs.hasSemanticContext = false;

		to = this.addDFAState(cfgs);

		if (suppressEdge) {
			return to;
		}
	}
	// add the edge
	if (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {
		// Only track edges within the DFA bounds
		return to;
	}
	if (LexerATNSimulator.debug) {
		console.log("EDGE " + from_ + " -> " + to + " upon " + tk);
	}
	if (from_.edges === null) {
		// make room for tokens 1..n and -1 masquerading as index 0
		from_.edges = [];
	}
	from_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect

	return to;
};

// Add a new DFA state if there isn't one with this set of
// configurations already. This method also detects the first
// configuration containing an ATN rule stop state. Later, when
// traversing the DFA, we will know which rule to accept.
LexerATNSimulator.prototype.addDFAState = function(configs) {
	var proposed = new DFAState(null, configs);
	var firstConfigWithRuleStopState = null;
	for (var i = 0; i < configs.items.length; i++) {
		var cfg = configs.items[i];
		if (cfg.state instanceof RuleStopState) {
			firstConfigWithRuleStopState = cfg;
			break;
		}
	}
	if (firstConfigWithRuleStopState !== null) {
		proposed.isAcceptState = true;
		proposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;
		proposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];
	}
	var dfa = this.decisionToDFA[this.mode];
	var existing = dfa.states.get(proposed);
	if (existing!==null) {
		return existing;
	}
	var newState = proposed;
	newState.stateNumber = dfa.states.length;
	configs.setReadonly(true);
	newState.configs = configs;
	dfa.states.add(newState);
	return newState;
};

LexerATNSimulator.prototype.getDFA = function(mode) {
	return this.decisionToDFA[mode];
};

// Get the text matched so far for the current token.
LexerATNSimulator.prototype.getText = function(input) {
	// index is first lookahead char, don't include.
	return input.getText(this.startIndex, input.index - 1);
};

LexerATNSimulator.prototype.consume = function(input) {
	var curChar = input.LA(1);
	if (curChar === "\n".charCodeAt(0)) {
		this.line += 1;
		this.column = 0;
	} else {
		this.column += 1;
	}
	input.consume();
};

LexerATNSimulator.prototype.getTokenName = function(tt) {
	if (tt === -1) {
		return "EOF";
	} else {
		return "'" + String.fromCharCode(tt) + "'";
	}
};

exports.LexerATNSimulator = LexerATNSimulator;


/***/ }),

/***/ "./node_modules/antlr4/atn/LexerAction.js":
/*!************************************************!*\
  !*** ./node_modules/antlr4/atn/LexerAction.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
 //

function LexerActionType() {
}

LexerActionType.CHANNEL = 0;     //The type of a {@link LexerChannelAction} action.
LexerActionType.CUSTOM = 1;      //The type of a {@link LexerCustomAction} action.
LexerActionType.MODE = 2;        //The type of a {@link LexerModeAction} action.
LexerActionType.MORE = 3;        //The type of a {@link LexerMoreAction} action.
LexerActionType.POP_MODE = 4;    //The type of a {@link LexerPopModeAction} action.
LexerActionType.PUSH_MODE = 5;   //The type of a {@link LexerPushModeAction} action.
LexerActionType.SKIP = 6;        //The type of a {@link LexerSkipAction} action.
LexerActionType.TYPE = 7;        //The type of a {@link LexerTypeAction} action.

function LexerAction(action) {
    this.actionType = action;
    this.isPositionDependent = false;
    return this;
}

LexerAction.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish()
};

LexerAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType);
};

LexerAction.prototype.equals = function(other) {
    return this === other;
};



//
// Implements the {@code skip} lexer action by calling {@link Lexer//skip}.
//
// <p>The {@code skip} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerSkipAction() {
	LexerAction.call(this, LexerActionType.SKIP);
	return this;
}

LexerSkipAction.prototype = Object.create(LexerAction.prototype);
LexerSkipAction.prototype.constructor = LexerSkipAction;

// Provides a singleton instance of this parameterless lexer action.
LexerSkipAction.INSTANCE = new LexerSkipAction();

LexerSkipAction.prototype.execute = function(lexer) {
    lexer.skip();
};

LexerSkipAction.prototype.toString = function() {
	return "skip";
};

//  Implements the {@code type} lexer action by calling {@link Lexer//setType}
// with the assigned type.
function LexerTypeAction(type) {
	LexerAction.call(this, LexerActionType.TYPE);
	this.type = type;
	return this;
}

LexerTypeAction.prototype = Object.create(LexerAction.prototype);
LexerTypeAction.prototype.constructor = LexerTypeAction;

LexerTypeAction.prototype.execute = function(lexer) {
    lexer.type = this.type;
};

LexerTypeAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.type);
};


LexerTypeAction.prototype.equals = function(other) {
    if(this === other) {
        return true;
    } else if (! (other instanceof LexerTypeAction)) {
        return false;
    } else {
        return this.type === other.type;
    }
};

LexerTypeAction.prototype.toString = function() {
    return "type(" + this.type + ")";
};

// Implements the {@code pushMode} lexer action by calling
// {@link Lexer//pushMode} with the assigned mode.
function LexerPushModeAction(mode) {
	LexerAction.call(this, LexerActionType.PUSH_MODE);
    this.mode = mode;
    return this;
}

LexerPushModeAction.prototype = Object.create(LexerAction.prototype);
LexerPushModeAction.prototype.constructor = LexerPushModeAction;

// <p>This action is implemented by calling {@link Lexer//pushMode} with the
// value provided by {@link //getMode}.</p>
LexerPushModeAction.prototype.execute = function(lexer) {
    lexer.pushMode(this.mode);
};

LexerPushModeAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.mode);
};

LexerPushModeAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerPushModeAction)) {
        return false;
    } else {
        return this.mode === other.mode;
    }
};

LexerPushModeAction.prototype.toString = function() {
	return "pushMode(" + this.mode + ")";
};


// Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.
//
// <p>The {@code popMode} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerPopModeAction() {
	LexerAction.call(this,LexerActionType.POP_MODE);
	return this;
}

LexerPopModeAction.prototype = Object.create(LexerAction.prototype);
LexerPopModeAction.prototype.constructor = LexerPopModeAction;

LexerPopModeAction.INSTANCE = new LexerPopModeAction();

// <p>This action is implemented by calling {@link Lexer//popMode}.</p>
LexerPopModeAction.prototype.execute = function(lexer) {
    lexer.popMode();
};

LexerPopModeAction.prototype.toString = function() {
	return "popMode";
};

// Implements the {@code more} lexer action by calling {@link Lexer//more}.
//
// <p>The {@code more} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerMoreAction() {
	LexerAction.call(this, LexerActionType.MORE);
	return this;
}

LexerMoreAction.prototype = Object.create(LexerAction.prototype);
LexerMoreAction.prototype.constructor = LexerMoreAction;

LexerMoreAction.INSTANCE = new LexerMoreAction();

// <p>This action is implemented by calling {@link Lexer//popMode}.</p>
LexerMoreAction.prototype.execute = function(lexer) {
    lexer.more();
};

LexerMoreAction.prototype.toString = function() {
    return "more";
};


// Implements the {@code mode} lexer action by calling {@link Lexer//mode} with
// the assigned mode.
function LexerModeAction(mode) {
	LexerAction.call(this, LexerActionType.MODE);
    this.mode = mode;
    return this;
}

LexerModeAction.prototype = Object.create(LexerAction.prototype);
LexerModeAction.prototype.constructor = LexerModeAction;

// <p>This action is implemented by calling {@link Lexer//mode} with the
// value provided by {@link //getMode}.</p>
LexerModeAction.prototype.execute = function(lexer) {
    lexer.mode(this.mode);
};

LexerModeAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.mode);
};

LexerModeAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerModeAction)) {
        return false;
    } else {
        return this.mode === other.mode;
    }
};

LexerModeAction.prototype.toString = function() {
    return "mode(" + this.mode + ")";
};

// Executes a custom lexer action by calling {@link Recognizer//action} with the
// rule and action indexes assigned to the custom action. The implementation of
// a custom action is added to the generated code for the lexer in an override
// of {@link Recognizer//action} when the grammar is compiled.
//
// <p>This class may represent embedded actions created with the <code>{...}</code>
// syntax in ANTLR 4, as well as actions created for lexer commands where the
// command argument could not be evaluated when the grammar was compiled.</p>


    // Constructs a custom lexer action with the specified rule and action
    // indexes.
    //
    // @param ruleIndex The rule index to use for calls to
    // {@link Recognizer//action}.
    // @param actionIndex The action index to use for calls to
    // {@link Recognizer//action}.

function LexerCustomAction(ruleIndex, actionIndex) {
	LexerAction.call(this, LexerActionType.CUSTOM);
    this.ruleIndex = ruleIndex;
    this.actionIndex = actionIndex;
    this.isPositionDependent = true;
    return this;
}

LexerCustomAction.prototype = Object.create(LexerAction.prototype);
LexerCustomAction.prototype.constructor = LexerCustomAction;

// <p>Custom actions are implemented by calling {@link Lexer//action} with the
// appropriate rule and action indexes.</p>
LexerCustomAction.prototype.execute = function(lexer) {
    lexer.action(null, this.ruleIndex, this.actionIndex);
};

LexerCustomAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.ruleIndex, this.actionIndex);
};

LexerCustomAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerCustomAction)) {
        return false;
    } else {
        return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;
    }
};

// Implements the {@code channel} lexer action by calling
// {@link Lexer//setChannel} with the assigned channel.
// Constructs a new {@code channel} action with the specified channel value.
// @param channel The channel value to pass to {@link Lexer//setChannel}.
function LexerChannelAction(channel) {
	LexerAction.call(this, LexerActionType.CHANNEL);
    this.channel = channel;
    return this;
}

LexerChannelAction.prototype = Object.create(LexerAction.prototype);
LexerChannelAction.prototype.constructor = LexerChannelAction;

// <p>This action is implemented by calling {@link Lexer//setChannel} with the
// value provided by {@link //getChannel}.</p>
LexerChannelAction.prototype.execute = function(lexer) {
    lexer._channel = this.channel;
};

LexerChannelAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.channel);
};

LexerChannelAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerChannelAction)) {
        return false;
    } else {
        return this.channel === other.channel;
    }
};

LexerChannelAction.prototype.toString = function() {
    return "channel(" + this.channel + ")";
};

// This implementation of {@link LexerAction} is used for tracking input offsets
// for position-dependent actions within a {@link LexerActionExecutor}.
//
// <p>This action is not serialized as part of the ATN, and is only required for
// position-dependent lexer actions which appear at a location other than the
// end of a rule. For more information about DFA optimizations employed for
// lexer actions, see {@link LexerActionExecutor//append} and
// {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>

// Constructs a new indexed custom action by associating a character offset
// with a {@link LexerAction}.
//
// <p>Note: This class is only required for lexer actions for which
// {@link LexerAction//isPositionDependent} returns {@code true}.</p>
//
// @param offset The offset into the input {@link CharStream}, relative to
// the token start index, at which the specified lexer action should be
// executed.
// @param action The lexer action to execute at a particular offset in the
// input {@link CharStream}.
function LexerIndexedCustomAction(offset, action) {
	LexerAction.call(this, action.actionType);
    this.offset = offset;
    this.action = action;
    this.isPositionDependent = true;
    return this;
}

LexerIndexedCustomAction.prototype = Object.create(LexerAction.prototype);
LexerIndexedCustomAction.prototype.constructor = LexerIndexedCustomAction;

// <p>This method calls {@link //execute} on the result of {@link //getAction}
// using the provided {@code lexer}.</p>
LexerIndexedCustomAction.prototype.execute = function(lexer) {
    // assume the input stream position was properly set by the calling code
    this.action.execute(lexer);
};

LexerIndexedCustomAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.offset, this.action);
};

LexerIndexedCustomAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerIndexedCustomAction)) {
        return false;
    } else {
        return this.offset === other.offset && this.action === other.action;
    }
};


exports.LexerActionType = LexerActionType;
exports.LexerSkipAction = LexerSkipAction;
exports.LexerChannelAction = LexerChannelAction;
exports.LexerCustomAction = LexerCustomAction;
exports.LexerIndexedCustomAction = LexerIndexedCustomAction;
exports.LexerMoreAction = LexerMoreAction;
exports.LexerTypeAction = LexerTypeAction;
exports.LexerPushModeAction = LexerPushModeAction;
exports.LexerPopModeAction = LexerPopModeAction;
exports.LexerModeAction = LexerModeAction;

/***/ }),

/***/ "./node_modules/antlr4/atn/LexerActionExecutor.js":
/*!********************************************************!*\
  !*** ./node_modules/antlr4/atn/LexerActionExecutor.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// Represents an executor for a sequence of lexer actions which traversed during
// the matching operation of a lexer rule (token).
//
// <p>The executor tracks position information for position-dependent lexer actions
// efficiently, ensuring that actions appearing only at the end of the rule do
// not cause bloating of the {@link DFA} created for the lexer.</p>

var hashStuff = __webpack_require__(/*! ../Utils */ "./node_modules/antlr4/Utils.js").hashStuff;
var LexerIndexedCustomAction = __webpack_require__(/*! ./LexerAction */ "./node_modules/antlr4/atn/LexerAction.js").LexerIndexedCustomAction;

function LexerActionExecutor(lexerActions) {
	this.lexerActions = lexerActions === null ? [] : lexerActions;
	// Caches the result of {@link //hashCode} since the hash code is an element
	// of the performance-critical {@link LexerATNConfig//hashCode} operation.
	this.cachedHashCode = hashStuff(lexerActions); // "".join([str(la) for la in
	// lexerActions]))
	return this;
}

// Creates a {@link LexerActionExecutor} which executes the actions for
// the input {@code lexerActionExecutor} followed by a specified
// {@code lexerAction}.
//
// @param lexerActionExecutor The executor for actions already traversed by
// the lexer while matching a token within a particular
// {@link LexerATNConfig}. If this is {@code null}, the method behaves as
// though it were an empty executor.
// @param lexerAction The lexer action to execute after the actions
// specified in {@code lexerActionExecutor}.
//
// @return A {@link LexerActionExecutor} for executing the combine actions
// of {@code lexerActionExecutor} and {@code lexerAction}.
LexerActionExecutor.append = function(lexerActionExecutor, lexerAction) {
	if (lexerActionExecutor === null) {
		return new LexerActionExecutor([ lexerAction ]);
	}
	var lexerActions = lexerActionExecutor.lexerActions.concat([ lexerAction ]);
	return new LexerActionExecutor(lexerActions);
};

// Creates a {@link LexerActionExecutor} which encodes the current offset
// for position-dependent lexer actions.
//
// <p>Normally, when the executor encounters lexer actions where
// {@link LexerAction//isPositionDependent} returns {@code true}, it calls
// {@link IntStream//seek} on the input {@link CharStream} to set the input
// position to the <em>end</em> of the current token. This behavior provides
// for efficient DFA representation of lexer actions which appear at the end
// of a lexer rule, even when the lexer rule matches a variable number of
// characters.</p>
//
// <p>Prior to traversing a match transition in the ATN, the current offset
// from the token start index is assigned to all position-dependent lexer
// actions which have not already been assigned a fixed offset. By storing
// the offsets relative to the token start index, the DFA representation of
// lexer actions which appear in the middle of tokens remains efficient due
// to sharing among tokens of the same length, regardless of their absolute
// position in the input stream.</p>
//
// <p>If the current executor already has offsets assigned to all
// position-dependent lexer actions, the method returns {@code this}.</p>
//
// @param offset The current offset to assign to all position-dependent
// lexer actions which do not already have offsets assigned.
//
// @return A {@link LexerActionExecutor} which stores input stream offsets
// for all position-dependent lexer actions.
// /
LexerActionExecutor.prototype.fixOffsetBeforeMatch = function(offset) {
	var updatedLexerActions = null;
	for (var i = 0; i < this.lexerActions.length; i++) {
		if (this.lexerActions[i].isPositionDependent &&
				!(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {
			if (updatedLexerActions === null) {
				updatedLexerActions = this.lexerActions.concat([]);
			}
			updatedLexerActions[i] = new LexerIndexedCustomAction(offset,
					this.lexerActions[i]);
		}
	}
	if (updatedLexerActions === null) {
		return this;
	} else {
		return new LexerActionExecutor(updatedLexerActions);
	}
};

// Execute the actions encapsulated by this executor within the context of a
// particular {@link Lexer}.
//
// <p>This method calls {@link IntStream//seek} to set the position of the
// {@code input} {@link CharStream} prior to calling
// {@link LexerAction//execute} on a position-dependent action. Before the
// method returns, the input position will be restored to the same position
// it was in when the method was invoked.</p>
//
// @param lexer The lexer instance.
// @param input The input stream which is the source for the current token.
// When this method is called, the current {@link IntStream//index} for
// {@code input} should be the start of the following token, i.e. 1
// character past the end of the current token.
// @param startIndex The token start index. This value may be passed to
// {@link IntStream//seek} to set the {@code input} position to the beginning
// of the token.
// /
LexerActionExecutor.prototype.execute = function(lexer, input, startIndex) {
	var requiresSeek = false;
	var stopIndex = input.index;
	try {
		for (var i = 0; i < this.lexerActions.length; i++) {
			var lexerAction = this.lexerActions[i];
			if (lexerAction instanceof LexerIndexedCustomAction) {
				var offset = lexerAction.offset;
				input.seek(startIndex + offset);
				lexerAction = lexerAction.action;
				requiresSeek = (startIndex + offset) !== stopIndex;
			} else if (lexerAction.isPositionDependent) {
				input.seek(stopIndex);
				requiresSeek = false;
			}
			lexerAction.execute(lexer);
		}
	} finally {
		if (requiresSeek) {
			input.seek(stopIndex);
		}
	}
};

LexerActionExecutor.prototype.hashCode = function() {
	return this.cachedHashCode;
};

LexerActionExecutor.prototype.updateHashCode = function(hash) {
    hash.update(this.cachedHashCode);
};


LexerActionExecutor.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof LexerActionExecutor)) {
		return false;
	} else if (this.cachedHashCode != other.cachedHashCode) {
		return false;
	} else if (this.lexerActions.length != other.lexerActions.length) {
		return false;
	} else {
		var numActions = this.lexerActions.length
		for (var idx = 0; idx < numActions; ++idx) {
			if (!this.lexerActions[idx].equals(other.lexerActions[idx])) {
				return false;
			}
		}
		return true;
	}
};

exports.LexerActionExecutor = LexerActionExecutor;


/***/ }),

/***/ "./node_modules/antlr4/atn/ParserATNSimulator.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/atn/ParserATNSimulator.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// The embodiment of the adaptive LL(*), ALL(*), parsing strategy.
//
// <p>
// The basic complexity of the adaptive strategy makes it harder to understand.
// We begin with ATN simulation to build paths in a DFA. Subsequent prediction
// requests go through the DFA first. If they reach a state without an edge for
// the current symbol, the algorithm fails over to the ATN simulation to
// complete the DFA path for the current input (until it finds a conflict state
// or uniquely predicting state).</p>
//
// <p>
// All of that is done without using the outer context because we want to create
// a DFA that is not dependent upon the rule invocation stack when we do a
// prediction. One DFA works in all contexts. We avoid using context not
// necessarily because it's slower, although it can be, but because of the DFA
// caching problem. The closure routine only considers the rule invocation stack
// created during prediction beginning in the decision rule. For example, if
// prediction occurs without invoking another rule's ATN, there are no context
// stacks in the configurations. When lack of context leads to a conflict, we
// don't know if it's an ambiguity or a weakness in the strong LL(*) parsing
// strategy (versus full LL(*)).</p>
//
// <p>
// When SLL yields a configuration set with conflict, we rewind the input and
// retry the ATN simulation, this time using full outer context without adding
// to the DFA. Configuration context stacks will be the full invocation stacks
// from the start rule. If we get a conflict using full context, then we can
// definitively say we have a true ambiguity for that input sequence. If we
// don't get a conflict, it implies that the decision is sensitive to the outer
// context. (It is not context-sensitive in the sense of context-sensitive
// grammars.)</p>
//
// <p>
// The next time we reach this DFA state with an SLL conflict, through DFA
// simulation, we will again retry the ATN simulation using full context mode.
// This is slow because we can't save the results and have to "interpret" the
// ATN each time we get that input.</p>
//
// <p>
// <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>
//
// <p>
// We could cache results from full context to predicted alternative easily and
// that saves a lot of time but doesn't work in presence of predicates. The set
// of visible predicates from the ATN start state changes depending on the
// context, because closure can fall off the end of a rule. I tried to cache
// tuples (stack context, semantic context, predicted alt) but it was slower
// than interpreting and much more complicated. Also required a huge amount of
// memory. The goal is not to create the world's fastest parser anyway. I'd like
// to keep this algorithm simple. By launching multiple threads, we can improve
// the speed of parsing across a large number of files.</p>
//
// <p>
// There is no strict ordering between the amount of input used by SLL vs LL,
// which makes it really hard to build a cache for full context. Let's say that
// we have input A B C that leads to an SLL conflict with full context X. That
// implies that using X we might only use A B but we could also use A B C D to
// resolve conflict. Input A B C D could predict alternative 1 in one position
// in the input and A B C E could predict alternative 2 in another position in
// input. The conflicting SLL configurations could still be non-unique in the
// full context prediction, which would lead us to requiring more input than the
// original A B C.	To make a	prediction cache work, we have to track	the exact
// input	used during the previous prediction. That amounts to a cache that maps
// X to a specific DFA for that context.</p>
//
// <p>
// Something should be done for left-recursive expression predictions. They are
// likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry
// with full LL thing Sam does.</p>
//
// <p>
// <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>
//
// <p>
// We avoid doing full context retry when the outer context is empty, we did not
// dip into the outer context by falling off the end of the decision state rule,
// or when we force SLL mode.</p>
//
// <p>
// As an example of the not dip into outer context case, consider as super
// constructor calls versus function calls. One grammar might look like
// this:</p>
//
// <pre>
// ctorBody
//   : '{' superCall? stat* '}'
//   ;
// </pre>
//
// <p>
// Or, you might see something like</p>
//
// <pre>
// stat
//   : superCall ';'
//   | expression ';'
//   | ...
//   ;
// </pre>
//
// <p>
// In both cases I believe that no closure operations will dip into the outer
// context. In the first case ctorBody in the worst case will stop at the '}'.
// In the 2nd case it should stop at the ';'. Both cases should stay within the
// entry rule and not dip into the outer context.</p>
//
// <p>
// <strong>PREDICATES</strong></p>
//
// <p>
// Predicates are always evaluated if present in either SLL or LL both. SLL and
// LL simulation deals with predicates differently. SLL collects predicates as
// it performs closure operations like ANTLR v3 did. It delays predicate
// evaluation until it reaches and accept state. This allows us to cache the SLL
// ATN simulation whereas, if we had evaluated predicates on-the-fly during
// closure, the DFA state configuration sets would be different and we couldn't
// build up a suitable DFA.</p>
//
// <p>
// When building a DFA accept state during ATN simulation, we evaluate any
// predicates and return the sole semantically valid alternative. If there is
// more than 1 alternative, we report an ambiguity. If there are 0 alternatives,
// we throw an exception. Alternatives without predicates act like they have
// true predicates. The simple way to think about it is to strip away all
// alternatives with false predicates and choose the minimum alternative that
// remains.</p>
//
// <p>
// When we start in the DFA and reach an accept state that's predicated, we test
// those and return the minimum semantically viable alternative. If no
// alternatives are viable, we throw an exception.</p>
//
// <p>
// During full LL ATN simulation, closure always evaluates predicates and
// on-the-fly. This is crucial to reducing the configuration set size during
// closure. It hits a landmine when parsing with the Java grammar, for example,
// without this on-the-fly evaluation.</p>
//
// <p>
// <strong>SHARING DFA</strong></p>
//
// <p>
// All instances of the same parser share the same decision DFAs through a
// static field. Each instance gets its own ATN simulator but they share the
// same {@link //decisionToDFA} field. They also share a
// {@link PredictionContextCache} object that makes sure that all
// {@link PredictionContext} objects are shared among the DFA states. This makes
// a big size difference.</p>
//
// <p>
// <strong>THREAD SAFETY</strong></p>
//
// <p>
// The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when
// it adds a new DFA object to that array. {@link //addDFAEdge}
// locks on the DFA for the current decision when setting the
// {@link DFAState//edges} field. {@link //addDFAState} locks on
// the DFA for the current decision when looking up a DFA state to see if it
// already exists. We must make sure that all requests to add DFA states that
// are equivalent result in the same shared DFA object. This is because lots of
// threads will be trying to update the DFA at once. The
// {@link //addDFAState} method also locks inside the DFA lock
// but this time on the shared context cache when it rebuilds the
// configurations' {@link PredictionContext} objects using cached
// subgraphs/nodes. No other locking occurs, even during DFA simulation. This is
// safe as long as we can guarantee that all threads referencing
// {@code s.edge[t]} get the same physical target {@link DFAState}, or
// {@code null}. Once into the DFA, the DFA simulation does not reference the
// {@link DFA//states} map. It follows the {@link DFAState//edges} field to new
// targets. The DFA simulator will either find {@link DFAState//edges} to be
// {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or
// {@code dfa.edges[t]} to be non-null. The
// {@link //addDFAEdge} method could be racing to set the field
// but in either case the DFA simulator works; if {@code null}, and requests ATN
// simulation. It could also race trying to get {@code dfa.edges[t]}, but either
// way it will work because it's not doing a test and set operation.</p>
//
// <p>
// <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage
// Parsing)</strong></p>
//
// <p>
// Sam pointed out that if SLL does not give a syntax error, then there is no
// point in doing full LL, which is slower. We only have to try LL if we get a
// syntax error. For maximum speed, Sam starts the parser set to pure SLL
// mode with the {@link BailErrorStrategy}:</p>
//
// <pre>
// parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};
// parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());
// </pre>
//
// <p>
// If it does not get a syntax error, then we're done. If it does get a syntax
// error, we need to retry with the combined SLL/LL strategy.</p>
//
// <p>
// The reason this works is as follows. If there are no SLL conflicts, then the
// grammar is SLL (at least for that input set). If there is an SLL conflict,
// the full LL analysis must yield a set of viable alternatives which is a
// subset of the alternatives reported by SLL. If the LL set is a singleton,
// then the grammar is LL but not SLL. If the LL set is the same size as the SLL
// set, the decision is SLL. If the LL set has size &gt; 1, then that decision
// is truly ambiguous on the current input. If the LL set is smaller, then the
// SLL conflict resolution might choose an alternative that the full LL would
// rule out as a possibility based upon better context information. If that's
// the case, then the SLL parse will definitely get an error because the full LL
// analysis says it's not viable. If SLL conflict resolution chooses an
// alternative within the LL set, them both SLL and LL would choose the same
// alternative because they both choose the minimum of multiple conflicting
// alternatives.</p>
//
// <p>
// Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and
// a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL
// parsing will get an error because SLL will pursue alternative 1. If
// <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will
// choose the same alternative because alternative one is the minimum of either
// set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax
// error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>
//
// <p>
// Of course, if the input is invalid, then we will get an error for sure in
// both SLL and LL parsing. Erroneous input will therefore require 2 passes over
// the input.</p>
//

var Utils = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js");
var Set = Utils.Set;
var BitSet = Utils.BitSet;
var DoubleDict = Utils.DoubleDict;
var ATN = __webpack_require__(/*! ./ATN */ "./node_modules/antlr4/atn/ATN.js").ATN;
var ATNState = __webpack_require__(/*! ./ATNState */ "./node_modules/antlr4/atn/ATNState.js").ATNState;
var ATNConfig = __webpack_require__(/*! ./ATNConfig */ "./node_modules/antlr4/atn/ATNConfig.js").ATNConfig;
var ATNConfigSet = __webpack_require__(/*! ./ATNConfigSet */ "./node_modules/antlr4/atn/ATNConfigSet.js").ATNConfigSet;
var Token = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/Token.js").Token;
var DFAState = __webpack_require__(/*! ./../dfa/DFAState */ "./node_modules/antlr4/dfa/DFAState.js").DFAState;
var PredPrediction = __webpack_require__(/*! ./../dfa/DFAState */ "./node_modules/antlr4/dfa/DFAState.js").PredPrediction;
var ATNSimulator = __webpack_require__(/*! ./ATNSimulator */ "./node_modules/antlr4/atn/ATNSimulator.js").ATNSimulator;
var PredictionMode = __webpack_require__(/*! ./PredictionMode */ "./node_modules/antlr4/atn/PredictionMode.js").PredictionMode;
var RuleContext = __webpack_require__(/*! ./../RuleContext */ "./node_modules/antlr4/RuleContext.js").RuleContext;
var ParserRuleContext = __webpack_require__(/*! ./../ParserRuleContext */ "./node_modules/antlr4/ParserRuleContext.js").ParserRuleContext;
var SemanticContext = __webpack_require__(/*! ./SemanticContext */ "./node_modules/antlr4/atn/SemanticContext.js").SemanticContext;
var StarLoopEntryState = __webpack_require__(/*! ./ATNState */ "./node_modules/antlr4/atn/ATNState.js").StarLoopEntryState;
var RuleStopState = __webpack_require__(/*! ./ATNState */ "./node_modules/antlr4/atn/ATNState.js").RuleStopState;
var PredictionContext = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/PredictionContext.js").PredictionContext;
var Interval = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/IntervalSet.js").Interval;
var Transitions = __webpack_require__(/*! ./Transition */ "./node_modules/antlr4/atn/Transition.js");
var Transition = Transitions.Transition;
var SetTransition = Transitions.SetTransition;
var NotSetTransition = Transitions.NotSetTransition;
var RuleTransition = Transitions.RuleTransition;
var ActionTransition = Transitions.ActionTransition;
var NoViableAltException = __webpack_require__(/*! ./../error/Errors */ "./node_modules/antlr4/error/Errors.js").NoViableAltException;

var SingletonPredictionContext = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/PredictionContext.js").SingletonPredictionContext;
var predictionContextFromRuleContext = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/PredictionContext.js").predictionContextFromRuleContext;

function ParserATNSimulator(parser, atn, decisionToDFA, sharedContextCache) {
	ATNSimulator.call(this, atn, sharedContextCache);
    this.parser = parser;
    this.decisionToDFA = decisionToDFA;
    // SLL, LL, or LL + exact ambig detection?//
    this.predictionMode = PredictionMode.LL;
    // LAME globals to avoid parameters!!!!! I need these down deep in predTransition
    this._input = null;
    this._startIndex = 0;
    this._outerContext = null;
    this._dfa = null;
    // Each prediction operation uses a cache for merge of prediction contexts.
    //  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap
    //  isn't synchronized but we're ok since two threads shouldn't reuse same
    //  parser/atnsim object because it can only handle one input at a time.
    //  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid
    //  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should
    //  also be examined during cache lookup.
    //
    this.mergeCache = null;
    return this;
}

ParserATNSimulator.prototype = Object.create(ATNSimulator.prototype);
ParserATNSimulator.prototype.constructor = ParserATNSimulator;

ParserATNSimulator.prototype.debug = false;
ParserATNSimulator.prototype.debug_closure = false;
ParserATNSimulator.prototype.debug_add = false;
ParserATNSimulator.prototype.debug_list_atn_decisions = false;
ParserATNSimulator.prototype.dfa_debug = false;
ParserATNSimulator.prototype.retry_debug = false;


ParserATNSimulator.prototype.reset = function() {
};

ParserATNSimulator.prototype.adaptivePredict = function(input, decision, outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("adaptivePredict decision " + decision +
                               " exec LA(1)==" + this.getLookaheadName(input) +
                               " line " + input.LT(1).line + ":" +
                               input.LT(1).column);
    }
    this._input = input;
    this._startIndex = input.index;
    this._outerContext = outerContext;

    var dfa = this.decisionToDFA[decision];
    this._dfa = dfa;
    var m = input.mark();
    var index = input.index;

    // Now we are certain to have a specific decision's DFA
    // But, do we still need an initial state?
    try {
        var s0;
        if (dfa.precedenceDfa) {
            // the start state for a precedence DFA depends on the current
            // parser precedence, and is provided by a DFA method.
            s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());
        } else {
            // the start state for a "regular" DFA is just s0
            s0 = dfa.s0;
        }
        if (s0===null) {
            if (outerContext===null) {
                outerContext = RuleContext.EMPTY;
            }
            if (this.debug || this.debug_list_atn_decisions) {
                console.log("predictATN decision " + dfa.decision +
                                   " exec LA(1)==" + this.getLookaheadName(input) +
                                   ", outerContext=" + outerContext.toString(this.parser.ruleNames));
            }

            var fullCtx = false;
            var s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);

            if( dfa.precedenceDfa) {
                // If this is a precedence DFA, we use applyPrecedenceFilter
                // to convert the computed start state to a precedence start
                // state. We then use DFA.setPrecedenceStartState to set the
                // appropriate start state for the precedence level rather
                // than simply setting DFA.s0.
                //
                dfa.s0.configs = s0_closure; // not used for prediction but useful to know start configs anyway
                s0_closure = this.applyPrecedenceFilter(s0_closure);
                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);
            } else {
                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                dfa.s0 = s0;
            }
        }
        var alt = this.execATN(dfa, s0, input, index, outerContext);
        if (this.debug) {
            console.log("DFA after predictATN: " + dfa.toString(this.parser.literalNames));
        }
        return alt;
    } finally {
        this._dfa = null;
        this.mergeCache = null; // wack cache after each prediction
        input.seek(index);
        input.release(m);
    }
};
// Performs ATN simulation to compute a predicted alternative based
//  upon the remaining input, but also updates the DFA cache to avoid
//  having to traverse the ATN again for the same input sequence.

// There are some key conditions we're looking for after computing a new
// set of ATN configs (proposed DFA state):
      // if the set is empty, there is no viable alternative for current symbol
      // does the state uniquely predict an alternative?
      // does the state have a conflict that would prevent us from
      //   putting it on the work list?

// We also have some key operations to do:
      // add an edge from previous DFA state to potentially new DFA state, D,
      //   upon current symbol but only if adding to work list, which means in all
      //   cases except no viable alternative (and possibly non-greedy decisions?)
      // collecting predicates and adding semantic context to DFA accept states
      // adding rule context to context-sensitive DFA accept states
      // consuming an input symbol
      // reporting a conflict
      // reporting an ambiguity
      // reporting a context sensitivity
      // reporting insufficient predicates

// cover these cases:
//    dead end
//    single alt
//    single alt + preds
//    conflict
//    conflict + preds
//
ParserATNSimulator.prototype.execATN = function(dfa, s0, input, startIndex, outerContext ) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATN decision " + dfa.decision +
                " exec LA(1)==" + this.getLookaheadName(input) +
                " line " + input.LT(1).line + ":" + input.LT(1).column);
    }
    var alt;
    var previousD = s0;

    if (this.debug) {
        console.log("s0 = " + s0);
    }
    var t = input.LA(1);
    while(true) { // while more work
        var D = this.getExistingTargetState(previousD, t);
        if(D===null) {
            D = this.computeTargetState(dfa, previousD, t);
        }
        if(D===ATNSimulator.ERROR) {
            // if any configs in previous dipped into outer context, that
            // means that input up to t actually finished entry rule
            // at least for SLL decision. Full LL doesn't dip into outer
            // so don't need special case.
            // We will get an error no matter what so delay until after
            // decision; better error message. Also, no reachable target
            // ATN states in SLL implies LL will also get nowhere.
            // If conflict in states that dip out, choose min since we
            // will get error no matter what.
            var e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);
            input.seek(startIndex);
            alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);
            if(alt!==ATN.INVALID_ALT_NUMBER) {
                return alt;
            } else {
                throw e;
            }
        }
        if(D.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {
            // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)
            var conflictingAlts = null;
            if (D.predicates!==null) {
                if (this.debug) {
                    console.log("DFA state has preds in DFA sim LL failover");
                }
                var conflictIndex = input.index;
                if(conflictIndex !== startIndex) {
                    input.seek(startIndex);
                }
                conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);
                if (conflictingAlts.length===1) {
                    if(this.debug) {
                        console.log("Full LL avoided");
                    }
                    return conflictingAlts.minValue();
                }
                if (conflictIndex !== startIndex) {
                    // restore the index so reporting the fallback to full
                    // context occurs with the index at the correct spot
                    input.seek(conflictIndex);
                }
            }
            if (this.dfa_debug) {
                console.log("ctx sensitive state " + outerContext +" in " + D);
            }
            var fullCtx = true;
            var s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);
            this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);
            alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);
            return alt;
        }
        if (D.isAcceptState) {
            if (D.predicates===null) {
                return D.prediction;
            }
            var stopIndex = input.index;
            input.seek(startIndex);
            var alts = this.evalSemanticContext(D.predicates, outerContext, true);
            if (alts.length===0) {
                throw this.noViableAlt(input, outerContext, D.configs, startIndex);
            } else if (alts.length===1) {
                return alts.minValue();
            } else {
                // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.
                this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);
                return alts.minValue();
            }
        }
        previousD = D;

        if (t !== Token.EOF) {
            input.consume();
            t = input.LA(1);
        }
    }
};
//
// Get an existing target state for an edge in the DFA. If the target state
// for the edge has not yet been computed or is otherwise not available,
// this method returns {@code null}.
//
// @param previousD The current DFA state
// @param t The next input symbol
// @return The existing target DFA state for the given input symbol
// {@code t}, or {@code null} if the target state for this edge is not
// already cached
//
ParserATNSimulator.prototype.getExistingTargetState = function(previousD, t) {
    var edges = previousD.edges;
    if (edges===null) {
        return null;
    } else {
        return edges[t + 1] || null;
    }
};
//
// Compute a target state for an edge in the DFA, and attempt to add the
// computed state and corresponding edge to the DFA.
//
// @param dfa The DFA
// @param previousD The current DFA state
// @param t The next input symbol
//
// @return The computed target DFA state for the given input symbol
// {@code t}. If {@code t} does not lead to a valid DFA state, this method
// returns {@link //ERROR}.
//
ParserATNSimulator.prototype.computeTargetState = function(dfa, previousD, t) {
   var reach = this.computeReachSet(previousD.configs, t, false);
    if(reach===null) {
        this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);
        return ATNSimulator.ERROR;
    }
    // create new target state; we'll add to DFA after it's complete
    var D = new DFAState(null, reach);

    var predictedAlt = this.getUniqueAlt(reach);

    if (this.debug) {
        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);
        console.log("SLL altSubSets=" + Utils.arrayToString(altSubSets) +
                    ", previous=" + previousD.configs +
                    ", configs=" + reach +
                    ", predict=" + predictedAlt +
                    ", allSubsetsConflict=" +
                    PredictionMode.allSubsetsConflict(altSubSets) + ", conflictingAlts=" +
                    this.getConflictingAlts(reach));
    }
    if (predictedAlt!==ATN.INVALID_ALT_NUMBER) {
        // NO CONFLICT, UNIQUELY PREDICTED ALT
        D.isAcceptState = true;
        D.configs.uniqueAlt = predictedAlt;
        D.prediction = predictedAlt;
    } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {
        // MORE THAN ONE VIABLE ALTERNATIVE
        D.configs.conflictingAlts = this.getConflictingAlts(reach);
        D.requiresFullContext = true;
        // in SLL-only mode, we will stop at this state and return the minimum alt
        D.isAcceptState = true;
        D.prediction = D.configs.conflictingAlts.minValue();
    }
    if (D.isAcceptState && D.configs.hasSemanticContext) {
        this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));
        if( D.predicates!==null) {
            D.prediction = ATN.INVALID_ALT_NUMBER;
        }
    }
    // all adds to dfa are done after we've created full D state
    D = this.addDFAEdge(dfa, previousD, t, D);
    return D;
};

ParserATNSimulator.prototype.predicateDFAState = function(dfaState, decisionState) {
    // We need to test all predicates, even in DFA states that
    // uniquely predict alternative.
    var nalts = decisionState.transitions.length;
    // Update DFA so reach becomes accept state with (predicate,alt)
    // pairs if preds found for conflicting alts
    var altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);
    var altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);
    if (altToPred!==null) {
        dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);
        dfaState.prediction = ATN.INVALID_ALT_NUMBER; // make sure we use preds
    } else {
        // There are preds in configs but they might go away
        // when OR'd together like {p}? || NONE == NONE. If neither
        // alt has preds, resolve to min alt
        dfaState.prediction = altsToCollectPredsFrom.minValue();
    }
};

// comes back with reach.uniqueAlt set to a valid alt
ParserATNSimulator.prototype.execATNWithFullContext = function(dfa, D, // how far we got before failing over
                                     s0,
                                     input,
                                     startIndex,
                                     outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATNWithFullContext "+s0);
    }
    var fullCtx = true;
    var foundExactAmbig = false;
    var reach = null;
    var previous = s0;
    input.seek(startIndex);
    var t = input.LA(1);
    var predictedAlt = -1;
    while (true) { // while more work
        reach = this.computeReachSet(previous, t, fullCtx);
        if (reach===null) {
            // if any configs in previous dipped into outer context, that
            // means that input up to t actually finished entry rule
            // at least for LL decision. Full LL doesn't dip into outer
            // so don't need special case.
            // We will get an error no matter what so delay until after
            // decision; better error message. Also, no reachable target
            // ATN states in SLL implies LL will also get nowhere.
            // If conflict in states that dip out, choose min since we
            // will get error no matter what.
            var e = this.noViableAlt(input, outerContext, previous, startIndex);
            input.seek(startIndex);
            var alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);
            if(alt!==ATN.INVALID_ALT_NUMBER) {
                return alt;
            } else {
                throw e;
            }
        }
        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);
        if(this.debug) {
            console.log("LL altSubSets=" + altSubSets + ", predict=" +
                  PredictionMode.getUniqueAlt(altSubSets) + ", resolvesToJustOneViableAlt=" +
                  PredictionMode.resolvesToJustOneViableAlt(altSubSets));
        }
        reach.uniqueAlt = this.getUniqueAlt(reach);
        // unique prediction?
        if(reach.uniqueAlt!==ATN.INVALID_ALT_NUMBER) {
            predictedAlt = reach.uniqueAlt;
            break;
        } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {
            predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);
            if(predictedAlt !== ATN.INVALID_ALT_NUMBER) {
                break;
            }
        } else {
            // In exact ambiguity mode, we never try to terminate early.
            // Just keeps scarfing until we know what the conflict is
            if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {
                foundExactAmbig = true;
                predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);
                break;
            }
            // else there are multiple non-conflicting subsets or
            // we're not sure what the ambiguity is yet.
            // So, keep going.
        }
        previous = reach;
        if( t !== Token.EOF) {
            input.consume();
            t = input.LA(1);
        }
    }
    // If the configuration set uniquely predicts an alternative,
    // without conflict, then we know that it's a full LL decision
    // not SLL.
    if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER ) {
        this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);
        return predictedAlt;
    }
    // We do not check predicates here because we have checked them
    // on-the-fly when doing full context prediction.

    //
    // In non-exact ambiguity detection mode, we might	actually be able to
    // detect an exact ambiguity, but I'm not going to spend the cycles
    // needed to check. We only emit ambiguity warnings in exact ambiguity
    // mode.
    //
    // For example, we might know that we have conflicting configurations.
    // But, that does not mean that there is no way forward without a
    // conflict. It's possible to have nonconflicting alt subsets as in:

    // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]

    // from
    //
    //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),
    //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]
    //
    // In this case, (17,1,[5 $]) indicates there is some next sequence that
    // would resolve this without conflict to alternative 1. Any other viable
    // next sequence, however, is associated with a conflict.  We stop
    // looking for input because no amount of further lookahead will alter
    // the fact that we should predict alternative 1.  We just can't say for
    // sure that there is an ambiguity without looking further.

    this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);

    return predictedAlt;
};

ParserATNSimulator.prototype.computeReachSet = function(closure, t, fullCtx) {
    if (this.debug) {
        console.log("in computeReachSet, starting closure: " + closure);
    }
    if( this.mergeCache===null) {
        this.mergeCache = new DoubleDict();
    }
    var intermediate = new ATNConfigSet(fullCtx);

    // Configurations already in a rule stop state indicate reaching the end
    // of the decision rule (local context) or end of the start rule (full
    // context). Once reached, these configurations are never updated by a
    // closure operation, so they are handled separately for the performance
    // advantage of having a smaller intermediate set when calling closure.
    //
    // For full-context reach operations, separate handling is required to
    // ensure that the alternative matching the longest overall sequence is
    // chosen when multiple such configurations can match the input.

    var skippedStopStates = null;

    // First figure out where we can reach on input t
    for (var i=0; i<closure.items.length;i++) {
        var c = closure.items[i];
        if(this.debug_add) {
            console.log("testing " + this.getTokenName(t) + " at " + c);
        }
        if (c.state instanceof RuleStopState) {
            if (fullCtx || t === Token.EOF) {
                if (skippedStopStates===null) {
                    skippedStopStates = [];
                }
                skippedStopStates.push(c);
                if(this.debug_add) {
                    console.log("added " + c + " to skippedStopStates");
                }
            }
            continue;
        }
        for(var j=0;j<c.state.transitions.length;j++) {
            var trans = c.state.transitions[j];
            var target = this.getReachableTarget(trans, t);
            if (target!==null) {
                var cfg = new ATNConfig({state:target}, c);
                intermediate.add(cfg, this.mergeCache);
                if(this.debug_add) {
                    console.log("added " + cfg + " to intermediate");
                }
            }
        }
    }
    // Now figure out where the reach operation can take us...
    var reach = null;

    // This block optimizes the reach operation for intermediate sets which
    // trivially indicate a termination state for the overall
    // adaptivePredict operation.
    //
    // The conditions assume that intermediate
    // contains all configurations relevant to the reach set, but this
    // condition is not true when one or more configurations have been
    // withheld in skippedStopStates, or when the current symbol is EOF.
    //
    if (skippedStopStates===null && t!==Token.EOF) {
        if (intermediate.items.length===1) {
            // Don't pursue the closure if there is just one state.
            // It can only have one alternative; just add to result
            // Also don't pursue the closure if there is unique alternative
            // among the configurations.
            reach = intermediate;
        } else if (this.getUniqueAlt(intermediate)!==ATN.INVALID_ALT_NUMBER) {
            // Also don't pursue the closure if there is unique alternative
            // among the configurations.
            reach = intermediate;
        }
    }
    // If the reach set could not be trivially determined, perform a closure
    // operation on the intermediate set to compute its initial value.
    //
    if (reach===null) {
        reach = new ATNConfigSet(fullCtx);
        var closureBusy = new Set();
        var treatEofAsEpsilon = t === Token.EOF;
        for (var k=0; k<intermediate.items.length;k++) {
            this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);
        }
    }
    if (t === Token.EOF) {
        // After consuming EOF no additional input is possible, so we are
        // only interested in configurations which reached the end of the
        // decision rule (local context) or end of the start rule (full
        // context). Update reach to contain only these configurations. This
        // handles both explicit EOF transitions in the grammar and implicit
        // EOF transitions following the end of the decision or start rule.
        //
        // When reach==intermediate, no closure operation was performed. In
        // this case, removeAllConfigsNotInRuleStopState needs to check for
        // reachable rule stop states as well as configurations already in
        // a rule stop state.
        //
        // This is handled before the configurations in skippedStopStates,
        // because any configurations potentially added from that list are
        // already guaranteed to meet this condition whether or not it's
        // required.
        //
        reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);
    }
    // If skippedStopStates!==null, then it contains at least one
    // configuration. For full-context reach operations, these
    // configurations reached the end of the start rule, in which case we
    // only add them back to reach if no configuration during the current
    // closure operation reached such a state. This ensures adaptivePredict
    // chooses an alternative matching the longest overall sequence when
    // multiple alternatives are viable.
    //
    if (skippedStopStates!==null && ( (! fullCtx) || (! PredictionMode.hasConfigInRuleStopState(reach)))) {
        for (var l=0; l<skippedStopStates.length;l++) {
            reach.add(skippedStopStates[l], this.mergeCache);
        }
    }
    if (reach.items.length===0) {
        return null;
    } else {
        return reach;
    }
};
//
// Return a configuration set containing only the configurations from
// {@code configs} which are in a {@link RuleStopState}. If all
// configurations in {@code configs} are already in a rule stop state, this
// method simply returns {@code configs}.
//
// <p>When {@code lookToEndOfRule} is true, this method uses
// {@link ATN//nextTokens} for each configuration in {@code configs} which is
// not already in a rule stop state to see if a rule stop state is reachable
// from the configuration via epsilon-only transitions.</p>
//
// @param configs the configuration set to update
// @param lookToEndOfRule when true, this method checks for rule stop states
// reachable by epsilon-only transitions from each configuration in
// {@code configs}.
//
// @return {@code configs} if all configurations in {@code configs} are in a
// rule stop state, otherwise return a new configuration set containing only
// the configurations from {@code configs} which are in a rule stop state
//
ParserATNSimulator.prototype.removeAllConfigsNotInRuleStopState = function(configs, lookToEndOfRule) {
    if (PredictionMode.allConfigsInRuleStopStates(configs)) {
        return configs;
    }
    var result = new ATNConfigSet(configs.fullCtx);
    for(var i=0; i<configs.items.length;i++) {
        var config = configs.items[i];
        if (config.state instanceof RuleStopState) {
            result.add(config, this.mergeCache);
            continue;
        }
        if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {
            var nextTokens = this.atn.nextTokens(config.state);
            if (nextTokens.contains(Token.EPSILON)) {
                var endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];
                result.add(new ATNConfig({state:endOfRuleState}, config), this.mergeCache);
            }
        }
    }
    return result;
};

ParserATNSimulator.prototype.computeStartState = function(p, ctx, fullCtx) {
    // always at least the implicit call to start rule
    var initialContext = predictionContextFromRuleContext(this.atn, ctx);
    var configs = new ATNConfigSet(fullCtx);
    for(var i=0;i<p.transitions.length;i++) {
        var target = p.transitions[i].target;
        var c = new ATNConfig({ state:target, alt:i+1, context:initialContext }, null);
        var closureBusy = new Set();
        this.closure(c, configs, closureBusy, true, fullCtx, false);
    }
    return configs;
};

//
// This method transforms the start state computed by
// {@link //computeStartState} to the special start state used by a
// precedence DFA for a particular precedence value. The transformation
// process applies the following changes to the start state's configuration
// set.
//
// <ol>
// <li>Evaluate the precedence predicates for each configuration using
// {@link SemanticContext//evalPrecedence}.</li>
// <li>Remove all configurations which predict an alternative greater than
// 1, for which another configuration that predicts alternative 1 is in the
// same ATN state with the same prediction context. This transformation is
// valid for the following reasons:
// <ul>
// <li>The closure block cannot contain any epsilon transitions which bypass
// the body of the closure, so all states reachable via alternative 1 are
// part of the precedence alternatives of the transformed left-recursive
// rule.</li>
// <li>The "primary" portion of a left recursive rule cannot contain an
// epsilon transition, so the only way an alternative other than 1 can exist
// in a state that is also reachable via alternative 1 is by nesting calls
// to the left-recursive rule, with the outer calls not being at the
// preferred precedence level.</li>
// </ul>
// </li>
// </ol>
//
// <p>
// The prediction context must be considered by this filter to address
// situations like the following.
// </p>
// <code>
// <pre>
// grammar TA;
// prog: statement* EOF;
// statement: letterA | statement letterA 'b' ;
// letterA: 'a';
// </pre>
// </code>
// <p>
// If the above grammar, the ATN state immediately before the token
// reference {@code 'a'} in {@code letterA} is reachable from the left edge
// of both the primary and closure blocks of the left-recursive rule
// {@code statement}. The prediction context associated with each of these
// configurations distinguishes between them, and prevents the alternative
// which stepped out to {@code prog} (and then back in to {@code statement}
// from being eliminated by the filter.
// </p>
//
// @param configs The configuration set computed by
// {@link //computeStartState} as the start state for the DFA.
// @return The transformed configuration set representing the start state
// for a precedence DFA at a particular precedence level (determined by
// calling {@link Parser//getPrecedence}).
//
ParserATNSimulator.prototype.applyPrecedenceFilter = function(configs) {
	var config;
	var statesFromAlt1 = [];
    var configSet = new ATNConfigSet(configs.fullCtx);
    for(var i=0; i<configs.items.length; i++) {
        config = configs.items[i];
        // handle alt 1 first
        if (config.alt !== 1) {
            continue;
        }
        var updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);
        if (updatedContext===null) {
            // the configuration was eliminated
            continue;
        }
        statesFromAlt1[config.state.stateNumber] = config.context;
        if (updatedContext !== config.semanticContext) {
            configSet.add(new ATNConfig({semanticContext:updatedContext}, config), this.mergeCache);
        } else {
            configSet.add(config, this.mergeCache);
        }
    }
    for(i=0; i<configs.items.length; i++) {
        config = configs.items[i];
        if (config.alt === 1) {
            // already handled
            continue;
        }
        // In the future, this elimination step could be updated to also
        // filter the prediction context for alternatives predicting alt>1
        // (basically a graph subtraction algorithm).
		if (!config.precedenceFilterSuppressed) {
            var context = statesFromAlt1[config.state.stateNumber] || null;
            if (context!==null && context.equals(config.context)) {
                // eliminated
                continue;
            }
		}
        configSet.add(config, this.mergeCache);
    }
    return configSet;
};

ParserATNSimulator.prototype.getReachableTarget = function(trans, ttype) {
    if (trans.matches(ttype, 0, this.atn.maxTokenType)) {
        return trans.target;
    } else {
        return null;
    }
};

ParserATNSimulator.prototype.getPredsForAmbigAlts = function(ambigAlts, configs, nalts) {
    // REACH=[1|1|[]|0:0, 1|2|[]|0:1]
    // altToPred starts as an array of all null contexts. The entry at index i
    // corresponds to alternative i. altToPred[i] may have one of three values:
    //   1. null: no ATNConfig c is found such that c.alt==i
    //   2. SemanticContext.NONE: At least one ATNConfig c exists such that
    //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,
    //      alt i has at least one unpredicated config.
    //   3. Non-NONE Semantic Context: There exists at least one, and for all
    //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.
    //
    // From this, it is clear that NONE||anything==NONE.
    //
    var altToPred = [];
    for(var i=0;i<configs.items.length;i++) {
        var c = configs.items[i];
        if(ambigAlts.contains( c.alt )) {
            altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);
        }
    }
    var nPredAlts = 0;
    for (i =1;i< nalts+1;i++) {
        var pred = altToPred[i] || null;
        if (pred===null) {
            altToPred[i] = SemanticContext.NONE;
        } else if (pred !== SemanticContext.NONE) {
            nPredAlts += 1;
        }
    }
    // nonambig alts are null in altToPred
    if (nPredAlts===0) {
        altToPred = null;
    }
    if (this.debug) {
        console.log("getPredsForAmbigAlts result " + Utils.arrayToString(altToPred));
    }
    return altToPred;
};

ParserATNSimulator.prototype.getPredicatePredictions = function(ambigAlts, altToPred) {
    var pairs = [];
    var containsPredicate = false;
    for (var i=1; i<altToPred.length;i++) {
        var pred = altToPred[i];
        // unpredicated is indicated by SemanticContext.NONE
        if( ambigAlts!==null && ambigAlts.contains( i )) {
            pairs.push(new PredPrediction(pred, i));
        }
        if (pred !== SemanticContext.NONE) {
            containsPredicate = true;
        }
    }
    if (! containsPredicate) {
        return null;
    }
    return pairs;
};

//
// This method is used to improve the localization of error messages by
// choosing an alternative rather than throwing a
// {@link NoViableAltException} in particular prediction scenarios where the
// {@link //ERROR} state was reached during ATN simulation.
//
// <p>
// The default implementation of this method uses the following
// algorithm to identify an ATN configuration which successfully parsed the
// decision entry rule. Choosing such an alternative ensures that the
// {@link ParserRuleContext} returned by the calling rule will be complete
// and valid, and the syntax error will be reported later at a more
// localized location.</p>
//
// <ul>
// <li>If a syntactically valid path or paths reach the end of the decision rule and
// they are semantically valid if predicated, return the min associated alt.</li>
// <li>Else, if a semantically invalid but syntactically valid path exist
// or paths exist, return the minimum associated alt.
// </li>
// <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>
// </ul>
//
// <p>
// In some scenarios, the algorithm described above could predict an
// alternative which will result in a {@link FailedPredicateException} in
// the parser. Specifically, this could occur if the <em>only</em> configuration
// capable of successfully parsing to the end of the decision rule is
// blocked by a semantic predicate. By choosing this alternative within
// {@link //adaptivePredict} instead of throwing a
// {@link NoViableAltException}, the resulting
// {@link FailedPredicateException} in the parser will identify the specific
// predicate which is preventing the parser from successfully parsing the
// decision rule, which helps developers identify and correct logic errors
// in semantic predicates.
// </p>
//
// @param configs The ATN configurations which were valid immediately before
// the {@link //ERROR} state was reached
// @param outerContext The is the \gamma_0 initial parser context from the paper
// or the parser stack at the instant before prediction commences.
//
// @return The value to return from {@link //adaptivePredict}, or
// {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not
// identified and {@link //adaptivePredict} should report an error instead.
//
ParserATNSimulator.prototype.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule = function(configs, outerContext) {
    var cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);
    var semValidConfigs = cfgs[0];
    var semInvalidConfigs = cfgs[1];
    var alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);
    if (alt!==ATN.INVALID_ALT_NUMBER) { // semantically/syntactically viable path exists
        return alt;
    }
    // Is there a syntactically valid path with a failed pred?
    if (semInvalidConfigs.items.length>0) {
        alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);
        if (alt!==ATN.INVALID_ALT_NUMBER) { // syntactically viable path exists
            return alt;
        }
    }
    return ATN.INVALID_ALT_NUMBER;
};

ParserATNSimulator.prototype.getAltThatFinishedDecisionEntryRule = function(configs) {
    var alts = [];
    for(var i=0;i<configs.items.length; i++) {
        var c = configs.items[i];
        if (c.reachesIntoOuterContext>0 || ((c.state instanceof RuleStopState) && c.context.hasEmptyPath())) {
            if(alts.indexOf(c.alt)<0) {
                alts.push(c.alt);
            }
        }
    }
    if (alts.length===0) {
        return ATN.INVALID_ALT_NUMBER;
    } else {
        return Math.min.apply(null, alts);
    }
};
// Walk the list of configurations and split them according to
//  those that have preds evaluating to true/false.  If no pred, assume
//  true pred and include in succeeded set.  Returns Pair of sets.
//
//  Create a new set so as not to alter the incoming parameter.
//
//  Assumption: the input stream has been restored to the starting point
//  prediction, which is where predicates need to evaluate.
//
ParserATNSimulator.prototype.splitAccordingToSemanticValidity = function( configs, outerContext) {
    var succeeded = new ATNConfigSet(configs.fullCtx);
    var failed = new ATNConfigSet(configs.fullCtx);
    for(var i=0;i<configs.items.length; i++) {
        var c = configs.items[i];
        if (c.semanticContext !== SemanticContext.NONE) {
            var predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);
            if (predicateEvaluationResult) {
                succeeded.add(c);
            } else {
                failed.add(c);
            }
        } else {
            succeeded.add(c);
        }
    }
    return [succeeded, failed];
};

// Look through a list of predicate/alt pairs, returning alts for the
//  pairs that win. A {@code NONE} predicate indicates an alt containing an
//  unpredicated config which behaves as "always true." If !complete
//  then we stop at the first predicate that evaluates to true. This
//  includes pairs with null predicates.
//
ParserATNSimulator.prototype.evalSemanticContext = function(predPredictions, outerContext, complete) {
    var predictions = new BitSet();
    for(var i=0;i<predPredictions.length;i++) {
    	var pair = predPredictions[i];
        if (pair.pred === SemanticContext.NONE) {
            predictions.add(pair.alt);
            if (! complete) {
                break;
            }
            continue;
        }
        var predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);
        if (this.debug || this.dfa_debug) {
            console.log("eval pred " + pair + "=" + predicateEvaluationResult);
        }
        if (predicateEvaluationResult) {
            if (this.debug || this.dfa_debug) {
                console.log("PREDICT " + pair.alt);
            }
            predictions.add(pair.alt);
            if (! complete) {
                break;
            }
        }
    }
    return predictions;
};

// TODO: If we are doing predicates, there is no point in pursuing
//     closure operations if we reach a DFA state that uniquely predicts
//     alternative. We will not be caching that DFA state and it is a
//     waste to pursue the closure. Might have to advance when we do
//     ambig detection thought :(
//

ParserATNSimulator.prototype.closure = function(config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {
    var initialDepth = 0;
    this.closureCheckingStopState(config, configs, closureBusy, collectPredicates,
                             fullCtx, initialDepth, treatEofAsEpsilon);
};


ParserATNSimulator.prototype.closureCheckingStopState = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
    if (this.debug || this.debug_closure) {
        console.log("closure(" + config.toString(this.parser,true) + ")");
        // console.log("configs(" + configs.toString() + ")");
        if(config.reachesIntoOuterContext>50) {
            throw "problem";
        }
    }
    if (config.state instanceof RuleStopState) {
        // We hit rule end. If we have context info, use it
        // run thru all possible stack tops in ctx
        if (! config.context.isEmpty()) {
            for ( var i =0; i<config.context.length; i++) {
                if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {
                    if (fullCtx) {
                        configs.add(new ATNConfig({state:config.state, context:PredictionContext.EMPTY}, config), this.mergeCache);
                        continue;
                    } else {
                        // we have no context info, just chase follow links (if greedy)
                        if (this.debug) {
                            console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
                        }
                        this.closure_(config, configs, closureBusy, collectPredicates,
                                 fullCtx, depth, treatEofAsEpsilon);
                    }
                    continue;
                }
                var returnState = this.atn.states[config.context.getReturnState(i)];
                var newContext = config.context.getParent(i); // "pop" return state
                var parms = {state:returnState, alt:config.alt, context:newContext, semanticContext:config.semanticContext};
                var c = new ATNConfig(parms, null);
                // While we have context to pop back from, we may have
                // gotten that context AFTER having falling off a rule.
                // Make sure we track that we are now out of context.
                c.reachesIntoOuterContext = config.reachesIntoOuterContext;
                this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);
            }
            return;
        } else if( fullCtx) {
            // reached end of start rule
            configs.add(config, this.mergeCache);
            return;
        } else {
            // else if we have no context info, just chase follow links (if greedy)
            if (this.debug) {
                console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
            }
        }
    }
    this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);
};


// Do the actual work of walking epsilon edges//
ParserATNSimulator.prototype.closure_ = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
    var p = config.state;
    // optimization
    if (! p.epsilonOnlyTransitions) {
        configs.add(config, this.mergeCache);
        // make sure to not return here, because EOF transitions can act as
        // both epsilon transitions and non-epsilon transitions.
    }
    for(var i = 0;i<p.transitions.length; i++) {
        if(i==0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config))
            continue;

        var t = p.transitions[i];
        var continueCollecting = collectPredicates && !(t instanceof ActionTransition);
        var c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);
        if (c!==null) {
            var newDepth = depth;
            if ( config.state instanceof RuleStopState) {
                // target fell off end of rule; mark resulting c as having dipped into outer context
                // We can't get here if incoming config was rule stop and we had context
                // track how far we dip into outer context.  Might
                // come in handy and we avoid evaluating context dependent
                // preds if this is > 0.
				if (this._dfa !== null && this._dfa.precedenceDfa) {
					if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {
						c.precedenceFilterSuppressed = true;
					}
				}

                c.reachesIntoOuterContext += 1;
                if (closureBusy.add(c)!==c) {
                    // avoid infinite recursion for right-recursive rules
                    continue;
                }
                configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method
                newDepth -= 1;
                if (this.debug) {
                    console.log("dips into outer ctx: " + c);
                }
            } else {
                if (!t.isEpsilon && closureBusy.add(c)!==c){
                    // avoid infinite recursion for EOF* and EOF+
                    continue;
                }
                if (t instanceof RuleTransition) {
                    // latch when newDepth goes negative - once we step out of the entry context we can't return
                    if (newDepth >= 0) {
                        newDepth += 1;
                    }
                }
            }
            this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);
        }
    }
};


ParserATNSimulator.prototype.canDropLoopEntryEdgeInLeftRecursiveRule = function(config) {
    // return False
    var p = config.state;
    // First check to see if we are in StarLoopEntryState generated during
    // left-recursion elimination. For efficiency, also check if
    // the context has an empty stack case. If so, it would mean
    // global FOLLOW so we can't perform optimization
    // Are we the special loop entry/exit state? or SLL wildcard
    if(p.stateType != ATNState.STAR_LOOP_ENTRY)
        return false;
    if(p.stateType != ATNState.STAR_LOOP_ENTRY || !p.isPrecedenceDecision ||
           config.context.isEmpty() || config.context.hasEmptyPath())
        return false;

    // Require all return states to return back to the same rule that p is in.
    var numCtxs = config.context.length;
    for(var i=0; i<numCtxs; i++) { // for each stack context
        var returnState = this.atn.states[config.context.getReturnState(i)];
        if (returnState.ruleIndex != p.ruleIndex)
            return false;
    }

    var decisionStartState = p.transitions[0].target;
    var blockEndStateNum = decisionStartState.endState.stateNumber;
    var blockEndState = this.atn.states[blockEndStateNum];

    // Verify that the top of each stack context leads to loop entry/exit
    // state through epsilon edges and w/o leaving rule.
    for(var i=0; i<numCtxs; i++) { // for each stack context
        var returnStateNumber = config.context.getReturnState(i);
        var returnState = this.atn.states[returnStateNumber];
        // all states must have single outgoing epsilon edge
        if (returnState.transitions.length != 1 || !returnState.transitions[0].isEpsilon)
            return false;

        // Look for prefix op case like 'not expr', (' type ')' expr
        var returnStateTarget = returnState.transitions[0].target;
        if ( returnState.stateType == ATNState.BLOCK_END && returnStateTarget == p )
            continue;

        // Look for 'expr op expr' or case where expr's return state is block end
        // of (...)* internal block; the block end points to loop back
        // which points to p but we don't need to check that
        if ( returnState == blockEndState )
            continue;

        // Look for ternary expr ? expr : expr. The return state points at block end,
        // which points at loop entry state
        if ( returnStateTarget == blockEndState )
            continue;

        // Look for complex prefix 'between expr and expr' case where 2nd expr's
        // return state points at block end state of (...)* internal block
        if (returnStateTarget.stateType == ATNState.BLOCK_END && returnStateTarget.transitions.length == 1
                && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target == p)
            continue;

        // anything else ain't conforming
        return false;
    }
    return true;
};


ParserATNSimulator.prototype.getRuleName = function( index) {
    if (this.parser!==null && index>=0) {
        return this.parser.ruleNames[index];
    } else {
        return "<rule " + index + ">";
    }
};

ParserATNSimulator.prototype.getEpsilonTarget = function(config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {
    switch(t.serializationType) {
    case Transition.RULE:
        return this.ruleTransition(config, t);
    case Transition.PRECEDENCE:
        return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);
    case Transition.PREDICATE:
        return this.predTransition(config, t, collectPredicates, inContext, fullCtx);
    case Transition.ACTION:
        return this.actionTransition(config, t);
    case Transition.EPSILON:
        return new ATNConfig({state:t.target}, config);
    case Transition.ATOM:
    case Transition.RANGE:
    case Transition.SET:
        // EOF transitions act like epsilon transitions after the first EOF
        // transition is traversed
        if (treatEofAsEpsilon) {
            if (t.matches(Token.EOF, 0, 1)) {
                return new ATNConfig({state: t.target}, config);
            }
        }
        return null;
    default:
    	return null;
    }
};

ParserATNSimulator.prototype.actionTransition = function(config, t) {
    if (this.debug) {
        var index = t.actionIndex==-1 ? 65535 : t.actionIndex;
        console.log("ACTION edge " + t.ruleIndex + ":" + index);
    }
    return new ATNConfig({state:t.target}, config);
};

ParserATNSimulator.prototype.precedenceTransition = function(config, pt,  collectPredicates, inContext, fullCtx) {
    if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " +
                pt.precedence + ">=_p, ctx dependent=true");
        if (this.parser!==null) {
        	console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
        }
    }
    var c = null;
    if (collectPredicates && inContext) {
        if (fullCtx) {
            // In full context mode, we can evaluate predicates on-the-fly
            // during closure, which dramatically reduces the size of
            // the config sets. It also obviates the need to test predicates
            // later during conflict resolution.
            var currentPosition = this._input.index;
            this._input.seek(this._startIndex);
            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
            this._input.seek(currentPosition);
            if (predSucceeds) {
                c = new ATNConfig({state:pt.target}, config); // no pred context
            }
        } else {
            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
            c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
        }
    } else {
        c = new ATNConfig({state:pt.target}, config);
    }
    if (this.debug) {
        console.log("config from pred transition=" + c);
    }
    return c;
};

ParserATNSimulator.prototype.predTransition = function(config, pt, collectPredicates, inContext, fullCtx) {
    if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " + pt.ruleIndex +
                ":" + pt.predIndex + ", ctx dependent=" + pt.isCtxDependent);
        if (this.parser!==null) {
            console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
        }
    }
    var c = null;
    if (collectPredicates && ((pt.isCtxDependent && inContext) || ! pt.isCtxDependent)) {
        if (fullCtx) {
            // In full context mode, we can evaluate predicates on-the-fly
            // during closure, which dramatically reduces the size of
            // the config sets. It also obviates the need to test predicates
            // later during conflict resolution.
            var currentPosition = this._input.index;
            this._input.seek(this._startIndex);
            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
            this._input.seek(currentPosition);
            if (predSucceeds) {
                c = new ATNConfig({state:pt.target}, config); // no pred context
            }
        } else {
            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
            c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
        }
    } else {
        c = new ATNConfig({state:pt.target}, config);
    }
    if (this.debug) {
        console.log("config from pred transition=" + c);
    }
    return c;
};

ParserATNSimulator.prototype.ruleTransition = function(config, t) {
    if (this.debug) {
        console.log("CALL rule " + this.getRuleName(t.target.ruleIndex) + ", ctx=" + config.context);
    }
    var returnState = t.followState;
    var newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber);
    return new ATNConfig({state:t.target, context:newContext}, config );
};

ParserATNSimulator.prototype.getConflictingAlts = function(configs) {
    var altsets = PredictionMode.getConflictingAltSubsets(configs);
    return PredictionMode.getAlts(altsets);
};

 // Sam pointed out a problem with the previous definition, v3, of
 // ambiguous states. If we have another state associated with conflicting
 // alternatives, we should keep going. For example, the following grammar
 //
 // s : (ID | ID ID?) ';' ;
 //
 // When the ATN simulation reaches the state before ';', it has a DFA
 // state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally
 // 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node
 // because alternative to has another way to continue, via [6|2|[]].
 // The key is that we have a single state that has config's only associated
 // with a single alternative, 2, and crucially the state transitions
 // among the configurations are all non-epsilon transitions. That means
 // we don't consider any conflicts that include alternative 2. So, we
 // ignore the conflict between alts 1 and 2. We ignore a set of
 // conflicting alts when there is an intersection with an alternative
 // associated with a single alt state in the state&rarr;config-list map.
 //
 // It's also the case that we might have two conflicting configurations but
 // also a 3rd nonconflicting configuration for a different alternative:
 // [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:
 //
 // a : A | A | A B ;
 //
 // After matching input A, we reach the stop state for rule A, state 1.
 // State 8 is the state right before B. Clearly alternatives 1 and 2
 // conflict and no amount of further lookahead will separate the two.
 // However, alternative 3 will be able to continue and so we do not
 // stop working on this state. In the previous example, we're concerned
 // with states associated with the conflicting alternatives. Here alt
 // 3 is not associated with the conflicting configs, but since we can continue
 // looking for input reasonably, I don't declare the state done. We
 // ignore a set of conflicting alts when we have an alternative
 // that we still need to pursue.
//

ParserATNSimulator.prototype.getConflictingAltsOrUniqueAlt = function(configs) {
    var conflictingAlts = null;
    if (configs.uniqueAlt!== ATN.INVALID_ALT_NUMBER) {
        conflictingAlts = new BitSet();
        conflictingAlts.add(configs.uniqueAlt);
    } else {
        conflictingAlts = configs.conflictingAlts;
    }
    return conflictingAlts;
};

ParserATNSimulator.prototype.getTokenName = function( t) {
    if (t===Token.EOF) {
        return "EOF";
    }
    if( this.parser!==null && this.parser.literalNames!==null) {
        if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {
            console.log("" + t + " ttype out of range: " + this.parser.literalNames);
            console.log("" + this.parser.getInputStream().getTokens());
        } else {
            var name = this.parser.literalNames[t] || this.parser.symbolicNames[t];
            return name + "<" + t + ">";
        }
    }
    return "" + t;
};

ParserATNSimulator.prototype.getLookaheadName = function(input) {
    return this.getTokenName(input.LA(1));
};

// Used for debugging in adaptivePredict around execATN but I cut
//  it out for clarity now that alg. works well. We can leave this
//  "dead" code for a bit.
//
ParserATNSimulator.prototype.dumpDeadEndConfigs = function(nvae) {
    console.log("dead end configs: ");
    var decs = nvae.getDeadEndConfigs();
    for(var i=0; i<decs.length; i++) {
    	var c = decs[i];
        var trans = "no edges";
        if (c.state.transitions.length>0) {
            var t = c.state.transitions[0];
            if (t instanceof AtomTransition) {
                trans = "Atom "+ this.getTokenName(t.label);
            } else if (t instanceof SetTransition) {
                var neg = (t instanceof NotSetTransition);
                trans = (neg ? "~" : "") + "Set " + t.set;
            }
        }
        console.error(c.toString(this.parser, true) + ":" + trans);
    }
};

ParserATNSimulator.prototype.noViableAlt = function(input, outerContext, configs, startIndex) {
    return new NoViableAltException(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);
};

ParserATNSimulator.prototype.getUniqueAlt = function(configs) {
    var alt = ATN.INVALID_ALT_NUMBER;
    for(var i=0;i<configs.items.length;i++) {
    	var c = configs.items[i];
        if (alt === ATN.INVALID_ALT_NUMBER) {
            alt = c.alt // found first alt
        } else if( c.alt!==alt) {
            return ATN.INVALID_ALT_NUMBER;
        }
    }
    return alt;
};

//
// Add an edge to the DFA, if possible. This method calls
// {@link //addDFAState} to ensure the {@code to} state is present in the
// DFA. If {@code from} is {@code null}, or if {@code t} is outside the
// range of edges that can be represented in the DFA tables, this method
// returns without adding the edge to the DFA.
//
// <p>If {@code to} is {@code null}, this method returns {@code null}.
// Otherwise, this method returns the {@link DFAState} returned by calling
// {@link //addDFAState} for the {@code to} state.</p>
//
// @param dfa The DFA
// @param from The source state for the edge
// @param t The input symbol
// @param to The target state for the edge
//
// @return If {@code to} is {@code null}, this method returns {@code null};
// otherwise this method returns the result of calling {@link //addDFAState}
// on {@code to}
//
ParserATNSimulator.prototype.addDFAEdge = function(dfa, from_, t, to) {
    if( this.debug) {
        console.log("EDGE " + from_ + " -> " + to + " upon " + this.getTokenName(t));
    }
    if (to===null) {
        return null;
    }
    to = this.addDFAState(dfa, to); // used existing if possible not incoming
    if (from_===null || t < -1 || t > this.atn.maxTokenType) {
        return to;
    }
    if (from_.edges===null) {
        from_.edges = [];
    }
    from_.edges[t+1] = to; // connect

    if (this.debug) {
        var literalNames = this.parser===null ? null : this.parser.literalNames;
        var symbolicNames = this.parser===null ? null : this.parser.symbolicNames;
        console.log("DFA=\n" + dfa.toString(literalNames, symbolicNames));
    }
    return to;
};
//
// Add state {@code D} to the DFA if it is not already present, and return
// the actual instance stored in the DFA. If a state equivalent to {@code D}
// is already in the DFA, the existing state is returned. Otherwise this
// method returns {@code D} after adding it to the DFA.
//
// <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and
// does not change the DFA.</p>
//
// @param dfa The dfa
// @param D The DFA state to add
// @return The state stored in the DFA. This will be either the existing
// state if {@code D} is already in the DFA, or {@code D} itself if the
// state was not already present.
//
ParserATNSimulator.prototype.addDFAState = function(dfa, D) {
    if (D == ATNSimulator.ERROR) {
        return D;
    }
    var existing = dfa.states.get(D);
    if(existing!==null) {
        return existing;
    }
    D.stateNumber = dfa.states.length;
    if (! D.configs.readOnly) {
        D.configs.optimizeConfigs(this);
        D.configs.setReadonly(true);
    }
    dfa.states.add(D);
    if (this.debug) {
        console.log("adding new DFA state: " + D);
    }
    return D;
};

ParserATNSimulator.prototype.reportAttemptingFullContext = function(dfa, conflictingAlts, configs, startIndex, stopIndex) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportAttemptingFullContext decision=" + dfa.decision + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);
    }
};

ParserATNSimulator.prototype.reportContextSensitivity = function(dfa, prediction, configs, startIndex, stopIndex) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportContextSensitivity decision=" + dfa.decision + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);
    }
};

// If context sensitive parsing, we know it's ambiguity not conflict//
ParserATNSimulator.prototype.reportAmbiguity = function(dfa, D, startIndex, stopIndex,
                               exact, ambigAlts, configs ) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportAmbiguity " + ambigAlts + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
    }
};

exports.ParserATNSimulator = ParserATNSimulator;

/***/ }),

/***/ "./node_modules/antlr4/atn/PredictionMode.js":
/*!***************************************************!*\
  !*** ./node_modules/antlr4/atn/PredictionMode.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//
//
// This enumeration defines the prediction modes available in ANTLR 4 along with
// utility methods for analyzing configuration sets for conflicts and/or
// ambiguities.

var Set = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js").Set;
var Map = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js").Map;
var BitSet = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js").BitSet;
var AltDict = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js").AltDict;
var ATN = __webpack_require__(/*! ./ATN */ "./node_modules/antlr4/atn/ATN.js").ATN;
var RuleStopState = __webpack_require__(/*! ./ATNState */ "./node_modules/antlr4/atn/ATNState.js").RuleStopState;
var ATNConfigSet = __webpack_require__(/*! ./ATNConfigSet */ "./node_modules/antlr4/atn/ATNConfigSet.js").ATNConfigSet;
var ATNConfig = __webpack_require__(/*! ./ATNConfig */ "./node_modules/antlr4/atn/ATNConfig.js").ATNConfig;
var SemanticContext = __webpack_require__(/*! ./SemanticContext */ "./node_modules/antlr4/atn/SemanticContext.js").SemanticContext;
var Hash = __webpack_require__(/*! ../Utils */ "./node_modules/antlr4/Utils.js").Hash;
var hashStuff = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js").hashStuff;
var equalArrays = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js").equalArrays;

function PredictionMode() {
	return this;
}

//
// The SLL(*) prediction mode. This prediction mode ignores the current
// parser context when making predictions. This is the fastest prediction
// mode, and provides correct results for many grammars. This prediction
// mode is more powerful than the prediction mode provided by ANTLR 3, but
// may result in syntax errors for grammar and input combinations which are
// not SLL.
//
// <p>
// When using this prediction mode, the parser will either return a correct
// parse tree (i.e. the same parse tree that would be returned with the
// {@link //LL} prediction mode), or it will report a syntax error. If a
// syntax error is encountered when using the {@link //SLL} prediction mode,
// it may be due to either an actual syntax error in the input or indicate
// that the particular combination of grammar and input requires the more
// powerful {@link //LL} prediction abilities to complete successfully.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.SLL = 0;
//
// The LL(*) prediction mode. This prediction mode allows the current parser
// context to be used for resolving SLL conflicts that occur during
// prediction. This is the fastest prediction mode that guarantees correct
// parse results for all combinations of grammars with syntactically correct
// inputs.
//
// <p>
// When using this prediction mode, the parser will make correct decisions
// for all syntactically-correct grammar and input combinations. However, in
// cases where the grammar is truly ambiguous this prediction mode might not
// report a precise answer for <em>exactly which</em> alternatives are
// ambiguous.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.LL = 1;
//
// The LL(*) prediction mode with exact ambiguity detection. In addition to
// the correctness guarantees provided by the {@link //LL} prediction mode,
// this prediction mode instructs the prediction algorithm to determine the
// complete and exact set of ambiguous alternatives for every ambiguous
// decision encountered while parsing.
//
// <p>
// This prediction mode may be used for diagnosing ambiguities during
// grammar development. Due to the performance overhead of calculating sets
// of ambiguous alternatives, this prediction mode should be avoided when
// the exact results are not necessary.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.LL_EXACT_AMBIG_DETECTION = 2;


//
// Computes the SLL prediction termination condition.
//
// <p>
// This method computes the SLL prediction termination condition for both of
// the following cases.</p>
//
// <ul>
// <li>The usual SLL+LL fallback upon SLL conflict</li>
// <li>Pure SLL without LL fallback</li>
// </ul>
//
// <p><strong>COMBINED SLL+LL PARSING</strong></p>
//
// <p>When LL-fallback is enabled upon SLL conflict, correct predictions are
// ensured regardless of how the termination condition is computed by this
// method. Due to the substantially higher cost of LL prediction, the
// prediction should only fall back to LL when the additional lookahead
// cannot lead to a unique SLL prediction.</p>
//
// <p>Assuming combined SLL+LL parsing, an SLL configuration set with only
// conflicting subsets should fall back to full LL, even if the
// configuration sets don't resolve to the same alternative (e.g.
// {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting
// configuration, SLL could continue with the hopes that more lookahead will
// resolve via one of those non-conflicting configurations.</p>
//
// <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)
// stops when it sees only conflicting configuration subsets. In contrast,
// full LL keeps going when there is uncertainty.</p>
//
// <p><strong>HEURISTIC</strong></p>
//
// <p>As a heuristic, we stop prediction when we see any conflicting subset
// unless we see a state that only has one alternative associated with it.
// The single-alt-state thing lets prediction continue upon rules like
// (otherwise, it would admit defeat too soon):</p>
//
// <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>
//
// <p>When the ATN simulation reaches the state before {@code ';'}, it has a
// DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally
// {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop
// processing this node because alternative to has another way to continue,
// via {@code [6|2|[]]}.</p>
//
// <p>It also let's us continue for this rule:</p>
//
// <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>
//
// <p>After matching input A, we reach the stop state for rule A, state 1.
// State 8 is the state right before B. Clearly alternatives 1 and 2
// conflict and no amount of further lookahead will separate the two.
// However, alternative 3 will be able to continue and so we do not stop
// working on this state. In the previous example, we're concerned with
// states associated with the conflicting alternatives. Here alt 3 is not
// associated with the conflicting configs, but since we can continue
// looking for input reasonably, don't declare the state done.</p>
//
// <p><strong>PURE SLL PARSING</strong></p>
//
// <p>To handle pure SLL parsing, all we have to do is make sure that we
// combine stack contexts for configurations that differ only by semantic
// predicate. From there, we can do the usual SLL termination heuristic.</p>
//
// <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>
//
// <p>SLL decisions don't evaluate predicates until after they reach DFA stop
// states because they need to create the DFA cache that works in all
// semantic situations. In contrast, full LL evaluates predicates collected
// during start state computation so it can ignore predicates thereafter.
// This means that SLL termination detection can totally ignore semantic
// predicates.</p>
//
// <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not
// semantic predicate contexts so we might see two configurations like the
// following.</p>
//
// <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>
//
// <p>Before testing these configurations against others, we have to merge
// {@code x} and {@code x'} (without modifying the existing configurations).
// For example, we test {@code (x+x')==x''} when looking for conflicts in
// the following configurations.</p>
//
// <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>
//
// <p>If the configuration set has predicates (as indicated by
// {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of
// the configurations to strip out all of the predicates so that a standard
// {@link ATNConfigSet} will merge everything ignoring predicates.</p>
//
PredictionMode.hasSLLConflictTerminatingPrediction = function( mode, configs) {
    // Configs in rule stop states indicate reaching the end of the decision
    // rule (local context) or end of start rule (full context). If all
    // configs meet this condition, then none of the configurations is able
    // to match additional input so we terminate prediction.
    //
    if (PredictionMode.allConfigsInRuleStopStates(configs)) {
        return true;
    }
    // pure SLL mode parsing
    if (mode === PredictionMode.SLL) {
        // Don't bother with combining configs from different semantic
        // contexts if we can fail over to full LL; costs more time
        // since we'll often fail over anyway.
        if (configs.hasSemanticContext) {
            // dup configs, tossing out semantic predicates
            var dup = new ATNConfigSet();
            for(var i=0;i<configs.items.length;i++) {
            	var c = configs.items[i];
                c = new ATNConfig({semanticContext:SemanticContext.NONE}, c);
                dup.add(c);
            }
            configs = dup;
        }
        // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    var altsets = PredictionMode.getConflictingAltSubsets(configs);
    return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);
};

// Checks if any configuration in {@code configs} is in a
// {@link RuleStopState}. Configurations meeting this condition have reached
// the end of the decision rule (local context) or end of start rule (full
// context).
//
// @param configs the configuration set to test
// @return {@code true} if any configuration in {@code configs} is in a
// {@link RuleStopState}, otherwise {@code false}
PredictionMode.hasConfigInRuleStopState = function(configs) {
	for(var i=0;i<configs.items.length;i++) {
		var c = configs.items[i];
        if (c.state instanceof RuleStopState) {
            return true;
        }
	}
    return false;
};

// Checks if all configurations in {@code configs} are in a
// {@link RuleStopState}. Configurations meeting this condition have reached
// the end of the decision rule (local context) or end of start rule (full
// context).
//
// @param configs the configuration set to test
// @return {@code true} if all configurations in {@code configs} are in a
// {@link RuleStopState}, otherwise {@code false}
PredictionMode.allConfigsInRuleStopStates = function(configs) {
	for(var i=0;i<configs.items.length;i++) {
		var c = configs.items[i];
        if (!(c.state instanceof RuleStopState)) {
            return false;
        }
	}
    return true;
};

//
// Full LL prediction termination.
//
// <p>Can we stop looking ahead during ATN simulation or is there some
// uncertainty as to which alternative we will ultimately pick, after
// consuming more input? Even if there are partial conflicts, we might know
// that everything is going to resolve to the same minimum alternative. That
// means we can stop since no more lookahead will change that fact. On the
// other hand, there might be multiple conflicts that resolve to different
// minimums. That means we need more look ahead to decide which of those
// alternatives we should predict.</p>
//
// <p>The basic idea is to split the set of configurations {@code C}, into
// conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with
// non-conflicting configurations. Two configurations conflict if they have
// identical {@link ATNConfig//state} and {@link ATNConfig//context} values
// but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}
// and {@code (s, j, ctx, _)} for {@code i!=j}.</p>
//
// <p>Reduce these configuration subsets to the set of possible alternatives.
// You can compute the alternative subsets in one pass as follows:</p>
//
// <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in
// {@code C} holding {@code s} and {@code ctx} fixed.</p>
//
// <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>
//
// <pre>
// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
// alt and not pred
// </pre>
//
// <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>
//
// <p>If {@code |A_s,ctx|=1} then there is no conflict associated with
// {@code s} and {@code ctx}.</p>
//
// <p>Reduce the subsets to singletons by choosing a minimum of each subset. If
// the union of these alternative subsets is a singleton, then no amount of
// more lookahead will help us. We will always pick that alternative. If,
// however, there is more than one alternative, then we are uncertain which
// alternative to predict and must continue looking for resolution. We may
// or may not discover an ambiguity in the future, even if there are no
// conflicting subsets this round.</p>
//
// <p>The biggest sin is to terminate early because it means we've made a
// decision but were uncertain as to the eventual outcome. We haven't used
// enough lookahead. On the other hand, announcing a conflict too late is no
// big deal; you will still have the conflict. It's just inefficient. It
// might even look until the end of file.</p>
//
// <p>No special consideration for semantic predicates is required because
// predicates are evaluated on-the-fly for full LL prediction, ensuring that
// no configuration contains a semantic context during the termination
// check.</p>
//
// <p><strong>CONFLICTING CONFIGS</strong></p>
//
// <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict
// when {@code i!=j} but {@code x=x'}. Because we merge all
// {@code (s, i, _)} configurations together, that means that there are at
// most {@code n} configurations associated with state {@code s} for
// {@code n} possible alternatives in the decision. The merged stacks
// complicate the comparison of configuration contexts {@code x} and
// {@code x'}. Sam checks to see if one is a subset of the other by calling
// merge and checking to see if the merged result is either {@code x} or
// {@code x'}. If the {@code x} associated with lowest alternative {@code i}
// is the superset, then {@code i} is the only possible prediction since the
// others resolve to {@code min(i)} as well. However, if {@code x} is
// associated with {@code j>i} then at least one stack configuration for
// {@code j} is not in conflict with alternative {@code i}. The algorithm
// should keep going, looking for more lookahead due to the uncertainty.</p>
//
// <p>For simplicity, I'm doing a equality check between {@code x} and
// {@code x'} that lets the algorithm continue to consume lookahead longer
// than necessary. The reason I like the equality is of course the
// simplicity but also because that is the test you need to detect the
// alternatives that are actually in conflict.</p>
//
// <p><strong>CONTINUE/STOP RULE</strong></p>
//
// <p>Continue if union of resolved alternative sets from non-conflicting and
// conflicting alternative subsets has more than one alternative. We are
// uncertain about which alternative to predict.</p>
//
// <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which
// alternatives are still in the running for the amount of input we've
// consumed at this point. The conflicting sets let us to strip away
// configurations that won't lead to more states because we resolve
// conflicts to the configuration with a minimum alternate for the
// conflicting set.</p>
//
// <p><strong>CASES</strong></p>
//
// <ul>
//
// <li>no conflicts and more than 1 alternative in set =&gt; continue</li>
//
// <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},
// {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set
// {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
// {@code {1,3}} =&gt; continue
// </li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
// {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set
// {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
// {@code {1}} =&gt; stop and predict 1</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
// {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce
// ambiguity {@code {1,2}}</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},
// {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {2}} = {@code {1,2}} =&gt; continue</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},
// {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {3}} = {@code {1,3}} =&gt; continue</li>
//
// </ul>
//
// <p><strong>EXACT AMBIGUITY DETECTION</strong></p>
//
// <p>If all states report the same conflicting set of alternatives, then we
// know we have the exact ambiguity set.</p>
//
// <p><code>|A_<em>i</em>|&gt;1</code> and
// <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>
//
// <p>In other words, we continue examining lookahead until all {@code A_i}
// have more than one alternative and all {@code A_i} are the same. If
// {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate
// because the resolved set is {@code {1}}. To determine what the real
// ambiguity is, we have to know whether the ambiguity is between one and
// two or one and three so we keep going. We can only stop prediction when
// we need exact ambiguity detection when the sets look like
// {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>
//
PredictionMode.resolvesToJustOneViableAlt = function(altsets) {
    return PredictionMode.getSingleViableAlt(altsets);
};

//
// Determines if every alternative subset in {@code altsets} contains more
// than one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if every {@link BitSet} in {@code altsets} has
// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
//
PredictionMode.allSubsetsConflict = function(altsets) {
    return ! PredictionMode.hasNonConflictingAltSet(altsets);
};
//
// Determines if any single alternative subset in {@code altsets} contains
// exactly one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if {@code altsets} contains a {@link BitSet} with
// {@link BitSet//cardinality cardinality} 1, otherwise {@code false}
//
PredictionMode.hasNonConflictingAltSet = function(altsets) {
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (alts.length===1) {
            return true;
        }
	}
    return false;
};

//
// Determines if any single alternative subset in {@code altsets} contains
// more than one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if {@code altsets} contains a {@link BitSet} with
// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
//
PredictionMode.hasConflictingAltSet = function(altsets) {
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (alts.length>1) {
            return true;
        }
	}
    return false;
};

//
// Determines if every alternative subset in {@code altsets} is equivalent.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if every member of {@code altsets} is equal to the
// others, otherwise {@code false}
//
PredictionMode.allSubsetsEqual = function(altsets) {
    var first = null;
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (first === null) {
            first = alts;
        } else if (alts!==first) {
            return false;
        }
	}
    return true;
};

//
// Returns the unique alternative predicted by all alternative subsets in
// {@code altsets}. If no such alternative exists, this method returns
// {@link ATN//INVALID_ALT_NUMBER}.
//
// @param altsets a collection of alternative subsets
//
PredictionMode.getUniqueAlt = function(altsets) {
    var all = PredictionMode.getAlts(altsets);
    if (all.length===1) {
        return all.minValue();
    } else {
        return ATN.INVALID_ALT_NUMBER;
    }
};

// Gets the complete set of represented alternatives for a collection of
// alternative subsets. This method returns the union of each {@link BitSet}
// in {@code altsets}.
//
// @param altsets a collection of alternative subsets
// @return the set of represented alternatives in {@code altsets}
//
PredictionMode.getAlts = function(altsets) {
    var all = new BitSet();
    altsets.map( function(alts) { all.or(alts); });
    return all;
};

//
// This function gets the conflicting alt subsets from a configuration set.
// For each configuration {@code c} in {@code configs}:
//
// <pre>
// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
// alt and not pred
// </pre>

PredictionMode.getConflictingAltSubsets = function(configs) {
    var configToAlts = new Map();
    configToAlts.hashFunction = function(cfg) { hashStuff(cfg.state.stateNumber, cfg.context); };
    configToAlts.equalsFunction = function(c1, c2) { return c1.state.stateNumber==c2.state.stateNumber && c1.context.equals(c2.context);}
    configs.items.map(function(cfg) {
        var alts = configToAlts.get(cfg);
        if (alts === null) {
            alts = new BitSet();
            configToAlts.put(cfg, alts);
        }
        alts.add(cfg.alt);
	});
    return configToAlts.getValues();
};

//
// Get a map from state to alt subset from a configuration set. For each
// configuration {@code c} in {@code configs}:
//
// <pre>
// map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}
// </pre>
//
PredictionMode.getStateToAltMap = function(configs) {
    var m = new AltDict();
    configs.items.map(function(c) {
        var alts = m.get(c.state);
        if (alts === null) {
            alts = new BitSet();
            m.put(c.state, alts);
        }
        alts.add(c.alt);
    });
    return m;
};

PredictionMode.hasStateAssociatedWithOneAlt = function(configs) {
    var values = PredictionMode.getStateToAltMap(configs).values();
    for(var i=0;i<values.length;i++) {
        if (values[i].length===1) {
            return true;
        }
    }
    return false;
};

PredictionMode.getSingleViableAlt = function(altsets) {
    var result = null;
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        var minAlt = alts.minValue();
        if(result===null) {
            result = minAlt;
        } else if(result!==minAlt) { // more than 1 viable alt
            return ATN.INVALID_ALT_NUMBER;
        }
	}
    return result;
};

exports.PredictionMode = PredictionMode;


/***/ }),

/***/ "./node_modules/antlr4/atn/SemanticContext.js":
/*!****************************************************!*\
  !*** ./node_modules/antlr4/atn/SemanticContext.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// A tree structure used to record the semantic context in which
//  an ATN configuration is valid.  It's either a single predicate,
//  a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.
//
//  <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of
//  {@link SemanticContext} within the scope of this outer class.</p>
//

var Set = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js").Set;
var Hash = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js").Hash;

function SemanticContext() {
	return this;
}

SemanticContext.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish();
};

// For context independent predicates, we evaluate them without a local
// context (i.e., null context). That way, we can evaluate them without
// having to create proper rule-specific context during prediction (as
// opposed to the parser, which creates them naturally). In a practical
// sense, this avoids a cast exception from RuleContext to myruleContext.
//
// <p>For context dependent predicates, we must pass in a local context so that
// references such as $arg evaluate properly as _localctx.arg. We only
// capture context dependent predicates in the context in which we begin
// prediction, so we passed in the outer context here in case of context
// dependent predicate evaluation.</p>
//
SemanticContext.prototype.evaluate = function(parser, outerContext) {
};

//
// Evaluate the precedence predicates for the context and reduce the result.
//
// @param parser The parser instance.
// @param outerContext The current parser context object.
// @return The simplified semantic context after precedence predicates are
// evaluated, which will be one of the following values.
// <ul>
// <li>{@link //NONE}: if the predicate simplifies to {@code true} after
// precedence predicates are evaluated.</li>
// <li>{@code null}: if the predicate simplifies to {@code false} after
// precedence predicates are evaluated.</li>
// <li>{@code this}: if the semantic context is not changed as a result of
// precedence predicate evaluation.</li>
// <li>A non-{@code null} {@link SemanticContext}: the new simplified
// semantic context after precedence predicates are evaluated.</li>
// </ul>
//
SemanticContext.prototype.evalPrecedence = function(parser, outerContext) {
	return this;
};

SemanticContext.andContext = function(a, b) {
	if (a === null || a === SemanticContext.NONE) {
		return b;
	}
	if (b === null || b === SemanticContext.NONE) {
		return a;
	}
	var result = new AND(a, b);
	if (result.opnds.length === 1) {
		return result.opnds[0];
	} else {
		return result;
	}
};

SemanticContext.orContext = function(a, b) {
	if (a === null) {
		return b;
	}
	if (b === null) {
		return a;
	}
	if (a === SemanticContext.NONE || b === SemanticContext.NONE) {
		return SemanticContext.NONE;
	}
	var result = new OR(a, b);
	if (result.opnds.length === 1) {
		return result.opnds[0];
	} else {
		return result;
	}
};

function Predicate(ruleIndex, predIndex, isCtxDependent) {
	SemanticContext.call(this);
	this.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;
	this.predIndex = predIndex === undefined ? -1 : predIndex;
	this.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred
	return this;
}

Predicate.prototype = Object.create(SemanticContext.prototype);
Predicate.prototype.constructor = Predicate;

//The default {@link SemanticContext}, which is semantically equivalent to
//a predicate of the form {@code {true}?}.
//
SemanticContext.NONE = new Predicate();


Predicate.prototype.evaluate = function(parser, outerContext) {
	var localctx = this.isCtxDependent ? outerContext : null;
	return parser.sempred(localctx, this.ruleIndex, this.predIndex);
};

Predicate.prototype.updateHashCode = function(hash) {
	hash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);
};

Predicate.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof Predicate)) {
		return false;
	} else {
		return this.ruleIndex === other.ruleIndex &&
				this.predIndex === other.predIndex &&
				this.isCtxDependent === other.isCtxDependent;
	}
};

Predicate.prototype.toString = function() {
	return "{" + this.ruleIndex + ":" + this.predIndex + "}?";
};

function PrecedencePredicate(precedence) {
	SemanticContext.call(this);
	this.precedence = precedence === undefined ? 0 : precedence;
}

PrecedencePredicate.prototype = Object.create(SemanticContext.prototype);
PrecedencePredicate.prototype.constructor = PrecedencePredicate;

PrecedencePredicate.prototype.evaluate = function(parser, outerContext) {
	return parser.precpred(outerContext, this.precedence);
};

PrecedencePredicate.prototype.evalPrecedence = function(parser, outerContext) {
	if (parser.precpred(outerContext, this.precedence)) {
		return SemanticContext.NONE;
	} else {
		return null;
	}
};

PrecedencePredicate.prototype.compareTo = function(other) {
	return this.precedence - other.precedence;
};

PrecedencePredicate.prototype.updateHashCode = function(hash) {
    hash.update(31);
};

PrecedencePredicate.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof PrecedencePredicate)) {
		return false;
	} else {
		return this.precedence === other.precedence;
	}
};

PrecedencePredicate.prototype.toString = function() {
	return "{"+this.precedence+">=prec}?";
};



PrecedencePredicate.filterPrecedencePredicates = function(set) {
	var result = [];
	set.values().map( function(context) {
		if (context instanceof PrecedencePredicate) {
			result.push(context);
		}
	});
	return result;
};


// A semantic context which is true whenever none of the contained contexts
// is false.
//
function AND(a, b) {
	SemanticContext.call(this);
	var operands = new Set();
	if (a instanceof AND) {
		a.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(a);
	}
	if (b instanceof AND) {
		b.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(b);
	}
	var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
	if (precedencePredicates.length > 0) {
		// interested in the transition with the lowest precedence
		var reduced = null;
		precedencePredicates.map( function(p) {
			if(reduced===null || p.precedence<reduced.precedence) {
				reduced = p;
			}
		});
		operands.add(reduced);
	}
	this.opnds = operands.values();
	return this;
}

AND.prototype = Object.create(SemanticContext.prototype);
AND.prototype.constructor = AND;

AND.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof AND)) {
		return false;
	} else {
		return this.opnds === other.opnds;
	}
};

AND.prototype.updateHashCode = function(hash) {
    hash.update(this.opnds, "AND");
};
//
// {@inheritDoc}
//
// <p>
// The evaluation of predicates by this context is short-circuiting, but
// unordered.</p>
//
AND.prototype.evaluate = function(parser, outerContext) {
	for (var i = 0; i < this.opnds.length; i++) {
		if (!this.opnds[i].evaluate(parser, outerContext)) {
			return false;
		}
	}
	return true;
};

AND.prototype.evalPrecedence = function(parser, outerContext) {
	var differs = false;
	var operands = [];
	for (var i = 0; i < this.opnds.length; i++) {
		var context = this.opnds[i];
		var evaluated = context.evalPrecedence(parser, outerContext);
		differs |= (evaluated !== context);
		if (evaluated === null) {
			// The AND context is false if any element is false
			return null;
		} else if (evaluated !== SemanticContext.NONE) {
			// Reduce the result by skipping true elements
			operands.push(evaluated);
		}
	}
	if (!differs) {
		return this;
	}
	if (operands.length === 0) {
		// all elements were true, so the AND context is true
		return SemanticContext.NONE;
	}
	var result = null;
	operands.map(function(o) {
		result = result === null ? o : SemanticContext.andContext(result, o);
	});
	return result;
};

AND.prototype.toString = function() {
	var s = "";
	this.opnds.map(function(o) {
		s += "&& " + o.toString();
	});
	return s.length > 3 ? s.slice(3) : s;
};

//
// A semantic context which is true whenever at least one of the contained
// contexts is true.
//
function OR(a, b) {
	SemanticContext.call(this);
	var operands = new Set();
	if (a instanceof OR) {
		a.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(a);
	}
	if (b instanceof OR) {
		b.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(b);
	}

	var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
	if (precedencePredicates.length > 0) {
		// interested in the transition with the highest precedence
		var s = precedencePredicates.sort(function(a, b) {
			return a.compareTo(b);
		});
		var reduced = s[s.length-1];
		operands.add(reduced);
	}
	this.opnds = operands.values();
	return this;
}

OR.prototype = Object.create(SemanticContext.prototype);
OR.prototype.constructor = OR;

OR.prototype.constructor = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof OR)) {
		return false;
	} else {
		return this.opnds === other.opnds;
	}
};

OR.prototype.updateHashCode = function(hash) {
    hash.update(this.opnds, "OR");
};

// <p>
// The evaluation of predicates by this context is short-circuiting, but
// unordered.</p>
//
OR.prototype.evaluate = function(parser, outerContext) {
	for (var i = 0; i < this.opnds.length; i++) {
		if (this.opnds[i].evaluate(parser, outerContext)) {
			return true;
		}
	}
	return false;
};

OR.prototype.evalPrecedence = function(parser, outerContext) {
	var differs = false;
	var operands = [];
	for (var i = 0; i < this.opnds.length; i++) {
		var context = this.opnds[i];
		var evaluated = context.evalPrecedence(parser, outerContext);
		differs |= (evaluated !== context);
		if (evaluated === SemanticContext.NONE) {
			// The OR context is true if any element is true
			return SemanticContext.NONE;
		} else if (evaluated !== null) {
			// Reduce the result by skipping false elements
			operands.push(evaluated);
		}
	}
	if (!differs) {
		return this;
	}
	if (operands.length === 0) {
		// all elements were false, so the OR context is false
		return null;
	}
	var result = null;
	operands.map(function(o) {
		return result === null ? o : SemanticContext.orContext(result, o);
	});
	return result;
};

OR.prototype.toString = function() {
	var s = "";
	this.opnds.map(function(o) {
		s += "|| " + o.toString();
	});
	return s.length > 3 ? s.slice(3) : s;
};

exports.SemanticContext = SemanticContext;
exports.PrecedencePredicate = PrecedencePredicate;
exports.Predicate = Predicate;


/***/ }),

/***/ "./node_modules/antlr4/atn/Transition.js":
/*!***********************************************!*\
  !*** ./node_modules/antlr4/atn/Transition.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//  An ATN transition between any two ATN states.  Subclasses define
//  atom, set, epsilon, action, predicate, rule transitions.
//
//  <p>This is a one way link.  It emanates from a state (usually via a list of
//  transitions) and has a target state.</p>
//
//  <p>Since we never have to change the ATN transitions once we construct it,
//  we can fix these transitions as specific classes. The DFA transitions
//  on the other hand need to update the labels as it adds transitions to
//  the states. We'll use the term Edge for the DFA to distinguish them from
//  ATN transitions.</p>

var Token = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/Token.js").Token;
var Interval = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/IntervalSet.js").Interval;
var IntervalSet = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/IntervalSet.js").IntervalSet;
var Predicate = __webpack_require__(/*! ./SemanticContext */ "./node_modules/antlr4/atn/SemanticContext.js").Predicate;
var PrecedencePredicate = __webpack_require__(/*! ./SemanticContext */ "./node_modules/antlr4/atn/SemanticContext.js").PrecedencePredicate;

function Transition (target) {
    // The target of this transition.
    if (target===undefined || target===null) {
        throw "target cannot be null.";
    }
    this.target = target;
    // Are we epsilon, action, sempred?
    this.isEpsilon = false;
    this.label = null;
    return this;
}
    // constants for serialization
Transition.EPSILON = 1;
Transition.RANGE = 2;
Transition.RULE = 3;
Transition.PREDICATE = 4; // e.g., {isType(input.LT(1))}?
Transition.ATOM = 5;
Transition.ACTION = 6;
Transition.SET = 7; // ~(A|B) or ~atom, wildcard, which convert to next 2
Transition.NOT_SET = 8;
Transition.WILDCARD = 9;
Transition.PRECEDENCE = 10;

Transition.serializationNames = [
            "INVALID",
            "EPSILON",
            "RANGE",
            "RULE",
            "PREDICATE",
            "ATOM",
            "ACTION",
            "SET",
            "NOT_SET",
            "WILDCARD",
            "PRECEDENCE"
        ];

Transition.serializationTypes = {
        EpsilonTransition: Transition.EPSILON,
        RangeTransition: Transition.RANGE,
        RuleTransition: Transition.RULE,
        PredicateTransition: Transition.PREDICATE,
        AtomTransition: Transition.ATOM,
        ActionTransition: Transition.ACTION,
        SetTransition: Transition.SET,
        NotSetTransition: Transition.NOT_SET,
        WildcardTransition: Transition.WILDCARD,
        PrecedencePredicateTransition: Transition.PRECEDENCE
    };


// TODO: make all transitions sets? no, should remove set edges
function AtomTransition(target, label) {
	Transition.call(this, target);
	this.label_ = label; // The token type or character value; or, signifies special label.
    this.label = this.makeLabel();
    this.serializationType = Transition.ATOM;
    return this;
}

AtomTransition.prototype = Object.create(Transition.prototype);
AtomTransition.prototype.constructor = AtomTransition;

AtomTransition.prototype.makeLabel = function() {
	var s = new IntervalSet();
    s.addOne(this.label_);
    return s;
};

AtomTransition.prototype.matches = function( symbol, minVocabSymbol,  maxVocabSymbol) {
    return this.label_ === symbol;
};

AtomTransition.prototype.toString = function() {
	return this.label_;
};

function RuleTransition(ruleStart, ruleIndex, precedence, followState) {
	Transition.call(this, ruleStart);
    this.ruleIndex = ruleIndex; // ptr to the rule definition object for this rule ref
    this.precedence = precedence;
    this.followState = followState; // what node to begin computations following ref to rule
    this.serializationType = Transition.RULE;
    this.isEpsilon = true;
    return this;
}

RuleTransition.prototype = Object.create(Transition.prototype);
RuleTransition.prototype.constructor = RuleTransition;

RuleTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};


function EpsilonTransition(target, outermostPrecedenceReturn) {
	Transition.call(this, target);
    this.serializationType = Transition.EPSILON;
    this.isEpsilon = true;
    this.outermostPrecedenceReturn = outermostPrecedenceReturn;
    return this;
}

EpsilonTransition.prototype = Object.create(Transition.prototype);
EpsilonTransition.prototype.constructor = EpsilonTransition;

EpsilonTransition.prototype.matches = function( symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

EpsilonTransition.prototype.toString = function() {
	return "epsilon";
};

function RangeTransition(target, start, stop) {
	Transition.call(this, target);
	this.serializationType = Transition.RANGE;
    this.start = start;
    this.stop = stop;
    this.label = this.makeLabel();
    return this;
}

RangeTransition.prototype = Object.create(Transition.prototype);
RangeTransition.prototype.constructor = RangeTransition;

RangeTransition.prototype.makeLabel = function() {
    var s = new IntervalSet();
    s.addRange(this.start, this.stop);
    return s;
};

RangeTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= this.start && symbol <= this.stop;
};

RangeTransition.prototype.toString = function() {
	return "'" + String.fromCharCode(this.start) + "'..'" + String.fromCharCode(this.stop) + "'";
};

function AbstractPredicateTransition(target) {
	Transition.call(this, target);
	return this;
}

AbstractPredicateTransition.prototype = Object.create(Transition.prototype);
AbstractPredicateTransition.prototype.constructor = AbstractPredicateTransition;

function PredicateTransition(target, ruleIndex, predIndex, isCtxDependent) {
	AbstractPredicateTransition.call(this, target);
    this.serializationType = Transition.PREDICATE;
    this.ruleIndex = ruleIndex;
    this.predIndex = predIndex;
    this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred
    this.isEpsilon = true;
    return this;
}

PredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);
PredicateTransition.prototype.constructor = PredicateTransition;

PredicateTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

PredicateTransition.prototype.getPredicate = function() {
	return new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);
};

PredicateTransition.prototype.toString = function() {
	return "pred_" + this.ruleIndex + ":" + this.predIndex;
};

function ActionTransition(target, ruleIndex, actionIndex, isCtxDependent) {
	Transition.call(this, target);
    this.serializationType = Transition.ACTION;
    this.ruleIndex = ruleIndex;
    this.actionIndex = actionIndex===undefined ? -1 : actionIndex;
    this.isCtxDependent = isCtxDependent===undefined ? false : isCtxDependent; // e.g., $i ref in pred
    this.isEpsilon = true;
    return this;
}

ActionTransition.prototype = Object.create(Transition.prototype);
ActionTransition.prototype.constructor = ActionTransition;


ActionTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

ActionTransition.prototype.toString = function() {
	return "action_" + this.ruleIndex + ":" + this.actionIndex;
};


// A transition containing a set of values.
function SetTransition(target, set) {
	Transition.call(this, target);
	this.serializationType = Transition.SET;
    if (set !==undefined && set !==null) {
        this.label = set;
    } else {
        this.label = new IntervalSet();
        this.label.addOne(Token.INVALID_TYPE);
    }
    return this;
}

SetTransition.prototype = Object.create(Transition.prototype);
SetTransition.prototype.constructor = SetTransition;

SetTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return this.label.contains(symbol);
};


SetTransition.prototype.toString = function() {
	return this.label.toString();
};

function NotSetTransition(target, set) {
	SetTransition.call(this, target, set);
	this.serializationType = Transition.NOT_SET;
	return this;
}

NotSetTransition.prototype = Object.create(SetTransition.prototype);
NotSetTransition.prototype.constructor = NotSetTransition;

NotSetTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= minVocabSymbol && symbol <= maxVocabSymbol &&
			!SetTransition.prototype.matches.call(this, symbol, minVocabSymbol, maxVocabSymbol);
};

NotSetTransition.prototype.toString = function() {
	return '~' + SetTransition.prototype.toString.call(this);
};

function WildcardTransition(target) {
	Transition.call(this, target);
	this.serializationType = Transition.WILDCARD;
	return this;
}

WildcardTransition.prototype = Object.create(Transition.prototype);
WildcardTransition.prototype.constructor = WildcardTransition;


WildcardTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;
};

WildcardTransition.prototype.toString = function() {
	return ".";
};

function PrecedencePredicateTransition(target, precedence) {
	AbstractPredicateTransition.call(this, target);
    this.serializationType = Transition.PRECEDENCE;
    this.precedence = precedence;
    this.isEpsilon = true;
    return this;
}

PrecedencePredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);
PrecedencePredicateTransition.prototype.constructor = PrecedencePredicateTransition;

PrecedencePredicateTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

PrecedencePredicateTransition.prototype.getPredicate = function() {
	return new PrecedencePredicate(this.precedence);
};

PrecedencePredicateTransition.prototype.toString = function() {
	return this.precedence + " >= _p";
};

exports.Transition = Transition;
exports.AtomTransition = AtomTransition;
exports.SetTransition = SetTransition;
exports.NotSetTransition = NotSetTransition;
exports.RuleTransition = RuleTransition;
exports.ActionTransition = ActionTransition;
exports.EpsilonTransition = EpsilonTransition;
exports.RangeTransition = RangeTransition;
exports.WildcardTransition = WildcardTransition;
exports.PredicateTransition = PredicateTransition;
exports.PrecedencePredicateTransition = PrecedencePredicateTransition;
exports.AbstractPredicateTransition = AbstractPredicateTransition;

/***/ }),

/***/ "./node_modules/antlr4/atn/index.js":
/*!******************************************!*\
  !*** ./node_modules/antlr4/atn/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.ATN = __webpack_require__(/*! ./ATN */ "./node_modules/antlr4/atn/ATN.js").ATN;
exports.ATNDeserializer = __webpack_require__(/*! ./ATNDeserializer */ "./node_modules/antlr4/atn/ATNDeserializer.js").ATNDeserializer;
exports.LexerATNSimulator = __webpack_require__(/*! ./LexerATNSimulator */ "./node_modules/antlr4/atn/LexerATNSimulator.js").LexerATNSimulator;
exports.ParserATNSimulator = __webpack_require__(/*! ./ParserATNSimulator */ "./node_modules/antlr4/atn/ParserATNSimulator.js").ParserATNSimulator;
exports.PredictionMode = __webpack_require__(/*! ./PredictionMode */ "./node_modules/antlr4/atn/PredictionMode.js").PredictionMode;


/***/ }),

/***/ "./node_modules/antlr4/dfa/DFA.js":
/*!****************************************!*\
  !*** ./node_modules/antlr4/dfa/DFA.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Set = __webpack_require__(/*! ../Utils */ "./node_modules/antlr4/Utils.js").Set;
var DFAState = __webpack_require__(/*! ./DFAState */ "./node_modules/antlr4/dfa/DFAState.js").DFAState;
var StarLoopEntryState = __webpack_require__(/*! ../atn/ATNState */ "./node_modules/antlr4/atn/ATNState.js").StarLoopEntryState;
var ATNConfigSet = __webpack_require__(/*! ./../atn/ATNConfigSet */ "./node_modules/antlr4/atn/ATNConfigSet.js").ATNConfigSet;
var DFASerializer = __webpack_require__(/*! ./DFASerializer */ "./node_modules/antlr4/dfa/DFASerializer.js").DFASerializer;
var LexerDFASerializer = __webpack_require__(/*! ./DFASerializer */ "./node_modules/antlr4/dfa/DFASerializer.js").LexerDFASerializer;



function DFA(atnStartState, decision) {
	if (decision === undefined) {
		decision = 0;
	}
	// From which ATN state did we create this DFA?
	this.atnStartState = atnStartState;
	this.decision = decision;
	// A set of all DFA states. Use {@link Map} so we can get old state back
	// ({@link Set} only allows you to see if it's there).
	this._states = new Set();
	this.s0 = null;
	// {@code true} if this DFA is for a precedence decision; otherwise,
	// {@code false}. This is the backing field for {@link //isPrecedenceDfa},
	// {@link //setPrecedenceDfa}.
	this.precedenceDfa = false;
    if (atnStartState instanceof StarLoopEntryState)
    {
        if (atnStartState.isPrecedenceDecision) {
            this.precedenceDfa = true;
            var precedenceState = new DFAState(null, new ATNConfigSet());
            precedenceState.edges = [];
            precedenceState.isAcceptState = false;
            precedenceState.requiresFullContext = false;
            this.s0 = precedenceState;
        }
    }
	return this;
}

// Get the start state for a specific precedence value.
//
// @param precedence The current precedence.
// @return The start state corresponding to the specified precedence, or
// {@code null} if no start state exists for the specified precedence.
//
// @throws IllegalStateException if this is not a precedence DFA.
// @see //isPrecedenceDfa()

DFA.prototype.getPrecedenceStartState = function(precedence) {
	if (!(this.precedenceDfa)) {
		throw ("Only precedence DFAs may contain a precedence start state.");
	}
	// s0.edges is never null for a precedence DFA
	if (precedence < 0 || precedence >= this.s0.edges.length) {
		return null;
	}
	return this.s0.edges[precedence] || null;
};

// Set the start state for a specific precedence value.
//
// @param precedence The current precedence.
// @param startState The start state corresponding to the specified
// precedence.
//
// @throws IllegalStateException if this is not a precedence DFA.
// @see //isPrecedenceDfa()
//
DFA.prototype.setPrecedenceStartState = function(precedence, startState) {
	if (!(this.precedenceDfa)) {
		throw ("Only precedence DFAs may contain a precedence start state.");
	}
	if (precedence < 0) {
		return;
	}

	// synchronization on s0 here is ok. when the DFA is turned into a
	// precedence DFA, s0 will be initialized once and not updated again
	// s0.edges is never null for a precedence DFA
	this.s0.edges[precedence] = startState;
};

//
// Sets whether this is a precedence DFA. If the specified value differs
// from the current DFA configuration, the following actions are taken;
// otherwise no changes are made to the current DFA.
//
// <ul>
// <li>The {@link //states} map is cleared</li>
// <li>If {@code precedenceDfa} is {@code false}, the initial state
// {@link //s0} is set to {@code null}; otherwise, it is initialized to a new
// {@link DFAState} with an empty outgoing {@link DFAState//edges} array to
// store the start states for individual precedence values.</li>
// <li>The {@link //precedenceDfa} field is updated</li>
// </ul>
//
// @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,
// {@code false}

DFA.prototype.setPrecedenceDfa = function(precedenceDfa) {
	if (this.precedenceDfa!==precedenceDfa) {
		this._states = new DFAStatesSet();
		if (precedenceDfa) {
			var precedenceState = new DFAState(null, new ATNConfigSet());
			precedenceState.edges = [];
			precedenceState.isAcceptState = false;
			precedenceState.requiresFullContext = false;
			this.s0 = precedenceState;
		} else {
			this.s0 = null;
		}
		this.precedenceDfa = precedenceDfa;
	}
};

Object.defineProperty(DFA.prototype, "states", {
	get : function() {
		return this._states;
	}
});

// Return a list of all states in this DFA, ordered by state number.
DFA.prototype.sortedStates = function() {
	var list = this._states.values();
	return list.sort(function(a, b) {
		return a.stateNumber - b.stateNumber;
	});
};

DFA.prototype.toString = function(literalNames, symbolicNames) {
	literalNames = literalNames || null;
	symbolicNames = symbolicNames || null;
	if (this.s0 === null) {
		return "";
	}
	var serializer = new DFASerializer(this, literalNames, symbolicNames);
	return serializer.toString();
};

DFA.prototype.toLexerString = function() {
	if (this.s0 === null) {
		return "";
	}
	var serializer = new LexerDFASerializer(this);
	return serializer.toString();
};

exports.DFA = DFA;


/***/ }),

/***/ "./node_modules/antlr4/dfa/DFASerializer.js":
/*!**************************************************!*\
  !*** ./node_modules/antlr4/dfa/DFASerializer.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// A DFA walker that knows how to dump them to serialized strings.#/


function DFASerializer(dfa, literalNames, symbolicNames) {
	this.dfa = dfa;
	this.literalNames = literalNames || [];
	this.symbolicNames = symbolicNames || [];
	return this;
}

DFASerializer.prototype.toString = function() {
   if(this.dfa.s0 === null) {
       return null;
   }
   var buf = "";
   var states = this.dfa.sortedStates();
   for(var i=0;i<states.length;i++) {
       var s = states[i];
       if(s.edges!==null) {
            var n = s.edges.length;
            for(var j=0;j<n;j++) {
                var t = s.edges[j] || null;
                if(t!==null && t.stateNumber !== 0x7FFFFFFF) {
                    buf = buf.concat(this.getStateString(s));
                    buf = buf.concat("-");
                    buf = buf.concat(this.getEdgeLabel(j));
                    buf = buf.concat("->");
                    buf = buf.concat(this.getStateString(t));
                    buf = buf.concat('\n');
                }
            }
       }
   }
   return buf.length===0 ? null : buf;
};

DFASerializer.prototype.getEdgeLabel = function(i) {
    if (i===0) {
        return "EOF";
    } else if(this.literalNames !==null || this.symbolicNames!==null) {
        return this.literalNames[i-1] || this.symbolicNames[i-1];
    } else {
        return String.fromCharCode(i-1);
    }
};

DFASerializer.prototype.getStateString = function(s) {
    var baseStateStr = ( s.isAcceptState ? ":" : "") + "s" + s.stateNumber + ( s.requiresFullContext ? "^" : "");
    if(s.isAcceptState) {
        if (s.predicates !== null) {
            return baseStateStr + "=>" + s.predicates.toString();
        } else {
            return baseStateStr + "=>" + s.prediction.toString();
        }
    } else {
        return baseStateStr;
    }
};

function LexerDFASerializer(dfa) {
	DFASerializer.call(this, dfa, null);
	return this;
}

LexerDFASerializer.prototype = Object.create(DFASerializer.prototype);
LexerDFASerializer.prototype.constructor = LexerDFASerializer;

LexerDFASerializer.prototype.getEdgeLabel = function(i) {
	return "'" + String.fromCharCode(i) + "'";
};

exports.DFASerializer = DFASerializer;
exports.LexerDFASerializer = LexerDFASerializer;



/***/ }),

/***/ "./node_modules/antlr4/dfa/DFAState.js":
/*!*********************************************!*\
  !*** ./node_modules/antlr4/dfa/DFAState.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var ATNConfigSet = __webpack_require__(/*! ./../atn/ATNConfigSet */ "./node_modules/antlr4/atn/ATNConfigSet.js").ATNConfigSet;
var Utils = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js");
var Hash = Utils.Hash;
var Set = Utils.Set;

// Map a predicate to a predicted alternative.///

function PredPrediction(pred, alt) {
	this.alt = alt;
	this.pred = pred;
	return this;
}

PredPrediction.prototype.toString = function() {
	return "(" + this.pred + ", " + this.alt + ")";
};

// A DFA state represents a set of possible ATN configurations.
// As Aho, Sethi, Ullman p. 117 says "The DFA uses its state
// to keep track of all possible states the ATN can be in after
// reading each input symbol. That is to say, after reading
// input a1a2..an, the DFA is in a state that represents the
// subset T of the states of the ATN that are reachable from the
// ATN's start state along some path labeled a1a2..an."
// In conventional NFA&rarr;DFA conversion, therefore, the subset T
// would be a bitset representing the set of states the
// ATN could be in. We need to track the alt predicted by each
// state as well, however. More importantly, we need to maintain
// a stack of states, tracking the closure operations as they
// jump from rule to rule, emulating rule invocations (method calls).
// I have to add a stack to simulate the proper lookahead sequences for
// the underlying LL grammar from which the ATN was derived.
//
// <p>I use a set of ATNConfig objects not simple states. An ATNConfig
// is both a state (ala normal conversion) and a RuleContext describing
// the chain of rules (if any) followed to arrive at that state.</p>
//
// <p>A DFA state may have multiple references to a particular state,
// but with different ATN contexts (with same or different alts)
// meaning that state was reached via a different set of rule invocations.</p>
// /

function DFAState(stateNumber, configs) {
	if (stateNumber === null) {
		stateNumber = -1;
	}
	if (configs === null) {
		configs = new ATNConfigSet();
	}
	this.stateNumber = stateNumber;
	this.configs = configs;
	// {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)
	// {@link Token//EOF} maps to {@code edges[0]}.
	this.edges = null;
	this.isAcceptState = false;
	// if accept state, what ttype do we match or alt do we predict?
	// This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link
	// //predicates}{@code !=null} or
	// {@link //requiresFullContext}.
	this.prediction = 0;
	this.lexerActionExecutor = null;
	// Indicates that this state was created during SLL prediction that
	// discovered a conflict between the configurations in the state. Future
	// {@link ParserATNSimulator//execATN} invocations immediately jumped doing
	// full context prediction if this field is true.
	this.requiresFullContext = false;
	// During SLL parsing, this is a list of predicates associated with the
	// ATN configurations of the DFA state. When we have predicates,
	// {@link //requiresFullContext} is {@code false} since full context
	// prediction evaluates predicates
	// on-the-fly. If this is not null, then {@link //prediction} is
	// {@link ATN//INVALID_ALT_NUMBER}.
	//
	// <p>We only use these for non-{@link //requiresFullContext} but
	// conflicting states. That
	// means we know from the context (it's $ or we don't dip into outer
	// context) that it's an ambiguity not a conflict.</p>
	//
	// <p>This list is computed by {@link
	// ParserATNSimulator//predicateDFAState}.</p>
	this.predicates = null;
	return this;
}

// Get the set of all alts mentioned by all ATN configurations in this
// DFA state.
DFAState.prototype.getAltSet = function() {
	var alts = new Set();
	if (this.configs !== null) {
		for (var i = 0; i < this.configs.length; i++) {
			var c = this.configs[i];
			alts.add(c.alt);
		}
	}
	if (alts.length === 0) {
		return null;
	} else {
		return alts;
	}
};

// Two {@link DFAState} instances are equal if their ATN configuration sets
// are the same. This method is used to see if a state already exists.
//
// <p>Because the number of alternatives and number of ATN configurations are
// finite, there is a finite number of DFA states that can be processed.
// This is necessary to show that the algorithm terminates.</p>
//
// <p>Cannot test the DFA state numbers here because in
// {@link ParserATNSimulator//addDFAState} we need to know if any other state
// exists that has this exact set of ATN configurations. The
// {@link //stateNumber} is irrelevant.</p>
DFAState.prototype.equals = function(other) {
	// compare set of ATN configurations in this set with other
	return this === other ||
			(other instanceof DFAState &&
				this.configs.equals(other.configs));
};

DFAState.prototype.toString = function() {
	var s = "" + this.stateNumber + ":" + this.configs;
	if(this.isAcceptState) {
        s = s + "=>";
        if (this.predicates !== null)
            s = s + this.predicates;
        else
            s = s + this.prediction;
    }
	return s;
};

DFAState.prototype.hashCode = function() {
	var hash = new Hash();
	hash.update(this.configs);
	if(this.isAcceptState) {
        if (this.predicates !== null)
            hash.update(this.predicates);
        else
            hash.update(this.prediction);
    }
    return hash.finish();
};

exports.DFAState = DFAState;
exports.PredPrediction = PredPrediction;


/***/ }),

/***/ "./node_modules/antlr4/dfa/index.js":
/*!******************************************!*\
  !*** ./node_modules/antlr4/dfa/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.DFA = __webpack_require__(/*! ./DFA */ "./node_modules/antlr4/dfa/DFA.js").DFA;
exports.DFASerializer = __webpack_require__(/*! ./DFASerializer */ "./node_modules/antlr4/dfa/DFASerializer.js").DFASerializer;
exports.LexerDFASerializer = __webpack_require__(/*! ./DFASerializer */ "./node_modules/antlr4/dfa/DFASerializer.js").LexerDFASerializer;
exports.PredPrediction = __webpack_require__(/*! ./DFAState */ "./node_modules/antlr4/dfa/DFAState.js").PredPrediction;


/***/ }),

/***/ "./node_modules/antlr4/error/DiagnosticErrorListener.js":
/*!**************************************************************!*\
  !*** ./node_modules/antlr4/error/DiagnosticErrorListener.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// This implementation of {@link ANTLRErrorListener} can be used to identify
// certain potential correctness and performance problems in grammars. "Reports"
// are made by calling {@link Parser//notifyErrorListeners} with the appropriate
// message.
//
// <ul>
// <li><b>Ambiguities</b>: These are cases where more than one path through the
// grammar can match the input.</li>
// <li><b>Weak context sensitivity</b>: These are cases where full-context
// prediction resolved an SLL conflict to a unique alternative which equaled the
// minimum alternative of the SLL conflict.</li>
// <li><b>Strong (forced) context sensitivity</b>: These are cases where the
// full-context prediction resolved an SLL conflict to a unique alternative,
// <em>and</em> the minimum alternative of the SLL conflict was found to not be
// a truly viable alternative. Two-stage parsing cannot be used for inputs where
// this situation occurs.</li>
// </ul>

var BitSet = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js").BitSet;
var ErrorListener = __webpack_require__(/*! ./ErrorListener */ "./node_modules/antlr4/error/ErrorListener.js").ErrorListener;
var Interval = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/IntervalSet.js").Interval;

function DiagnosticErrorListener(exactOnly) {
	ErrorListener.call(this);
	exactOnly = exactOnly || true;
	// whether all ambiguities or only exact ambiguities are reported.
	this.exactOnly = exactOnly;
	return this;
}

DiagnosticErrorListener.prototype = Object.create(ErrorListener.prototype);
DiagnosticErrorListener.prototype.constructor = DiagnosticErrorListener;

DiagnosticErrorListener.prototype.reportAmbiguity = function(recognizer, dfa,
		startIndex, stopIndex, exact, ambigAlts, configs) {
	if (this.exactOnly && !exact) {
		return;
	}
	var msg = "reportAmbiguity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			": ambigAlts=" +
			this.getConflictingAlts(ambigAlts, configs) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.reportAttemptingFullContext = function(
		recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
	var msg = "reportAttemptingFullContext d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.reportContextSensitivity = function(
		recognizer, dfa, startIndex, stopIndex, prediction, configs) {
	var msg = "reportContextSensitivity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.getDecisionDescription = function(recognizer, dfa) {
	var decision = dfa.decision;
	var ruleIndex = dfa.atnStartState.ruleIndex;

	var ruleNames = recognizer.ruleNames;
	if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {
		return "" + decision;
	}
	var ruleName = ruleNames[ruleIndex] || null;
	if (ruleName === null || ruleName.length === 0) {
		return "" + decision;
	}
	return "" + decision + " (" + ruleName + ")";
};

//
// Computes the set of conflicting or ambiguous alternatives from a
// configuration set, if that information was not already provided by the
// parser.
//
// @param reportedAlts The set of conflicting or ambiguous alternatives, as
// reported by the parser.
// @param configs The conflicting or ambiguous configuration set.
// @return Returns {@code reportedAlts} if it is not {@code null}, otherwise
// returns the set of alternatives represented in {@code configs}.
//
DiagnosticErrorListener.prototype.getConflictingAlts = function(reportedAlts, configs) {
	if (reportedAlts !== null) {
		return reportedAlts;
	}
	var result = new BitSet();
	for (var i = 0; i < configs.items.length; i++) {
		result.add(configs.items[i].alt);
	}
	return "{" + result.values().join(", ") + "}";
};

exports.DiagnosticErrorListener = DiagnosticErrorListener;

/***/ }),

/***/ "./node_modules/antlr4/error/ErrorListener.js":
/*!****************************************************!*\
  !*** ./node_modules/antlr4/error/ErrorListener.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// Provides an empty default implementation of {@link ANTLRErrorListener}. The
// default implementation of each method does nothing, but can be overridden as
// necessary.

function ErrorListener() {
	return this;
}

ErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
};

ErrorListener.prototype.reportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
};

ErrorListener.prototype.reportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
};

ErrorListener.prototype.reportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
};

function ConsoleErrorListener() {
	ErrorListener.call(this);
	return this;
}

ConsoleErrorListener.prototype = Object.create(ErrorListener.prototype);
ConsoleErrorListener.prototype.constructor = ConsoleErrorListener;

//
// Provides a default instance of {@link ConsoleErrorListener}.
//
ConsoleErrorListener.INSTANCE = new ConsoleErrorListener();

//
// {@inheritDoc}
//
// <p>
// This implementation prints messages to {@link System//err} containing the
// values of {@code line}, {@code charPositionInLine}, and {@code msg} using
// the following format.</p>
//
// <pre>
// line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>
// </pre>
//
ConsoleErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
    console.error("line " + line + ":" + column + " " + msg);
};

function ProxyErrorListener(delegates) {
	ErrorListener.call(this);
    if (delegates===null) {
        throw "delegates";
    }
    this.delegates = delegates;
	return this;
}

ProxyErrorListener.prototype = Object.create(ErrorListener.prototype);
ProxyErrorListener.prototype.constructor = ProxyErrorListener;

ProxyErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
    this.delegates.map(function(d) { d.syntaxError(recognizer, offendingSymbol, line, column, msg, e); });
};

ProxyErrorListener.prototype.reportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
    this.delegates.map(function(d) { d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs); });
};

ProxyErrorListener.prototype.reportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
	this.delegates.map(function(d) { d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs); });
};

ProxyErrorListener.prototype.reportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
	this.delegates.map(function(d) { d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs); });
};

exports.ErrorListener = ErrorListener;
exports.ConsoleErrorListener = ConsoleErrorListener;
exports.ProxyErrorListener = ProxyErrorListener;



/***/ }),

/***/ "./node_modules/antlr4/error/ErrorStrategy.js":
/*!****************************************************!*\
  !*** ./node_modules/antlr4/error/ErrorStrategy.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/Token.js").Token;
var Errors = __webpack_require__(/*! ./Errors */ "./node_modules/antlr4/error/Errors.js");
var NoViableAltException = Errors.NoViableAltException;
var InputMismatchException = Errors.InputMismatchException;
var FailedPredicateException = Errors.FailedPredicateException;
var ParseCancellationException = Errors.ParseCancellationException;
var ATNState = __webpack_require__(/*! ./../atn/ATNState */ "./node_modules/antlr4/atn/ATNState.js").ATNState;
var Interval = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/IntervalSet.js").Interval;
var IntervalSet = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/IntervalSet.js").IntervalSet;

function ErrorStrategy() {

}

ErrorStrategy.prototype.reset = function(recognizer){
};

ErrorStrategy.prototype.recoverInline = function(recognizer){
};

ErrorStrategy.prototype.recover = function(recognizer, e){
};

ErrorStrategy.prototype.sync = function(recognizer){
};

ErrorStrategy.prototype.inErrorRecoveryMode = function(recognizer){
};

ErrorStrategy.prototype.reportError = function(recognizer){
};



// This is the default implementation of {@link ANTLRErrorStrategy} used for
// error reporting and recovery in ANTLR parsers.
//
function DefaultErrorStrategy() {
	ErrorStrategy.call(this);
    // Indicates whether the error strategy is currently "recovering from an
    // error". This is used to suppress reporting multiple error messages while
    // attempting to recover from a detected syntax error.
    //
    // @see //inErrorRecoveryMode
    //
    this.errorRecoveryMode = false;

    // The index into the input stream where the last error occurred.
    // This is used to prevent infinite loops where an error is found
    // but no token is consumed during recovery...another error is found,
    // ad nauseum. This is a failsafe mechanism to guarantee that at least
    // one token/tree node is consumed for two errors.
    //
    this.lastErrorIndex = -1;
    this.lastErrorStates = null;
    return this;
}

DefaultErrorStrategy.prototype = Object.create(ErrorStrategy.prototype);
DefaultErrorStrategy.prototype.constructor = DefaultErrorStrategy;

// <p>The default implementation simply calls {@link //endErrorCondition} to
// ensure that the handler is not in error recovery mode.</p>
DefaultErrorStrategy.prototype.reset = function(recognizer) {
    this.endErrorCondition(recognizer);
};

//
// This method is called to enter error recovery mode when a recognition
// exception is reported.
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.beginErrorCondition = function(recognizer) {
    this.errorRecoveryMode = true;
};

DefaultErrorStrategy.prototype.inErrorRecoveryMode = function(recognizer) {
    return this.errorRecoveryMode;
};

//
// This method is called to leave error recovery mode after recovering from
// a recognition exception.
//
// @param recognizer
//
DefaultErrorStrategy.prototype.endErrorCondition = function(recognizer) {
    this.errorRecoveryMode = false;
    this.lastErrorStates = null;
    this.lastErrorIndex = -1;
};

//
// {@inheritDoc}
//
// <p>The default implementation simply calls {@link //endErrorCondition}.</p>
//
DefaultErrorStrategy.prototype.reportMatch = function(recognizer) {
    this.endErrorCondition(recognizer);
};

//
// {@inheritDoc}
//
// <p>The default implementation returns immediately if the handler is already
// in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}
// and dispatches the reporting task based on the runtime type of {@code e}
// according to the following table.</p>
//
// <ul>
// <li>{@link NoViableAltException}: Dispatches the call to
// {@link //reportNoViableAlternative}</li>
// <li>{@link InputMismatchException}: Dispatches the call to
// {@link //reportInputMismatch}</li>
// <li>{@link FailedPredicateException}: Dispatches the call to
// {@link //reportFailedPredicate}</li>
// <li>All other types: calls {@link Parser//notifyErrorListeners} to report
// the exception</li>
// </ul>
//
DefaultErrorStrategy.prototype.reportError = function(recognizer, e) {
   // if we've already reported an error and have not matched a token
   // yet successfully, don't report any errors.
    if(this.inErrorRecoveryMode(recognizer)) {
        return; // don't report spurious errors
    }
    this.beginErrorCondition(recognizer);
    if ( e instanceof NoViableAltException ) {
        this.reportNoViableAlternative(recognizer, e);
    } else if ( e instanceof InputMismatchException ) {
        this.reportInputMismatch(recognizer, e);
    } else if ( e instanceof FailedPredicateException ) {
        this.reportFailedPredicate(recognizer, e);
    } else {
        console.log("unknown recognition error type: " + e.constructor.name);
        console.log(e.stack);
        recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);
    }
};
//
// {@inheritDoc}
//
// <p>The default implementation resynchronizes the parser by consuming tokens
// until we find one in the resynchronization set--loosely the set of tokens
// that can follow the current rule.</p>
//
DefaultErrorStrategy.prototype.recover = function(recognizer, e) {
    if (this.lastErrorIndex===recognizer.getInputStream().index &&
        this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state)>=0) {
		// uh oh, another error at same token index and previously-visited
		// state in ATN; must be a case where LT(1) is in the recovery
		// token set so nothing got consumed. Consume a single token
		// at least to prevent an infinite loop; this is a failsafe.
		recognizer.consume();
    }
    this.lastErrorIndex = recognizer._input.index;
    if (this.lastErrorStates === null) {
        this.lastErrorStates = [];
    }
    this.lastErrorStates.push(recognizer.state);
    var followSet = this.getErrorRecoverySet(recognizer);
    this.consumeUntil(recognizer, followSet);
};

// The default implementation of {@link ANTLRErrorStrategy//sync} makes sure
// that the current lookahead symbol is consistent with what were expecting
// at this point in the ATN. You can call this anytime but ANTLR only
// generates code to check before subrules/loops and each iteration.
//
// <p>Implements Jim Idle's magic sync mechanism in closures and optional
// subrules. E.g.,</p>
//
// <pre>
// a : sync ( stuff sync )* ;
// sync : {consume to what can follow sync} ;
// </pre>
//
// At the start of a sub rule upon error, {@link //sync} performs single
// token deletion, if possible. If it can't do that, it bails on the current
// rule and uses the default error recovery, which consumes until the
// resynchronization set of the current rule.
//
// <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block
// with an empty alternative), then the expected set includes what follows
// the subrule.</p>
//
// <p>During loop iteration, it consumes until it sees a token that can start a
// sub rule or what follows loop. Yes, that is pretty aggressive. We opt to
// stay in the loop as long as possible.</p>
//
// <p><strong>ORIGINS</strong></p>
//
// <p>Previous versions of ANTLR did a poor job of their recovery within loops.
// A single mismatch token or missing token would force the parser to bail
// out of the entire rules surrounding the loop. So, for rule</p>
//
// <pre>
// classDef : 'class' ID '{' member* '}'
// </pre>
//
// input with an extra token between members would force the parser to
// consume until it found the next class definition rather than the next
// member definition of the current class.
//
// <p>This functionality cost a little bit of effort because the parser has to
// compare token set at the start of the loop and at each iteration. If for
// some reason speed is suffering for you, you can turn off this
// functionality by simply overriding this method as a blank { }.</p>
//
DefaultErrorStrategy.prototype.sync = function(recognizer) {
    // If already recovering, don't try to sync
    if (this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    var s = recognizer._interp.atn.states[recognizer.state];
    var la = recognizer.getTokenStream().LA(1);
    // try cheaper subset first; might get lucky. seems to shave a wee bit off
    var nextTokens = recognizer.atn.nextTokens(s);
    if (nextTokens.contains(Token.EPSILON) || nextTokens.contains(la)) {
        return;
    }
    switch (s.stateType) {
    case ATNState.BLOCK_START:
    case ATNState.STAR_BLOCK_START:
    case ATNState.PLUS_BLOCK_START:
    case ATNState.STAR_LOOP_ENTRY:
       // report error and recover if possible
        if( this.singleTokenDeletion(recognizer) !== null) {
            return;
        } else {
            throw new InputMismatchException(recognizer);
        }
        break;
    case ATNState.PLUS_LOOP_BACK:
    case ATNState.STAR_LOOP_BACK:
        this.reportUnwantedToken(recognizer);
        var expecting = new IntervalSet();
        expecting.addSet(recognizer.getExpectedTokens());
        var whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer));
        this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);
        break;
    default:
        // do nothing if we can't identify the exact kind of ATN state
    }
};

// This is called by {@link //reportError} when the exception is a
// {@link NoViableAltException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportNoViableAlternative = function(recognizer, e) {
    var tokens = recognizer.getTokenStream();
    var input;
    if(tokens !== null) {
        if (e.startToken.type===Token.EOF) {
            input = "<EOF>";
        } else {
            input = tokens.getText(new Interval(e.startToken.tokenIndex, e.offendingToken.tokenIndex));
        }
    } else {
        input = "<unknown input>";
    }
    var msg = "no viable alternative at input " + this.escapeWSAndQuote(input);
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

//
// This is called by {@link //reportError} when the exception is an
// {@link InputMismatchException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportInputMismatch = function(recognizer, e) {
    var msg = "mismatched input " + this.getTokenErrorDisplay(e.offendingToken) +
          " expecting " + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames);
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

//
// This is called by {@link //reportError} when the exception is a
// {@link FailedPredicateException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportFailedPredicate = function(recognizer, e) {
    var ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex];
    var msg = "rule " + ruleName + " " + e.message;
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

// This method is called to report a syntax error which requires the removal
// of a token from the input stream. At the time this method is called, the
// erroneous symbol is current {@code LT(1)} symbol and has not yet been
// removed from the input stream. When this method returns,
// {@code recognizer} is in error recovery mode.
//
// <p>This method is called when {@link //singleTokenDeletion} identifies
// single-token deletion as a viable recovery strategy for a mismatched
// input error.</p>
//
// <p>The default implementation simply returns if the handler is already in
// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
// enter error recovery mode, followed by calling
// {@link Parser//notifyErrorListeners}.</p>
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.reportUnwantedToken = function(recognizer) {
    if (this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    this.beginErrorCondition(recognizer);
    var t = recognizer.getCurrentToken();
    var tokenName = this.getTokenErrorDisplay(t);
    var expecting = this.getExpectedTokens(recognizer);
    var msg = "extraneous input " + tokenName + " expecting " +
        expecting.toString(recognizer.literalNames, recognizer.symbolicNames);
    recognizer.notifyErrorListeners(msg, t, null);
};
// This method is called to report a syntax error which requires the
// insertion of a missing token into the input stream. At the time this
// method is called, the missing token has not yet been inserted. When this
// method returns, {@code recognizer} is in error recovery mode.
//
// <p>This method is called when {@link //singleTokenInsertion} identifies
// single-token insertion as a viable recovery strategy for a mismatched
// input error.</p>
//
// <p>The default implementation simply returns if the handler is already in
// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
// enter error recovery mode, followed by calling
// {@link Parser//notifyErrorListeners}.</p>
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.reportMissingToken = function(recognizer) {
    if ( this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    this.beginErrorCondition(recognizer);
    var t = recognizer.getCurrentToken();
    var expecting = this.getExpectedTokens(recognizer);
    var msg = "missing " + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) +
          " at " + this.getTokenErrorDisplay(t);
    recognizer.notifyErrorListeners(msg, t, null);
};

// <p>The default implementation attempts to recover from the mismatched input
// by using single token insertion and deletion as described below. If the
// recovery attempt fails, this method throws an
// {@link InputMismatchException}.</p>
//
// <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>
//
// <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the
// right token, however, then assume {@code LA(1)} is some extra spurious
// token and delete it. Then consume and return the next token (which was
// the {@code LA(2)} token) as the successful result of the match operation.</p>
//
// <p>This recovery strategy is implemented by {@link
// //singleTokenDeletion}.</p>
//
// <p><strong>MISSING TOKEN</strong> (single token insertion)</p>
//
// <p>If current token (at {@code LA(1)}) is consistent with what could come
// after the expected {@code LA(1)} token, then assume the token is missing
// and use the parser's {@link TokenFactory} to create it on the fly. The
// "insertion" is performed by returning the created token as the successful
// result of the match operation.</p>
//
// <p>This recovery strategy is implemented by {@link
// //singleTokenInsertion}.</p>
//
// <p><strong>EXAMPLE</strong></p>
//
// <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When
// the parser returns from the nested call to {@code expr}, it will have
// call chain:</p>
//
// <pre>
// stat &rarr; expr &rarr; atom
// </pre>
//
// and it will be trying to match the {@code ')'} at this point in the
// derivation:
//
// <pre>
// =&gt; ID '=' '(' INT ')' ('+' atom)* ';'
// ^
// </pre>
//
// The attempt to match {@code ')'} will fail when it sees {@code ';'} and
// call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}
// is in the set of tokens that can follow the {@code ')'} token reference
// in rule {@code atom}. It can assume that you forgot the {@code ')'}.
//
DefaultErrorStrategy.prototype.recoverInline = function(recognizer) {
    // SINGLE TOKEN DELETION
    var matchedSymbol = this.singleTokenDeletion(recognizer);
    if (matchedSymbol !== null) {
        // we have deleted the extra token.
        // now, move past ttype token as if all were ok
        recognizer.consume();
        return matchedSymbol;
    }
    // SINGLE TOKEN INSERTION
    if (this.singleTokenInsertion(recognizer)) {
        return this.getMissingSymbol(recognizer);
    }
    // even that didn't work; must throw the exception
    throw new InputMismatchException(recognizer);
};

//
// This method implements the single-token insertion inline error recovery
// strategy. It is called by {@link //recoverInline} if the single-token
// deletion strategy fails to recover from the mismatched input. If this
// method returns {@code true}, {@code recognizer} will be in error recovery
// mode.
//
// <p>This method determines whether or not single-token insertion is viable by
// checking if the {@code LA(1)} input symbol could be successfully matched
// if it were instead the {@code LA(2)} symbol. If this method returns
// {@code true}, the caller is responsible for creating and inserting a
// token with the correct type to produce this behavior.</p>
//
// @param recognizer the parser instance
// @return {@code true} if single-token insertion is a viable recovery
// strategy for the current mismatched input, otherwise {@code false}
//
DefaultErrorStrategy.prototype.singleTokenInsertion = function(recognizer) {
    var currentSymbolType = recognizer.getTokenStream().LA(1);
    // if current token is consistent with what could come after current
    // ATN state, then we know we're missing a token; error recovery
    // is free to conjure up and insert the missing token
    var atn = recognizer._interp.atn;
    var currentState = atn.states[recognizer.state];
    var next = currentState.transitions[0].target;
    var expectingAtLL2 = atn.nextTokens(next, recognizer._ctx);
    if (expectingAtLL2.contains(currentSymbolType) ){
        this.reportMissingToken(recognizer);
        return true;
    } else {
        return false;
    }
};

// This method implements the single-token deletion inline error recovery
// strategy. It is called by {@link //recoverInline} to attempt to recover
// from mismatched input. If this method returns null, the parser and error
// handler state will not have changed. If this method returns non-null,
// {@code recognizer} will <em>not</em> be in error recovery mode since the
// returned token was a successful match.
//
// <p>If the single-token deletion is successful, this method calls
// {@link //reportUnwantedToken} to report the error, followed by
// {@link Parser//consume} to actually "delete" the extraneous token. Then,
// before returning {@link //reportMatch} is called to signal a successful
// match.</p>
//
// @param recognizer the parser instance
// @return the successfully matched {@link Token} instance if single-token
// deletion successfully recovers from the mismatched input, otherwise
// {@code null}
//
DefaultErrorStrategy.prototype.singleTokenDeletion = function(recognizer) {
    var nextTokenType = recognizer.getTokenStream().LA(2);
    var expecting = this.getExpectedTokens(recognizer);
    if (expecting.contains(nextTokenType)) {
        this.reportUnwantedToken(recognizer);
        // print("recoverFromMismatchedToken deleting " \
        // + str(recognizer.getTokenStream().LT(1)) \
        // + " since " + str(recognizer.getTokenStream().LT(2)) \
        // + " is what we want", file=sys.stderr)
        recognizer.consume(); // simply delete extra token
        // we want to return the token we're actually matching
        var matchedSymbol = recognizer.getCurrentToken();
        this.reportMatch(recognizer); // we know current token is correct
        return matchedSymbol;
    } else {
        return null;
    }
};

// Conjure up a missing token during error recovery.
//
// The recognizer attempts to recover from single missing
// symbols. But, actions might refer to that missing symbol.
// For example, x=ID {f($x);}. The action clearly assumes
// that there has been an identifier matched previously and that
// $x points at that token. If that token is missing, but
// the next token in the stream is what we want we assume that
// this token is missing and we keep going. Because we
// have to return some token to replace the missing token,
// we have to conjure one up. This method gives the user control
// over the tokens returned for missing tokens. Mostly,
// you will want to create something special for identifier
// tokens. For literals such as '{' and ',', the default
// action in the parser or tree parser works. It simply creates
// a CommonToken of the appropriate type. The text will be the token.
// If you change what tokens must be created by the lexer,
// override this method to create the appropriate tokens.
//
DefaultErrorStrategy.prototype.getMissingSymbol = function(recognizer) {
    var currentSymbol = recognizer.getCurrentToken();
    var expecting = this.getExpectedTokens(recognizer);
    var expectedTokenType = expecting.first(); // get any element
    var tokenText;
    if (expectedTokenType===Token.EOF) {
        tokenText = "<missing EOF>";
    } else {
        tokenText = "<missing " + recognizer.literalNames[expectedTokenType] + ">";
    }
    var current = currentSymbol;
    var lookback = recognizer.getTokenStream().LT(-1);
    if (current.type===Token.EOF && lookback !== null) {
        current = lookback;
    }
    return recognizer.getTokenFactory().create(current.source,
        expectedTokenType, tokenText, Token.DEFAULT_CHANNEL,
        -1, -1, current.line, current.column);
};

DefaultErrorStrategy.prototype.getExpectedTokens = function(recognizer) {
    return recognizer.getExpectedTokens();
};

// How should a token be displayed in an error message? The default
// is to display just the text, but during development you might
// want to have a lot of information spit out. Override in that case
// to use t.toString() (which, for CommonToken, dumps everything about
// the token). This is better than forcing you to override a method in
// your token objects because you don't have to go modify your lexer
// so that it creates a new Java type.
//
DefaultErrorStrategy.prototype.getTokenErrorDisplay = function(t) {
    if (t === null) {
        return "<no token>";
    }
    var s = t.text;
    if (s === null) {
        if (t.type===Token.EOF) {
            s = "<EOF>";
        } else {
            s = "<" + t.type + ">";
        }
    }
    return this.escapeWSAndQuote(s);
};

DefaultErrorStrategy.prototype.escapeWSAndQuote = function(s) {
    s = s.replace(/\n/g,"\\n");
    s = s.replace(/\r/g,"\\r");
    s = s.replace(/\t/g,"\\t");
    return "'" + s + "'";
};

// Compute the error recovery set for the current rule. During
// rule invocation, the parser pushes the set of tokens that can
// follow that rule reference on the stack; this amounts to
// computing FIRST of what follows the rule reference in the
// enclosing rule. See LinearApproximator.FIRST().
// This local follow set only includes tokens
// from within the rule; i.e., the FIRST computation done by
// ANTLR stops at the end of a rule.
//
// EXAMPLE
//
// When you find a "no viable alt exception", the input is not
// consistent with any of the alternatives for rule r. The best
// thing to do is to consume tokens until you see something that
// can legally follow a call to r//or* any rule that called r.
// You don't want the exact set of viable next tokens because the
// input might just be missing a token--you might consume the
// rest of the input looking for one of the missing tokens.
//
// Consider grammar:
//
// a : '[' b ']'
// | '(' b ')'
// ;
// b : c '^' INT ;
// c : ID
// | INT
// ;
//
// At each rule invocation, the set of tokens that could follow
// that rule is pushed on a stack. Here are the various
// context-sensitive follow sets:
//
// FOLLOW(b1_in_a) = FIRST(']') = ']'
// FOLLOW(b2_in_a) = FIRST(')') = ')'
// FOLLOW(c_in_b) = FIRST('^') = '^'
//
// Upon erroneous input "[]", the call chain is
//
// a -> b -> c
//
// and, hence, the follow context stack is:
//
// depth follow set start of rule execution
// 0 <EOF> a (from main())
// 1 ']' b
// 2 '^' c
//
// Notice that ')' is not included, because b would have to have
// been called from a different context in rule a for ')' to be
// included.
//
// For error recovery, we cannot consider FOLLOW(c)
// (context-sensitive or otherwise). We need the combined set of
// all context-sensitive FOLLOW sets--the set of all tokens that
// could follow any reference in the call chain. We need to
// resync to one of those tokens. Note that FOLLOW(c)='^' and if
// we resync'd to that token, we'd consume until EOF. We need to
// sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.
// In this case, for input "[]", LA(1) is ']' and in the set, so we would
// not consume anything. After printing an error, rule c would
// return normally. Rule b would not find the required '^' though.
// At this point, it gets a mismatched token error and throws an
// exception (since LA(1) is not in the viable following token
// set). The rule exception handler tries to recover, but finds
// the same recovery set and doesn't consume anything. Rule b
// exits normally returning to rule a. Now it finds the ']' (and
// with the successful match exits errorRecovery mode).
//
// So, you can see that the parser walks up the call chain looking
// for the token that was a member of the recovery set.
//
// Errors are not generated in errorRecovery mode.
//
// ANTLR's error recovery mechanism is based upon original ideas:
//
// "Algorithms + Data Structures = Programs" by Niklaus Wirth
//
// and
//
// "A note on error recovery in recursive descent parsers":
// http://portal.acm.org/citation.cfm?id=947902.947905
//
// Later, Josef Grosch had some good ideas:
//
// "Efficient and Comfortable Error Recovery in Recursive Descent
// Parsers":
// ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip
//
// Like Grosch I implement context-sensitive FOLLOW sets that are combined
// at run-time upon error to avoid overhead during parsing.
//
DefaultErrorStrategy.prototype.getErrorRecoverySet = function(recognizer) {
    var atn = recognizer._interp.atn;
    var ctx = recognizer._ctx;
    var recoverSet = new IntervalSet();
    while (ctx !== null && ctx.invokingState>=0) {
        // compute what follows who invoked us
        var invokingState = atn.states[ctx.invokingState];
        var rt = invokingState.transitions[0];
        var follow = atn.nextTokens(rt.followState);
        recoverSet.addSet(follow);
        ctx = ctx.parentCtx;
    }
    recoverSet.removeOne(Token.EPSILON);
    return recoverSet;
};

// Consume tokens until one matches the given token set.//
DefaultErrorStrategy.prototype.consumeUntil = function(recognizer, set) {
    var ttype = recognizer.getTokenStream().LA(1);
    while( ttype !== Token.EOF && !set.contains(ttype)) {
        recognizer.consume();
        ttype = recognizer.getTokenStream().LA(1);
    }
};

//
// This implementation of {@link ANTLRErrorStrategy} responds to syntax errors
// by immediately canceling the parse operation with a
// {@link ParseCancellationException}. The implementation ensures that the
// {@link ParserRuleContext//exception} field is set for all parse tree nodes
// that were not completed prior to encountering the error.
//
// <p>
// This error strategy is useful in the following scenarios.</p>
//
// <ul>
// <li><strong>Two-stage parsing:</strong> This error strategy allows the first
// stage of two-stage parsing to immediately terminate if an error is
// encountered, and immediately fall back to the second stage. In addition to
// avoiding wasted work by attempting to recover from errors here, the empty
// implementation of {@link BailErrorStrategy//sync} improves the performance of
// the first stage.</li>
// <li><strong>Silent validation:</strong> When syntax errors are not being
// reported or logged, and the parse result is simply ignored if errors occur,
// the {@link BailErrorStrategy} avoids wasting work on recovering from errors
// when the result will be ignored either way.</li>
// </ul>
//
// <p>
// {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>
//
// @see Parser//setErrorHandler(ANTLRErrorStrategy)
//
function BailErrorStrategy() {
	DefaultErrorStrategy.call(this);
	return this;
}

BailErrorStrategy.prototype = Object.create(DefaultErrorStrategy.prototype);
BailErrorStrategy.prototype.constructor = BailErrorStrategy;

// Instead of recovering from exception {@code e}, re-throw it wrapped
// in a {@link ParseCancellationException} so it is not caught by the
// rule function catches. Use {@link Exception//getCause()} to get the
// original {@link RecognitionException}.
//
BailErrorStrategy.prototype.recover = function(recognizer, e) {
    var context = recognizer._ctx;
    while (context !== null) {
        context.exception = e;
        context = context.parentCtx;
    }
    throw new ParseCancellationException(e);
};

// Make sure we don't attempt to recover inline; if the parser
// successfully recovers, it won't throw an exception.
//
BailErrorStrategy.prototype.recoverInline = function(recognizer) {
    this.recover(recognizer, new InputMismatchException(recognizer));
};

// Make sure we don't attempt to recover from problems in subrules.//
BailErrorStrategy.prototype.sync = function(recognizer) {
    // pass
};

exports.BailErrorStrategy = BailErrorStrategy;
exports.DefaultErrorStrategy = DefaultErrorStrategy;


/***/ }),

/***/ "./node_modules/antlr4/error/Errors.js":
/*!*********************************************!*\
  !*** ./node_modules/antlr4/error/Errors.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// The root of the ANTLR exception hierarchy. In general, ANTLR tracks just
//  3 kinds of errors: prediction errors, failed predicate errors, and
//  mismatched input errors. In each case, the parser knows where it is
//  in the input, where it is in the ATN, the rule invocation stack,
//  and what kind of problem occurred.

var PredicateTransition = __webpack_require__(/*! ./../atn/Transition */ "./node_modules/antlr4/atn/Transition.js").PredicateTransition;

function RecognitionException(params) {
	Error.call(this);
	if (!!Error.captureStackTrace) {
        Error.captureStackTrace(this, RecognitionException);
	} else {
		var stack = new Error().stack;
	}
	this.message = params.message;
    this.recognizer = params.recognizer;
    this.input = params.input;
    this.ctx = params.ctx;
    // The current {@link Token} when an error occurred. Since not all streams
    // support accessing symbols by index, we have to track the {@link Token}
    // instance itself.
    this.offendingToken = null;
    // Get the ATN state number the parser was in at the time the error
    // occurred. For {@link NoViableAltException} and
    // {@link LexerNoViableAltException} exceptions, this is the
    // {@link DecisionState} number. For others, it is the state whose outgoing
    // edge we couldn't match.
    this.offendingState = -1;
    if (this.recognizer!==null) {
        this.offendingState = this.recognizer.state;
    }
    return this;
}

RecognitionException.prototype = Object.create(Error.prototype);
RecognitionException.prototype.constructor = RecognitionException;

// <p>If the state number is not known, this method returns -1.</p>

//
// Gets the set of input symbols which could potentially follow the
// previously matched symbol at the time this exception was thrown.
//
// <p>If the set of expected tokens is not known and could not be computed,
// this method returns {@code null}.</p>
//
// @return The set of token types that could potentially follow the current
// state in the ATN, or {@code null} if the information is not available.
// /
RecognitionException.prototype.getExpectedTokens = function() {
    if (this.recognizer!==null) {
        return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);
    } else {
        return null;
    }
};

RecognitionException.prototype.toString = function() {
    return this.message;
};

function LexerNoViableAltException(lexer, input, startIndex, deadEndConfigs) {
	RecognitionException.call(this, {message:"", recognizer:lexer, input:input, ctx:null});
    this.startIndex = startIndex;
    this.deadEndConfigs = deadEndConfigs;
    return this;
}

LexerNoViableAltException.prototype = Object.create(RecognitionException.prototype);
LexerNoViableAltException.prototype.constructor = LexerNoViableAltException;

LexerNoViableAltException.prototype.toString = function() {
    var symbol = "";
    if (this.startIndex >= 0 && this.startIndex < this.input.size) {
        symbol = this.input.getText((this.startIndex,this.startIndex));
    }
    return "LexerNoViableAltException" + symbol;
};

// Indicates that the parser could not decide which of two or more paths
// to take based upon the remaining input. It tracks the starting token
// of the offending input and also knows where the parser was
// in the various paths when the error. Reported by reportNoViableAlternative()
//
function NoViableAltException(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {
	ctx = ctx || recognizer._ctx;
	offendingToken = offendingToken || recognizer.getCurrentToken();
	startToken = startToken || recognizer.getCurrentToken();
	input = input || recognizer.getInputStream();
	RecognitionException.call(this, {message:"", recognizer:recognizer, input:input, ctx:ctx});
    // Which configurations did we try at input.index() that couldn't match
	// input.LT(1)?//
    this.deadEndConfigs = deadEndConfigs;
    // The token object at the start index; the input stream might
    // not be buffering tokens so get a reference to it. (At the
    // time the error occurred, of course the stream needs to keep a
    // buffer all of the tokens but later we might not have access to those.)
    this.startToken = startToken;
    this.offendingToken = offendingToken;
}

NoViableAltException.prototype = Object.create(RecognitionException.prototype);
NoViableAltException.prototype.constructor = NoViableAltException;

// This signifies any kind of mismatched input exceptions such as
// when the current input does not match the expected token.
//
function InputMismatchException(recognizer) {
	RecognitionException.call(this, {message:"", recognizer:recognizer, input:recognizer.getInputStream(), ctx:recognizer._ctx});
    this.offendingToken = recognizer.getCurrentToken();
}

InputMismatchException.prototype = Object.create(RecognitionException.prototype);
InputMismatchException.prototype.constructor = InputMismatchException;

// A semantic predicate failed during validation. Validation of predicates
// occurs when normally parsing the alternative just like matching a token.
// Disambiguating predicate evaluation occurs when we test a predicate during
// prediction.

function FailedPredicateException(recognizer, predicate, message) {
	RecognitionException.call(this, {message:this.formatMessage(predicate,message || null), recognizer:recognizer,
                         input:recognizer.getInputStream(), ctx:recognizer._ctx});
    var s = recognizer._interp.atn.states[recognizer.state];
    var trans = s.transitions[0];
    if (trans instanceof PredicateTransition) {
        this.ruleIndex = trans.ruleIndex;
        this.predicateIndex = trans.predIndex;
    } else {
        this.ruleIndex = 0;
        this.predicateIndex = 0;
    }
    this.predicate = predicate;
    this.offendingToken = recognizer.getCurrentToken();
    return this;
}

FailedPredicateException.prototype = Object.create(RecognitionException.prototype);
FailedPredicateException.prototype.constructor = FailedPredicateException;

FailedPredicateException.prototype.formatMessage = function(predicate, message) {
    if (message !==null) {
        return message;
    } else {
        return "failed predicate: {" + predicate + "}?";
    }
};

function ParseCancellationException() {
	Error.call(this);
	Error.captureStackTrace(this, ParseCancellationException);
	return this;
}

ParseCancellationException.prototype = Object.create(Error.prototype);
ParseCancellationException.prototype.constructor = ParseCancellationException;

exports.RecognitionException = RecognitionException;
exports.NoViableAltException = NoViableAltException;
exports.LexerNoViableAltException = LexerNoViableAltException;
exports.InputMismatchException = InputMismatchException;
exports.FailedPredicateException = FailedPredicateException;
exports.ParseCancellationException = ParseCancellationException;


/***/ }),

/***/ "./node_modules/antlr4/error/index.js":
/*!********************************************!*\
  !*** ./node_modules/antlr4/error/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.RecognitionException = __webpack_require__(/*! ./Errors */ "./node_modules/antlr4/error/Errors.js").RecognitionException;
exports.NoViableAltException = __webpack_require__(/*! ./Errors */ "./node_modules/antlr4/error/Errors.js").NoViableAltException;
exports.LexerNoViableAltException = __webpack_require__(/*! ./Errors */ "./node_modules/antlr4/error/Errors.js").LexerNoViableAltException;
exports.InputMismatchException = __webpack_require__(/*! ./Errors */ "./node_modules/antlr4/error/Errors.js").InputMismatchException;
exports.FailedPredicateException = __webpack_require__(/*! ./Errors */ "./node_modules/antlr4/error/Errors.js").FailedPredicateException;
exports.DiagnosticErrorListener = __webpack_require__(/*! ./DiagnosticErrorListener */ "./node_modules/antlr4/error/DiagnosticErrorListener.js").DiagnosticErrorListener;
exports.BailErrorStrategy = __webpack_require__(/*! ./ErrorStrategy */ "./node_modules/antlr4/error/ErrorStrategy.js").BailErrorStrategy;
exports.ErrorListener = __webpack_require__(/*! ./ErrorListener */ "./node_modules/antlr4/error/ErrorListener.js").ErrorListener;


/***/ }),

/***/ "./node_modules/antlr4/index.js":
/*!**************************************!*\
  !*** ./node_modules/antlr4/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
exports.atn = __webpack_require__(/*! ./atn/index */ "./node_modules/antlr4/atn/index.js");
exports.codepointat = __webpack_require__(/*! ./polyfills/codepointat */ "./node_modules/antlr4/polyfills/codepointat.js");
exports.dfa = __webpack_require__(/*! ./dfa/index */ "./node_modules/antlr4/dfa/index.js");
exports.fromcodepoint = __webpack_require__(/*! ./polyfills/fromcodepoint */ "./node_modules/antlr4/polyfills/fromcodepoint.js");
exports.tree = __webpack_require__(/*! ./tree/index */ "./node_modules/antlr4/tree/index.js");
exports.error = __webpack_require__(/*! ./error/index */ "./node_modules/antlr4/error/index.js");
exports.Token = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/Token.js").Token;
exports.CharStreams = __webpack_require__(/*! ./CharStreams */ "./node_modules/antlr4/CharStreams.js").CharStreams;
exports.CommonToken = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/Token.js").CommonToken;
exports.InputStream = __webpack_require__(/*! ./InputStream */ "./node_modules/antlr4/InputStream.js").InputStream;
exports.FileStream = __webpack_require__(/*! ./FileStream */ "./node_modules/antlr4/FileStream.js").FileStream;
exports.CommonTokenStream = __webpack_require__(/*! ./CommonTokenStream */ "./node_modules/antlr4/CommonTokenStream.js").CommonTokenStream;
exports.Lexer = __webpack_require__(/*! ./Lexer */ "./node_modules/antlr4/Lexer.js").Lexer;
exports.Parser = __webpack_require__(/*! ./Parser */ "./node_modules/antlr4/Parser.js").Parser;
var pc = __webpack_require__(/*! ./PredictionContext */ "./node_modules/antlr4/PredictionContext.js");
exports.PredictionContextCache = pc.PredictionContextCache;
exports.ParserRuleContext = __webpack_require__(/*! ./ParserRuleContext */ "./node_modules/antlr4/ParserRuleContext.js").ParserRuleContext;
exports.Interval = __webpack_require__(/*! ./IntervalSet */ "./node_modules/antlr4/IntervalSet.js").Interval;
exports.Utils = __webpack_require__(/*! ./Utils */ "./node_modules/antlr4/Utils.js");


/***/ }),

/***/ "./node_modules/antlr4/polyfills/codepointat.js":
/*!******************************************************!*\
  !*** ./node_modules/antlr4/polyfills/codepointat.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*! https://mths.be/codepointat v0.2.0 by @mathias */
if (!String.prototype.codePointAt) {
	(function() {
		'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
		var defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {}
			return result;
		}());
		var codePointAt = function(position) {
			if (this == null) {
				throw TypeError();
			}
			var string = String(this);
			var size = string.length;
			// `ToInteger`
			var index = position ? Number(position) : 0;
			if (index != index) { // better `isNaN`
				index = 0;
			}
			// Account for out-of-bounds indices:
			if (index < 0 || index >= size) {
				return undefined;
			}
			// Get the first code unit
			var first = string.charCodeAt(index);
			var second;
			if ( // check if it’s the start of a surrogate pair
				first >= 0xD800 && first <= 0xDBFF && // high surrogate
				size > index + 1 // there is a next code unit
			) {
				second = string.charCodeAt(index + 1);
				if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate
					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
					return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
				}
			}
			return first;
		};
		if (defineProperty) {
			defineProperty(String.prototype, 'codePointAt', {
				'value': codePointAt,
				'configurable': true,
				'writable': true
			});
		} else {
			String.prototype.codePointAt = codePointAt;
		}
	}());
}


/***/ }),

/***/ "./node_modules/antlr4/polyfills/fromcodepoint.js":
/*!********************************************************!*\
  !*** ./node_modules/antlr4/polyfills/fromcodepoint.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */
if (!String.fromCodePoint) {
	(function() {
		var defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {}
			return result;
		}());
		var stringFromCharCode = String.fromCharCode;
		var floor = Math.floor;
		var fromCodePoint = function(_) {
			var MAX_SIZE = 0x4000;
			var codeUnits = [];
			var highSurrogate;
			var lowSurrogate;
			var index = -1;
			var length = arguments.length;
			if (!length) {
				return '';
			}
			var result = '';
			while (++index < length) {
				var codePoint = Number(arguments[index]);
				if (
					!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
					codePoint < 0 || // not a valid Unicode code point
					codePoint > 0x10FFFF || // not a valid Unicode code point
					floor(codePoint) != codePoint // not an integer
				) {
					throw RangeError('Invalid code point: ' + codePoint);
				}
				if (codePoint <= 0xFFFF) { // BMP code point
					codeUnits.push(codePoint);
				} else { // Astral code point; split in surrogate halves
					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
					codePoint -= 0x10000;
					highSurrogate = (codePoint >> 10) + 0xD800;
					lowSurrogate = (codePoint % 0x400) + 0xDC00;
					codeUnits.push(highSurrogate, lowSurrogate);
				}
				if (index + 1 == length || codeUnits.length > MAX_SIZE) {
					result += stringFromCharCode.apply(null, codeUnits);
					codeUnits.length = 0;
				}
			}
			return result;
		};
		if (defineProperty) {
			defineProperty(String, 'fromCodePoint', {
				'value': fromCodePoint,
				'configurable': true,
				'writable': true
			});
		} else {
			String.fromCodePoint = fromCodePoint;
		}
	}());
}


/***/ }),

/***/ "./node_modules/antlr4/tree/Tree.js":
/*!******************************************!*\
  !*** ./node_modules/antlr4/tree/Tree.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// The basic notion of a tree has a parent, a payload, and a list of children.
//  It is the most abstract interface for all the trees used by ANTLR.
///

var Token = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/Token.js").Token;
var Interval = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/IntervalSet.js").Interval;
var INVALID_INTERVAL = new Interval(-1, -2);
var Utils = __webpack_require__(/*! ../Utils.js */ "./node_modules/antlr4/Utils.js");


function Tree() {
	return this;
}

function SyntaxTree() {
	Tree.call(this);
	return this;
}

SyntaxTree.prototype = Object.create(Tree.prototype);
SyntaxTree.prototype.constructor = SyntaxTree;

function ParseTree() {
	SyntaxTree.call(this);
	return this;
}

ParseTree.prototype = Object.create(SyntaxTree.prototype);
ParseTree.prototype.constructor = ParseTree;

function RuleNode() {
	ParseTree.call(this);
	return this;
}

RuleNode.prototype = Object.create(ParseTree.prototype);
RuleNode.prototype.constructor = RuleNode;

function TerminalNode() {
	ParseTree.call(this);
	return this;
}

TerminalNode.prototype = Object.create(ParseTree.prototype);
TerminalNode.prototype.constructor = TerminalNode;

function ErrorNode() {
	TerminalNode.call(this);
	return this;
}

ErrorNode.prototype = Object.create(TerminalNode.prototype);
ErrorNode.prototype.constructor = ErrorNode;

function ParseTreeVisitor() {
	return this;
}

ParseTreeVisitor.prototype.visit = function(ctx) {
 	if (Array.isArray(ctx)) {
		return ctx.map(function(child) {
            return child.accept(this);
        }, this);
	} else {
		return ctx.accept(this);
	}
};

ParseTreeVisitor.prototype.visitChildren = function(ctx) {
	if (ctx.children) {
		return this.visit(ctx.children);
	} else {
		return null;
	}
}

ParseTreeVisitor.prototype.visitTerminal = function(node) {
};

ParseTreeVisitor.prototype.visitErrorNode = function(node) {
};


function ParseTreeListener() {
	return this;
}

ParseTreeListener.prototype.visitTerminal = function(node) {
};

ParseTreeListener.prototype.visitErrorNode = function(node) {
};

ParseTreeListener.prototype.enterEveryRule = function(node) {
};

ParseTreeListener.prototype.exitEveryRule = function(node) {
};

function TerminalNodeImpl(symbol) {
	TerminalNode.call(this);
	this.parentCtx = null;
	this.symbol = symbol;
	return this;
}

TerminalNodeImpl.prototype = Object.create(TerminalNode.prototype);
TerminalNodeImpl.prototype.constructor = TerminalNodeImpl;

TerminalNodeImpl.prototype.getChild = function(i) {
	return null;
};

TerminalNodeImpl.prototype.getSymbol = function() {
	return this.symbol;
};

TerminalNodeImpl.prototype.getParent = function() {
	return this.parentCtx;
};

TerminalNodeImpl.prototype.getPayload = function() {
	return this.symbol;
};

TerminalNodeImpl.prototype.getSourceInterval = function() {
	if (this.symbol === null) {
		return INVALID_INTERVAL;
	}
	var tokenIndex = this.symbol.tokenIndex;
	return new Interval(tokenIndex, tokenIndex);
};

TerminalNodeImpl.prototype.getChildCount = function() {
	return 0;
};

TerminalNodeImpl.prototype.accept = function(visitor) {
	return visitor.visitTerminal(this);
};

TerminalNodeImpl.prototype.getText = function() {
	return this.symbol.text;
};

TerminalNodeImpl.prototype.toString = function() {
	if (this.symbol.type === Token.EOF) {
		return "<EOF>";
	} else {
		return this.symbol.text;
	}
};

// Represents a token that was consumed during resynchronization
// rather than during a valid match operation. For example,
// we will create this kind of a node during single token insertion
// and deletion as well as during "consume until error recovery set"
// upon no viable alternative exceptions.

function ErrorNodeImpl(token) {
	TerminalNodeImpl.call(this, token);
	return this;
}

ErrorNodeImpl.prototype = Object.create(TerminalNodeImpl.prototype);
ErrorNodeImpl.prototype.constructor = ErrorNodeImpl;

ErrorNodeImpl.prototype.isErrorNode = function() {
	return true;
};

ErrorNodeImpl.prototype.accept = function(visitor) {
	return visitor.visitErrorNode(this);
};

function ParseTreeWalker() {
	return this;
}

ParseTreeWalker.prototype.walk = function(listener, t) {
	var errorNode = t instanceof ErrorNode ||
			(t.isErrorNode !== undefined && t.isErrorNode());
	if (errorNode) {
		listener.visitErrorNode(t);
	} else if (t instanceof TerminalNode) {
		listener.visitTerminal(t);
	} else {
		this.enterRule(listener, t);
		for (var i = 0; i < t.getChildCount(); i++) {
			var child = t.getChild(i);
			this.walk(listener, child);
		}
		this.exitRule(listener, t);
	}
};
//
// The discovery of a rule node, involves sending two events: the generic
// {@link ParseTreeListener//enterEveryRule} and a
// {@link RuleContext}-specific event. First we trigger the generic and then
// the rule specific. We to them in reverse order upon finishing the node.
//
ParseTreeWalker.prototype.enterRule = function(listener, r) {
	var ctx = r.getRuleContext();
	listener.enterEveryRule(ctx);
	ctx.enterRule(listener);
};

ParseTreeWalker.prototype.exitRule = function(listener, r) {
	var ctx = r.getRuleContext();
	ctx.exitRule(listener);
	listener.exitEveryRule(ctx);
};

ParseTreeWalker.DEFAULT = new ParseTreeWalker();

exports.RuleNode = RuleNode;
exports.ErrorNode = ErrorNode;
exports.TerminalNode = TerminalNode;
exports.ErrorNodeImpl = ErrorNodeImpl;
exports.TerminalNodeImpl = TerminalNodeImpl;
exports.ParseTreeListener = ParseTreeListener;
exports.ParseTreeVisitor = ParseTreeVisitor;
exports.ParseTreeWalker = ParseTreeWalker;
exports.INVALID_INTERVAL = INVALID_INTERVAL;


/***/ }),

/***/ "./node_modules/antlr4/tree/Trees.js":
/*!*******************************************!*\
  !*** ./node_modules/antlr4/tree/Trees.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Utils = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js");
var Token = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/Token.js").Token;
var RuleNode = __webpack_require__(/*! ./Tree */ "./node_modules/antlr4/tree/Tree.js").RuleNode;
var ErrorNode = __webpack_require__(/*! ./Tree */ "./node_modules/antlr4/tree/Tree.js").ErrorNode;
var TerminalNode = __webpack_require__(/*! ./Tree */ "./node_modules/antlr4/tree/Tree.js").TerminalNode;
var ParserRuleContext = __webpack_require__(/*! ./../ParserRuleContext */ "./node_modules/antlr4/ParserRuleContext.js").ParserRuleContext;
var RuleContext = __webpack_require__(/*! ./../RuleContext */ "./node_modules/antlr4/RuleContext.js").RuleContext;
var INVALID_ALT_NUMBER = __webpack_require__(/*! ./../atn/ATN */ "./node_modules/antlr4/atn/ATN.js").INVALID_ALT_NUMBER;


/** A set of utility routines useful for all kinds of ANTLR trees. */
function Trees() {
}

// Print out a whole tree in LISP form. {@link //getNodeText} is used on the
//  node payloads to get the text for the nodes.  Detect
//  parse trees and extract data appropriately.
Trees.toStringTree = function(tree, ruleNames, recog) {
	ruleNames = ruleNames || null;
	recog = recog || null;
    if(recog!==null) {
       ruleNames = recog.ruleNames;
    }
    var s = Trees.getNodeText(tree, ruleNames);
    s = Utils.escapeWhitespace(s, false);
    var c = tree.getChildCount();
    if(c===0) {
        return s;
    }
    var res = "(" + s + ' ';
    if(c>0) {
        s = Trees.toStringTree(tree.getChild(0), ruleNames);
        res = res.concat(s);
    }
    for(var i=1;i<c;i++) {
        s = Trees.toStringTree(tree.getChild(i), ruleNames);
        res = res.concat(' ' + s);
    }
    res = res.concat(")");
    return res;
};

Trees.getNodeText = function(t, ruleNames, recog) {
	ruleNames = ruleNames || null;
	recog = recog || null;
    if(recog!==null) {
        ruleNames = recog.ruleNames;
    }
    if(ruleNames!==null) {
       if (t instanceof RuleContext) {
           var altNumber = t.getAltNumber();
           if ( altNumber!=INVALID_ALT_NUMBER ) {
               return ruleNames[t.ruleIndex]+":"+altNumber;
           }
           return ruleNames[t.ruleIndex];
       } else if ( t instanceof ErrorNode) {
           return t.toString();
       } else if(t instanceof TerminalNode) {
           if(t.symbol!==null) {
               return t.symbol.text;
           }
       }
    }
    // no recog for rule names
    var payload = t.getPayload();
    if (payload instanceof Token ) {
       return payload.text;
    }
    return t.getPayload().toString();
};


// Return ordered list of all children of this node
Trees.getChildren = function(t) {
	var list = [];
	for(var i=0;i<t.getChildCount();i++) {
		list.push(t.getChild(i));
	}
	return list;
};

// Return a list of all ancestors of this node.  The first node of
//  list is the root and the last is the parent of this node.
//
Trees.getAncestors = function(t) {
    var ancestors = [];
    t = t.getParent();
    while(t!==null) {
        ancestors = [t].concat(ancestors);
        t = t.getParent();
    }
    return ancestors;
};

Trees.findAllTokenNodes = function(t, ttype) {
    return Trees.findAllNodes(t, ttype, true);
};

Trees.findAllRuleNodes = function(t, ruleIndex) {
	return Trees.findAllNodes(t, ruleIndex, false);
};

Trees.findAllNodes = function(t, index, findTokens) {
	var nodes = [];
	Trees._findAllNodes(t, index, findTokens, nodes);
	return nodes;
};

Trees._findAllNodes = function(t, index, findTokens, nodes) {
	// check this node (the root) first
	if(findTokens && (t instanceof TerminalNode)) {
		if(t.symbol.type===index) {
			nodes.push(t);
		}
	} else if(!findTokens && (t instanceof ParserRuleContext)) {
		if(t.ruleIndex===index) {
			nodes.push(t);
		}
	}
	// check children
	for(var i=0;i<t.getChildCount();i++) {
		Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);
	}
};

Trees.descendants = function(t) {
	var nodes = [t];
    for(var i=0;i<t.getChildCount();i++) {
        nodes = nodes.concat(Trees.descendants(t.getChild(i)));
    }
    return nodes;
};


exports.Trees = Trees;

/***/ }),

/***/ "./node_modules/antlr4/tree/index.js":
/*!*******************************************!*\
  !*** ./node_modules/antlr4/tree/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Tree = __webpack_require__(/*! ./Tree */ "./node_modules/antlr4/tree/Tree.js");
exports.Trees = __webpack_require__(/*! ./Trees */ "./node_modules/antlr4/tree/Trees.js").Trees;
exports.RuleNode = Tree.RuleNode;
exports.ParseTreeListener = Tree.ParseTreeListener;
exports.ParseTreeVisitor = Tree.ParseTreeVisitor;
exports.ParseTreeWalker = Tree.ParseTreeWalker;


/***/ }),

/***/ "./node_modules/ini/ini.js":
/*!*********************************!*\
  !*** ./node_modules/ini/ini.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.parse = exports.decode = decode

exports.stringify = exports.encode = encode

exports.safe = safe
exports.unsafe = unsafe

var eol = typeof process !== 'undefined' &&
  process.platform === 'win32' ? '\r\n' : '\n'

function encode (obj, opt) {
  var children = []
  var out = ''

  if (typeof opt === 'string') {
    opt = {
      section: opt,
      whitespace: false,
    }
  } else {
    opt = opt || {}
    opt.whitespace = opt.whitespace === true
  }

  var separator = opt.whitespace ? ' = ' : '='

  Object.keys(obj).forEach(function (k, _, __) {
    var val = obj[k]
    if (val && Array.isArray(val)) {
      val.forEach(function (item) {
        out += safe(k + '[]') + separator + safe(item) + '\n'
      })
    } else if (val && typeof val === 'object')
      children.push(k)
    else
      out += safe(k) + separator + safe(val) + eol
  })

  if (opt.section && out.length)
    out = '[' + safe(opt.section) + ']' + eol + out

  children.forEach(function (k, _, __) {
    var nk = dotSplit(k).join('\\.')
    var section = (opt.section ? opt.section + '.' : '') + nk
    var child = encode(obj[k], {
      section: section,
      whitespace: opt.whitespace,
    })
    if (out.length && child.length)
      out += eol

    out += child
  })

  return out
}

function dotSplit (str) {
  return str.replace(/\1/g, '\u0002LITERAL\\1LITERAL\u0002')
    .replace(/\\\./g, '\u0001')
    .split(/\./).map(function (part) {
      return part.replace(/\1/g, '\\.')
        .replace(/\2LITERAL\\1LITERAL\2/g, '\u0001')
    })
}

function decode (str) {
  var out = {}
  var p = out
  var section = null
  //          section     |key      = value
  var re = /^\[([^\]]*)\]$|^([^=]+)(=(.*))?$/i
  var lines = str.split(/[\r\n]+/g)

  lines.forEach(function (line, _, __) {
    if (!line || line.match(/^\s*[;#]/))
      return
    var match = line.match(re)
    if (!match)
      return
    if (match[1] !== undefined) {
      section = unsafe(match[1])
      if (section === '__proto__') {
        // not allowed
        // keep parsing the section, but don't attach it.
        p = {}
        return
      }
      p = out[section] = out[section] || {}
      return
    }
    var key = unsafe(match[2])
    if (key === '__proto__')
      return
    var value = match[3] ? unsafe(match[4]) : true
    switch (value) {
      case 'true':
      case 'false':
      case 'null': value = JSON.parse(value)
    }

    // Convert keys with '[]' suffix to an array
    if (key.length > 2 && key.slice(-2) === '[]') {
      key = key.substring(0, key.length - 2)
      if (key === '__proto__')
        return
      if (!p[key])
        p[key] = []
      else if (!Array.isArray(p[key]))
        p[key] = [p[key]]
    }

    // safeguard against resetting a previously defined
    // array by accidentally forgetting the brackets
    if (Array.isArray(p[key]))
      p[key].push(value)
    else
      p[key] = value
  })

  // {a:{y:1},"a.b":{x:2}} --> {a:{y:1,b:{x:2}}}
  // use a filter to return the keys that have to be deleted.
  Object.keys(out).filter(function (k, _, __) {
    if (!out[k] ||
      typeof out[k] !== 'object' ||
      Array.isArray(out[k]))
      return false

    // see if the parent section is also an object.
    // if so, add it to that, and mark this one for deletion
    var parts = dotSplit(k)
    var p = out
    var l = parts.pop()
    var nl = l.replace(/\\\./g, '.')
    parts.forEach(function (part, _, __) {
      if (part === '__proto__')
        return
      if (!p[part] || typeof p[part] !== 'object')
        p[part] = {}
      p = p[part]
    })
    if (p === out && nl === l)
      return false

    p[nl] = out[k]
    return true
  }).forEach(function (del, _, __) {
    delete out[del]
  })

  return out
}

function isQuoted (val) {
  return (val.charAt(0) === '"' && val.slice(-1) === '"') ||
    (val.charAt(0) === "'" && val.slice(-1) === "'")
}

function safe (val) {
  return (typeof val !== 'string' ||
    val.match(/[=\r\n]/) ||
    val.match(/^\[/) ||
    (val.length > 1 &&
     isQuoted(val)) ||
    val !== val.trim())
    ? JSON.stringify(val)
    : val.replace(/;/g, '\\;').replace(/#/g, '\\#')
}

function unsafe (val, doUnesc) {
  val = (val || '').trim()
  if (isQuoted(val)) {
    // remove the single quotes before calling JSON.parse
    if (val.charAt(0) === "'")
      val = val.substr(1, val.length - 2)

    try {
      val = JSON.parse(val)
    } catch (_) {}
  } else {
    // walk the val to find the first not-escaped ; character
    var esc = false
    var unesc = ''
    for (var i = 0, l = val.length; i < l; i++) {
      var c = val.charAt(i)
      if (esc) {
        if ('\\;#'.indexOf(c) !== -1)
          unesc += c
        else
          unesc += '\\' + c

        esc = false
      } else if (';#'.indexOf(c) !== -1)
        break
      else if (c === '\\')
        esc = true
      else
        unesc += c
    }
    if (esc)
      unesc += '\\'

    return unesc.trim()
  }
  return val
}


/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/api.js":
/*!*******************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/api.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
/// <reference path="../../typings/thenable.d.ts" />
Object.defineProperty(exports, "__esModule", { value: true });
exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = exports.TraceFormat = exports.Trace = exports.ProgressType = exports.createMessageConnection = exports.NullLogger = exports.ConnectionOptions = exports.ConnectionStrategy = exports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = exports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = exports.CancellationToken = exports.CancellationTokenSource = exports.Emitter = exports.Event = exports.Disposable = exports.ParameterStructures = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.ErrorCodes = exports.ResponseError = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType0 = exports.RequestType = exports.RAL = void 0;
exports.CancellationStrategy = void 0;
const messages_1 = __webpack_require__(/*! ../common/messages */ "./node_modules/vscode-jsonrpc/lib/common/messages.js");
Object.defineProperty(exports, "RequestType", { enumerable: true, get: function () { return messages_1.RequestType; } });
Object.defineProperty(exports, "RequestType0", { enumerable: true, get: function () { return messages_1.RequestType0; } });
Object.defineProperty(exports, "RequestType1", { enumerable: true, get: function () { return messages_1.RequestType1; } });
Object.defineProperty(exports, "RequestType2", { enumerable: true, get: function () { return messages_1.RequestType2; } });
Object.defineProperty(exports, "RequestType3", { enumerable: true, get: function () { return messages_1.RequestType3; } });
Object.defineProperty(exports, "RequestType4", { enumerable: true, get: function () { return messages_1.RequestType4; } });
Object.defineProperty(exports, "RequestType5", { enumerable: true, get: function () { return messages_1.RequestType5; } });
Object.defineProperty(exports, "RequestType6", { enumerable: true, get: function () { return messages_1.RequestType6; } });
Object.defineProperty(exports, "RequestType7", { enumerable: true, get: function () { return messages_1.RequestType7; } });
Object.defineProperty(exports, "RequestType8", { enumerable: true, get: function () { return messages_1.RequestType8; } });
Object.defineProperty(exports, "RequestType9", { enumerable: true, get: function () { return messages_1.RequestType9; } });
Object.defineProperty(exports, "ResponseError", { enumerable: true, get: function () { return messages_1.ResponseError; } });
Object.defineProperty(exports, "ErrorCodes", { enumerable: true, get: function () { return messages_1.ErrorCodes; } });
Object.defineProperty(exports, "NotificationType", { enumerable: true, get: function () { return messages_1.NotificationType; } });
Object.defineProperty(exports, "NotificationType0", { enumerable: true, get: function () { return messages_1.NotificationType0; } });
Object.defineProperty(exports, "NotificationType1", { enumerable: true, get: function () { return messages_1.NotificationType1; } });
Object.defineProperty(exports, "NotificationType2", { enumerable: true, get: function () { return messages_1.NotificationType2; } });
Object.defineProperty(exports, "NotificationType3", { enumerable: true, get: function () { return messages_1.NotificationType3; } });
Object.defineProperty(exports, "NotificationType4", { enumerable: true, get: function () { return messages_1.NotificationType4; } });
Object.defineProperty(exports, "NotificationType5", { enumerable: true, get: function () { return messages_1.NotificationType5; } });
Object.defineProperty(exports, "NotificationType6", { enumerable: true, get: function () { return messages_1.NotificationType6; } });
Object.defineProperty(exports, "NotificationType7", { enumerable: true, get: function () { return messages_1.NotificationType7; } });
Object.defineProperty(exports, "NotificationType8", { enumerable: true, get: function () { return messages_1.NotificationType8; } });
Object.defineProperty(exports, "NotificationType9", { enumerable: true, get: function () { return messages_1.NotificationType9; } });
Object.defineProperty(exports, "ParameterStructures", { enumerable: true, get: function () { return messages_1.ParameterStructures; } });
const disposable_1 = __webpack_require__(/*! ../common/disposable */ "./node_modules/vscode-jsonrpc/lib/common/disposable.js");
Object.defineProperty(exports, "Disposable", { enumerable: true, get: function () { return disposable_1.Disposable; } });
const events_1 = __webpack_require__(/*! ../common/events */ "./node_modules/vscode-jsonrpc/lib/common/events.js");
Object.defineProperty(exports, "Event", { enumerable: true, get: function () { return events_1.Event; } });
Object.defineProperty(exports, "Emitter", { enumerable: true, get: function () { return events_1.Emitter; } });
const cancellation_1 = __webpack_require__(/*! ../common/cancellation */ "./node_modules/vscode-jsonrpc/lib/common/cancellation.js");
Object.defineProperty(exports, "CancellationTokenSource", { enumerable: true, get: function () { return cancellation_1.CancellationTokenSource; } });
Object.defineProperty(exports, "CancellationToken", { enumerable: true, get: function () { return cancellation_1.CancellationToken; } });
const messageReader_1 = __webpack_require__(/*! ../common/messageReader */ "./node_modules/vscode-jsonrpc/lib/common/messageReader.js");
Object.defineProperty(exports, "MessageReader", { enumerable: true, get: function () { return messageReader_1.MessageReader; } });
Object.defineProperty(exports, "AbstractMessageReader", { enumerable: true, get: function () { return messageReader_1.AbstractMessageReader; } });
Object.defineProperty(exports, "ReadableStreamMessageReader", { enumerable: true, get: function () { return messageReader_1.ReadableStreamMessageReader; } });
const messageWriter_1 = __webpack_require__(/*! ../common/messageWriter */ "./node_modules/vscode-jsonrpc/lib/common/messageWriter.js");
Object.defineProperty(exports, "MessageWriter", { enumerable: true, get: function () { return messageWriter_1.MessageWriter; } });
Object.defineProperty(exports, "AbstractMessageWriter", { enumerable: true, get: function () { return messageWriter_1.AbstractMessageWriter; } });
Object.defineProperty(exports, "WriteableStreamMessageWriter", { enumerable: true, get: function () { return messageWriter_1.WriteableStreamMessageWriter; } });
const connection_1 = __webpack_require__(/*! ../common/connection */ "./node_modules/vscode-jsonrpc/lib/common/connection.js");
Object.defineProperty(exports, "ConnectionStrategy", { enumerable: true, get: function () { return connection_1.ConnectionStrategy; } });
Object.defineProperty(exports, "ConnectionOptions", { enumerable: true, get: function () { return connection_1.ConnectionOptions; } });
Object.defineProperty(exports, "NullLogger", { enumerable: true, get: function () { return connection_1.NullLogger; } });
Object.defineProperty(exports, "createMessageConnection", { enumerable: true, get: function () { return connection_1.createMessageConnection; } });
Object.defineProperty(exports, "ProgressType", { enumerable: true, get: function () { return connection_1.ProgressType; } });
Object.defineProperty(exports, "Trace", { enumerable: true, get: function () { return connection_1.Trace; } });
Object.defineProperty(exports, "TraceFormat", { enumerable: true, get: function () { return connection_1.TraceFormat; } });
Object.defineProperty(exports, "SetTraceNotification", { enumerable: true, get: function () { return connection_1.SetTraceNotification; } });
Object.defineProperty(exports, "LogTraceNotification", { enumerable: true, get: function () { return connection_1.LogTraceNotification; } });
Object.defineProperty(exports, "ConnectionErrors", { enumerable: true, get: function () { return connection_1.ConnectionErrors; } });
Object.defineProperty(exports, "ConnectionError", { enumerable: true, get: function () { return connection_1.ConnectionError; } });
Object.defineProperty(exports, "CancellationReceiverStrategy", { enumerable: true, get: function () { return connection_1.CancellationReceiverStrategy; } });
Object.defineProperty(exports, "CancellationSenderStrategy", { enumerable: true, get: function () { return connection_1.CancellationSenderStrategy; } });
Object.defineProperty(exports, "CancellationStrategy", { enumerable: true, get: function () { return connection_1.CancellationStrategy; } });
const ral_1 = __webpack_require__(/*! ./ral */ "./node_modules/vscode-jsonrpc/lib/common/ral.js");
exports.RAL = ral_1.default;
//# sourceMappingURL=api.js.map

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/cancellation.js":
/*!****************************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/cancellation.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.CancellationTokenSource = exports.CancellationToken = void 0;
const ral_1 = __webpack_require__(/*! ./ral */ "./node_modules/vscode-jsonrpc/lib/common/ral.js");
const Is = __webpack_require__(/*! ./is */ "./node_modules/vscode-jsonrpc/lib/common/is.js");
const events_1 = __webpack_require__(/*! ./events */ "./node_modules/vscode-jsonrpc/lib/common/events.js");
var CancellationToken;
(function (CancellationToken) {
    CancellationToken.None = Object.freeze({
        isCancellationRequested: false,
        onCancellationRequested: events_1.Event.None
    });
    CancellationToken.Cancelled = Object.freeze({
        isCancellationRequested: true,
        onCancellationRequested: events_1.Event.None
    });
    function is(value) {
        const candidate = value;
        return candidate && (candidate === CancellationToken.None
            || candidate === CancellationToken.Cancelled
            || (Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested));
    }
    CancellationToken.is = is;
})(CancellationToken = exports.CancellationToken || (exports.CancellationToken = {}));
const shortcutEvent = Object.freeze(function (callback, context) {
    const handle = ral_1.default().timer.setTimeout(callback.bind(context), 0);
    return { dispose() { ral_1.default().timer.clearTimeout(handle); } };
});
class MutableToken {
    constructor() {
        this._isCancelled = false;
    }
    cancel() {
        if (!this._isCancelled) {
            this._isCancelled = true;
            if (this._emitter) {
                this._emitter.fire(undefined);
                this.dispose();
            }
        }
    }
    get isCancellationRequested() {
        return this._isCancelled;
    }
    get onCancellationRequested() {
        if (this._isCancelled) {
            return shortcutEvent;
        }
        if (!this._emitter) {
            this._emitter = new events_1.Emitter();
        }
        return this._emitter.event;
    }
    dispose() {
        if (this._emitter) {
            this._emitter.dispose();
            this._emitter = undefined;
        }
    }
}
class CancellationTokenSource {
    get token() {
        if (!this._token) {
            // be lazy and create the token only when
            // actually needed
            this._token = new MutableToken();
        }
        return this._token;
    }
    cancel() {
        if (!this._token) {
            // save an object by returning the default
            // cancelled token when cancellation happens
            // before someone asks for the token
            this._token = CancellationToken.Cancelled;
        }
        else {
            this._token.cancel();
        }
    }
    dispose() {
        if (!this._token) {
            // ensure to initialize with an empty token if we had none
            this._token = CancellationToken.None;
        }
        else if (this._token instanceof MutableToken) {
            // actually dispose
            this._token.dispose();
        }
    }
}
exports.CancellationTokenSource = CancellationTokenSource;
//# sourceMappingURL=cancellation.js.map

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/connection.js":
/*!**************************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/connection.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMessageConnection = exports.ConnectionOptions = exports.CancellationStrategy = exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.ConnectionStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = exports.TraceFormat = exports.Trace = exports.NullLogger = exports.ProgressType = void 0;
const ral_1 = __webpack_require__(/*! ./ral */ "./node_modules/vscode-jsonrpc/lib/common/ral.js");
const Is = __webpack_require__(/*! ./is */ "./node_modules/vscode-jsonrpc/lib/common/is.js");
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-jsonrpc/lib/common/messages.js");
const linkedMap_1 = __webpack_require__(/*! ./linkedMap */ "./node_modules/vscode-jsonrpc/lib/common/linkedMap.js");
const events_1 = __webpack_require__(/*! ./events */ "./node_modules/vscode-jsonrpc/lib/common/events.js");
const cancellation_1 = __webpack_require__(/*! ./cancellation */ "./node_modules/vscode-jsonrpc/lib/common/cancellation.js");
var CancelNotification;
(function (CancelNotification) {
    CancelNotification.type = new messages_1.NotificationType('$/cancelRequest');
})(CancelNotification || (CancelNotification = {}));
var ProgressNotification;
(function (ProgressNotification) {
    ProgressNotification.type = new messages_1.NotificationType('$/progress');
})(ProgressNotification || (ProgressNotification = {}));
class ProgressType {
    constructor() {
    }
}
exports.ProgressType = ProgressType;
var StarRequestHandler;
(function (StarRequestHandler) {
    function is(value) {
        return Is.func(value);
    }
    StarRequestHandler.is = is;
})(StarRequestHandler || (StarRequestHandler = {}));
exports.NullLogger = Object.freeze({
    error: () => { },
    warn: () => { },
    info: () => { },
    log: () => { }
});
var Trace;
(function (Trace) {
    Trace[Trace["Off"] = 0] = "Off";
    Trace[Trace["Messages"] = 1] = "Messages";
    Trace[Trace["Verbose"] = 2] = "Verbose";
})(Trace = exports.Trace || (exports.Trace = {}));
(function (Trace) {
    function fromString(value) {
        if (!Is.string(value)) {
            return Trace.Off;
        }
        value = value.toLowerCase();
        switch (value) {
            case 'off':
                return Trace.Off;
            case 'messages':
                return Trace.Messages;
            case 'verbose':
                return Trace.Verbose;
            default:
                return Trace.Off;
        }
    }
    Trace.fromString = fromString;
    function toString(value) {
        switch (value) {
            case Trace.Off:
                return 'off';
            case Trace.Messages:
                return 'messages';
            case Trace.Verbose:
                return 'verbose';
            default:
                return 'off';
        }
    }
    Trace.toString = toString;
})(Trace = exports.Trace || (exports.Trace = {}));
var TraceFormat;
(function (TraceFormat) {
    TraceFormat["Text"] = "text";
    TraceFormat["JSON"] = "json";
})(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));
(function (TraceFormat) {
    function fromString(value) {
        value = value.toLowerCase();
        if (value === 'json') {
            return TraceFormat.JSON;
        }
        else {
            return TraceFormat.Text;
        }
    }
    TraceFormat.fromString = fromString;
})(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));
var SetTraceNotification;
(function (SetTraceNotification) {
    SetTraceNotification.type = new messages_1.NotificationType('$/setTrace');
})(SetTraceNotification = exports.SetTraceNotification || (exports.SetTraceNotification = {}));
var LogTraceNotification;
(function (LogTraceNotification) {
    LogTraceNotification.type = new messages_1.NotificationType('$/logTrace');
})(LogTraceNotification = exports.LogTraceNotification || (exports.LogTraceNotification = {}));
var ConnectionErrors;
(function (ConnectionErrors) {
    /**
     * The connection is closed.
     */
    ConnectionErrors[ConnectionErrors["Closed"] = 1] = "Closed";
    /**
     * The connection got disposed.
     */
    ConnectionErrors[ConnectionErrors["Disposed"] = 2] = "Disposed";
    /**
     * The connection is already in listening mode.
     */
    ConnectionErrors[ConnectionErrors["AlreadyListening"] = 3] = "AlreadyListening";
})(ConnectionErrors = exports.ConnectionErrors || (exports.ConnectionErrors = {}));
class ConnectionError extends Error {
    constructor(code, message) {
        super(message);
        this.code = code;
        Object.setPrototypeOf(this, ConnectionError.prototype);
    }
}
exports.ConnectionError = ConnectionError;
var ConnectionStrategy;
(function (ConnectionStrategy) {
    function is(value) {
        const candidate = value;
        return candidate && Is.func(candidate.cancelUndispatched);
    }
    ConnectionStrategy.is = is;
})(ConnectionStrategy = exports.ConnectionStrategy || (exports.ConnectionStrategy = {}));
var CancellationReceiverStrategy;
(function (CancellationReceiverStrategy) {
    CancellationReceiverStrategy.Message = Object.freeze({
        createCancellationTokenSource(_) {
            return new cancellation_1.CancellationTokenSource();
        }
    });
    function is(value) {
        const candidate = value;
        return candidate && Is.func(candidate.createCancellationTokenSource);
    }
    CancellationReceiverStrategy.is = is;
})(CancellationReceiverStrategy = exports.CancellationReceiverStrategy || (exports.CancellationReceiverStrategy = {}));
var CancellationSenderStrategy;
(function (CancellationSenderStrategy) {
    CancellationSenderStrategy.Message = Object.freeze({
        sendCancellation(conn, id) {
            conn.sendNotification(CancelNotification.type, { id });
        },
        cleanup(_) { }
    });
    function is(value) {
        const candidate = value;
        return candidate && Is.func(candidate.sendCancellation) && Is.func(candidate.cleanup);
    }
    CancellationSenderStrategy.is = is;
})(CancellationSenderStrategy = exports.CancellationSenderStrategy || (exports.CancellationSenderStrategy = {}));
var CancellationStrategy;
(function (CancellationStrategy) {
    CancellationStrategy.Message = Object.freeze({
        receiver: CancellationReceiverStrategy.Message,
        sender: CancellationSenderStrategy.Message
    });
    function is(value) {
        const candidate = value;
        return candidate && CancellationReceiverStrategy.is(candidate.receiver) && CancellationSenderStrategy.is(candidate.sender);
    }
    CancellationStrategy.is = is;
})(CancellationStrategy = exports.CancellationStrategy || (exports.CancellationStrategy = {}));
var ConnectionOptions;
(function (ConnectionOptions) {
    function is(value) {
        const candidate = value;
        return candidate && (CancellationStrategy.is(candidate.cancellationStrategy) || ConnectionStrategy.is(candidate.connectionStrategy));
    }
    ConnectionOptions.is = is;
})(ConnectionOptions = exports.ConnectionOptions || (exports.ConnectionOptions = {}));
var ConnectionState;
(function (ConnectionState) {
    ConnectionState[ConnectionState["New"] = 1] = "New";
    ConnectionState[ConnectionState["Listening"] = 2] = "Listening";
    ConnectionState[ConnectionState["Closed"] = 3] = "Closed";
    ConnectionState[ConnectionState["Disposed"] = 4] = "Disposed";
})(ConnectionState || (ConnectionState = {}));
function createMessageConnection(messageReader, messageWriter, _logger, options) {
    const logger = _logger !== undefined ? _logger : exports.NullLogger;
    let sequenceNumber = 0;
    let notificationSquenceNumber = 0;
    let unknownResponseSquenceNumber = 0;
    const version = '2.0';
    let starRequestHandler = undefined;
    const requestHandlers = Object.create(null);
    let starNotificationHandler = undefined;
    const notificationHandlers = Object.create(null);
    const progressHandlers = new Map();
    let timer;
    let messageQueue = new linkedMap_1.LinkedMap();
    let responsePromises = Object.create(null);
    let requestTokens = Object.create(null);
    let trace = Trace.Off;
    let traceFormat = TraceFormat.Text;
    let tracer;
    let state = ConnectionState.New;
    const errorEmitter = new events_1.Emitter();
    const closeEmitter = new events_1.Emitter();
    const unhandledNotificationEmitter = new events_1.Emitter();
    const unhandledProgressEmitter = new events_1.Emitter();
    const disposeEmitter = new events_1.Emitter();
    const cancellationStrategy = (options && options.cancellationStrategy) ? options.cancellationStrategy : CancellationStrategy.Message;
    function createRequestQueueKey(id) {
        if (id === null) {
            throw new Error(`Can't send requests with id null since the response can't be correlated.`);
        }
        return 'req-' + id.toString();
    }
    function createResponseQueueKey(id) {
        if (id === null) {
            return 'res-unknown-' + (++unknownResponseSquenceNumber).toString();
        }
        else {
            return 'res-' + id.toString();
        }
    }
    function createNotificationQueueKey() {
        return 'not-' + (++notificationSquenceNumber).toString();
    }
    function addMessageToQueue(queue, message) {
        if (messages_1.isRequestMessage(message)) {
            queue.set(createRequestQueueKey(message.id), message);
        }
        else if (messages_1.isResponseMessage(message)) {
            queue.set(createResponseQueueKey(message.id), message);
        }
        else {
            queue.set(createNotificationQueueKey(), message);
        }
    }
    function cancelUndispatched(_message) {
        return undefined;
    }
    function isListening() {
        return state === ConnectionState.Listening;
    }
    function isClosed() {
        return state === ConnectionState.Closed;
    }
    function isDisposed() {
        return state === ConnectionState.Disposed;
    }
    function closeHandler() {
        if (state === ConnectionState.New || state === ConnectionState.Listening) {
            state = ConnectionState.Closed;
            closeEmitter.fire(undefined);
        }
        // If the connection is disposed don't sent close events.
    }
    function readErrorHandler(error) {
        errorEmitter.fire([error, undefined, undefined]);
    }
    function writeErrorHandler(data) {
        errorEmitter.fire(data);
    }
    messageReader.onClose(closeHandler);
    messageReader.onError(readErrorHandler);
    messageWriter.onClose(closeHandler);
    messageWriter.onError(writeErrorHandler);
    function triggerMessageQueue() {
        if (timer || messageQueue.size === 0) {
            return;
        }
        timer = ral_1.default().timer.setImmediate(() => {
            timer = undefined;
            processMessageQueue();
        });
    }
    function processMessageQueue() {
        if (messageQueue.size === 0) {
            return;
        }
        const message = messageQueue.shift();
        try {
            if (messages_1.isRequestMessage(message)) {
                handleRequest(message);
            }
            else if (messages_1.isNotificationMessage(message)) {
                handleNotification(message);
            }
            else if (messages_1.isResponseMessage(message)) {
                handleResponse(message);
            }
            else {
                handleInvalidMessage(message);
            }
        }
        finally {
            triggerMessageQueue();
        }
    }
    const callback = (message) => {
        try {
            // We have received a cancellation message. Check if the message is still in the queue
            // and cancel it if allowed to do so.
            if (messages_1.isNotificationMessage(message) && message.method === CancelNotification.type.method) {
                const key = createRequestQueueKey(message.params.id);
                const toCancel = messageQueue.get(key);
                if (messages_1.isRequestMessage(toCancel)) {
                    const strategy = options === null || options === void 0 ? void 0 : options.connectionStrategy;
                    const response = (strategy && strategy.cancelUndispatched) ? strategy.cancelUndispatched(toCancel, cancelUndispatched) : cancelUndispatched(toCancel);
                    if (response && (response.error !== undefined || response.result !== undefined)) {
                        messageQueue.delete(key);
                        response.id = toCancel.id;
                        traceSendingResponse(response, message.method, Date.now());
                        messageWriter.write(response);
                        return;
                    }
                }
            }
            addMessageToQueue(messageQueue, message);
        }
        finally {
            triggerMessageQueue();
        }
    };
    function handleRequest(requestMessage) {
        if (isDisposed()) {
            // we return here silently since we fired an event when the
            // connection got disposed.
            return;
        }
        function reply(resultOrError, method, startTime) {
            const message = {
                jsonrpc: version,
                id: requestMessage.id
            };
            if (resultOrError instanceof messages_1.ResponseError) {
                message.error = resultOrError.toJson();
            }
            else {
                message.result = resultOrError === undefined ? null : resultOrError;
            }
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message);
        }
        function replyError(error, method, startTime) {
            const message = {
                jsonrpc: version,
                id: requestMessage.id,
                error: error.toJson()
            };
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message);
        }
        function replySuccess(result, method, startTime) {
            // The JSON RPC defines that a response must either have a result or an error
            // So we can't treat undefined as a valid response result.
            if (result === undefined) {
                result = null;
            }
            const message = {
                jsonrpc: version,
                id: requestMessage.id,
                result: result
            };
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message);
        }
        traceReceivedRequest(requestMessage);
        const element = requestHandlers[requestMessage.method];
        let type;
        let requestHandler;
        if (element) {
            type = element.type;
            requestHandler = element.handler;
        }
        const startTime = Date.now();
        if (requestHandler || starRequestHandler) {
            const tokenKey = String(requestMessage.id);
            const cancellationSource = cancellationStrategy.receiver.createCancellationTokenSource(tokenKey);
            requestTokens[tokenKey] = cancellationSource;
            try {
                let handlerResult;
                if (requestHandler) {
                    if (requestMessage.params === undefined) {
                        if (type !== undefined && type.numberOfParams !== 0) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines ${type.numberOfParams} params but recevied none.`), requestMessage.method, startTime);
                            return;
                        }
                        handlerResult = requestHandler(cancellationSource.token);
                    }
                    else if (Array.isArray(requestMessage.params)) {
                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byName) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by name but received parameters by position`), requestMessage.method, startTime);
                            return;
                        }
                        handlerResult = requestHandler(...requestMessage.params, cancellationSource.token);
                    }
                    else {
                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by position but received parameters by name`), requestMessage.method, startTime);
                            return;
                        }
                        handlerResult = requestHandler(requestMessage.params, cancellationSource.token);
                    }
                }
                else if (starRequestHandler) {
                    handlerResult = starRequestHandler(requestMessage.method, requestMessage.params, cancellationSource.token);
                }
                const promise = handlerResult;
                if (!handlerResult) {
                    delete requestTokens[tokenKey];
                    replySuccess(handlerResult, requestMessage.method, startTime);
                }
                else if (promise.then) {
                    promise.then((resultOrError) => {
                        delete requestTokens[tokenKey];
                        reply(resultOrError, requestMessage.method, startTime);
                    }, error => {
                        delete requestTokens[tokenKey];
                        if (error instanceof messages_1.ResponseError) {
                            replyError(error, requestMessage.method, startTime);
                        }
                        else if (error && Is.string(error.message)) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                        }
                        else {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                        }
                    });
                }
                else {
                    delete requestTokens[tokenKey];
                    reply(handlerResult, requestMessage.method, startTime);
                }
            }
            catch (error) {
                delete requestTokens[tokenKey];
                if (error instanceof messages_1.ResponseError) {
                    reply(error, requestMessage.method, startTime);
                }
                else if (error && Is.string(error.message)) {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                }
                else {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                }
            }
        }
        else {
            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.MethodNotFound, `Unhandled method ${requestMessage.method}`), requestMessage.method, startTime);
        }
    }
    function handleResponse(responseMessage) {
        if (isDisposed()) {
            // See handle request.
            return;
        }
        if (responseMessage.id === null) {
            if (responseMessage.error) {
                logger.error(`Received response message without id: Error is: \n${JSON.stringify(responseMessage.error, undefined, 4)}`);
            }
            else {
                logger.error(`Received response message without id. No further error information provided.`);
            }
        }
        else {
            const key = String(responseMessage.id);
            const responsePromise = responsePromises[key];
            traceReceivedResponse(responseMessage, responsePromise);
            if (responsePromise) {
                delete responsePromises[key];
                try {
                    if (responseMessage.error) {
                        const error = responseMessage.error;
                        responsePromise.reject(new messages_1.ResponseError(error.code, error.message, error.data));
                    }
                    else if (responseMessage.result !== undefined) {
                        responsePromise.resolve(responseMessage.result);
                    }
                    else {
                        throw new Error('Should never happen.');
                    }
                }
                catch (error) {
                    if (error.message) {
                        logger.error(`Response handler '${responsePromise.method}' failed with message: ${error.message}`);
                    }
                    else {
                        logger.error(`Response handler '${responsePromise.method}' failed unexpectedly.`);
                    }
                }
            }
        }
    }
    function handleNotification(message) {
        if (isDisposed()) {
            // See handle request.
            return;
        }
        let type = undefined;
        let notificationHandler;
        if (message.method === CancelNotification.type.method) {
            notificationHandler = (params) => {
                const id = params.id;
                const source = requestTokens[String(id)];
                if (source) {
                    source.cancel();
                }
            };
        }
        else {
            const element = notificationHandlers[message.method];
            if (element) {
                notificationHandler = element.handler;
                type = element.type;
            }
        }
        if (notificationHandler || starNotificationHandler) {
            try {
                traceReceivedNotification(message);
                if (notificationHandler) {
                    if (message.params === undefined) {
                        if (type !== undefined) {
                            if (type.numberOfParams !== 0 && type.parameterStructures !== messages_1.ParameterStructures.byName) {
                                logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but recevied none.`);
                            }
                        }
                        notificationHandler();
                    }
                    else if (Array.isArray(message.params)) {
                        if (type !== undefined) {
                            if (type.parameterStructures === messages_1.ParameterStructures.byName) {
                                logger.error(`Notification ${message.method} defines parameters by name but received parameters by position`);
                            }
                            if (type.numberOfParams !== message.params.length) {
                                logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received ${message.params.length} argumennts`);
                            }
                        }
                        notificationHandler(...message.params);
                    }
                    else {
                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                            logger.error(`Notification ${message.method} defines parameters by position but received parameters by name`);
                        }
                        notificationHandler(message.params);
                    }
                }
                else if (starNotificationHandler) {
                    starNotificationHandler(message.method, message.params);
                }
            }
            catch (error) {
                if (error.message) {
                    logger.error(`Notification handler '${message.method}' failed with message: ${error.message}`);
                }
                else {
                    logger.error(`Notification handler '${message.method}' failed unexpectedly.`);
                }
            }
        }
        else {
            unhandledNotificationEmitter.fire(message);
        }
    }
    function handleInvalidMessage(message) {
        if (!message) {
            logger.error('Received empty message.');
            return;
        }
        logger.error(`Received message which is neither a response nor a notification message:\n${JSON.stringify(message, null, 4)}`);
        // Test whether we find an id to reject the promise
        const responseMessage = message;
        if (Is.string(responseMessage.id) || Is.number(responseMessage.id)) {
            const key = String(responseMessage.id);
            const responseHandler = responsePromises[key];
            if (responseHandler) {
                responseHandler.reject(new Error('The received response has neither a result nor an error property.'));
            }
        }
    }
    function traceSendingRequest(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose && message.params) {
                data = `Params: ${JSON.stringify(message.params, null, 4)}\n\n`;
            }
            tracer.log(`Sending request '${message.method} - (${message.id})'.`, data);
        }
        else {
            logLSPMessage('send-request', message);
        }
    }
    function traceSendingNotification(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose) {
                if (message.params) {
                    data = `Params: ${JSON.stringify(message.params, null, 4)}\n\n`;
                }
                else {
                    data = 'No parameters provided.\n\n';
                }
            }
            tracer.log(`Sending notification '${message.method}'.`, data);
        }
        else {
            logLSPMessage('send-notification', message);
        }
    }
    function traceSendingResponse(message, method, startTime) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose) {
                if (message.error && message.error.data) {
                    data = `Error data: ${JSON.stringify(message.error.data, null, 4)}\n\n`;
                }
                else {
                    if (message.result) {
                        data = `Result: ${JSON.stringify(message.result, null, 4)}\n\n`;
                    }
                    else if (message.error === undefined) {
                        data = 'No result returned.\n\n';
                    }
                }
            }
            tracer.log(`Sending response '${method} - (${message.id})'. Processing request took ${Date.now() - startTime}ms`, data);
        }
        else {
            logLSPMessage('send-response', message);
        }
    }
    function traceReceivedRequest(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose && message.params) {
                data = `Params: ${JSON.stringify(message.params, null, 4)}\n\n`;
            }
            tracer.log(`Received request '${message.method} - (${message.id})'.`, data);
        }
        else {
            logLSPMessage('receive-request', message);
        }
    }
    function traceReceivedNotification(message) {
        if (trace === Trace.Off || !tracer || message.method === LogTraceNotification.type.method) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose) {
                if (message.params) {
                    data = `Params: ${JSON.stringify(message.params, null, 4)}\n\n`;
                }
                else {
                    data = 'No parameters provided.\n\n';
                }
            }
            tracer.log(`Received notification '${message.method}'.`, data);
        }
        else {
            logLSPMessage('receive-notification', message);
        }
    }
    function traceReceivedResponse(message, responsePromise) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose) {
                if (message.error && message.error.data) {
                    data = `Error data: ${JSON.stringify(message.error.data, null, 4)}\n\n`;
                }
                else {
                    if (message.result) {
                        data = `Result: ${JSON.stringify(message.result, null, 4)}\n\n`;
                    }
                    else if (message.error === undefined) {
                        data = 'No result returned.\n\n';
                    }
                }
            }
            if (responsePromise) {
                const error = message.error ? ` Request failed: ${message.error.message} (${message.error.code}).` : '';
                tracer.log(`Received response '${responsePromise.method} - (${message.id})' in ${Date.now() - responsePromise.timerStart}ms.${error}`, data);
            }
            else {
                tracer.log(`Received response ${message.id} without active response promise.`, data);
            }
        }
        else {
            logLSPMessage('receive-response', message);
        }
    }
    function logLSPMessage(type, message) {
        if (!tracer || trace === Trace.Off) {
            return;
        }
        const lspMessage = {
            isLSPMessage: true,
            type,
            message,
            timestamp: Date.now()
        };
        tracer.log(lspMessage);
    }
    function throwIfClosedOrDisposed() {
        if (isClosed()) {
            throw new ConnectionError(ConnectionErrors.Closed, 'Connection is closed.');
        }
        if (isDisposed()) {
            throw new ConnectionError(ConnectionErrors.Disposed, 'Connection is disposed.');
        }
    }
    function throwIfListening() {
        if (isListening()) {
            throw new ConnectionError(ConnectionErrors.AlreadyListening, 'Connection is already listening');
        }
    }
    function throwIfNotListening() {
        if (!isListening()) {
            throw new Error('Call listen() first.');
        }
    }
    function undefinedToNull(param) {
        if (param === undefined) {
            return null;
        }
        else {
            return param;
        }
    }
    function nullToUndefined(param) {
        if (param === null) {
            return undefined;
        }
        else {
            return param;
        }
    }
    function isNamedParam(param) {
        return param !== undefined && param !== null && !Array.isArray(param) && typeof param === 'object';
    }
    function computeSingleParam(parameterStructures, param) {
        switch (parameterStructures) {
            case messages_1.ParameterStructures.auto:
                if (isNamedParam(param)) {
                    return nullToUndefined(param);
                }
                else {
                    return [undefinedToNull(param)];
                }
                break;
            case messages_1.ParameterStructures.byName:
                if (!isNamedParam(param)) {
                    throw new Error(`Recevied parameters by name but param is not an object literal.`);
                }
                return nullToUndefined(param);
            case messages_1.ParameterStructures.byPosition:
                return [undefinedToNull(param)];
            default:
                throw new Error(`Unknown parameter structure ${parameterStructures.toString()}`);
        }
    }
    function computeMessageParams(type, params) {
        let result;
        const numberOfParams = type.numberOfParams;
        switch (numberOfParams) {
            case 0:
                result = undefined;
                break;
            case 1:
                result = computeSingleParam(type.parameterStructures, params[0]);
                break;
            default:
                result = [];
                for (let i = 0; i < params.length && i < numberOfParams; i++) {
                    result.push(undefinedToNull(params[i]));
                }
                if (params.length < numberOfParams) {
                    for (let i = params.length; i < numberOfParams; i++) {
                        result.push(null);
                    }
                }
                break;
        }
        return result;
    }
    const connection = {
        sendNotification: (type, ...args) => {
            throwIfClosedOrDisposed();
            let method;
            let messageParams;
            if (Is.string(type)) {
                method = type;
                const first = args[0];
                let paramStart = 0;
                let parameterStructures = messages_1.ParameterStructures.auto;
                if (messages_1.ParameterStructures.is(first)) {
                    paramStart = 1;
                    parameterStructures = first;
                }
                let paramEnd = args.length;
                const numberOfParams = paramEnd - paramStart;
                switch (numberOfParams) {
                    case 0:
                        messageParams = undefined;
                        break;
                    case 1:
                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                        break;
                    default:
                        if (parameterStructures === messages_1.ParameterStructures.byName) {
                            throw new Error(`Recevied ${numberOfParams} parameters for 'by Name' notification parameter structure.`);
                        }
                        messageParams = args.slice(paramStart, paramEnd).map(value => undefinedToNull(value));
                        break;
                }
            }
            else {
                const params = args;
                method = type.method;
                messageParams = computeMessageParams(type, params);
            }
            const notificationMessage = {
                jsonrpc: version,
                method: method,
                params: messageParams
            };
            traceSendingNotification(notificationMessage);
            messageWriter.write(notificationMessage);
        },
        onNotification: (type, handler) => {
            throwIfClosedOrDisposed();
            let method;
            if (Is.func(type)) {
                starNotificationHandler = type;
            }
            else if (handler) {
                if (Is.string(type)) {
                    method = type;
                    notificationHandlers[type] = { type: undefined, handler };
                }
                else {
                    method = type.method;
                    notificationHandlers[type.method] = { type, handler };
                }
            }
            return {
                dispose: () => {
                    if (method !== undefined) {
                        delete notificationHandlers[method];
                    }
                    else {
                        starNotificationHandler = undefined;
                    }
                }
            };
        },
        onProgress: (_type, token, handler) => {
            if (progressHandlers.has(token)) {
                throw new Error(`Progress handler for token ${token} already registered`);
            }
            progressHandlers.set(token, handler);
            return {
                dispose: () => {
                    progressHandlers.delete(token);
                }
            };
        },
        sendProgress: (_type, token, value) => {
            connection.sendNotification(ProgressNotification.type, { token, value });
        },
        onUnhandledProgress: unhandledProgressEmitter.event,
        sendRequest: (type, ...args) => {
            throwIfClosedOrDisposed();
            throwIfNotListening();
            let method;
            let messageParams;
            let token = undefined;
            if (Is.string(type)) {
                method = type;
                const first = args[0];
                const last = args[args.length - 1];
                let paramStart = 0;
                let parameterStructures = messages_1.ParameterStructures.auto;
                if (messages_1.ParameterStructures.is(first)) {
                    paramStart = 1;
                    parameterStructures = first;
                }
                let paramEnd = args.length;
                if (cancellation_1.CancellationToken.is(last)) {
                    paramEnd = paramEnd - 1;
                    token = last;
                }
                const numberOfParams = paramEnd - paramStart;
                switch (numberOfParams) {
                    case 0:
                        messageParams = undefined;
                        break;
                    case 1:
                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                        break;
                    default:
                        if (parameterStructures === messages_1.ParameterStructures.byName) {
                            throw new Error(`Recevied ${numberOfParams} parameters for 'by Name' request parameter structure.`);
                        }
                        messageParams = args.slice(paramStart, paramEnd).map(value => undefinedToNull(value));
                        break;
                }
            }
            else {
                const params = args;
                method = type.method;
                messageParams = computeMessageParams(type, params);
                const numberOfParams = type.numberOfParams;
                token = cancellation_1.CancellationToken.is(params[numberOfParams]) ? params[numberOfParams] : undefined;
            }
            const id = sequenceNumber++;
            let disposable;
            if (token) {
                disposable = token.onCancellationRequested(() => {
                    cancellationStrategy.sender.sendCancellation(connection, id);
                });
            }
            const result = new Promise((resolve, reject) => {
                const requestMessage = {
                    jsonrpc: version,
                    id: id,
                    method: method,
                    params: messageParams
                };
                const resolveWithCleanup = (r) => {
                    resolve(r);
                    cancellationStrategy.sender.cleanup(id);
                    disposable === null || disposable === void 0 ? void 0 : disposable.dispose();
                };
                const rejectWithCleanup = (r) => {
                    reject(r);
                    cancellationStrategy.sender.cleanup(id);
                    disposable === null || disposable === void 0 ? void 0 : disposable.dispose();
                };
                let responsePromise = { method: method, timerStart: Date.now(), resolve: resolveWithCleanup, reject: rejectWithCleanup };
                traceSendingRequest(requestMessage);
                try {
                    messageWriter.write(requestMessage);
                }
                catch (e) {
                    // Writing the message failed. So we need to reject the promise.
                    responsePromise.reject(new messages_1.ResponseError(messages_1.ErrorCodes.MessageWriteError, e.message ? e.message : 'Unknown reason'));
                    responsePromise = null;
                }
                if (responsePromise) {
                    responsePromises[String(id)] = responsePromise;
                }
            });
            return result;
        },
        onRequest: (type, handler) => {
            throwIfClosedOrDisposed();
            let method = null;
            if (StarRequestHandler.is(type)) {
                method = undefined;
                starRequestHandler = type;
            }
            else if (Is.string(type)) {
                method = null;
                if (handler !== undefined) {
                    method = type;
                    requestHandlers[type] = { handler: handler, type: undefined };
                }
            }
            else {
                if (handler !== undefined) {
                    method = type.method;
                    requestHandlers[type.method] = { type, handler };
                }
            }
            return {
                dispose: () => {
                    if (method === null) {
                        return;
                    }
                    if (method !== undefined) {
                        delete requestHandlers[method];
                    }
                    else {
                        starRequestHandler = undefined;
                    }
                }
            };
        },
        trace: (_value, _tracer, sendNotificationOrTraceOptions) => {
            let _sendNotification = false;
            let _traceFormat = TraceFormat.Text;
            if (sendNotificationOrTraceOptions !== undefined) {
                if (Is.boolean(sendNotificationOrTraceOptions)) {
                    _sendNotification = sendNotificationOrTraceOptions;
                }
                else {
                    _sendNotification = sendNotificationOrTraceOptions.sendNotification || false;
                    _traceFormat = sendNotificationOrTraceOptions.traceFormat || TraceFormat.Text;
                }
            }
            trace = _value;
            traceFormat = _traceFormat;
            if (trace === Trace.Off) {
                tracer = undefined;
            }
            else {
                tracer = _tracer;
            }
            if (_sendNotification && !isClosed() && !isDisposed()) {
                connection.sendNotification(SetTraceNotification.type, { value: Trace.toString(_value) });
            }
        },
        onError: errorEmitter.event,
        onClose: closeEmitter.event,
        onUnhandledNotification: unhandledNotificationEmitter.event,
        onDispose: disposeEmitter.event,
        end: () => {
            messageWriter.end();
        },
        dispose: () => {
            if (isDisposed()) {
                return;
            }
            state = ConnectionState.Disposed;
            disposeEmitter.fire(undefined);
            const error = new Error('Connection got disposed.');
            Object.keys(responsePromises).forEach((key) => {
                responsePromises[key].reject(error);
            });
            responsePromises = Object.create(null);
            requestTokens = Object.create(null);
            messageQueue = new linkedMap_1.LinkedMap();
            // Test for backwards compatibility
            if (Is.func(messageWriter.dispose)) {
                messageWriter.dispose();
            }
            if (Is.func(messageReader.dispose)) {
                messageReader.dispose();
            }
        },
        listen: () => {
            throwIfClosedOrDisposed();
            throwIfListening();
            state = ConnectionState.Listening;
            messageReader.listen(callback);
        },
        inspect: () => {
            // eslint-disable-next-line no-console
            ral_1.default().console.log('inspect');
        }
    };
    connection.onNotification(LogTraceNotification.type, (params) => {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        tracer.log(params.message, trace === Trace.Verbose ? params.verbose : undefined);
    });
    connection.onNotification(ProgressNotification.type, (params) => {
        const handler = progressHandlers.get(params.token);
        if (handler) {
            handler(params.value);
        }
        else {
            unhandledProgressEmitter.fire(params);
        }
    });
    return connection;
}
exports.createMessageConnection = createMessageConnection;
//# sourceMappingURL=connection.js.map

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/disposable.js":
/*!**************************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/disposable.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.Disposable = void 0;
var Disposable;
(function (Disposable) {
    function create(func) {
        return {
            dispose: func
        };
    }
    Disposable.create = create;
})(Disposable = exports.Disposable || (exports.Disposable = {}));
//# sourceMappingURL=disposable.js.map

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/events.js":
/*!**********************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/events.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Emitter = exports.Event = void 0;
const ral_1 = __webpack_require__(/*! ./ral */ "./node_modules/vscode-jsonrpc/lib/common/ral.js");
var Event;
(function (Event) {
    const _disposable = { dispose() { } };
    Event.None = function () { return _disposable; };
})(Event = exports.Event || (exports.Event = {}));
class CallbackList {
    add(callback, context = null, bucket) {
        if (!this._callbacks) {
            this._callbacks = [];
            this._contexts = [];
        }
        this._callbacks.push(callback);
        this._contexts.push(context);
        if (Array.isArray(bucket)) {
            bucket.push({ dispose: () => this.remove(callback, context) });
        }
    }
    remove(callback, context = null) {
        if (!this._callbacks) {
            return;
        }
        let foundCallbackWithDifferentContext = false;
        for (let i = 0, len = this._callbacks.length; i < len; i++) {
            if (this._callbacks[i] === callback) {
                if (this._contexts[i] === context) {
                    // callback & context match => remove it
                    this._callbacks.splice(i, 1);
                    this._contexts.splice(i, 1);
                    return;
                }
                else {
                    foundCallbackWithDifferentContext = true;
                }
            }
        }
        if (foundCallbackWithDifferentContext) {
            throw new Error('When adding a listener with a context, you should remove it with the same context');
        }
    }
    invoke(...args) {
        if (!this._callbacks) {
            return [];
        }
        const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);
        for (let i = 0, len = callbacks.length; i < len; i++) {
            try {
                ret.push(callbacks[i].apply(contexts[i], args));
            }
            catch (e) {
                // eslint-disable-next-line no-console
                ral_1.default().console.error(e);
            }
        }
        return ret;
    }
    isEmpty() {
        return !this._callbacks || this._callbacks.length === 0;
    }
    dispose() {
        this._callbacks = undefined;
        this._contexts = undefined;
    }
}
class Emitter {
    constructor(_options) {
        this._options = _options;
    }
    /**
     * For the public to allow to subscribe
     * to events from this Emitter
     */
    get event() {
        if (!this._event) {
            this._event = (listener, thisArgs, disposables) => {
                if (!this._callbacks) {
                    this._callbacks = new CallbackList();
                }
                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {
                    this._options.onFirstListenerAdd(this);
                }
                this._callbacks.add(listener, thisArgs);
                const result = {
                    dispose: () => {
                        if (!this._callbacks) {
                            // disposable is disposed after emitter is disposed.
                            return;
                        }
                        this._callbacks.remove(listener, thisArgs);
                        result.dispose = Emitter._noop;
                        if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {
                            this._options.onLastListenerRemove(this);
                        }
                    }
                };
                if (Array.isArray(disposables)) {
                    disposables.push(result);
                }
                return result;
            };
        }
        return this._event;
    }
    /**
     * To be kept private to fire an event to
     * subscribers
     */
    fire(event) {
        if (this._callbacks) {
            this._callbacks.invoke.call(this._callbacks, event);
        }
    }
    dispose() {
        if (this._callbacks) {
            this._callbacks.dispose();
            this._callbacks = undefined;
        }
    }
}
exports.Emitter = Emitter;
Emitter._noop = function () { };
//# sourceMappingURL=events.js.map

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/is.js":
/*!******************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/is.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
function boolean(value) {
    return value === true || value === false;
}
exports.boolean = boolean;
function string(value) {
    return typeof value === 'string' || value instanceof String;
}
exports.string = string;
function number(value) {
    return typeof value === 'number' || value instanceof Number;
}
exports.number = number;
function error(value) {
    return value instanceof Error;
}
exports.error = error;
function func(value) {
    return typeof value === 'function';
}
exports.func = func;
function array(value) {
    return Array.isArray(value);
}
exports.array = array;
function stringArray(value) {
    return array(value) && value.every(elem => string(elem));
}
exports.stringArray = stringArray;
//# sourceMappingURL=is.js.map

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/linkedMap.js":
/*!*************************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/linkedMap.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.LRUCache = exports.LinkedMap = exports.Touch = void 0;
var Touch;
(function (Touch) {
    Touch.None = 0;
    Touch.First = 1;
    Touch.AsOld = Touch.First;
    Touch.Last = 2;
    Touch.AsNew = Touch.Last;
})(Touch = exports.Touch || (exports.Touch = {}));
class LinkedMap {
    constructor() {
        this[Symbol.toStringTag] = 'LinkedMap';
        this._map = new Map();
        this._head = undefined;
        this._tail = undefined;
        this._size = 0;
        this._state = 0;
    }
    clear() {
        this._map.clear();
        this._head = undefined;
        this._tail = undefined;
        this._size = 0;
        this._state++;
    }
    isEmpty() {
        return !this._head && !this._tail;
    }
    get size() {
        return this._size;
    }
    get first() {
        var _a;
        return (_a = this._head) === null || _a === void 0 ? void 0 : _a.value;
    }
    get last() {
        var _a;
        return (_a = this._tail) === null || _a === void 0 ? void 0 : _a.value;
    }
    has(key) {
        return this._map.has(key);
    }
    get(key, touch = Touch.None) {
        const item = this._map.get(key);
        if (!item) {
            return undefined;
        }
        if (touch !== Touch.None) {
            this.touch(item, touch);
        }
        return item.value;
    }
    set(key, value, touch = Touch.None) {
        let item = this._map.get(key);
        if (item) {
            item.value = value;
            if (touch !== Touch.None) {
                this.touch(item, touch);
            }
        }
        else {
            item = { key, value, next: undefined, previous: undefined };
            switch (touch) {
                case Touch.None:
                    this.addItemLast(item);
                    break;
                case Touch.First:
                    this.addItemFirst(item);
                    break;
                case Touch.Last:
                    this.addItemLast(item);
                    break;
                default:
                    this.addItemLast(item);
                    break;
            }
            this._map.set(key, item);
            this._size++;
        }
        return this;
    }
    delete(key) {
        return !!this.remove(key);
    }
    remove(key) {
        const item = this._map.get(key);
        if (!item) {
            return undefined;
        }
        this._map.delete(key);
        this.removeItem(item);
        this._size--;
        return item.value;
    }
    shift() {
        if (!this._head && !this._tail) {
            return undefined;
        }
        if (!this._head || !this._tail) {
            throw new Error('Invalid list');
        }
        const item = this._head;
        this._map.delete(item.key);
        this.removeItem(item);
        this._size--;
        return item.value;
    }
    forEach(callbackfn, thisArg) {
        const state = this._state;
        let current = this._head;
        while (current) {
            if (thisArg) {
                callbackfn.bind(thisArg)(current.value, current.key, this);
            }
            else {
                callbackfn(current.value, current.key, this);
            }
            if (this._state !== state) {
                throw new Error(`LinkedMap got modified during iteration.`);
            }
            current = current.next;
        }
    }
    keys() {
        const map = this;
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator]() {
                return iterator;
            },
            next() {
                if (map._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = { value: current.key, done: false };
                    current = current.next;
                    return result;
                }
                else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    values() {
        const map = this;
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator]() {
                return iterator;
            },
            next() {
                if (map._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = { value: current.value, done: false };
                    current = current.next;
                    return result;
                }
                else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    entries() {
        const map = this;
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator]() {
                return iterator;
            },
            next() {
                if (map._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = { value: [current.key, current.value], done: false };
                    current = current.next;
                    return result;
                }
                else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    [Symbol.iterator]() {
        return this.entries();
    }
    trimOld(newSize) {
        if (newSize >= this.size) {
            return;
        }
        if (newSize === 0) {
            this.clear();
            return;
        }
        let current = this._head;
        let currentSize = this.size;
        while (current && currentSize > newSize) {
            this._map.delete(current.key);
            current = current.next;
            currentSize--;
        }
        this._head = current;
        this._size = currentSize;
        if (current) {
            current.previous = undefined;
        }
        this._state++;
    }
    addItemFirst(item) {
        // First time Insert
        if (!this._head && !this._tail) {
            this._tail = item;
        }
        else if (!this._head) {
            throw new Error('Invalid list');
        }
        else {
            item.next = this._head;
            this._head.previous = item;
        }
        this._head = item;
        this._state++;
    }
    addItemLast(item) {
        // First time Insert
        if (!this._head && !this._tail) {
            this._head = item;
        }
        else if (!this._tail) {
            throw new Error('Invalid list');
        }
        else {
            item.previous = this._tail;
            this._tail.next = item;
        }
        this._tail = item;
        this._state++;
    }
    removeItem(item) {
        if (item === this._head && item === this._tail) {
            this._head = undefined;
            this._tail = undefined;
        }
        else if (item === this._head) {
            // This can only happend if size === 1 which is handle
            // by the case above.
            if (!item.next) {
                throw new Error('Invalid list');
            }
            item.next.previous = undefined;
            this._head = item.next;
        }
        else if (item === this._tail) {
            // This can only happend if size === 1 which is handle
            // by the case above.
            if (!item.previous) {
                throw new Error('Invalid list');
            }
            item.previous.next = undefined;
            this._tail = item.previous;
        }
        else {
            const next = item.next;
            const previous = item.previous;
            if (!next || !previous) {
                throw new Error('Invalid list');
            }
            next.previous = previous;
            previous.next = next;
        }
        item.next = undefined;
        item.previous = undefined;
        this._state++;
    }
    touch(item, touch) {
        if (!this._head || !this._tail) {
            throw new Error('Invalid list');
        }
        if ((touch !== Touch.First && touch !== Touch.Last)) {
            return;
        }
        if (touch === Touch.First) {
            if (item === this._head) {
                return;
            }
            const next = item.next;
            const previous = item.previous;
            // Unlink the item
            if (item === this._tail) {
                // previous must be defined since item was not head but is tail
                // So there are more than on item in the map
                previous.next = undefined;
                this._tail = previous;
            }
            else {
                // Both next and previous are not undefined since item was neither head nor tail.
                next.previous = previous;
                previous.next = next;
            }
            // Insert the node at head
            item.previous = undefined;
            item.next = this._head;
            this._head.previous = item;
            this._head = item;
            this._state++;
        }
        else if (touch === Touch.Last) {
            if (item === this._tail) {
                return;
            }
            const next = item.next;
            const previous = item.previous;
            // Unlink the item.
            if (item === this._head) {
                // next must be defined since item was not tail but is head
                // So there are more than on item in the map
                next.previous = undefined;
                this._head = next;
            }
            else {
                // Both next and previous are not undefined since item was neither head nor tail.
                next.previous = previous;
                previous.next = next;
            }
            item.next = undefined;
            item.previous = this._tail;
            this._tail.next = item;
            this._tail = item;
            this._state++;
        }
    }
    toJSON() {
        const data = [];
        this.forEach((value, key) => {
            data.push([key, value]);
        });
        return data;
    }
    fromJSON(data) {
        this.clear();
        for (const [key, value] of data) {
            this.set(key, value);
        }
    }
}
exports.LinkedMap = LinkedMap;
class LRUCache extends LinkedMap {
    constructor(limit, ratio = 1) {
        super();
        this._limit = limit;
        this._ratio = Math.min(Math.max(0, ratio), 1);
    }
    get limit() {
        return this._limit;
    }
    set limit(limit) {
        this._limit = limit;
        this.checkTrim();
    }
    get ratio() {
        return this._ratio;
    }
    set ratio(ratio) {
        this._ratio = Math.min(Math.max(0, ratio), 1);
        this.checkTrim();
    }
    get(key, touch = Touch.AsNew) {
        return super.get(key, touch);
    }
    peek(key) {
        return super.get(key, Touch.None);
    }
    set(key, value) {
        super.set(key, value, Touch.Last);
        this.checkTrim();
        return this;
    }
    checkTrim() {
        if (this.size > this._limit) {
            this.trimOld(Math.round(this._limit * this._ratio));
        }
    }
}
exports.LRUCache = LRUCache;
//# sourceMappingURL=linkedMap.js.map

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/messageBuffer.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/messageBuffer.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractMessageBuffer = void 0;
const CR = 13;
const LF = 10;
const CRLF = '\r\n';
class AbstractMessageBuffer {
    constructor(encoding = 'utf-8') {
        this._encoding = encoding;
        this._chunks = [];
        this._totalLength = 0;
    }
    get encoding() {
        return this._encoding;
    }
    append(chunk) {
        const toAppend = typeof chunk === 'string' ? this.fromString(chunk, this._encoding) : chunk;
        this._chunks.push(toAppend);
        this._totalLength += toAppend.byteLength;
    }
    tryReadHeaders() {
        if (this._chunks.length === 0) {
            return undefined;
        }
        let state = 0;
        let chunkIndex = 0;
        let offset = 0;
        let chunkBytesRead = 0;
        row: while (chunkIndex < this._chunks.length) {
            const chunk = this._chunks[chunkIndex];
            offset = 0;
            column: while (offset < chunk.length) {
                const value = chunk[offset];
                switch (value) {
                    case CR:
                        switch (state) {
                            case 0:
                                state = 1;
                                break;
                            case 2:
                                state = 3;
                                break;
                            default:
                                state = 0;
                        }
                        break;
                    case LF:
                        switch (state) {
                            case 1:
                                state = 2;
                                break;
                            case 3:
                                state = 4;
                                offset++;
                                break row;
                            default:
                                state = 0;
                        }
                        break;
                    default:
                        state = 0;
                }
                offset++;
            }
            chunkBytesRead += chunk.byteLength;
            chunkIndex++;
        }
        if (state !== 4) {
            return undefined;
        }
        // The buffer contains the two CRLF at the end. So we will
        // have two empty lines after the split at the end as well.
        const buffer = this._read(chunkBytesRead + offset);
        const result = new Map();
        const headers = this.toString(buffer, 'ascii').split(CRLF);
        if (headers.length < 2) {
            return result;
        }
        for (let i = 0; i < headers.length - 2; i++) {
            const header = headers[i];
            const index = header.indexOf(':');
            if (index === -1) {
                throw new Error('Message header must separate key and value using :');
            }
            const key = header.substr(0, index);
            const value = header.substr(index + 1).trim();
            result.set(key, value);
        }
        return result;
    }
    tryReadBody(length) {
        if (this._totalLength < length) {
            return undefined;
        }
        return this._read(length);
    }
    get numberOfBytes() {
        return this._totalLength;
    }
    _read(byteCount) {
        if (byteCount === 0) {
            return this.emptyBuffer();
        }
        if (byteCount > this._totalLength) {
            throw new Error(`Cannot read so many bytes!`);
        }
        if (this._chunks[0].byteLength === byteCount) {
            // super fast path, precisely first chunk must be returned
            const chunk = this._chunks[0];
            this._chunks.shift();
            this._totalLength -= byteCount;
            return this.asNative(chunk);
        }
        if (this._chunks[0].byteLength > byteCount) {
            // fast path, the reading is entirely within the first chunk
            const chunk = this._chunks[0];
            const result = this.asNative(chunk, byteCount);
            this._chunks[0] = chunk.slice(byteCount);
            this._totalLength -= byteCount;
            return result;
        }
        const result = this.allocNative(byteCount);
        let resultOffset = 0;
        let chunkIndex = 0;
        while (byteCount > 0) {
            const chunk = this._chunks[chunkIndex];
            if (chunk.byteLength > byteCount) {
                // this chunk will survive
                const chunkPart = chunk.slice(0, byteCount);
                result.set(chunkPart, resultOffset);
                resultOffset += byteCount;
                this._chunks[chunkIndex] = chunk.slice(byteCount);
                this._totalLength -= byteCount;
                byteCount -= byteCount;
            }
            else {
                // this chunk will be entirely read
                result.set(chunk, resultOffset);
                resultOffset += chunk.byteLength;
                this._chunks.shift();
                this._totalLength -= chunk.byteLength;
                byteCount -= chunk.byteLength;
            }
        }
        return result;
    }
}
exports.AbstractMessageBuffer = AbstractMessageBuffer;
//# sourceMappingURL=messageBuffer.js.map

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/messageReader.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/messageReader.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = void 0;
const ral_1 = __webpack_require__(/*! ./ral */ "./node_modules/vscode-jsonrpc/lib/common/ral.js");
const Is = __webpack_require__(/*! ./is */ "./node_modules/vscode-jsonrpc/lib/common/is.js");
const events_1 = __webpack_require__(/*! ./events */ "./node_modules/vscode-jsonrpc/lib/common/events.js");
var MessageReader;
(function (MessageReader) {
    function is(value) {
        let candidate = value;
        return candidate && Is.func(candidate.listen) && Is.func(candidate.dispose) &&
            Is.func(candidate.onError) && Is.func(candidate.onClose) && Is.func(candidate.onPartialMessage);
    }
    MessageReader.is = is;
})(MessageReader = exports.MessageReader || (exports.MessageReader = {}));
class AbstractMessageReader {
    constructor() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
        this.partialMessageEmitter = new events_1.Emitter();
    }
    dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
    }
    get onError() {
        return this.errorEmitter.event;
    }
    fireError(error) {
        this.errorEmitter.fire(this.asError(error));
    }
    get onClose() {
        return this.closeEmitter.event;
    }
    fireClose() {
        this.closeEmitter.fire(undefined);
    }
    get onPartialMessage() {
        return this.partialMessageEmitter.event;
    }
    firePartialMessage(info) {
        this.partialMessageEmitter.fire(info);
    }
    asError(error) {
        if (error instanceof Error) {
            return error;
        }
        else {
            return new Error(`Reader received error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);
        }
    }
}
exports.AbstractMessageReader = AbstractMessageReader;
var ResolvedMessageReaderOptions;
(function (ResolvedMessageReaderOptions) {
    function fromOptions(options) {
        var _a;
        let charset;
        let result;
        let contentDecoder;
        const contentDecoders = new Map();
        let contentTypeDecoder;
        const contentTypeDecoders = new Map();
        if (options === undefined || typeof options === 'string') {
            charset = options !== null && options !== void 0 ? options : 'utf-8';
        }
        else {
            charset = (_a = options.charset) !== null && _a !== void 0 ? _a : 'utf-8';
            if (options.contentDecoder !== undefined) {
                contentDecoder = options.contentDecoder;
                contentDecoders.set(contentDecoder.name, contentDecoder);
            }
            if (options.contentDecoders !== undefined) {
                for (const decoder of options.contentDecoders) {
                    contentDecoders.set(decoder.name, decoder);
                }
            }
            if (options.contentTypeDecoder !== undefined) {
                contentTypeDecoder = options.contentTypeDecoder;
                contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
            }
            if (options.contentTypeDecoders !== undefined) {
                for (const decoder of options.contentTypeDecoders) {
                    contentTypeDecoders.set(decoder.name, decoder);
                }
            }
        }
        if (contentTypeDecoder === undefined) {
            contentTypeDecoder = ral_1.default().applicationJson.decoder;
            contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
        }
        return { charset, contentDecoder, contentDecoders, contentTypeDecoder, contentTypeDecoders };
    }
    ResolvedMessageReaderOptions.fromOptions = fromOptions;
})(ResolvedMessageReaderOptions || (ResolvedMessageReaderOptions = {}));
class ReadableStreamMessageReader extends AbstractMessageReader {
    constructor(readable, options) {
        super();
        this.readable = readable;
        this.options = ResolvedMessageReaderOptions.fromOptions(options);
        this.buffer = ral_1.default().messageBuffer.create(this.options.charset);
        this._partialMessageTimeout = 10000;
        this.nextMessageLength = -1;
        this.messageToken = 0;
    }
    set partialMessageTimeout(timeout) {
        this._partialMessageTimeout = timeout;
    }
    get partialMessageTimeout() {
        return this._partialMessageTimeout;
    }
    listen(callback) {
        this.nextMessageLength = -1;
        this.messageToken = 0;
        this.partialMessageTimer = undefined;
        this.callback = callback;
        const result = this.readable.onData((data) => {
            this.onData(data);
        });
        this.readable.onError((error) => this.fireError(error));
        this.readable.onClose(() => this.fireClose());
        return result;
    }
    onData(data) {
        this.buffer.append(data);
        while (true) {
            if (this.nextMessageLength === -1) {
                const headers = this.buffer.tryReadHeaders();
                if (!headers) {
                    return;
                }
                const contentLength = headers.get('Content-Length');
                if (!contentLength) {
                    throw new Error('Header must provide a Content-Length property.');
                }
                const length = parseInt(contentLength);
                if (isNaN(length)) {
                    throw new Error('Content-Length value must be a number.');
                }
                this.nextMessageLength = length;
            }
            const body = this.buffer.tryReadBody(this.nextMessageLength);
            if (body === undefined) {
                /** We haven't received the full message yet. */
                this.setPartialMessageTimer();
                return;
            }
            this.clearPartialMessageTimer();
            this.nextMessageLength = -1;
            let p;
            if (this.options.contentDecoder !== undefined) {
                p = this.options.contentDecoder.decode(body);
            }
            else {
                p = Promise.resolve(body);
            }
            p.then((value) => {
                this.options.contentTypeDecoder.decode(value, this.options).then((msg) => {
                    this.callback(msg);
                }, (error) => {
                    this.fireError(error);
                });
            }, (error) => {
                this.fireError(error);
            });
        }
    }
    clearPartialMessageTimer() {
        if (this.partialMessageTimer) {
            ral_1.default().timer.clearTimeout(this.partialMessageTimer);
            this.partialMessageTimer = undefined;
        }
    }
    setPartialMessageTimer() {
        this.clearPartialMessageTimer();
        if (this._partialMessageTimeout <= 0) {
            return;
        }
        this.partialMessageTimer = ral_1.default().timer.setTimeout((token, timeout) => {
            this.partialMessageTimer = undefined;
            if (token === this.messageToken) {
                this.firePartialMessage({ messageToken: token, waitingTime: timeout });
                this.setPartialMessageTimer();
            }
        }, this._partialMessageTimeout, this.messageToken, this._partialMessageTimeout);
    }
}
exports.ReadableStreamMessageReader = ReadableStreamMessageReader;
//# sourceMappingURL=messageReader.js.map

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/messageWriter.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/messageWriter.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = void 0;
const ral_1 = __webpack_require__(/*! ./ral */ "./node_modules/vscode-jsonrpc/lib/common/ral.js");
const Is = __webpack_require__(/*! ./is */ "./node_modules/vscode-jsonrpc/lib/common/is.js");
const semaphore_1 = __webpack_require__(/*! ./semaphore */ "./node_modules/vscode-jsonrpc/lib/common/semaphore.js");
const events_1 = __webpack_require__(/*! ./events */ "./node_modules/vscode-jsonrpc/lib/common/events.js");
const ContentLength = 'Content-Length: ';
const CRLF = '\r\n';
var MessageWriter;
(function (MessageWriter) {
    function is(value) {
        let candidate = value;
        return candidate && Is.func(candidate.dispose) && Is.func(candidate.onClose) &&
            Is.func(candidate.onError) && Is.func(candidate.write);
    }
    MessageWriter.is = is;
})(MessageWriter = exports.MessageWriter || (exports.MessageWriter = {}));
class AbstractMessageWriter {
    constructor() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
    }
    dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
    }
    get onError() {
        return this.errorEmitter.event;
    }
    fireError(error, message, count) {
        this.errorEmitter.fire([this.asError(error), message, count]);
    }
    get onClose() {
        return this.closeEmitter.event;
    }
    fireClose() {
        this.closeEmitter.fire(undefined);
    }
    asError(error) {
        if (error instanceof Error) {
            return error;
        }
        else {
            return new Error(`Writer received error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);
        }
    }
}
exports.AbstractMessageWriter = AbstractMessageWriter;
var ResolvedMessageWriterOptions;
(function (ResolvedMessageWriterOptions) {
    function fromOptions(options) {
        var _a, _b;
        if (options === undefined || typeof options === 'string') {
            return { charset: options !== null && options !== void 0 ? options : 'utf-8', contentTypeEncoder: ral_1.default().applicationJson.encoder };
        }
        else {
            return { charset: (_a = options.charset) !== null && _a !== void 0 ? _a : 'utf-8', contentEncoder: options.contentEncoder, contentTypeEncoder: (_b = options.contentTypeEncoder) !== null && _b !== void 0 ? _b : ral_1.default().applicationJson.encoder };
        }
    }
    ResolvedMessageWriterOptions.fromOptions = fromOptions;
})(ResolvedMessageWriterOptions || (ResolvedMessageWriterOptions = {}));
class WriteableStreamMessageWriter extends AbstractMessageWriter {
    constructor(writable, options) {
        super();
        this.writable = writable;
        this.options = ResolvedMessageWriterOptions.fromOptions(options);
        this.errorCount = 0;
        this.writeSemaphore = new semaphore_1.Semaphore(1);
        this.writable.onError((error) => this.fireError(error));
        this.writable.onClose(() => this.fireClose());
    }
    async write(msg) {
        return this.writeSemaphore.lock(async () => {
            const payload = this.options.contentTypeEncoder.encode(msg, this.options).then((buffer) => {
                if (this.options.contentEncoder !== undefined) {
                    return this.options.contentEncoder.encode(buffer);
                }
                else {
                    return buffer;
                }
            });
            return payload.then((buffer) => {
                const headers = [];
                headers.push(ContentLength, buffer.byteLength.toString(), CRLF);
                headers.push(CRLF);
                return this.doWrite(msg, headers, buffer);
            }, (error) => {
                this.fireError(error);
                throw error;
            });
        });
    }
    async doWrite(msg, headers, data) {
        try {
            await this.writable.write(headers.join(''), 'ascii');
            return this.writable.write(data);
        }
        catch (error) {
            this.handleError(error, msg);
            return Promise.reject(error);
        }
    }
    handleError(error, msg) {
        this.errorCount++;
        this.fireError(error, msg, this.errorCount);
    }
    end() {
        this.writable.end();
    }
}
exports.WriteableStreamMessageWriter = WriteableStreamMessageWriter;
//# sourceMappingURL=messageWriter.js.map

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/messages.js":
/*!************************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/messages.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isResponseMessage = exports.isNotificationMessage = exports.isRequestMessage = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType = exports.RequestType0 = exports.AbstractMessageSignature = exports.ParameterStructures = exports.ResponseError = exports.ErrorCodes = void 0;
const is = __webpack_require__(/*! ./is */ "./node_modules/vscode-jsonrpc/lib/common/is.js");
/**
 * Predefined error codes.
 */
var ErrorCodes;
(function (ErrorCodes) {
    // Defined by JSON RPC
    ErrorCodes.ParseError = -32700;
    ErrorCodes.InvalidRequest = -32600;
    ErrorCodes.MethodNotFound = -32601;
    ErrorCodes.InvalidParams = -32602;
    ErrorCodes.InternalError = -32603;
    /**
     * This is the start range of JSON RPC reserved error codes.
     * It doesn't denote a real error code. No application error codes should
     * be defined between the start and end range. For backwards
     * compatibility the `ServerNotInitialized` and the `UnknownErrorCode`
     * are left in the range.
     *
     * @since 3.16.0
    */
    ErrorCodes.jsonrpcReservedErrorRangeStart = -32099;
    /** @deprecated use  jsonrpcReservedErrorRangeStart */
    ErrorCodes.serverErrorStart = ErrorCodes.jsonrpcReservedErrorRangeStart;
    ErrorCodes.MessageWriteError = -32099;
    ErrorCodes.MessageReadError = -32098;
    ErrorCodes.ServerNotInitialized = -32002;
    ErrorCodes.UnknownErrorCode = -32001;
    /**
     * This is the end range of JSON RPC reserved error codes.
     * It doesn't denote a real error code.
     *
     * @since 3.16.0
    */
    ErrorCodes.jsonrpcReservedErrorRangeEnd = -32000;
    /** @deprecated use  jsonrpcReservedErrorRangeEnd */
    ErrorCodes.serverErrorEnd = ErrorCodes.jsonrpcReservedErrorRangeEnd;
})(ErrorCodes = exports.ErrorCodes || (exports.ErrorCodes = {}));
/**
 * An error object return in a response in case a request
 * has failed.
 */
class ResponseError extends Error {
    constructor(code, message, data) {
        super(message);
        this.code = is.number(code) ? code : ErrorCodes.UnknownErrorCode;
        this.data = data;
        Object.setPrototypeOf(this, ResponseError.prototype);
    }
    toJson() {
        return {
            code: this.code,
            message: this.message,
            data: this.data,
        };
    }
}
exports.ResponseError = ResponseError;
class ParameterStructures {
    constructor(kind) {
        this.kind = kind;
    }
    static is(value) {
        return value === ParameterStructures.auto || value === ParameterStructures.byName || value === ParameterStructures.byPosition;
    }
    toString() {
        return this.kind;
    }
}
exports.ParameterStructures = ParameterStructures;
/**
 * The parameter structure is automatically inferred on the number of parameters
 * and the parameter type in case of a single param.
 */
ParameterStructures.auto = new ParameterStructures('auto');
/**
 * Forces `byPosition` parameter structure. This is useful if you have a single
 * parameter which has a literal type.
 */
ParameterStructures.byPosition = new ParameterStructures('byPosition');
/**
 * Forces `byName` parameter structure. This is only useful when having a single
 * parameter. The library will report errors if used with a different number of
 * parameters.
 */
ParameterStructures.byName = new ParameterStructures('byName');
/**
 * An abstract implementation of a MessageType.
 */
class AbstractMessageSignature {
    constructor(method, numberOfParams) {
        this.method = method;
        this.numberOfParams = numberOfParams;
    }
    get parameterStructures() {
        return ParameterStructures.auto;
    }
}
exports.AbstractMessageSignature = AbstractMessageSignature;
/**
 * Classes to type request response pairs
 */
class RequestType0 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 0);
    }
}
exports.RequestType0 = RequestType0;
class RequestType extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.RequestType = RequestType;
class RequestType1 extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.RequestType1 = RequestType1;
class RequestType2 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 2);
    }
}
exports.RequestType2 = RequestType2;
class RequestType3 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 3);
    }
}
exports.RequestType3 = RequestType3;
class RequestType4 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 4);
    }
}
exports.RequestType4 = RequestType4;
class RequestType5 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 5);
    }
}
exports.RequestType5 = RequestType5;
class RequestType6 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 6);
    }
}
exports.RequestType6 = RequestType6;
class RequestType7 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 7);
    }
}
exports.RequestType7 = RequestType7;
class RequestType8 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 8);
    }
}
exports.RequestType8 = RequestType8;
class RequestType9 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 9);
    }
}
exports.RequestType9 = RequestType9;
class NotificationType extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.NotificationType = NotificationType;
class NotificationType0 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 0);
    }
}
exports.NotificationType0 = NotificationType0;
class NotificationType1 extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.NotificationType1 = NotificationType1;
class NotificationType2 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 2);
    }
}
exports.NotificationType2 = NotificationType2;
class NotificationType3 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 3);
    }
}
exports.NotificationType3 = NotificationType3;
class NotificationType4 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 4);
    }
}
exports.NotificationType4 = NotificationType4;
class NotificationType5 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 5);
    }
}
exports.NotificationType5 = NotificationType5;
class NotificationType6 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 6);
    }
}
exports.NotificationType6 = NotificationType6;
class NotificationType7 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 7);
    }
}
exports.NotificationType7 = NotificationType7;
class NotificationType8 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 8);
    }
}
exports.NotificationType8 = NotificationType8;
class NotificationType9 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 9);
    }
}
exports.NotificationType9 = NotificationType9;
/**
 * Tests if the given message is a request message
 */
function isRequestMessage(message) {
    const candidate = message;
    return candidate && is.string(candidate.method) && (is.string(candidate.id) || is.number(candidate.id));
}
exports.isRequestMessage = isRequestMessage;
/**
 * Tests if the given message is a notification message
 */
function isNotificationMessage(message) {
    const candidate = message;
    return candidate && is.string(candidate.method) && message.id === void 0;
}
exports.isNotificationMessage = isNotificationMessage;
/**
 * Tests if the given message is a response message
 */
function isResponseMessage(message) {
    const candidate = message;
    return candidate && (candidate.result !== void 0 || !!candidate.error) && (is.string(candidate.id) || is.number(candidate.id) || candidate.id === null);
}
exports.isResponseMessage = isResponseMessage;
//# sourceMappingURL=messages.js.map

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/ral.js":
/*!*******************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/ral.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
let _ral;
function RAL() {
    if (_ral === undefined) {
        throw new Error(`No runtime abstraction layer installed`);
    }
    return _ral;
}
(function (RAL) {
    function install(ral) {
        if (ral === undefined) {
            throw new Error(`No runtime abstraction layer provided`);
        }
        _ral = ral;
    }
    RAL.install = install;
})(RAL || (RAL = {}));
exports.default = RAL;
//# sourceMappingURL=ral.js.map

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/semaphore.js":
/*!*************************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/semaphore.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Semaphore = void 0;
const ral_1 = __webpack_require__(/*! ./ral */ "./node_modules/vscode-jsonrpc/lib/common/ral.js");
class Semaphore {
    constructor(capacity = 1) {
        if (capacity <= 0) {
            throw new Error('Capacity must be greater than 0');
        }
        this._capacity = capacity;
        this._active = 0;
        this._waiting = [];
    }
    lock(thunk) {
        return new Promise((resolve, reject) => {
            this._waiting.push({ thunk, resolve, reject });
            this.runNext();
        });
    }
    get active() {
        return this._active;
    }
    runNext() {
        if (this._waiting.length === 0 || this._active === this._capacity) {
            return;
        }
        ral_1.default().timer.setImmediate(() => this.doRunNext());
    }
    doRunNext() {
        if (this._waiting.length === 0 || this._active === this._capacity) {
            return;
        }
        const next = this._waiting.shift();
        this._active++;
        if (this._active > this._capacity) {
            throw new Error(`To many thunks active`);
        }
        try {
            const result = next.thunk();
            if (result instanceof Promise) {
                result.then((value) => {
                    this._active--;
                    next.resolve(value);
                    this.runNext();
                }, (err) => {
                    this._active--;
                    next.reject(err);
                    this.runNext();
                });
            }
            else {
                this._active--;
                next.resolve(result);
                this.runNext();
            }
        }
        catch (err) {
            this._active--;
            next.reject(err);
            this.runNext();
        }
    }
}
exports.Semaphore = Semaphore;
//# sourceMappingURL=semaphore.js.map

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/node/main.js":
/*!******************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/node/main.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMessageConnection = exports.createServerSocketTransport = exports.createClientSocketTransport = exports.createServerPipeTransport = exports.createClientPipeTransport = exports.generateRandomPipeName = exports.StreamMessageWriter = exports.StreamMessageReader = exports.SocketMessageWriter = exports.SocketMessageReader = exports.IPCMessageWriter = exports.IPCMessageReader = void 0;
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ----------------------------------------------------------------------------------------- */
const ril_1 = __webpack_require__(/*! ./ril */ "./node_modules/vscode-jsonrpc/lib/node/ril.js");
// Install the node runtime abstract.
ril_1.default.install();
const api_1 = __webpack_require__(/*! ../common/api */ "./node_modules/vscode-jsonrpc/lib/common/api.js");
const path = __webpack_require__(/*! path */ "path");
const os = __webpack_require__(/*! os */ "os");
const crypto_1 = __webpack_require__(/*! crypto */ "crypto");
const net_1 = __webpack_require__(/*! net */ "net");
__exportStar(__webpack_require__(/*! ../common/api */ "./node_modules/vscode-jsonrpc/lib/common/api.js"), exports);
class IPCMessageReader extends api_1.AbstractMessageReader {
    constructor(process) {
        super();
        this.process = process;
        let eventEmitter = this.process;
        eventEmitter.on('error', (error) => this.fireError(error));
        eventEmitter.on('close', () => this.fireClose());
    }
    listen(callback) {
        this.process.on('message', callback);
        return api_1.Disposable.create(() => this.process.off('message', callback));
    }
}
exports.IPCMessageReader = IPCMessageReader;
class IPCMessageWriter extends api_1.AbstractMessageWriter {
    constructor(process) {
        super();
        this.process = process;
        this.errorCount = 0;
        let eventEmitter = this.process;
        eventEmitter.on('error', (error) => this.fireError(error));
        eventEmitter.on('close', () => this.fireClose);
    }
    write(msg) {
        try {
            if (typeof this.process.send === 'function') {
                this.process.send(msg, undefined, undefined, (error) => {
                    if (error) {
                        this.errorCount++;
                        this.handleError(error, msg);
                    }
                    else {
                        this.errorCount = 0;
                    }
                });
            }
            return Promise.resolve();
        }
        catch (error) {
            this.handleError(error, msg);
            return Promise.reject(error);
        }
    }
    handleError(error, msg) {
        this.errorCount++;
        this.fireError(error, msg, this.errorCount);
    }
    end() {
    }
}
exports.IPCMessageWriter = IPCMessageWriter;
class SocketMessageReader extends api_1.ReadableStreamMessageReader {
    constructor(socket, encoding = 'utf-8') {
        super(ril_1.default().stream.asReadableStream(socket), encoding);
    }
}
exports.SocketMessageReader = SocketMessageReader;
class SocketMessageWriter extends api_1.WriteableStreamMessageWriter {
    constructor(socket, options) {
        super(ril_1.default().stream.asWritableStream(socket), options);
        this.socket = socket;
    }
    dispose() {
        super.dispose();
        this.socket.destroy();
    }
}
exports.SocketMessageWriter = SocketMessageWriter;
class StreamMessageReader extends api_1.ReadableStreamMessageReader {
    constructor(readble, encoding) {
        super(ril_1.default().stream.asReadableStream(readble), encoding);
    }
}
exports.StreamMessageReader = StreamMessageReader;
class StreamMessageWriter extends api_1.WriteableStreamMessageWriter {
    constructor(writable, options) {
        super(ril_1.default().stream.asWritableStream(writable), options);
    }
}
exports.StreamMessageWriter = StreamMessageWriter;
const XDG_RUNTIME_DIR = process.env['XDG_RUNTIME_DIR'];
const safeIpcPathLengths = new Map([
    ['linux', 107],
    ['darwin', 103]
]);
function generateRandomPipeName() {
    const randomSuffix = crypto_1.randomBytes(21).toString('hex');
    if (process.platform === 'win32') {
        return `\\\\.\\pipe\\vscode-jsonrpc-${randomSuffix}-sock`;
    }
    let result;
    if (XDG_RUNTIME_DIR) {
        result = path.join(XDG_RUNTIME_DIR, `vscode-ipc-${randomSuffix}.sock`);
    }
    else {
        result = path.join(os.tmpdir(), `vscode-${randomSuffix}.sock`);
    }
    const limit = safeIpcPathLengths.get(process.platform);
    if (limit !== undefined && result.length >= limit) {
        ril_1.default().console.warn(`WARNING: IPC handle "${result}" is longer than ${limit} characters.`);
    }
    return result;
}
exports.generateRandomPipeName = generateRandomPipeName;
function createClientPipeTransport(pipeName, encoding = 'utf-8') {
    let connectResolve;
    const connected = new Promise((resolve, _reject) => {
        connectResolve = resolve;
    });
    return new Promise((resolve, reject) => {
        let server = net_1.createServer((socket) => {
            server.close();
            connectResolve([
                new SocketMessageReader(socket, encoding),
                new SocketMessageWriter(socket, encoding)
            ]);
        });
        server.on('error', reject);
        server.listen(pipeName, () => {
            server.removeListener('error', reject);
            resolve({
                onConnected: () => { return connected; }
            });
        });
    });
}
exports.createClientPipeTransport = createClientPipeTransport;
function createServerPipeTransport(pipeName, encoding = 'utf-8') {
    const socket = net_1.createConnection(pipeName);
    return [
        new SocketMessageReader(socket, encoding),
        new SocketMessageWriter(socket, encoding)
    ];
}
exports.createServerPipeTransport = createServerPipeTransport;
function createClientSocketTransport(port, encoding = 'utf-8') {
    let connectResolve;
    const connected = new Promise((resolve, _reject) => {
        connectResolve = resolve;
    });
    return new Promise((resolve, reject) => {
        const server = net_1.createServer((socket) => {
            server.close();
            connectResolve([
                new SocketMessageReader(socket, encoding),
                new SocketMessageWriter(socket, encoding)
            ]);
        });
        server.on('error', reject);
        server.listen(port, '127.0.0.1', () => {
            server.removeListener('error', reject);
            resolve({
                onConnected: () => { return connected; }
            });
        });
    });
}
exports.createClientSocketTransport = createClientSocketTransport;
function createServerSocketTransport(port, encoding = 'utf-8') {
    const socket = net_1.createConnection(port, '127.0.0.1');
    return [
        new SocketMessageReader(socket, encoding),
        new SocketMessageWriter(socket, encoding)
    ];
}
exports.createServerSocketTransport = createServerSocketTransport;
function isReadableStream(value) {
    const candidate = value;
    return candidate.read !== undefined && candidate.addListener !== undefined;
}
function isWritableStream(value) {
    const candidate = value;
    return candidate.write !== undefined && candidate.addListener !== undefined;
}
function createMessageConnection(input, output, logger, options) {
    if (!logger) {
        logger = api_1.NullLogger;
    }
    const reader = isReadableStream(input) ? new StreamMessageReader(input) : input;
    const writer = isWritableStream(output) ? new StreamMessageWriter(output) : output;
    if (api_1.ConnectionStrategy.is(options)) {
        options = { connectionStrategy: options };
    }
    return api_1.createMessageConnection(reader, writer, logger, options);
}
exports.createMessageConnection = createMessageConnection;
//# sourceMappingURL=main.js.map

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/node/ril.js":
/*!*****************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/node/ril.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
const ral_1 = __webpack_require__(/*! ../common/ral */ "./node_modules/vscode-jsonrpc/lib/common/ral.js");
const util_1 = __webpack_require__(/*! util */ "util");
const disposable_1 = __webpack_require__(/*! ../common/disposable */ "./node_modules/vscode-jsonrpc/lib/common/disposable.js");
const messageBuffer_1 = __webpack_require__(/*! ../common/messageBuffer */ "./node_modules/vscode-jsonrpc/lib/common/messageBuffer.js");
class MessageBuffer extends messageBuffer_1.AbstractMessageBuffer {
    constructor(encoding = 'utf-8') {
        super(encoding);
    }
    emptyBuffer() {
        return MessageBuffer.emptyBuffer;
    }
    fromString(value, encoding) {
        return Buffer.from(value, encoding);
    }
    toString(value, encoding) {
        if (value instanceof Buffer) {
            return value.toString(encoding);
        }
        else {
            return new util_1.TextDecoder(encoding).decode(value);
        }
    }
    asNative(buffer, length) {
        if (length === undefined) {
            return buffer instanceof Buffer ? buffer : Buffer.from(buffer);
        }
        else {
            return buffer instanceof Buffer ? buffer.slice(0, length) : Buffer.from(buffer, 0, length);
        }
    }
    allocNative(length) {
        return Buffer.allocUnsafe(length);
    }
}
MessageBuffer.emptyBuffer = Buffer.allocUnsafe(0);
class ReadableStreamWrapper {
    constructor(stream) {
        this.stream = stream;
    }
    onClose(listener) {
        this.stream.on('close', listener);
        return disposable_1.Disposable.create(() => this.stream.off('close', listener));
    }
    onError(listener) {
        this.stream.on('error', listener);
        return disposable_1.Disposable.create(() => this.stream.off('error', listener));
    }
    onEnd(listener) {
        this.stream.on('end', listener);
        return disposable_1.Disposable.create(() => this.stream.off('end', listener));
    }
    onData(listener) {
        this.stream.on('data', listener);
        return disposable_1.Disposable.create(() => this.stream.off('data', listener));
    }
}
class WritableStreamWrapper {
    constructor(stream) {
        this.stream = stream;
    }
    onClose(listener) {
        this.stream.on('close', listener);
        return disposable_1.Disposable.create(() => this.stream.off('close', listener));
    }
    onError(listener) {
        this.stream.on('error', listener);
        return disposable_1.Disposable.create(() => this.stream.off('error', listener));
    }
    onEnd(listener) {
        this.stream.on('end', listener);
        return disposable_1.Disposable.create(() => this.stream.off('end', listener));
    }
    write(data, encoding) {
        return new Promise((resolve, reject) => {
            const callback = (error) => {
                if (error === undefined || error === null) {
                    resolve();
                }
                else {
                    reject(error);
                }
            };
            if (typeof data === 'string') {
                this.stream.write(data, encoding, callback);
            }
            else {
                this.stream.write(data, callback);
            }
        });
    }
    end() {
        this.stream.end();
    }
}
const _ril = Object.freeze({
    messageBuffer: Object.freeze({
        create: (encoding) => new MessageBuffer(encoding)
    }),
    applicationJson: Object.freeze({
        encoder: Object.freeze({
            name: 'application/json',
            encode: (msg, options) => {
                try {
                    return Promise.resolve(Buffer.from(JSON.stringify(msg, undefined, 0), options.charset));
                }
                catch (err) {
                    return Promise.reject(err);
                }
            }
        }),
        decoder: Object.freeze({
            name: 'application/json',
            decode: (buffer, options) => {
                try {
                    if (buffer instanceof Buffer) {
                        return Promise.resolve(JSON.parse(buffer.toString(options.charset)));
                    }
                    else {
                        return Promise.resolve(JSON.parse(new util_1.TextDecoder(options.charset).decode(buffer)));
                    }
                }
                catch (err) {
                    return Promise.reject(err);
                }
            }
        })
    }),
    stream: Object.freeze({
        asReadableStream: (stream) => new ReadableStreamWrapper(stream),
        asWritableStream: (stream) => new WritableStreamWrapper(stream)
    }),
    console: console,
    timer: Object.freeze({
        setTimeout(callback, ms, ...args) {
            return setTimeout(callback, ms, ...args);
        },
        clearTimeout(handle) {
            clearTimeout(handle);
        },
        setImmediate(callback, ...args) {
            return setImmediate(callback, ...args);
        },
        clearImmediate(handle) {
            clearImmediate(handle);
        }
    })
});
function RIL() {
    return _ril;
}
(function (RIL) {
    function install() {
        ral_1.default.install(_ril);
    }
    RIL.install = install;
})(RIL || (RIL = {}));
exports.default = RIL;
//# sourceMappingURL=ril.js.map

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/node.js":
/*!*********************************************!*\
  !*** ./node_modules/vscode-jsonrpc/node.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ----------------------------------------------------------------------------------------- */


module.exports = __webpack_require__(/*! ./lib/node/main */ "./node_modules/vscode-jsonrpc/lib/node/main.js");

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/api.js":
/*!***********************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/api.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LSPErrorCodes = exports.createProtocolConnection = void 0;
__exportStar(__webpack_require__(/*! vscode-jsonrpc */ "./node_modules/vscode-jsonrpc/lib/node/main.js"), exports);
__exportStar(__webpack_require__(/*! vscode-languageserver-types */ "./node_modules/vscode-languageserver-types/lib/esm/main.js"), exports);
__exportStar(__webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js"), exports);
__exportStar(__webpack_require__(/*! ./protocol */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.js"), exports);
var connection_1 = __webpack_require__(/*! ./connection */ "./node_modules/vscode-languageserver-protocol/lib/common/connection.js");
Object.defineProperty(exports, "createProtocolConnection", { enumerable: true, get: function () { return connection_1.createProtocolConnection; } });
var LSPErrorCodes;
(function (LSPErrorCodes) {
    /**
    * This is the start range of LSP reserved error codes.
    * It doesn't denote a real error code.
    *
    * @since 3.16.0
    */
    LSPErrorCodes.lspReservedErrorRangeStart = -32899;
    LSPErrorCodes.ContentModified = -32801;
    LSPErrorCodes.RequestCancelled = -32800;
    /**
    * This is the end range of LSP reserved error codes.
    * It doesn't denote a real error code.
    *
    * @since 3.16.0
    */
    LSPErrorCodes.lspReservedErrorRangeEnd = -32800;
})(LSPErrorCodes = exports.LSPErrorCodes || (exports.LSPErrorCodes = {}));
//# sourceMappingURL=api.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/connection.js":
/*!******************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/connection.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createProtocolConnection = void 0;
const vscode_jsonrpc_1 = __webpack_require__(/*! vscode-jsonrpc */ "./node_modules/vscode-jsonrpc/lib/node/main.js");
function createProtocolConnection(input, output, logger, options) {
    if (vscode_jsonrpc_1.ConnectionStrategy.is(options)) {
        options = { connectionStrategy: options };
    }
    return vscode_jsonrpc_1.createMessageConnection(input, output, logger, options);
}
exports.createProtocolConnection = createProtocolConnection;
//# sourceMappingURL=connection.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js":
/*!****************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/messages.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProtocolNotificationType = exports.ProtocolNotificationType0 = exports.ProtocolRequestType = exports.ProtocolRequestType0 = exports.RegistrationType = void 0;
const vscode_jsonrpc_1 = __webpack_require__(/*! vscode-jsonrpc */ "./node_modules/vscode-jsonrpc/lib/node/main.js");
class RegistrationType {
    constructor(method) {
        this.method = method;
    }
}
exports.RegistrationType = RegistrationType;
class ProtocolRequestType0 extends vscode_jsonrpc_1.RequestType0 {
    constructor(method) {
        super(method);
    }
}
exports.ProtocolRequestType0 = ProtocolRequestType0;
class ProtocolRequestType extends vscode_jsonrpc_1.RequestType {
    constructor(method) {
        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
    }
}
exports.ProtocolRequestType = ProtocolRequestType;
class ProtocolNotificationType0 extends vscode_jsonrpc_1.NotificationType0 {
    constructor(method) {
        super(method);
    }
}
exports.ProtocolNotificationType0 = ProtocolNotificationType0;
class ProtocolNotificationType extends vscode_jsonrpc_1.NotificationType {
    constructor(method) {
        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
    }
}
exports.ProtocolNotificationType = ProtocolNotificationType;
// let x: ProtocolNotificationType<number, { value: number}>;
// let y: ProtocolNotificationType<string, { value: number}>;
// x = y;
//# sourceMappingURL=messages.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.callHierarchy.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.callHierarchy.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) TypeFox and others. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.CallHierarchyPrepareRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A request to result a `CallHierarchyItem` in a document at a given position.
 * Can be used as an input to a incoming or outgoing call hierarchy.
 *
 * @since 3.16.0
 */
var CallHierarchyPrepareRequest;
(function (CallHierarchyPrepareRequest) {
    CallHierarchyPrepareRequest.method = 'textDocument/prepareCallHierarchy';
    CallHierarchyPrepareRequest.type = new messages_1.ProtocolRequestType(CallHierarchyPrepareRequest.method);
})(CallHierarchyPrepareRequest = exports.CallHierarchyPrepareRequest || (exports.CallHierarchyPrepareRequest = {}));
/**
 * A request to resolve the incoming calls for a given `CallHierarchyItem`.
 *
 * @since 3.16.0
 */
var CallHierarchyIncomingCallsRequest;
(function (CallHierarchyIncomingCallsRequest) {
    CallHierarchyIncomingCallsRequest.method = 'callHierarchy/incomingCalls';
    CallHierarchyIncomingCallsRequest.type = new messages_1.ProtocolRequestType(CallHierarchyIncomingCallsRequest.method);
})(CallHierarchyIncomingCallsRequest = exports.CallHierarchyIncomingCallsRequest || (exports.CallHierarchyIncomingCallsRequest = {}));
/**
 * A request to resolve the outgoing calls for a given `CallHierarchyItem`.
 *
 * @since 3.16.0
 */
var CallHierarchyOutgoingCallsRequest;
(function (CallHierarchyOutgoingCallsRequest) {
    CallHierarchyOutgoingCallsRequest.method = 'callHierarchy/outgoingCalls';
    CallHierarchyOutgoingCallsRequest.type = new messages_1.ProtocolRequestType(CallHierarchyOutgoingCallsRequest.method);
})(CallHierarchyOutgoingCallsRequest = exports.CallHierarchyOutgoingCallsRequest || (exports.CallHierarchyOutgoingCallsRequest = {}));
//# sourceMappingURL=protocol.callHierarchy.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.colorProvider.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.colorProvider.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ColorPresentationRequest = exports.DocumentColorRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A request to list all color symbols found in a given text document. The request's
 * parameter is of type [DocumentColorParams](#DocumentColorParams) the
 * response is of type [ColorInformation[]](#ColorInformation) or a Thenable
 * that resolves to such.
 */
var DocumentColorRequest;
(function (DocumentColorRequest) {
    DocumentColorRequest.method = 'textDocument/documentColor';
    DocumentColorRequest.type = new messages_1.ProtocolRequestType(DocumentColorRequest.method);
})(DocumentColorRequest = exports.DocumentColorRequest || (exports.DocumentColorRequest = {}));
/**
 * A request to list all presentation for a color. The request's
 * parameter is of type [ColorPresentationParams](#ColorPresentationParams) the
 * response is of type [ColorInformation[]](#ColorInformation) or a Thenable
 * that resolves to such.
 */
var ColorPresentationRequest;
(function (ColorPresentationRequest) {
    ColorPresentationRequest.type = new messages_1.ProtocolRequestType('textDocument/colorPresentation');
})(ColorPresentationRequest = exports.ColorPresentationRequest || (exports.ColorPresentationRequest = {}));
//# sourceMappingURL=protocol.colorProvider.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.configuration.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.configuration.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * The 'workspace/configuration' request is sent from the server to the client to fetch a certain
 * configuration setting.
 *
 * This pull model replaces the old push model were the client signaled configuration change via an
 * event. If the server still needs to react to configuration changes (since the server caches the
 * result of `workspace/configuration` requests) the server should register for an empty configuration
 * change event and empty the cache if such an event is received.
 */
var ConfigurationRequest;
(function (ConfigurationRequest) {
    ConfigurationRequest.type = new messages_1.ProtocolRequestType('workspace/configuration');
})(ConfigurationRequest = exports.ConfigurationRequest || (exports.ConfigurationRequest = {}));
//# sourceMappingURL=protocol.configuration.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.declaration.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.declaration.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeclarationRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
// @ts-ignore: to avoid inlining LocatioLink as dynamic import
let __noDynamicImport;
/**
 * A request to resolve the type definition locations of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPositioParams]
 * (#TextDocumentPositionParams) the response is of type [Declaration](#Declaration)
 * or a typed array of [DeclarationLink](#DeclarationLink) or a Thenable that resolves
 * to such.
 */
var DeclarationRequest;
(function (DeclarationRequest) {
    DeclarationRequest.method = 'textDocument/declaration';
    DeclarationRequest.type = new messages_1.ProtocolRequestType(DeclarationRequest.method);
})(DeclarationRequest = exports.DeclarationRequest || (exports.DeclarationRequest = {}));
//# sourceMappingURL=protocol.declaration.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.fileOperations.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.fileOperations.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.DidRenameFilesNotification = exports.WillRenameFilesRequest = exports.DidCreateFilesNotification = exports.WillCreateFilesRequest = exports.FileOperationPatternKind = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A pattern kind describing if a glob pattern matches a file a folder or
 * both.
 *
 * @since 3.16.0
 */
var FileOperationPatternKind;
(function (FileOperationPatternKind) {
    /**
     * The pattern matches a file only.
     */
    FileOperationPatternKind.file = 'file';
    /**
     * The pattern matches a folder only.
     */
    FileOperationPatternKind.folder = 'folder';
})(FileOperationPatternKind = exports.FileOperationPatternKind || (exports.FileOperationPatternKind = {}));
/**
 * The will create files request is sent from the client to the server before files are actually
 * created as long as the creation is triggered from within the client.
 *
 * @since 3.16.0
 */
var WillCreateFilesRequest;
(function (WillCreateFilesRequest) {
    WillCreateFilesRequest.method = 'workspace/willCreateFiles';
    WillCreateFilesRequest.type = new messages_1.ProtocolRequestType(WillCreateFilesRequest.method);
})(WillCreateFilesRequest = exports.WillCreateFilesRequest || (exports.WillCreateFilesRequest = {}));
/**
 * The did create files notification is sent from the client to the server when
 * files were created from within the client.
 *
 * @since 3.16.0
 */
var DidCreateFilesNotification;
(function (DidCreateFilesNotification) {
    DidCreateFilesNotification.method = 'workspace/didCreateFiles';
    DidCreateFilesNotification.type = new messages_1.ProtocolNotificationType(DidCreateFilesNotification.method);
})(DidCreateFilesNotification = exports.DidCreateFilesNotification || (exports.DidCreateFilesNotification = {}));
/**
 * The will rename files request is sent from the client to the server before files are actually
 * renamed as long as the rename is triggered from within the client.
 *
 * @since 3.16.0
 */
var WillRenameFilesRequest;
(function (WillRenameFilesRequest) {
    WillRenameFilesRequest.method = 'workspace/willRenameFiles';
    WillRenameFilesRequest.type = new messages_1.ProtocolRequestType(WillRenameFilesRequest.method);
})(WillRenameFilesRequest = exports.WillRenameFilesRequest || (exports.WillRenameFilesRequest = {}));
/**
 * The did rename files notification is sent from the client to the server when
 * files were renamed from within the client.
 *
 * @since 3.16.0
 */
var DidRenameFilesNotification;
(function (DidRenameFilesNotification) {
    DidRenameFilesNotification.method = 'workspace/didRenameFiles';
    DidRenameFilesNotification.type = new messages_1.ProtocolNotificationType(DidRenameFilesNotification.method);
})(DidRenameFilesNotification = exports.DidRenameFilesNotification || (exports.DidRenameFilesNotification = {}));
/**
 * The will delete files request is sent from the client to the server before files are actually
 * deleted as long as the deletion is triggered from within the client.
 *
 * @since 3.16.0
 */
var DidDeleteFilesNotification;
(function (DidDeleteFilesNotification) {
    DidDeleteFilesNotification.method = 'workspace/didDeleteFiles';
    DidDeleteFilesNotification.type = new messages_1.ProtocolNotificationType(DidDeleteFilesNotification.method);
})(DidDeleteFilesNotification = exports.DidDeleteFilesNotification || (exports.DidDeleteFilesNotification = {}));
/**
 * The did delete files notification is sent from the client to the server when
 * files were deleted from within the client.
 *
 * @since 3.16.0
 */
var WillDeleteFilesRequest;
(function (WillDeleteFilesRequest) {
    WillDeleteFilesRequest.method = 'workspace/willDeleteFiles';
    WillDeleteFilesRequest.type = new messages_1.ProtocolRequestType(WillDeleteFilesRequest.method);
})(WillDeleteFilesRequest = exports.WillDeleteFilesRequest || (exports.WillDeleteFilesRequest = {}));
//# sourceMappingURL=protocol.fileOperations.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.foldingRange.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.foldingRange.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.FoldingRangeRequest = exports.FoldingRangeKind = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * Enum of known range kinds
 */
var FoldingRangeKind;
(function (FoldingRangeKind) {
    /**
     * Folding range for a comment
     */
    FoldingRangeKind["Comment"] = "comment";
    /**
     * Folding range for a imports or includes
     */
    FoldingRangeKind["Imports"] = "imports";
    /**
     * Folding range for a region (e.g. `#region`)
     */
    FoldingRangeKind["Region"] = "region";
})(FoldingRangeKind = exports.FoldingRangeKind || (exports.FoldingRangeKind = {}));
/**
 * A request to provide folding ranges in a document. The request's
 * parameter is of type [FoldingRangeParams](#FoldingRangeParams), the
 * response is of type [FoldingRangeList](#FoldingRangeList) or a Thenable
 * that resolves to such.
 */
var FoldingRangeRequest;
(function (FoldingRangeRequest) {
    FoldingRangeRequest.method = 'textDocument/foldingRange';
    FoldingRangeRequest.type = new messages_1.ProtocolRequestType(FoldingRangeRequest.method);
})(FoldingRangeRequest = exports.FoldingRangeRequest || (exports.FoldingRangeRequest = {}));
//# sourceMappingURL=protocol.foldingRange.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.implementation.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.implementation.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImplementationRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
// @ts-ignore: to avoid inlining LocatioLink as dynamic import
let __noDynamicImport;
/**
 * A request to resolve the implementation locations of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPositioParams]
 * (#TextDocumentPositionParams) the response is of type [Definition](#Definition) or a
 * Thenable that resolves to such.
 */
var ImplementationRequest;
(function (ImplementationRequest) {
    ImplementationRequest.method = 'textDocument/implementation';
    ImplementationRequest.type = new messages_1.ProtocolRequestType(ImplementationRequest.method);
})(ImplementationRequest = exports.ImplementationRequest || (exports.ImplementationRequest = {}));
//# sourceMappingURL=protocol.implementation.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.js":
/*!****************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentLinkRequest = exports.CodeLensRefreshRequest = exports.CodeLensResolveRequest = exports.CodeLensRequest = exports.WorkspaceSymbolRequest = exports.CodeActionResolveRequest = exports.CodeActionRequest = exports.DocumentSymbolRequest = exports.DocumentHighlightRequest = exports.ReferencesRequest = exports.DefinitionRequest = exports.SignatureHelpRequest = exports.SignatureHelpTriggerKind = exports.HoverRequest = exports.CompletionResolveRequest = exports.CompletionRequest = exports.CompletionTriggerKind = exports.PublishDiagnosticsNotification = exports.WatchKind = exports.FileChangeType = exports.DidChangeWatchedFilesNotification = exports.WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentNotification = exports.TextDocumentSaveReason = exports.DidSaveTextDocumentNotification = exports.DidCloseTextDocumentNotification = exports.DidChangeTextDocumentNotification = exports.TextDocumentContentChangeEvent = exports.DidOpenTextDocumentNotification = exports.TextDocumentSyncKind = exports.TelemetryEventNotification = exports.LogMessageNotification = exports.ShowMessageRequest = exports.ShowMessageNotification = exports.MessageType = exports.DidChangeConfigurationNotification = exports.ExitNotification = exports.ShutdownRequest = exports.InitializedNotification = exports.InitializeError = exports.InitializeRequest = exports.WorkDoneProgressOptions = exports.TextDocumentRegistrationOptions = exports.StaticRegistrationOptions = exports.FailureHandlingKind = exports.ResourceOperationKind = exports.UnregistrationRequest = exports.RegistrationRequest = exports.DocumentSelector = exports.DocumentFilter = void 0;
exports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.WillRenameFilesRequest = exports.DidRenameFilesNotification = exports.WillCreateFilesRequest = exports.DidCreateFilesNotification = exports.FileOperationPatternKind = exports.LinkedEditingRangeRequest = exports.ShowDocumentRequest = exports.SemanticTokensRegistrationType = exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.TokenFormat = exports.SemanticTokens = exports.SemanticTokenModifiers = exports.SemanticTokenTypes = exports.CallHierarchyPrepareRequest = exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = exports.SelectionRangeRequest = exports.DeclarationRequest = exports.FoldingRangeRequest = exports.ColorPresentationRequest = exports.DocumentColorRequest = exports.ConfigurationRequest = exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = exports.TypeDefinitionRequest = exports.ImplementationRequest = exports.ApplyWorkspaceEditRequest = exports.ExecuteCommandRequest = exports.PrepareRenameRequest = exports.RenameRequest = exports.PrepareSupportDefaultBehavior = exports.DocumentOnTypeFormattingRequest = exports.DocumentRangeFormattingRequest = exports.DocumentFormattingRequest = exports.DocumentLinkResolveRequest = void 0;
const Is = __webpack_require__(/*! ./utils/is */ "./node_modules/vscode-languageserver-protocol/lib/common/utils/is.js");
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
const protocol_implementation_1 = __webpack_require__(/*! ./protocol.implementation */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.implementation.js");
Object.defineProperty(exports, "ImplementationRequest", { enumerable: true, get: function () { return protocol_implementation_1.ImplementationRequest; } });
const protocol_typeDefinition_1 = __webpack_require__(/*! ./protocol.typeDefinition */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.typeDefinition.js");
Object.defineProperty(exports, "TypeDefinitionRequest", { enumerable: true, get: function () { return protocol_typeDefinition_1.TypeDefinitionRequest; } });
const protocol_workspaceFolders_1 = __webpack_require__(/*! ./protocol.workspaceFolders */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.workspaceFolders.js");
Object.defineProperty(exports, "WorkspaceFoldersRequest", { enumerable: true, get: function () { return protocol_workspaceFolders_1.WorkspaceFoldersRequest; } });
Object.defineProperty(exports, "DidChangeWorkspaceFoldersNotification", { enumerable: true, get: function () { return protocol_workspaceFolders_1.DidChangeWorkspaceFoldersNotification; } });
const protocol_configuration_1 = __webpack_require__(/*! ./protocol.configuration */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.configuration.js");
Object.defineProperty(exports, "ConfigurationRequest", { enumerable: true, get: function () { return protocol_configuration_1.ConfigurationRequest; } });
const protocol_colorProvider_1 = __webpack_require__(/*! ./protocol.colorProvider */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.colorProvider.js");
Object.defineProperty(exports, "DocumentColorRequest", { enumerable: true, get: function () { return protocol_colorProvider_1.DocumentColorRequest; } });
Object.defineProperty(exports, "ColorPresentationRequest", { enumerable: true, get: function () { return protocol_colorProvider_1.ColorPresentationRequest; } });
const protocol_foldingRange_1 = __webpack_require__(/*! ./protocol.foldingRange */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.foldingRange.js");
Object.defineProperty(exports, "FoldingRangeRequest", { enumerable: true, get: function () { return protocol_foldingRange_1.FoldingRangeRequest; } });
const protocol_declaration_1 = __webpack_require__(/*! ./protocol.declaration */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.declaration.js");
Object.defineProperty(exports, "DeclarationRequest", { enumerable: true, get: function () { return protocol_declaration_1.DeclarationRequest; } });
const protocol_selectionRange_1 = __webpack_require__(/*! ./protocol.selectionRange */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.selectionRange.js");
Object.defineProperty(exports, "SelectionRangeRequest", { enumerable: true, get: function () { return protocol_selectionRange_1.SelectionRangeRequest; } });
const protocol_progress_1 = __webpack_require__(/*! ./protocol.progress */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.progress.js");
Object.defineProperty(exports, "WorkDoneProgress", { enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgress; } });
Object.defineProperty(exports, "WorkDoneProgressCreateRequest", { enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgressCreateRequest; } });
Object.defineProperty(exports, "WorkDoneProgressCancelNotification", { enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgressCancelNotification; } });
const protocol_callHierarchy_1 = __webpack_require__(/*! ./protocol.callHierarchy */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.callHierarchy.js");
Object.defineProperty(exports, "CallHierarchyIncomingCallsRequest", { enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyIncomingCallsRequest; } });
Object.defineProperty(exports, "CallHierarchyOutgoingCallsRequest", { enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyOutgoingCallsRequest; } });
Object.defineProperty(exports, "CallHierarchyPrepareRequest", { enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyPrepareRequest; } });
const protocol_semanticTokens_1 = __webpack_require__(/*! ./protocol.semanticTokens */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.semanticTokens.js");
Object.defineProperty(exports, "SemanticTokenTypes", { enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokenTypes; } });
Object.defineProperty(exports, "SemanticTokenModifiers", { enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokenModifiers; } });
Object.defineProperty(exports, "SemanticTokens", { enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokens; } });
Object.defineProperty(exports, "TokenFormat", { enumerable: true, get: function () { return protocol_semanticTokens_1.TokenFormat; } });
Object.defineProperty(exports, "SemanticTokensRequest", { enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRequest; } });
Object.defineProperty(exports, "SemanticTokensDeltaRequest", { enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensDeltaRequest; } });
Object.defineProperty(exports, "SemanticTokensRangeRequest", { enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRangeRequest; } });
Object.defineProperty(exports, "SemanticTokensRefreshRequest", { enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRefreshRequest; } });
Object.defineProperty(exports, "SemanticTokensRegistrationType", { enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRegistrationType; } });
const protocol_showDocument_1 = __webpack_require__(/*! ./protocol.showDocument */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.showDocument.js");
Object.defineProperty(exports, "ShowDocumentRequest", { enumerable: true, get: function () { return protocol_showDocument_1.ShowDocumentRequest; } });
const protocol_linkedEditingRange_1 = __webpack_require__(/*! ./protocol.linkedEditingRange */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.linkedEditingRange.js");
Object.defineProperty(exports, "LinkedEditingRangeRequest", { enumerable: true, get: function () { return protocol_linkedEditingRange_1.LinkedEditingRangeRequest; } });
const protocol_fileOperations_1 = __webpack_require__(/*! ./protocol.fileOperations */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.fileOperations.js");
Object.defineProperty(exports, "FileOperationPatternKind", { enumerable: true, get: function () { return protocol_fileOperations_1.FileOperationPatternKind; } });
Object.defineProperty(exports, "DidCreateFilesNotification", { enumerable: true, get: function () { return protocol_fileOperations_1.DidCreateFilesNotification; } });
Object.defineProperty(exports, "WillCreateFilesRequest", { enumerable: true, get: function () { return protocol_fileOperations_1.WillCreateFilesRequest; } });
Object.defineProperty(exports, "DidRenameFilesNotification", { enumerable: true, get: function () { return protocol_fileOperations_1.DidRenameFilesNotification; } });
Object.defineProperty(exports, "WillRenameFilesRequest", { enumerable: true, get: function () { return protocol_fileOperations_1.WillRenameFilesRequest; } });
Object.defineProperty(exports, "DidDeleteFilesNotification", { enumerable: true, get: function () { return protocol_fileOperations_1.DidDeleteFilesNotification; } });
Object.defineProperty(exports, "WillDeleteFilesRequest", { enumerable: true, get: function () { return protocol_fileOperations_1.WillDeleteFilesRequest; } });
const protocol_moniker_1 = __webpack_require__(/*! ./protocol.moniker */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.moniker.js");
Object.defineProperty(exports, "UniquenessLevel", { enumerable: true, get: function () { return protocol_moniker_1.UniquenessLevel; } });
Object.defineProperty(exports, "MonikerKind", { enumerable: true, get: function () { return protocol_moniker_1.MonikerKind; } });
Object.defineProperty(exports, "MonikerRequest", { enumerable: true, get: function () { return protocol_moniker_1.MonikerRequest; } });
// @ts-ignore: to avoid inlining LocationLink as dynamic import
let __noDynamicImport;
/**
 * The DocumentFilter namespace provides helper functions to work with
 * [DocumentFilter](#DocumentFilter) literals.
 */
var DocumentFilter;
(function (DocumentFilter) {
    function is(value) {
        const candidate = value;
        return Is.string(candidate.language) || Is.string(candidate.scheme) || Is.string(candidate.pattern);
    }
    DocumentFilter.is = is;
})(DocumentFilter = exports.DocumentFilter || (exports.DocumentFilter = {}));
/**
 * The DocumentSelector namespace provides helper functions to work with
 * [DocumentSelector](#DocumentSelector)s.
 */
var DocumentSelector;
(function (DocumentSelector) {
    function is(value) {
        if (!Array.isArray(value)) {
            return false;
        }
        for (let elem of value) {
            if (!Is.string(elem) && !DocumentFilter.is(elem)) {
                return false;
            }
        }
        return true;
    }
    DocumentSelector.is = is;
})(DocumentSelector = exports.DocumentSelector || (exports.DocumentSelector = {}));
/**
 * The `client/registerCapability` request is sent from the server to the client to register a new capability
 * handler on the client side.
 */
var RegistrationRequest;
(function (RegistrationRequest) {
    RegistrationRequest.type = new messages_1.ProtocolRequestType('client/registerCapability');
})(RegistrationRequest = exports.RegistrationRequest || (exports.RegistrationRequest = {}));
/**
 * The `client/unregisterCapability` request is sent from the server to the client to unregister a previously registered capability
 * handler on the client side.
 */
var UnregistrationRequest;
(function (UnregistrationRequest) {
    UnregistrationRequest.type = new messages_1.ProtocolRequestType('client/unregisterCapability');
})(UnregistrationRequest = exports.UnregistrationRequest || (exports.UnregistrationRequest = {}));
var ResourceOperationKind;
(function (ResourceOperationKind) {
    /**
     * Supports creating new files and folders.
     */
    ResourceOperationKind.Create = 'create';
    /**
     * Supports renaming existing files and folders.
     */
    ResourceOperationKind.Rename = 'rename';
    /**
     * Supports deleting existing files and folders.
     */
    ResourceOperationKind.Delete = 'delete';
})(ResourceOperationKind = exports.ResourceOperationKind || (exports.ResourceOperationKind = {}));
var FailureHandlingKind;
(function (FailureHandlingKind) {
    /**
     * Applying the workspace change is simply aborted if one of the changes provided
     * fails. All operations executed before the failing operation stay executed.
     */
    FailureHandlingKind.Abort = 'abort';
    /**
     * All operations are executed transactional. That means they either all
     * succeed or no changes at all are applied to the workspace.
     */
    FailureHandlingKind.Transactional = 'transactional';
    /**
     * If the workspace edit contains only textual file changes they are executed transactional.
     * If resource changes (create, rename or delete file) are part of the change the failure
     * handling strategy is abort.
     */
    FailureHandlingKind.TextOnlyTransactional = 'textOnlyTransactional';
    /**
     * The client tries to undo the operations already executed. But there is no
     * guarantee that this is succeeding.
     */
    FailureHandlingKind.Undo = 'undo';
})(FailureHandlingKind = exports.FailureHandlingKind || (exports.FailureHandlingKind = {}));
/**
 * The StaticRegistrationOptions namespace provides helper functions to work with
 * [StaticRegistrationOptions](#StaticRegistrationOptions) literals.
 */
var StaticRegistrationOptions;
(function (StaticRegistrationOptions) {
    function hasId(value) {
        const candidate = value;
        return candidate && Is.string(candidate.id) && candidate.id.length > 0;
    }
    StaticRegistrationOptions.hasId = hasId;
})(StaticRegistrationOptions = exports.StaticRegistrationOptions || (exports.StaticRegistrationOptions = {}));
/**
 * The TextDocumentRegistrationOptions namespace provides helper functions to work with
 * [TextDocumentRegistrationOptions](#TextDocumentRegistrationOptions) literals.
 */
var TextDocumentRegistrationOptions;
(function (TextDocumentRegistrationOptions) {
    function is(value) {
        const candidate = value;
        return candidate && (candidate.documentSelector === null || DocumentSelector.is(candidate.documentSelector));
    }
    TextDocumentRegistrationOptions.is = is;
})(TextDocumentRegistrationOptions = exports.TextDocumentRegistrationOptions || (exports.TextDocumentRegistrationOptions = {}));
/**
 * The WorkDoneProgressOptions namespace provides helper functions to work with
 * [WorkDoneProgressOptions](#WorkDoneProgressOptions) literals.
 */
var WorkDoneProgressOptions;
(function (WorkDoneProgressOptions) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (candidate.workDoneProgress === undefined || Is.boolean(candidate.workDoneProgress));
    }
    WorkDoneProgressOptions.is = is;
    function hasWorkDoneProgress(value) {
        const candidate = value;
        return candidate && Is.boolean(candidate.workDoneProgress);
    }
    WorkDoneProgressOptions.hasWorkDoneProgress = hasWorkDoneProgress;
})(WorkDoneProgressOptions = exports.WorkDoneProgressOptions || (exports.WorkDoneProgressOptions = {}));
/**
 * The initialize request is sent from the client to the server.
 * It is sent once as the request after starting up the server.
 * The requests parameter is of type [InitializeParams](#InitializeParams)
 * the response if of type [InitializeResult](#InitializeResult) of a Thenable that
 * resolves to such.
 */
var InitializeRequest;
(function (InitializeRequest) {
    InitializeRequest.type = new messages_1.ProtocolRequestType('initialize');
})(InitializeRequest = exports.InitializeRequest || (exports.InitializeRequest = {}));
/**
 * Known error codes for an `InitializeError`;
 */
var InitializeError;
(function (InitializeError) {
    /**
     * If the protocol version provided by the client can't be handled by the server.
     * @deprecated This initialize error got replaced by client capabilities. There is
     * no version handshake in version 3.0x
     */
    InitializeError.unknownProtocolVersion = 1;
})(InitializeError = exports.InitializeError || (exports.InitializeError = {}));
/**
 * The initialized notification is sent from the client to the
 * server after the client is fully initialized and the server
 * is allowed to send requests from the server to the client.
 */
var InitializedNotification;
(function (InitializedNotification) {
    InitializedNotification.type = new messages_1.ProtocolNotificationType('initialized');
})(InitializedNotification = exports.InitializedNotification || (exports.InitializedNotification = {}));
//---- Shutdown Method ----
/**
 * A shutdown request is sent from the client to the server.
 * It is sent once when the client decides to shutdown the
 * server. The only notification that is sent after a shutdown request
 * is the exit event.
 */
var ShutdownRequest;
(function (ShutdownRequest) {
    ShutdownRequest.type = new messages_1.ProtocolRequestType0('shutdown');
})(ShutdownRequest = exports.ShutdownRequest || (exports.ShutdownRequest = {}));
//---- Exit Notification ----
/**
 * The exit event is sent from the client to the server to
 * ask the server to exit its process.
 */
var ExitNotification;
(function (ExitNotification) {
    ExitNotification.type = new messages_1.ProtocolNotificationType0('exit');
})(ExitNotification = exports.ExitNotification || (exports.ExitNotification = {}));
/**
 * The configuration change notification is sent from the client to the server
 * when the client's configuration has changed. The notification contains
 * the changed configuration as defined by the language client.
 */
var DidChangeConfigurationNotification;
(function (DidChangeConfigurationNotification) {
    DidChangeConfigurationNotification.type = new messages_1.ProtocolNotificationType('workspace/didChangeConfiguration');
})(DidChangeConfigurationNotification = exports.DidChangeConfigurationNotification || (exports.DidChangeConfigurationNotification = {}));
//---- Message show and log notifications ----
/**
 * The message type
 */
var MessageType;
(function (MessageType) {
    /**
     * An error message.
     */
    MessageType.Error = 1;
    /**
     * A warning message.
     */
    MessageType.Warning = 2;
    /**
     * An information message.
     */
    MessageType.Info = 3;
    /**
     * A log message.
     */
    MessageType.Log = 4;
})(MessageType = exports.MessageType || (exports.MessageType = {}));
/**
 * The show message notification is sent from a server to a client to ask
 * the client to display a particular message in the user interface.
 */
var ShowMessageNotification;
(function (ShowMessageNotification) {
    ShowMessageNotification.type = new messages_1.ProtocolNotificationType('window/showMessage');
})(ShowMessageNotification = exports.ShowMessageNotification || (exports.ShowMessageNotification = {}));
/**
 * The show message request is sent from the server to the client to show a message
 * and a set of options actions to the user.
 */
var ShowMessageRequest;
(function (ShowMessageRequest) {
    ShowMessageRequest.type = new messages_1.ProtocolRequestType('window/showMessageRequest');
})(ShowMessageRequest = exports.ShowMessageRequest || (exports.ShowMessageRequest = {}));
/**
 * The log message notification is sent from the server to the client to ask
 * the client to log a particular message.
 */
var LogMessageNotification;
(function (LogMessageNotification) {
    LogMessageNotification.type = new messages_1.ProtocolNotificationType('window/logMessage');
})(LogMessageNotification = exports.LogMessageNotification || (exports.LogMessageNotification = {}));
//---- Telemetry notification
/**
 * The telemetry event notification is sent from the server to the client to ask
 * the client to log telemetry data.
 */
var TelemetryEventNotification;
(function (TelemetryEventNotification) {
    TelemetryEventNotification.type = new messages_1.ProtocolNotificationType('telemetry/event');
})(TelemetryEventNotification = exports.TelemetryEventNotification || (exports.TelemetryEventNotification = {}));
/**
 * Defines how the host (editor) should sync
 * document changes to the language server.
 */
var TextDocumentSyncKind;
(function (TextDocumentSyncKind) {
    /**
     * Documents should not be synced at all.
     */
    TextDocumentSyncKind.None = 0;
    /**
     * Documents are synced by always sending the full content
     * of the document.
     */
    TextDocumentSyncKind.Full = 1;
    /**
     * Documents are synced by sending the full content on open.
     * After that only incremental updates to the document are
     * send.
     */
    TextDocumentSyncKind.Incremental = 2;
})(TextDocumentSyncKind = exports.TextDocumentSyncKind || (exports.TextDocumentSyncKind = {}));
/**
 * The document open notification is sent from the client to the server to signal
 * newly opened text documents. The document's truth is now managed by the client
 * and the server must not try to read the document's truth using the document's
 * uri. Open in this sense means it is managed by the client. It doesn't necessarily
 * mean that its content is presented in an editor. An open notification must not
 * be sent more than once without a corresponding close notification send before.
 * This means open and close notification must be balanced and the max open count
 * is one.
 */
var DidOpenTextDocumentNotification;
(function (DidOpenTextDocumentNotification) {
    DidOpenTextDocumentNotification.method = 'textDocument/didOpen';
    DidOpenTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenTextDocumentNotification.method);
})(DidOpenTextDocumentNotification = exports.DidOpenTextDocumentNotification || (exports.DidOpenTextDocumentNotification = {}));
var TextDocumentContentChangeEvent;
(function (TextDocumentContentChangeEvent) {
    /**
     * Checks whether the information describes a delta event.
     */
    function isIncremental(event) {
        let candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range !== undefined &&
            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');
    }
    TextDocumentContentChangeEvent.isIncremental = isIncremental;
    /**
     * Checks whether the information describes a full replacement event.
     */
    function isFull(event) {
        let candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;
    }
    TextDocumentContentChangeEvent.isFull = isFull;
})(TextDocumentContentChangeEvent = exports.TextDocumentContentChangeEvent || (exports.TextDocumentContentChangeEvent = {}));
/**
 * The document change notification is sent from the client to the server to signal
 * changes to a text document.
 */
var DidChangeTextDocumentNotification;
(function (DidChangeTextDocumentNotification) {
    DidChangeTextDocumentNotification.method = 'textDocument/didChange';
    DidChangeTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeTextDocumentNotification.method);
})(DidChangeTextDocumentNotification = exports.DidChangeTextDocumentNotification || (exports.DidChangeTextDocumentNotification = {}));
/**
 * The document close notification is sent from the client to the server when
 * the document got closed in the client. The document's truth now exists where
 * the document's uri points to (e.g. if the document's uri is a file uri the
 * truth now exists on disk). As with the open notification the close notification
 * is about managing the document's content. Receiving a close notification
 * doesn't mean that the document was open in an editor before. A close
 * notification requires a previous open notification to be sent.
 */
var DidCloseTextDocumentNotification;
(function (DidCloseTextDocumentNotification) {
    DidCloseTextDocumentNotification.method = 'textDocument/didClose';
    DidCloseTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseTextDocumentNotification.method);
})(DidCloseTextDocumentNotification = exports.DidCloseTextDocumentNotification || (exports.DidCloseTextDocumentNotification = {}));
/**
 * The document save notification is sent from the client to the server when
 * the document got saved in the client.
 */
var DidSaveTextDocumentNotification;
(function (DidSaveTextDocumentNotification) {
    DidSaveTextDocumentNotification.method = 'textDocument/didSave';
    DidSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveTextDocumentNotification.method);
})(DidSaveTextDocumentNotification = exports.DidSaveTextDocumentNotification || (exports.DidSaveTextDocumentNotification = {}));
/**
 * Represents reasons why a text document is saved.
 */
var TextDocumentSaveReason;
(function (TextDocumentSaveReason) {
    /**
     * Manually triggered, e.g. by the user pressing save, by starting debugging,
     * or by an API call.
     */
    TextDocumentSaveReason.Manual = 1;
    /**
     * Automatic after a delay.
     */
    TextDocumentSaveReason.AfterDelay = 2;
    /**
     * When the editor lost focus.
     */
    TextDocumentSaveReason.FocusOut = 3;
})(TextDocumentSaveReason = exports.TextDocumentSaveReason || (exports.TextDocumentSaveReason = {}));
/**
 * A document will save notification is sent from the client to the server before
 * the document is actually saved.
 */
var WillSaveTextDocumentNotification;
(function (WillSaveTextDocumentNotification) {
    WillSaveTextDocumentNotification.method = 'textDocument/willSave';
    WillSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(WillSaveTextDocumentNotification.method);
})(WillSaveTextDocumentNotification = exports.WillSaveTextDocumentNotification || (exports.WillSaveTextDocumentNotification = {}));
/**
 * A document will save request is sent from the client to the server before
 * the document is actually saved. The request can return an array of TextEdits
 * which will be applied to the text document before it is saved. Please note that
 * clients might drop results if computing the text edits took too long or if a
 * server constantly fails on this request. This is done to keep the save fast and
 * reliable.
 */
var WillSaveTextDocumentWaitUntilRequest;
(function (WillSaveTextDocumentWaitUntilRequest) {
    WillSaveTextDocumentWaitUntilRequest.method = 'textDocument/willSaveWaitUntil';
    WillSaveTextDocumentWaitUntilRequest.type = new messages_1.ProtocolRequestType(WillSaveTextDocumentWaitUntilRequest.method);
})(WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentWaitUntilRequest || (exports.WillSaveTextDocumentWaitUntilRequest = {}));
/**
 * The watched files notification is sent from the client to the server when
 * the client detects changes to file watched by the language client.
 */
var DidChangeWatchedFilesNotification;
(function (DidChangeWatchedFilesNotification) {
    DidChangeWatchedFilesNotification.type = new messages_1.ProtocolNotificationType('workspace/didChangeWatchedFiles');
})(DidChangeWatchedFilesNotification = exports.DidChangeWatchedFilesNotification || (exports.DidChangeWatchedFilesNotification = {}));
/**
 * The file event type
 */
var FileChangeType;
(function (FileChangeType) {
    /**
     * The file got created.
     */
    FileChangeType.Created = 1;
    /**
     * The file got changed.
     */
    FileChangeType.Changed = 2;
    /**
     * The file got deleted.
     */
    FileChangeType.Deleted = 3;
})(FileChangeType = exports.FileChangeType || (exports.FileChangeType = {}));
var WatchKind;
(function (WatchKind) {
    /**
     * Interested in create events.
     */
    WatchKind.Create = 1;
    /**
     * Interested in change events
     */
    WatchKind.Change = 2;
    /**
     * Interested in delete events
     */
    WatchKind.Delete = 4;
})(WatchKind = exports.WatchKind || (exports.WatchKind = {}));
/**
 * Diagnostics notification are sent from the server to the client to signal
 * results of validation runs.
 */
var PublishDiagnosticsNotification;
(function (PublishDiagnosticsNotification) {
    PublishDiagnosticsNotification.type = new messages_1.ProtocolNotificationType('textDocument/publishDiagnostics');
})(PublishDiagnosticsNotification = exports.PublishDiagnosticsNotification || (exports.PublishDiagnosticsNotification = {}));
/**
 * How a completion was triggered
 */
var CompletionTriggerKind;
(function (CompletionTriggerKind) {
    /**
     * Completion was triggered by typing an identifier (24x7 code
     * complete), manual invocation (e.g Ctrl+Space) or via API.
     */
    CompletionTriggerKind.Invoked = 1;
    /**
     * Completion was triggered by a trigger character specified by
     * the `triggerCharacters` properties of the `CompletionRegistrationOptions`.
     */
    CompletionTriggerKind.TriggerCharacter = 2;
    /**
     * Completion was re-triggered as current completion list is incomplete
     */
    CompletionTriggerKind.TriggerForIncompleteCompletions = 3;
})(CompletionTriggerKind = exports.CompletionTriggerKind || (exports.CompletionTriggerKind = {}));
/**
 * Request to request completion at a given text document position. The request's
 * parameter is of type [TextDocumentPosition](#TextDocumentPosition) the response
 * is of type [CompletionItem[]](#CompletionItem) or [CompletionList](#CompletionList)
 * or a Thenable that resolves to such.
 *
 * The request can delay the computation of the [`detail`](#CompletionItem.detail)
 * and [`documentation`](#CompletionItem.documentation) properties to the `completionItem/resolve`
 * request. However, properties that are needed for the initial sorting and filtering, like `sortText`,
 * `filterText`, `insertText`, and `textEdit`, must not be changed during resolve.
 */
var CompletionRequest;
(function (CompletionRequest) {
    CompletionRequest.method = 'textDocument/completion';
    CompletionRequest.type = new messages_1.ProtocolRequestType(CompletionRequest.method);
})(CompletionRequest = exports.CompletionRequest || (exports.CompletionRequest = {}));
/**
 * Request to resolve additional information for a given completion item.The request's
 * parameter is of type [CompletionItem](#CompletionItem) the response
 * is of type [CompletionItem](#CompletionItem) or a Thenable that resolves to such.
 */
var CompletionResolveRequest;
(function (CompletionResolveRequest) {
    CompletionResolveRequest.method = 'completionItem/resolve';
    CompletionResolveRequest.type = new messages_1.ProtocolRequestType(CompletionResolveRequest.method);
})(CompletionResolveRequest = exports.CompletionResolveRequest || (exports.CompletionResolveRequest = {}));
/**
 * Request to request hover information at a given text document position. The request's
 * parameter is of type [TextDocumentPosition](#TextDocumentPosition) the response is of
 * type [Hover](#Hover) or a Thenable that resolves to such.
 */
var HoverRequest;
(function (HoverRequest) {
    HoverRequest.method = 'textDocument/hover';
    HoverRequest.type = new messages_1.ProtocolRequestType(HoverRequest.method);
})(HoverRequest = exports.HoverRequest || (exports.HoverRequest = {}));
/**
 * How a signature help was triggered.
 *
 * @since 3.15.0
 */
var SignatureHelpTriggerKind;
(function (SignatureHelpTriggerKind) {
    /**
     * Signature help was invoked manually by the user or by a command.
     */
    SignatureHelpTriggerKind.Invoked = 1;
    /**
     * Signature help was triggered by a trigger character.
     */
    SignatureHelpTriggerKind.TriggerCharacter = 2;
    /**
     * Signature help was triggered by the cursor moving or by the document content changing.
     */
    SignatureHelpTriggerKind.ContentChange = 3;
})(SignatureHelpTriggerKind = exports.SignatureHelpTriggerKind || (exports.SignatureHelpTriggerKind = {}));
var SignatureHelpRequest;
(function (SignatureHelpRequest) {
    SignatureHelpRequest.method = 'textDocument/signatureHelp';
    SignatureHelpRequest.type = new messages_1.ProtocolRequestType(SignatureHelpRequest.method);
})(SignatureHelpRequest = exports.SignatureHelpRequest || (exports.SignatureHelpRequest = {}));
/**
 * A request to resolve the definition location of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPosition]
 * (#TextDocumentPosition) the response is of either type [Definition](#Definition)
 * or a typed array of [DefinitionLink](#DefinitionLink) or a Thenable that resolves
 * to such.
 */
var DefinitionRequest;
(function (DefinitionRequest) {
    DefinitionRequest.method = 'textDocument/definition';
    DefinitionRequest.type = new messages_1.ProtocolRequestType(DefinitionRequest.method);
})(DefinitionRequest = exports.DefinitionRequest || (exports.DefinitionRequest = {}));
/**
 * A request to resolve project-wide references for the symbol denoted
 * by the given text document position. The request's parameter is of
 * type [ReferenceParams](#ReferenceParams) the response is of type
 * [Location[]](#Location) or a Thenable that resolves to such.
 */
var ReferencesRequest;
(function (ReferencesRequest) {
    ReferencesRequest.method = 'textDocument/references';
    ReferencesRequest.type = new messages_1.ProtocolRequestType(ReferencesRequest.method);
})(ReferencesRequest = exports.ReferencesRequest || (exports.ReferencesRequest = {}));
/**
 * Request to resolve a [DocumentHighlight](#DocumentHighlight) for a given
 * text document position. The request's parameter is of type [TextDocumentPosition]
 * (#TextDocumentPosition) the request response is of type [DocumentHighlight[]]
 * (#DocumentHighlight) or a Thenable that resolves to such.
 */
var DocumentHighlightRequest;
(function (DocumentHighlightRequest) {
    DocumentHighlightRequest.method = 'textDocument/documentHighlight';
    DocumentHighlightRequest.type = new messages_1.ProtocolRequestType(DocumentHighlightRequest.method);
})(DocumentHighlightRequest = exports.DocumentHighlightRequest || (exports.DocumentHighlightRequest = {}));
/**
 * A request to list all symbols found in a given text document. The request's
 * parameter is of type [TextDocumentIdentifier](#TextDocumentIdentifier) the
 * response is of type [SymbolInformation[]](#SymbolInformation) or a Thenable
 * that resolves to such.
 */
var DocumentSymbolRequest;
(function (DocumentSymbolRequest) {
    DocumentSymbolRequest.method = 'textDocument/documentSymbol';
    DocumentSymbolRequest.type = new messages_1.ProtocolRequestType(DocumentSymbolRequest.method);
})(DocumentSymbolRequest = exports.DocumentSymbolRequest || (exports.DocumentSymbolRequest = {}));
/**
 * A request to provide commands for the given text document and range.
 */
var CodeActionRequest;
(function (CodeActionRequest) {
    CodeActionRequest.method = 'textDocument/codeAction';
    CodeActionRequest.type = new messages_1.ProtocolRequestType(CodeActionRequest.method);
})(CodeActionRequest = exports.CodeActionRequest || (exports.CodeActionRequest = {}));
/**
 * Request to resolve additional information for a given code action.The request's
 * parameter is of type [CodeAction](#CodeAction) the response
 * is of type [CodeAction](#CodeAction) or a Thenable that resolves to such.
 */
var CodeActionResolveRequest;
(function (CodeActionResolveRequest) {
    CodeActionResolveRequest.method = 'codeAction/resolve';
    CodeActionResolveRequest.type = new messages_1.ProtocolRequestType(CodeActionResolveRequest.method);
})(CodeActionResolveRequest = exports.CodeActionResolveRequest || (exports.CodeActionResolveRequest = {}));
/**
 * A request to list project-wide symbols matching the query string given
 * by the [WorkspaceSymbolParams](#WorkspaceSymbolParams). The response is
 * of type [SymbolInformation[]](#SymbolInformation) or a Thenable that
 * resolves to such.
 */
var WorkspaceSymbolRequest;
(function (WorkspaceSymbolRequest) {
    WorkspaceSymbolRequest.method = 'workspace/symbol';
    WorkspaceSymbolRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolRequest.method);
})(WorkspaceSymbolRequest = exports.WorkspaceSymbolRequest || (exports.WorkspaceSymbolRequest = {}));
/**
 * A request to provide code lens for the given text document.
 */
var CodeLensRequest;
(function (CodeLensRequest) {
    CodeLensRequest.method = 'textDocument/codeLens';
    CodeLensRequest.type = new messages_1.ProtocolRequestType(CodeLensRequest.method);
})(CodeLensRequest = exports.CodeLensRequest || (exports.CodeLensRequest = {}));
/**
 * A request to resolve a command for a given code lens.
 */
var CodeLensResolveRequest;
(function (CodeLensResolveRequest) {
    CodeLensResolveRequest.method = 'codeLens/resolve';
    CodeLensResolveRequest.type = new messages_1.ProtocolRequestType(CodeLensResolveRequest.method);
})(CodeLensResolveRequest = exports.CodeLensResolveRequest || (exports.CodeLensResolveRequest = {}));
/**
 * A request to refresh all code actions
 *
 * @since 3.16.0
 */
var CodeLensRefreshRequest;
(function (CodeLensRefreshRequest) {
    CodeLensRefreshRequest.method = `workspace/codeLens/refresh`;
    CodeLensRefreshRequest.type = new messages_1.ProtocolRequestType0(CodeLensRefreshRequest.method);
})(CodeLensRefreshRequest = exports.CodeLensRefreshRequest || (exports.CodeLensRefreshRequest = {}));
/**
 * A request to provide document links
 */
var DocumentLinkRequest;
(function (DocumentLinkRequest) {
    DocumentLinkRequest.method = 'textDocument/documentLink';
    DocumentLinkRequest.type = new messages_1.ProtocolRequestType(DocumentLinkRequest.method);
})(DocumentLinkRequest = exports.DocumentLinkRequest || (exports.DocumentLinkRequest = {}));
/**
 * Request to resolve additional information for a given document link. The request's
 * parameter is of type [DocumentLink](#DocumentLink) the response
 * is of type [DocumentLink](#DocumentLink) or a Thenable that resolves to such.
 */
var DocumentLinkResolveRequest;
(function (DocumentLinkResolveRequest) {
    DocumentLinkResolveRequest.method = 'documentLink/resolve';
    DocumentLinkResolveRequest.type = new messages_1.ProtocolRequestType(DocumentLinkResolveRequest.method);
})(DocumentLinkResolveRequest = exports.DocumentLinkResolveRequest || (exports.DocumentLinkResolveRequest = {}));
/**
 * A request to to format a whole document.
 */
var DocumentFormattingRequest;
(function (DocumentFormattingRequest) {
    DocumentFormattingRequest.method = 'textDocument/formatting';
    DocumentFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentFormattingRequest.method);
})(DocumentFormattingRequest = exports.DocumentFormattingRequest || (exports.DocumentFormattingRequest = {}));
/**
 * A request to to format a range in a document.
 */
var DocumentRangeFormattingRequest;
(function (DocumentRangeFormattingRequest) {
    DocumentRangeFormattingRequest.method = 'textDocument/rangeFormatting';
    DocumentRangeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentRangeFormattingRequest.method);
})(DocumentRangeFormattingRequest = exports.DocumentRangeFormattingRequest || (exports.DocumentRangeFormattingRequest = {}));
/**
 * A request to format a document on type.
 */
var DocumentOnTypeFormattingRequest;
(function (DocumentOnTypeFormattingRequest) {
    DocumentOnTypeFormattingRequest.method = 'textDocument/onTypeFormatting';
    DocumentOnTypeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentOnTypeFormattingRequest.method);
})(DocumentOnTypeFormattingRequest = exports.DocumentOnTypeFormattingRequest || (exports.DocumentOnTypeFormattingRequest = {}));
//---- Rename ----------------------------------------------
var PrepareSupportDefaultBehavior;
(function (PrepareSupportDefaultBehavior) {
    /**
     * The client's default behavior is to select the identifier
     * according the to language's syntax rule.
     */
    PrepareSupportDefaultBehavior.Identifier = 1;
})(PrepareSupportDefaultBehavior = exports.PrepareSupportDefaultBehavior || (exports.PrepareSupportDefaultBehavior = {}));
/**
 * A request to rename a symbol.
 */
var RenameRequest;
(function (RenameRequest) {
    RenameRequest.method = 'textDocument/rename';
    RenameRequest.type = new messages_1.ProtocolRequestType(RenameRequest.method);
})(RenameRequest = exports.RenameRequest || (exports.RenameRequest = {}));
/**
 * A request to test and perform the setup necessary for a rename.
 *
 * @since 3.16 - support for default behavior
 */
var PrepareRenameRequest;
(function (PrepareRenameRequest) {
    PrepareRenameRequest.method = 'textDocument/prepareRename';
    PrepareRenameRequest.type = new messages_1.ProtocolRequestType(PrepareRenameRequest.method);
})(PrepareRenameRequest = exports.PrepareRenameRequest || (exports.PrepareRenameRequest = {}));
/**
 * A request send from the client to the server to execute a command. The request might return
 * a workspace edit which the client will apply to the workspace.
 */
var ExecuteCommandRequest;
(function (ExecuteCommandRequest) {
    ExecuteCommandRequest.type = new messages_1.ProtocolRequestType('workspace/executeCommand');
})(ExecuteCommandRequest = exports.ExecuteCommandRequest || (exports.ExecuteCommandRequest = {}));
/**
 * A request sent from the server to the client to modified certain resources.
 */
var ApplyWorkspaceEditRequest;
(function (ApplyWorkspaceEditRequest) {
    ApplyWorkspaceEditRequest.type = new messages_1.ProtocolRequestType('workspace/applyEdit');
})(ApplyWorkspaceEditRequest = exports.ApplyWorkspaceEditRequest || (exports.ApplyWorkspaceEditRequest = {}));
//# sourceMappingURL=protocol.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.linkedEditingRange.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.linkedEditingRange.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinkedEditingRangeRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A request to provide ranges that can be edited together.
 *
 * @since 3.16.0
 */
var LinkedEditingRangeRequest;
(function (LinkedEditingRangeRequest) {
    LinkedEditingRangeRequest.method = 'textDocument/linkedEditingRange';
    LinkedEditingRangeRequest.type = new messages_1.ProtocolRequestType(LinkedEditingRangeRequest.method);
})(LinkedEditingRangeRequest = exports.LinkedEditingRangeRequest || (exports.LinkedEditingRangeRequest = {}));
//# sourceMappingURL=protocol.linkedEditingRange.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.moniker.js":
/*!************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.moniker.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * Moniker uniqueness level to define scope of the moniker.
 *
 * @since 3.16.0
 */
var UniquenessLevel;
(function (UniquenessLevel) {
    /**
     * The moniker is only unique inside a document
     */
    UniquenessLevel["document"] = "document";
    /**
     * The moniker is unique inside a project for which a dump got created
     */
    UniquenessLevel["project"] = "project";
    /**
     * The moniker is unique inside the group to which a project belongs
     */
    UniquenessLevel["group"] = "group";
    /**
     * The moniker is unique inside the moniker scheme.
     */
    UniquenessLevel["scheme"] = "scheme";
    /**
     * The moniker is globally unique
     */
    UniquenessLevel["global"] = "global";
})(UniquenessLevel = exports.UniquenessLevel || (exports.UniquenessLevel = {}));
/**
 * The moniker kind.
 *
 * @since 3.16.0
 */
var MonikerKind;
(function (MonikerKind) {
    /**
     * The moniker represent a symbol that is imported into a project
     */
    MonikerKind["import"] = "import";
    /**
     * The moniker represents a symbol that is exported from a project
     */
    MonikerKind["export"] = "export";
    /**
     * The moniker represents a symbol that is local to a project (e.g. a local
     * variable of a function, a class not visible outside the project, ...)
     */
    MonikerKind["local"] = "local";
})(MonikerKind = exports.MonikerKind || (exports.MonikerKind = {}));
/**
 * A request to get the moniker of a symbol at a given text document position.
 * The request parameter is of type [TextDocumentPositionParams](#TextDocumentPositionParams).
 * The response is of type [Moniker[]](#Moniker[]) or `null`.
 */
var MonikerRequest;
(function (MonikerRequest) {
    MonikerRequest.method = 'textDocument/moniker';
    MonikerRequest.type = new messages_1.ProtocolRequestType(MonikerRequest.method);
})(MonikerRequest = exports.MonikerRequest || (exports.MonikerRequest = {}));
//# sourceMappingURL=protocol.moniker.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.progress.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.progress.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = void 0;
const vscode_jsonrpc_1 = __webpack_require__(/*! vscode-jsonrpc */ "./node_modules/vscode-jsonrpc/lib/node/main.js");
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
var WorkDoneProgress;
(function (WorkDoneProgress) {
    WorkDoneProgress.type = new vscode_jsonrpc_1.ProgressType();
    function is(value) {
        return value === WorkDoneProgress.type;
    }
    WorkDoneProgress.is = is;
})(WorkDoneProgress = exports.WorkDoneProgress || (exports.WorkDoneProgress = {}));
/**
 * The `window/workDoneProgress/create` request is sent from the server to the client to initiate progress
 * reporting from the server.
 */
var WorkDoneProgressCreateRequest;
(function (WorkDoneProgressCreateRequest) {
    WorkDoneProgressCreateRequest.type = new messages_1.ProtocolRequestType('window/workDoneProgress/create');
})(WorkDoneProgressCreateRequest = exports.WorkDoneProgressCreateRequest || (exports.WorkDoneProgressCreateRequest = {}));
/**
 * The `window/workDoneProgress/cancel` notification is sent from  the client to the server to cancel a progress
 * initiated on the server side.
 */
var WorkDoneProgressCancelNotification;
(function (WorkDoneProgressCancelNotification) {
    WorkDoneProgressCancelNotification.type = new messages_1.ProtocolNotificationType('window/workDoneProgress/cancel');
})(WorkDoneProgressCancelNotification = exports.WorkDoneProgressCancelNotification || (exports.WorkDoneProgressCancelNotification = {}));
//# sourceMappingURL=protocol.progress.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.selectionRange.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.selectionRange.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectionRangeRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A request to provide selection ranges in a document. The request's
 * parameter is of type [SelectionRangeParams](#SelectionRangeParams), the
 * response is of type [SelectionRange[]](#SelectionRange[]) or a Thenable
 * that resolves to such.
 */
var SelectionRangeRequest;
(function (SelectionRangeRequest) {
    SelectionRangeRequest.method = 'textDocument/selectionRange';
    SelectionRangeRequest.type = new messages_1.ProtocolRequestType(SelectionRangeRequest.method);
})(SelectionRangeRequest = exports.SelectionRangeRequest || (exports.SelectionRangeRequest = {}));
//# sourceMappingURL=protocol.selectionRange.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.semanticTokens.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.semanticTokens.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.SemanticTokensRegistrationType = exports.TokenFormat = exports.SemanticTokens = exports.SemanticTokenModifiers = exports.SemanticTokenTypes = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A set of predefined token types. This set is not fixed
 * an clients can specify additional token types via the
 * corresponding client capabilities.
 *
 * @since 3.16.0
 */
var SemanticTokenTypes;
(function (SemanticTokenTypes) {
    SemanticTokenTypes["namespace"] = "namespace";
    /**
     * Represents a generic type. Acts as a fallback for types which can't be mapped to
     * a specific type like class or enum.
     */
    SemanticTokenTypes["type"] = "type";
    SemanticTokenTypes["class"] = "class";
    SemanticTokenTypes["enum"] = "enum";
    SemanticTokenTypes["interface"] = "interface";
    SemanticTokenTypes["struct"] = "struct";
    SemanticTokenTypes["typeParameter"] = "typeParameter";
    SemanticTokenTypes["parameter"] = "parameter";
    SemanticTokenTypes["variable"] = "variable";
    SemanticTokenTypes["property"] = "property";
    SemanticTokenTypes["enumMember"] = "enumMember";
    SemanticTokenTypes["event"] = "event";
    SemanticTokenTypes["function"] = "function";
    SemanticTokenTypes["method"] = "method";
    SemanticTokenTypes["macro"] = "macro";
    SemanticTokenTypes["keyword"] = "keyword";
    SemanticTokenTypes["modifier"] = "modifier";
    SemanticTokenTypes["comment"] = "comment";
    SemanticTokenTypes["string"] = "string";
    SemanticTokenTypes["number"] = "number";
    SemanticTokenTypes["regexp"] = "regexp";
    SemanticTokenTypes["operator"] = "operator";
})(SemanticTokenTypes = exports.SemanticTokenTypes || (exports.SemanticTokenTypes = {}));
/**
 * A set of predefined token modifiers. This set is not fixed
 * an clients can specify additional token types via the
 * corresponding client capabilities.
 *
 * @since 3.16.0
 */
var SemanticTokenModifiers;
(function (SemanticTokenModifiers) {
    SemanticTokenModifiers["declaration"] = "declaration";
    SemanticTokenModifiers["definition"] = "definition";
    SemanticTokenModifiers["readonly"] = "readonly";
    SemanticTokenModifiers["static"] = "static";
    SemanticTokenModifiers["deprecated"] = "deprecated";
    SemanticTokenModifiers["abstract"] = "abstract";
    SemanticTokenModifiers["async"] = "async";
    SemanticTokenModifiers["modification"] = "modification";
    SemanticTokenModifiers["documentation"] = "documentation";
    SemanticTokenModifiers["defaultLibrary"] = "defaultLibrary";
})(SemanticTokenModifiers = exports.SemanticTokenModifiers || (exports.SemanticTokenModifiers = {}));
/**
 * @since 3.16.0
 */
var SemanticTokens;
(function (SemanticTokens) {
    function is(value) {
        const candidate = value;
        return candidate !== undefined && (candidate.resultId === undefined || typeof candidate.resultId === 'string') &&
            Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === 'number');
    }
    SemanticTokens.is = is;
})(SemanticTokens = exports.SemanticTokens || (exports.SemanticTokens = {}));
//------- 'textDocument/semanticTokens' -----
var TokenFormat;
(function (TokenFormat) {
    TokenFormat.Relative = 'relative';
})(TokenFormat = exports.TokenFormat || (exports.TokenFormat = {}));
var SemanticTokensRegistrationType;
(function (SemanticTokensRegistrationType) {
    SemanticTokensRegistrationType.method = 'textDocument/semanticTokens';
    SemanticTokensRegistrationType.type = new messages_1.RegistrationType(SemanticTokensRegistrationType.method);
})(SemanticTokensRegistrationType = exports.SemanticTokensRegistrationType || (exports.SemanticTokensRegistrationType = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensRequest;
(function (SemanticTokensRequest) {
    SemanticTokensRequest.method = 'textDocument/semanticTokens/full';
    SemanticTokensRequest.type = new messages_1.ProtocolRequestType(SemanticTokensRequest.method);
})(SemanticTokensRequest = exports.SemanticTokensRequest || (exports.SemanticTokensRequest = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensDeltaRequest;
(function (SemanticTokensDeltaRequest) {
    SemanticTokensDeltaRequest.method = 'textDocument/semanticTokens/full/delta';
    SemanticTokensDeltaRequest.type = new messages_1.ProtocolRequestType(SemanticTokensDeltaRequest.method);
})(SemanticTokensDeltaRequest = exports.SemanticTokensDeltaRequest || (exports.SemanticTokensDeltaRequest = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensRangeRequest;
(function (SemanticTokensRangeRequest) {
    SemanticTokensRangeRequest.method = 'textDocument/semanticTokens/range';
    SemanticTokensRangeRequest.type = new messages_1.ProtocolRequestType(SemanticTokensRangeRequest.method);
})(SemanticTokensRangeRequest = exports.SemanticTokensRangeRequest || (exports.SemanticTokensRangeRequest = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensRefreshRequest;
(function (SemanticTokensRefreshRequest) {
    SemanticTokensRefreshRequest.method = `workspace/semanticTokens/refresh`;
    SemanticTokensRefreshRequest.type = new messages_1.ProtocolRequestType0(SemanticTokensRefreshRequest.method);
})(SemanticTokensRefreshRequest = exports.SemanticTokensRefreshRequest || (exports.SemanticTokensRefreshRequest = {}));
//# sourceMappingURL=protocol.semanticTokens.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.showDocument.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.showDocument.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShowDocumentRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A request to show a document. This request might open an
 * external program depending on the value of the URI to open.
 * For example a request to open `https://code.visualstudio.com/`
 * will very likely open the URI in a WEB browser.
 *
 * @since 3.16.0
*/
var ShowDocumentRequest;
(function (ShowDocumentRequest) {
    ShowDocumentRequest.method = 'window/showDocument';
    ShowDocumentRequest.type = new messages_1.ProtocolRequestType(ShowDocumentRequest.method);
})(ShowDocumentRequest = exports.ShowDocumentRequest || (exports.ShowDocumentRequest = {}));
//# sourceMappingURL=protocol.showDocument.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.typeDefinition.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.typeDefinition.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeDefinitionRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
// @ts-ignore: to avoid inlining LocatioLink as dynamic import
let __noDynamicImport;
/**
 * A request to resolve the type definition locations of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPositioParams]
 * (#TextDocumentPositionParams) the response is of type [Definition](#Definition) or a
 * Thenable that resolves to such.
 */
var TypeDefinitionRequest;
(function (TypeDefinitionRequest) {
    TypeDefinitionRequest.method = 'textDocument/typeDefinition';
    TypeDefinitionRequest.type = new messages_1.ProtocolRequestType(TypeDefinitionRequest.method);
})(TypeDefinitionRequest = exports.TypeDefinitionRequest || (exports.TypeDefinitionRequest = {}));
//# sourceMappingURL=protocol.typeDefinition.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.workspaceFolders.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.workspaceFolders.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * The `workspace/workspaceFolders` is sent from the server to the client to fetch the open workspace folders.
 */
var WorkspaceFoldersRequest;
(function (WorkspaceFoldersRequest) {
    WorkspaceFoldersRequest.type = new messages_1.ProtocolRequestType0('workspace/workspaceFolders');
})(WorkspaceFoldersRequest = exports.WorkspaceFoldersRequest || (exports.WorkspaceFoldersRequest = {}));
/**
 * The `workspace/didChangeWorkspaceFolders` notification is sent from the client to the server when the workspace
 * folder configuration changes.
 */
var DidChangeWorkspaceFoldersNotification;
(function (DidChangeWorkspaceFoldersNotification) {
    DidChangeWorkspaceFoldersNotification.type = new messages_1.ProtocolNotificationType('workspace/didChangeWorkspaceFolders');
})(DidChangeWorkspaceFoldersNotification = exports.DidChangeWorkspaceFoldersNotification || (exports.DidChangeWorkspaceFoldersNotification = {}));
//# sourceMappingURL=protocol.workspaceFolders.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/utils/is.js":
/*!****************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/utils/is.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", { value: true });
exports.objectLiteral = exports.typedArray = exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
function boolean(value) {
    return value === true || value === false;
}
exports.boolean = boolean;
function string(value) {
    return typeof value === 'string' || value instanceof String;
}
exports.string = string;
function number(value) {
    return typeof value === 'number' || value instanceof Number;
}
exports.number = number;
function error(value) {
    return value instanceof Error;
}
exports.error = error;
function func(value) {
    return typeof value === 'function';
}
exports.func = func;
function array(value) {
    return Array.isArray(value);
}
exports.array = array;
function stringArray(value) {
    return array(value) && value.every(elem => string(elem));
}
exports.stringArray = stringArray;
function typedArray(value, check) {
    return Array.isArray(value) && value.every(check);
}
exports.typedArray = typedArray;
function objectLiteral(value) {
    // Strictly speaking class instances pass this check as well. Since the LSP
    // doesn't use classes we ignore this for now. If we do we need to add something
    // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`
    return value !== null && typeof value === 'object';
}
exports.objectLiteral = objectLiteral;
//# sourceMappingURL=is.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/node/main.js":
/*!**********************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/node/main.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createProtocolConnection = void 0;
const node_1 = __webpack_require__(/*! vscode-jsonrpc/node */ "./node_modules/vscode-jsonrpc/node.js");
__exportStar(__webpack_require__(/*! vscode-jsonrpc/node */ "./node_modules/vscode-jsonrpc/node.js"), exports);
__exportStar(__webpack_require__(/*! ../common/api */ "./node_modules/vscode-languageserver-protocol/lib/common/api.js"), exports);
function createProtocolConnection(input, output, logger, options) {
    return node_1.createMessageConnection(input, output, logger, options);
}
exports.createProtocolConnection = createProtocolConnection;
//# sourceMappingURL=main.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/node.js":
/*!*************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/node.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ----------------------------------------------------------------------------------------- */


module.exports = __webpack_require__(/*! ./lib/node/main */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");

/***/ }),

/***/ "./node_modules/vscode-languageserver-textdocument/lib/esm/main.js":
/*!*************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-textdocument/lib/esm/main.js ***!
  \*************************************************************************/
/*! exports provided: TextDocument */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextDocument", function() { return TextDocument; });
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

var FullTextDocument = /** @class */ (function () {
    function FullTextDocument(uri, languageId, version, content) {
        this._uri = uri;
        this._languageId = languageId;
        this._version = version;
        this._content = content;
        this._lineOffsets = undefined;
    }
    Object.defineProperty(FullTextDocument.prototype, "uri", {
        get: function () {
            return this._uri;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FullTextDocument.prototype, "languageId", {
        get: function () {
            return this._languageId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FullTextDocument.prototype, "version", {
        get: function () {
            return this._version;
        },
        enumerable: true,
        configurable: true
    });
    FullTextDocument.prototype.getText = function (range) {
        if (range) {
            var start = this.offsetAt(range.start);
            var end = this.offsetAt(range.end);
            return this._content.substring(start, end);
        }
        return this._content;
    };
    FullTextDocument.prototype.update = function (changes, version) {
        for (var _i = 0, changes_1 = changes; _i < changes_1.length; _i++) {
            var change = changes_1[_i];
            if (FullTextDocument.isIncremental(change)) {
                // makes sure start is before end
                var range = getWellformedRange(change.range);
                // update content
                var startOffset = this.offsetAt(range.start);
                var endOffset = this.offsetAt(range.end);
                this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);
                // update the offsets
                var startLine = Math.max(range.start.line, 0);
                var endLine = Math.max(range.end.line, 0);
                var lineOffsets = this._lineOffsets;
                var addedLineOffsets = computeLineOffsets(change.text, false, startOffset);
                if (endLine - startLine === addedLineOffsets.length) {
                    for (var i = 0, len = addedLineOffsets.length; i < len; i++) {
                        lineOffsets[i + startLine + 1] = addedLineOffsets[i];
                    }
                }
                else {
                    if (addedLineOffsets.length < 10000) {
                        lineOffsets.splice.apply(lineOffsets, [startLine + 1, endLine - startLine].concat(addedLineOffsets));
                    }
                    else { // avoid too many arguments for splice
                        this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));
                    }
                }
                var diff = change.text.length - (endOffset - startOffset);
                if (diff !== 0) {
                    for (var i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {
                        lineOffsets[i] = lineOffsets[i] + diff;
                    }
                }
            }
            else if (FullTextDocument.isFull(change)) {
                this._content = change.text;
                this._lineOffsets = undefined;
            }
            else {
                throw new Error('Unknown change event received');
            }
        }
        this._version = version;
    };
    FullTextDocument.prototype.getLineOffsets = function () {
        if (this._lineOffsets === undefined) {
            this._lineOffsets = computeLineOffsets(this._content, true);
        }
        return this._lineOffsets;
    };
    FullTextDocument.prototype.positionAt = function (offset) {
        offset = Math.max(Math.min(offset, this._content.length), 0);
        var lineOffsets = this.getLineOffsets();
        var low = 0, high = lineOffsets.length;
        if (high === 0) {
            return { line: 0, character: offset };
        }
        while (low < high) {
            var mid = Math.floor((low + high) / 2);
            if (lineOffsets[mid] > offset) {
                high = mid;
            }
            else {
                low = mid + 1;
            }
        }
        // low is the least x for which the line offset is larger than the current offset
        // or array.length if no line offset is larger than the current offset
        var line = low - 1;
        return { line: line, character: offset - lineOffsets[line] };
    };
    FullTextDocument.prototype.offsetAt = function (position) {
        var lineOffsets = this.getLineOffsets();
        if (position.line >= lineOffsets.length) {
            return this._content.length;
        }
        else if (position.line < 0) {
            return 0;
        }
        var lineOffset = lineOffsets[position.line];
        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;
        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
    };
    Object.defineProperty(FullTextDocument.prototype, "lineCount", {
        get: function () {
            return this.getLineOffsets().length;
        },
        enumerable: true,
        configurable: true
    });
    FullTextDocument.isIncremental = function (event) {
        var candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range !== undefined &&
            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');
    };
    FullTextDocument.isFull = function (event) {
        var candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;
    };
    return FullTextDocument;
}());
var TextDocument;
(function (TextDocument) {
    /**
     * Creates a new text document.
     *
     * @param uri The document's uri.
     * @param languageId  The document's language Id.
     * @param version The document's initial version number.
     * @param content The document's content.
     */
    function create(uri, languageId, version, content) {
        return new FullTextDocument(uri, languageId, version, content);
    }
    TextDocument.create = create;
    /**
     * Updates a TextDocument by modifing its content.
     *
     * @param document the document to update. Only documents created by TextDocument.create are valid inputs.
     * @param changes the changes to apply to the document.
     * @returns The updated TextDocument. Note: That's the same document instance passed in as first parameter.
     *
     */
    function update(document, changes, version) {
        if (document instanceof FullTextDocument) {
            document.update(changes, version);
            return document;
        }
        else {
            throw new Error('TextDocument.update: document must be created by TextDocument.create');
        }
    }
    TextDocument.update = update;
    function applyEdits(document, edits) {
        var text = document.getText();
        var sortedEdits = mergeSort(edits.map(getWellformedEdit), function (a, b) {
            var diff = a.range.start.line - b.range.start.line;
            if (diff === 0) {
                return a.range.start.character - b.range.start.character;
            }
            return diff;
        });
        var lastModifiedOffset = 0;
        var spans = [];
        for (var _i = 0, sortedEdits_1 = sortedEdits; _i < sortedEdits_1.length; _i++) {
            var e = sortedEdits_1[_i];
            var startOffset = document.offsetAt(e.range.start);
            if (startOffset < lastModifiedOffset) {
                throw new Error('Overlapping edit');
            }
            else if (startOffset > lastModifiedOffset) {
                spans.push(text.substring(lastModifiedOffset, startOffset));
            }
            if (e.newText.length) {
                spans.push(e.newText);
            }
            lastModifiedOffset = document.offsetAt(e.range.end);
        }
        spans.push(text.substr(lastModifiedOffset));
        return spans.join('');
    }
    TextDocument.applyEdits = applyEdits;
})(TextDocument || (TextDocument = {}));
function mergeSort(data, compare) {
    if (data.length <= 1) {
        // sorted
        return data;
    }
    var p = (data.length / 2) | 0;
    var left = data.slice(0, p);
    var right = data.slice(p);
    mergeSort(left, compare);
    mergeSort(right, compare);
    var leftIdx = 0;
    var rightIdx = 0;
    var i = 0;
    while (leftIdx < left.length && rightIdx < right.length) {
        var ret = compare(left[leftIdx], right[rightIdx]);
        if (ret <= 0) {
            // smaller_equal -> take left to preserve order
            data[i++] = left[leftIdx++];
        }
        else {
            // greater -> take right
            data[i++] = right[rightIdx++];
        }
    }
    while (leftIdx < left.length) {
        data[i++] = left[leftIdx++];
    }
    while (rightIdx < right.length) {
        data[i++] = right[rightIdx++];
    }
    return data;
}
function computeLineOffsets(text, isAtLineStart, textOffset) {
    if (textOffset === void 0) { textOffset = 0; }
    var result = isAtLineStart ? [textOffset] : [];
    for (var i = 0; i < text.length; i++) {
        var ch = text.charCodeAt(i);
        if (ch === 13 /* CarriageReturn */ || ch === 10 /* LineFeed */) {
            if (ch === 13 /* CarriageReturn */ && i + 1 < text.length && text.charCodeAt(i + 1) === 10 /* LineFeed */) {
                i++;
            }
            result.push(textOffset + i + 1);
        }
    }
    return result;
}
function getWellformedRange(range) {
    var start = range.start;
    var end = range.end;
    if (start.line > end.line || (start.line === end.line && start.character > end.character)) {
        return { start: end, end: start };
    }
    return range;
}
function getWellformedEdit(textEdit) {
    var range = getWellformedRange(textEdit.range);
    if (range !== textEdit.range) {
        return { newText: textEdit.newText, range: range };
    }
    return textEdit;
}


/***/ }),

/***/ "./node_modules/vscode-languageserver-types/lib/esm/main.js":
/*!******************************************************************!*\
  !*** ./node_modules/vscode-languageserver-types/lib/esm/main.js ***!
  \******************************************************************/
/*! exports provided: integer, uinteger, Position, Range, Location, LocationLink, Color, ColorInformation, ColorPresentation, FoldingRangeKind, FoldingRange, DiagnosticRelatedInformation, DiagnosticSeverity, DiagnosticTag, CodeDescription, Diagnostic, Command, TextEdit, ChangeAnnotation, ChangeAnnotationIdentifier, AnnotatedTextEdit, TextDocumentEdit, CreateFile, RenameFile, DeleteFile, WorkspaceEdit, WorkspaceChange, TextDocumentIdentifier, VersionedTextDocumentIdentifier, OptionalVersionedTextDocumentIdentifier, TextDocumentItem, MarkupKind, MarkupContent, CompletionItemKind, InsertTextFormat, CompletionItemTag, InsertReplaceEdit, InsertTextMode, CompletionItem, CompletionList, MarkedString, Hover, ParameterInformation, SignatureInformation, DocumentHighlightKind, DocumentHighlight, SymbolKind, SymbolTag, SymbolInformation, DocumentSymbol, CodeActionKind, CodeActionContext, CodeAction, CodeLens, FormattingOptions, DocumentLink, SelectionRange, EOL, TextDocument */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "integer", function() { return integer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uinteger", function() { return uinteger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Position", function() { return Position; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Range", function() { return Range; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Location", function() { return Location; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LocationLink", function() { return LocationLink; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Color", function() { return Color; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColorInformation", function() { return ColorInformation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColorPresentation", function() { return ColorPresentation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FoldingRangeKind", function() { return FoldingRangeKind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FoldingRange", function() { return FoldingRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DiagnosticRelatedInformation", function() { return DiagnosticRelatedInformation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DiagnosticSeverity", function() { return DiagnosticSeverity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DiagnosticTag", function() { return DiagnosticTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CodeDescription", function() { return CodeDescription; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Diagnostic", function() { return Diagnostic; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Command", function() { return Command; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextEdit", function() { return TextEdit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChangeAnnotation", function() { return ChangeAnnotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChangeAnnotationIdentifier", function() { return ChangeAnnotationIdentifier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotatedTextEdit", function() { return AnnotatedTextEdit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextDocumentEdit", function() { return TextDocumentEdit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateFile", function() { return CreateFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RenameFile", function() { return RenameFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeleteFile", function() { return DeleteFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WorkspaceEdit", function() { return WorkspaceEdit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WorkspaceChange", function() { return WorkspaceChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextDocumentIdentifier", function() { return TextDocumentIdentifier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VersionedTextDocumentIdentifier", function() { return VersionedTextDocumentIdentifier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OptionalVersionedTextDocumentIdentifier", function() { return OptionalVersionedTextDocumentIdentifier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextDocumentItem", function() { return TextDocumentItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MarkupKind", function() { return MarkupKind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MarkupContent", function() { return MarkupContent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CompletionItemKind", function() { return CompletionItemKind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InsertTextFormat", function() { return InsertTextFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CompletionItemTag", function() { return CompletionItemTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InsertReplaceEdit", function() { return InsertReplaceEdit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InsertTextMode", function() { return InsertTextMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CompletionItem", function() { return CompletionItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CompletionList", function() { return CompletionList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MarkedString", function() { return MarkedString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Hover", function() { return Hover; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParameterInformation", function() { return ParameterInformation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SignatureInformation", function() { return SignatureInformation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DocumentHighlightKind", function() { return DocumentHighlightKind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DocumentHighlight", function() { return DocumentHighlight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SymbolKind", function() { return SymbolKind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SymbolTag", function() { return SymbolTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SymbolInformation", function() { return SymbolInformation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DocumentSymbol", function() { return DocumentSymbol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CodeActionKind", function() { return CodeActionKind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CodeActionContext", function() { return CodeActionContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CodeAction", function() { return CodeAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CodeLens", function() { return CodeLens; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormattingOptions", function() { return FormattingOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DocumentLink", function() { return DocumentLink; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectionRange", function() { return SelectionRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EOL", function() { return EOL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextDocument", function() { return TextDocument; });
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

var integer;
(function (integer) {
    integer.MIN_VALUE = -2147483648;
    integer.MAX_VALUE = 2147483647;
})(integer || (integer = {}));
var uinteger;
(function (uinteger) {
    uinteger.MIN_VALUE = 0;
    uinteger.MAX_VALUE = 2147483647;
})(uinteger || (uinteger = {}));
/**
 * The Position namespace provides helper functions to work with
 * [Position](#Position) literals.
 */
var Position;
(function (Position) {
    /**
     * Creates a new Position literal from the given line and character.
     * @param line The position's line.
     * @param character The position's character.
     */
    function create(line, character) {
        if (line === Number.MAX_VALUE) {
            line = uinteger.MAX_VALUE;
        }
        if (character === Number.MAX_VALUE) {
            character = uinteger.MAX_VALUE;
        }
        return { line: line, character: character };
    }
    Position.create = create;
    /**
     * Checks whether the given literal conforms to the [Position](#Position) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);
    }
    Position.is = is;
})(Position || (Position = {}));
/**
 * The Range namespace provides helper functions to work with
 * [Range](#Range) literals.
 */
var Range;
(function (Range) {
    function create(one, two, three, four) {
        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {
            return { start: Position.create(one, two), end: Position.create(three, four) };
        }
        else if (Position.is(one) && Position.is(two)) {
            return { start: one, end: two };
        }
        else {
            throw new Error("Range#create called with invalid arguments[" + one + ", " + two + ", " + three + ", " + four + "]");
        }
    }
    Range.create = create;
    /**
     * Checks whether the given literal conforms to the [Range](#Range) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);
    }
    Range.is = is;
})(Range || (Range = {}));
/**
 * The Location namespace provides helper functions to work with
 * [Location](#Location) literals.
 */
var Location;
(function (Location) {
    /**
     * Creates a Location literal.
     * @param uri The location's uri.
     * @param range The location's range.
     */
    function create(uri, range) {
        return { uri: uri, range: range };
    }
    Location.create = create;
    /**
     * Checks whether the given literal conforms to the [Location](#Location) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));
    }
    Location.is = is;
})(Location || (Location = {}));
/**
 * The LocationLink namespace provides helper functions to work with
 * [LocationLink](#LocationLink) literals.
 */
var LocationLink;
(function (LocationLink) {
    /**
     * Creates a LocationLink literal.
     * @param targetUri The definition's uri.
     * @param targetRange The full range of the definition.
     * @param targetSelectionRange The span of the symbol definition at the target.
     * @param originSelectionRange The span of the symbol being defined in the originating source file.
     */
    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {
        return { targetUri: targetUri, targetRange: targetRange, targetSelectionRange: targetSelectionRange, originSelectionRange: originSelectionRange };
    }
    LocationLink.create = create;
    /**
     * Checks whether the given literal conforms to the [LocationLink](#LocationLink) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri)
            && (Range.is(candidate.targetSelectionRange) || Is.undefined(candidate.targetSelectionRange))
            && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));
    }
    LocationLink.is = is;
})(LocationLink || (LocationLink = {}));
/**
 * The Color namespace provides helper functions to work with
 * [Color](#Color) literals.
 */
var Color;
(function (Color) {
    /**
     * Creates a new Color literal.
     */
    function create(red, green, blue, alpha) {
        return {
            red: red,
            green: green,
            blue: blue,
            alpha: alpha,
        };
    }
    Color.create = create;
    /**
     * Checks whether the given literal conforms to the [Color](#Color) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.numberRange(candidate.red, 0, 1)
            && Is.numberRange(candidate.green, 0, 1)
            && Is.numberRange(candidate.blue, 0, 1)
            && Is.numberRange(candidate.alpha, 0, 1);
    }
    Color.is = is;
})(Color || (Color = {}));
/**
 * The ColorInformation namespace provides helper functions to work with
 * [ColorInformation](#ColorInformation) literals.
 */
var ColorInformation;
(function (ColorInformation) {
    /**
     * Creates a new ColorInformation literal.
     */
    function create(range, color) {
        return {
            range: range,
            color: color,
        };
    }
    ColorInformation.create = create;
    /**
     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.
     */
    function is(value) {
        var candidate = value;
        return Range.is(candidate.range) && Color.is(candidate.color);
    }
    ColorInformation.is = is;
})(ColorInformation || (ColorInformation = {}));
/**
 * The Color namespace provides helper functions to work with
 * [ColorPresentation](#ColorPresentation) literals.
 */
var ColorPresentation;
(function (ColorPresentation) {
    /**
     * Creates a new ColorInformation literal.
     */
    function create(label, textEdit, additionalTextEdits) {
        return {
            label: label,
            textEdit: textEdit,
            additionalTextEdits: additionalTextEdits,
        };
    }
    ColorPresentation.create = create;
    /**
     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.string(candidate.label)
            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))
            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));
    }
    ColorPresentation.is = is;
})(ColorPresentation || (ColorPresentation = {}));
/**
 * Enum of known range kinds
 */
var FoldingRangeKind;
(function (FoldingRangeKind) {
    /**
     * Folding range for a comment
     */
    FoldingRangeKind["Comment"] = "comment";
    /**
     * Folding range for a imports or includes
     */
    FoldingRangeKind["Imports"] = "imports";
    /**
     * Folding range for a region (e.g. `#region`)
     */
    FoldingRangeKind["Region"] = "region";
})(FoldingRangeKind || (FoldingRangeKind = {}));
/**
 * The folding range namespace provides helper functions to work with
 * [FoldingRange](#FoldingRange) literals.
 */
var FoldingRange;
(function (FoldingRange) {
    /**
     * Creates a new FoldingRange literal.
     */
    function create(startLine, endLine, startCharacter, endCharacter, kind) {
        var result = {
            startLine: startLine,
            endLine: endLine
        };
        if (Is.defined(startCharacter)) {
            result.startCharacter = startCharacter;
        }
        if (Is.defined(endCharacter)) {
            result.endCharacter = endCharacter;
        }
        if (Is.defined(kind)) {
            result.kind = kind;
        }
        return result;
    }
    FoldingRange.create = create;
    /**
     * Checks whether the given literal conforms to the [FoldingRange](#FoldingRange) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine)
            && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter))
            && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter))
            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));
    }
    FoldingRange.is = is;
})(FoldingRange || (FoldingRange = {}));
/**
 * The DiagnosticRelatedInformation namespace provides helper functions to work with
 * [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) literals.
 */
var DiagnosticRelatedInformation;
(function (DiagnosticRelatedInformation) {
    /**
     * Creates a new DiagnosticRelatedInformation literal.
     */
    function create(location, message) {
        return {
            location: location,
            message: message
        };
    }
    DiagnosticRelatedInformation.create = create;
    /**
     * Checks whether the given literal conforms to the [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);
    }
    DiagnosticRelatedInformation.is = is;
})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));
/**
 * The diagnostic's severity.
 */
var DiagnosticSeverity;
(function (DiagnosticSeverity) {
    /**
     * Reports an error.
     */
    DiagnosticSeverity.Error = 1;
    /**
     * Reports a warning.
     */
    DiagnosticSeverity.Warning = 2;
    /**
     * Reports an information.
     */
    DiagnosticSeverity.Information = 3;
    /**
     * Reports a hint.
     */
    DiagnosticSeverity.Hint = 4;
})(DiagnosticSeverity || (DiagnosticSeverity = {}));
/**
 * The diagnostic tags.
 *
 * @since 3.15.0
 */
var DiagnosticTag;
(function (DiagnosticTag) {
    /**
     * Unused or unnecessary code.
     *
     * Clients are allowed to render diagnostics with this tag faded out instead of having
     * an error squiggle.
     */
    DiagnosticTag.Unnecessary = 1;
    /**
     * Deprecated or obsolete code.
     *
     * Clients are allowed to rendered diagnostics with this tag strike through.
     */
    DiagnosticTag.Deprecated = 2;
})(DiagnosticTag || (DiagnosticTag = {}));
/**
 * The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.
 *
 * @since 3.16.0
 */
var CodeDescription;
(function (CodeDescription) {
    function is(value) {
        var candidate = value;
        return candidate !== undefined && candidate !== null && Is.string(candidate.href);
    }
    CodeDescription.is = is;
})(CodeDescription || (CodeDescription = {}));
/**
 * The Diagnostic namespace provides helper functions to work with
 * [Diagnostic](#Diagnostic) literals.
 */
var Diagnostic;
(function (Diagnostic) {
    /**
     * Creates a new Diagnostic literal.
     */
    function create(range, message, severity, code, source, relatedInformation) {
        var result = { range: range, message: message };
        if (Is.defined(severity)) {
            result.severity = severity;
        }
        if (Is.defined(code)) {
            result.code = code;
        }
        if (Is.defined(source)) {
            result.source = source;
        }
        if (Is.defined(relatedInformation)) {
            result.relatedInformation = relatedInformation;
        }
        return result;
    }
    Diagnostic.create = create;
    /**
     * Checks whether the given literal conforms to the [Diagnostic](#Diagnostic) interface.
     */
    function is(value) {
        var _a;
        var candidate = value;
        return Is.defined(candidate)
            && Range.is(candidate.range)
            && Is.string(candidate.message)
            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))
            && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))
            && (Is.undefined(candidate.codeDescription) || (Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)))
            && (Is.string(candidate.source) || Is.undefined(candidate.source))
            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));
    }
    Diagnostic.is = is;
})(Diagnostic || (Diagnostic = {}));
/**
 * The Command namespace provides helper functions to work with
 * [Command](#Command) literals.
 */
var Command;
(function (Command) {
    /**
     * Creates a new Command literal.
     */
    function create(title, command) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var result = { title: title, command: command };
        if (Is.defined(args) && args.length > 0) {
            result.arguments = args;
        }
        return result;
    }
    Command.create = create;
    /**
     * Checks whether the given literal conforms to the [Command](#Command) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);
    }
    Command.is = is;
})(Command || (Command = {}));
/**
 * The TextEdit namespace provides helper function to create replace,
 * insert and delete edits more easily.
 */
var TextEdit;
(function (TextEdit) {
    /**
     * Creates a replace text edit.
     * @param range The range of text to be replaced.
     * @param newText The new text.
     */
    function replace(range, newText) {
        return { range: range, newText: newText };
    }
    TextEdit.replace = replace;
    /**
     * Creates a insert text edit.
     * @param position The position to insert the text at.
     * @param newText The text to be inserted.
     */
    function insert(position, newText) {
        return { range: { start: position, end: position }, newText: newText };
    }
    TextEdit.insert = insert;
    /**
     * Creates a delete text edit.
     * @param range The range of text to be deleted.
     */
    function del(range) {
        return { range: range, newText: '' };
    }
    TextEdit.del = del;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate)
            && Is.string(candidate.newText)
            && Range.is(candidate.range);
    }
    TextEdit.is = is;
})(TextEdit || (TextEdit = {}));
var ChangeAnnotation;
(function (ChangeAnnotation) {
    function create(label, needsConfirmation, description) {
        var result = { label: label };
        if (needsConfirmation !== undefined) {
            result.needsConfirmation = needsConfirmation;
        }
        if (description !== undefined) {
            result.description = description;
        }
        return result;
    }
    ChangeAnnotation.create = create;
    function is(value) {
        var candidate = value;
        return candidate !== undefined && Is.objectLiteral(candidate) && Is.string(candidate.label) &&
            (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === undefined) &&
            (Is.string(candidate.description) || candidate.description === undefined);
    }
    ChangeAnnotation.is = is;
})(ChangeAnnotation || (ChangeAnnotation = {}));
var ChangeAnnotationIdentifier;
(function (ChangeAnnotationIdentifier) {
    function is(value) {
        var candidate = value;
        return typeof candidate === 'string';
    }
    ChangeAnnotationIdentifier.is = is;
})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));
var AnnotatedTextEdit;
(function (AnnotatedTextEdit) {
    /**
     * Creates an annotated replace text edit.
     *
     * @param range The range of text to be replaced.
     * @param newText The new text.
     * @param annotation The annotation.
     */
    function replace(range, newText, annotation) {
        return { range: range, newText: newText, annotationId: annotation };
    }
    AnnotatedTextEdit.replace = replace;
    /**
     * Creates an annotated insert text edit.
     *
     * @param position The position to insert the text at.
     * @param newText The text to be inserted.
     * @param annotation The annotation.
     */
    function insert(position, newText, annotation) {
        return { range: { start: position, end: position }, newText: newText, annotationId: annotation };
    }
    AnnotatedTextEdit.insert = insert;
    /**
     * Creates an annotated delete text edit.
     *
     * @param range The range of text to be deleted.
     * @param annotation The annotation.
     */
    function del(range, annotation) {
        return { range: range, newText: '', annotationId: annotation };
    }
    AnnotatedTextEdit.del = del;
    function is(value) {
        var candidate = value;
        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    AnnotatedTextEdit.is = is;
})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));
/**
 * The TextDocumentEdit namespace provides helper function to create
 * an edit that manipulates a text document.
 */
var TextDocumentEdit;
(function (TextDocumentEdit) {
    /**
     * Creates a new `TextDocumentEdit`
     */
    function create(textDocument, edits) {
        return { textDocument: textDocument, edits: edits };
    }
    TextDocumentEdit.create = create;
    function is(value) {
        var candidate = value;
        return Is.defined(candidate)
            && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument)
            && Array.isArray(candidate.edits);
    }
    TextDocumentEdit.is = is;
})(TextDocumentEdit || (TextDocumentEdit = {}));
var CreateFile;
(function (CreateFile) {
    function create(uri, options, annotation) {
        var result = {
            kind: 'create',
            uri: uri
        };
        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {
            result.options = options;
        }
        if (annotation !== undefined) {
            result.annotationId = annotation;
        }
        return result;
    }
    CreateFile.create = create;
    function is(value) {
        var candidate = value;
        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) && (candidate.options === undefined ||
            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    CreateFile.is = is;
})(CreateFile || (CreateFile = {}));
var RenameFile;
(function (RenameFile) {
    function create(oldUri, newUri, options, annotation) {
        var result = {
            kind: 'rename',
            oldUri: oldUri,
            newUri: newUri
        };
        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {
            result.options = options;
        }
        if (annotation !== undefined) {
            result.annotationId = annotation;
        }
        return result;
    }
    RenameFile.create = create;
    function is(value) {
        var candidate = value;
        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === undefined ||
            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    RenameFile.is = is;
})(RenameFile || (RenameFile = {}));
var DeleteFile;
(function (DeleteFile) {
    function create(uri, options, annotation) {
        var result = {
            kind: 'delete',
            uri: uri
        };
        if (options !== undefined && (options.recursive !== undefined || options.ignoreIfNotExists !== undefined)) {
            result.options = options;
        }
        if (annotation !== undefined) {
            result.annotationId = annotation;
        }
        return result;
    }
    DeleteFile.create = create;
    function is(value) {
        var candidate = value;
        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) && (candidate.options === undefined ||
            ((candidate.options.recursive === undefined || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === undefined || Is.boolean(candidate.options.ignoreIfNotExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    DeleteFile.is = is;
})(DeleteFile || (DeleteFile = {}));
var WorkspaceEdit;
(function (WorkspaceEdit) {
    function is(value) {
        var candidate = value;
        return candidate &&
            (candidate.changes !== undefined || candidate.documentChanges !== undefined) &&
            (candidate.documentChanges === undefined || candidate.documentChanges.every(function (change) {
                if (Is.string(change.kind)) {
                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);
                }
                else {
                    return TextDocumentEdit.is(change);
                }
            }));
    }
    WorkspaceEdit.is = is;
})(WorkspaceEdit || (WorkspaceEdit = {}));
var TextEditChangeImpl = /** @class */ (function () {
    function TextEditChangeImpl(edits, changeAnnotations) {
        this.edits = edits;
        this.changeAnnotations = changeAnnotations;
    }
    TextEditChangeImpl.prototype.insert = function (position, newText, annotation) {
        var edit;
        var id;
        if (annotation === undefined) {
            edit = TextEdit.insert(position, newText);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.insert(position, newText, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.insert(position, newText, id);
        }
        this.edits.push(edit);
        if (id !== undefined) {
            return id;
        }
    };
    TextEditChangeImpl.prototype.replace = function (range, newText, annotation) {
        var edit;
        var id;
        if (annotation === undefined) {
            edit = TextEdit.replace(range, newText);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.replace(range, newText, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.replace(range, newText, id);
        }
        this.edits.push(edit);
        if (id !== undefined) {
            return id;
        }
    };
    TextEditChangeImpl.prototype.delete = function (range, annotation) {
        var edit;
        var id;
        if (annotation === undefined) {
            edit = TextEdit.del(range);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.del(range, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.del(range, id);
        }
        this.edits.push(edit);
        if (id !== undefined) {
            return id;
        }
    };
    TextEditChangeImpl.prototype.add = function (edit) {
        this.edits.push(edit);
    };
    TextEditChangeImpl.prototype.all = function () {
        return this.edits;
    };
    TextEditChangeImpl.prototype.clear = function () {
        this.edits.splice(0, this.edits.length);
    };
    TextEditChangeImpl.prototype.assertChangeAnnotations = function (value) {
        if (value === undefined) {
            throw new Error("Text edit change is not configured to manage change annotations.");
        }
    };
    return TextEditChangeImpl;
}());
/**
 * A helper class
 */
var ChangeAnnotations = /** @class */ (function () {
    function ChangeAnnotations(annotations) {
        this._annotations = annotations === undefined ? Object.create(null) : annotations;
        this._counter = 0;
        this._size = 0;
    }
    ChangeAnnotations.prototype.all = function () {
        return this._annotations;
    };
    Object.defineProperty(ChangeAnnotations.prototype, "size", {
        get: function () {
            return this._size;
        },
        enumerable: false,
        configurable: true
    });
    ChangeAnnotations.prototype.manage = function (idOrAnnotation, annotation) {
        var id;
        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {
            id = idOrAnnotation;
        }
        else {
            id = this.nextId();
            annotation = idOrAnnotation;
        }
        if (this._annotations[id] !== undefined) {
            throw new Error("Id " + id + " is already in use.");
        }
        if (annotation === undefined) {
            throw new Error("No annotation provided for id " + id);
        }
        this._annotations[id] = annotation;
        this._size++;
        return id;
    };
    ChangeAnnotations.prototype.nextId = function () {
        this._counter++;
        return this._counter.toString();
    };
    return ChangeAnnotations;
}());
/**
 * A workspace change helps constructing changes to a workspace.
 */
var WorkspaceChange = /** @class */ (function () {
    function WorkspaceChange(workspaceEdit) {
        var _this = this;
        this._textEditChanges = Object.create(null);
        if (workspaceEdit !== undefined) {
            this._workspaceEdit = workspaceEdit;
            if (workspaceEdit.documentChanges) {
                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);
                workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                workspaceEdit.documentChanges.forEach(function (change) {
                    if (TextDocumentEdit.is(change)) {
                        var textEditChange = new TextEditChangeImpl(change.edits, _this._changeAnnotations);
                        _this._textEditChanges[change.textDocument.uri] = textEditChange;
                    }
                });
            }
            else if (workspaceEdit.changes) {
                Object.keys(workspaceEdit.changes).forEach(function (key) {
                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);
                    _this._textEditChanges[key] = textEditChange;
                });
            }
        }
        else {
            this._workspaceEdit = {};
        }
    }
    Object.defineProperty(WorkspaceChange.prototype, "edit", {
        /**
         * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal
         * use to be returned from a workspace edit operation like rename.
         */
        get: function () {
            this.initDocumentChanges();
            if (this._changeAnnotations !== undefined) {
                if (this._changeAnnotations.size === 0) {
                    this._workspaceEdit.changeAnnotations = undefined;
                }
                else {
                    this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                }
            }
            return this._workspaceEdit;
        },
        enumerable: false,
        configurable: true
    });
    WorkspaceChange.prototype.getTextEditChange = function (key) {
        if (OptionalVersionedTextDocumentIdentifier.is(key)) {
            this.initDocumentChanges();
            if (this._workspaceEdit.documentChanges === undefined) {
                throw new Error('Workspace edit is not configured for document changes.');
            }
            var textDocument = { uri: key.uri, version: key.version };
            var result = this._textEditChanges[textDocument.uri];
            if (!result) {
                var edits = [];
                var textDocumentEdit = {
                    textDocument: textDocument,
                    edits: edits
                };
                this._workspaceEdit.documentChanges.push(textDocumentEdit);
                result = new TextEditChangeImpl(edits, this._changeAnnotations);
                this._textEditChanges[textDocument.uri] = result;
            }
            return result;
        }
        else {
            this.initChanges();
            if (this._workspaceEdit.changes === undefined) {
                throw new Error('Workspace edit is not configured for normal text edit changes.');
            }
            var result = this._textEditChanges[key];
            if (!result) {
                var edits = [];
                this._workspaceEdit.changes[key] = edits;
                result = new TextEditChangeImpl(edits);
                this._textEditChanges[key] = result;
            }
            return result;
        }
    };
    WorkspaceChange.prototype.initDocumentChanges = function () {
        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {
            this._changeAnnotations = new ChangeAnnotations();
            this._workspaceEdit.documentChanges = [];
            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
        }
    };
    WorkspaceChange.prototype.initChanges = function () {
        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {
            this._workspaceEdit.changes = Object.create(null);
        }
    };
    WorkspaceChange.prototype.createFile = function (uri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === undefined) {
            throw new Error('Workspace edit is not configured for document changes.');
        }
        var annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        var operation;
        var id;
        if (annotation === undefined) {
            operation = CreateFile.create(uri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = CreateFile.create(uri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== undefined) {
            return id;
        }
    };
    WorkspaceChange.prototype.renameFile = function (oldUri, newUri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === undefined) {
            throw new Error('Workspace edit is not configured for document changes.');
        }
        var annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        var operation;
        var id;
        if (annotation === undefined) {
            operation = RenameFile.create(oldUri, newUri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = RenameFile.create(oldUri, newUri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== undefined) {
            return id;
        }
    };
    WorkspaceChange.prototype.deleteFile = function (uri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === undefined) {
            throw new Error('Workspace edit is not configured for document changes.');
        }
        var annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        var operation;
        var id;
        if (annotation === undefined) {
            operation = DeleteFile.create(uri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = DeleteFile.create(uri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== undefined) {
            return id;
        }
    };
    return WorkspaceChange;
}());

/**
 * The TextDocumentIdentifier namespace provides helper functions to work with
 * [TextDocumentIdentifier](#TextDocumentIdentifier) literals.
 */
var TextDocumentIdentifier;
(function (TextDocumentIdentifier) {
    /**
     * Creates a new TextDocumentIdentifier literal.
     * @param uri The document's uri.
     */
    function create(uri) {
        return { uri: uri };
    }
    TextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the [TextDocumentIdentifier](#TextDocumentIdentifier) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri);
    }
    TextDocumentIdentifier.is = is;
})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));
/**
 * The VersionedTextDocumentIdentifier namespace provides helper functions to work with
 * [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.
 */
var VersionedTextDocumentIdentifier;
(function (VersionedTextDocumentIdentifier) {
    /**
     * Creates a new VersionedTextDocumentIdentifier literal.
     * @param uri The document's uri.
     * @param uri The document's text.
     */
    function create(uri, version) {
        return { uri: uri, version: version };
    }
    VersionedTextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);
    }
    VersionedTextDocumentIdentifier.is = is;
})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));
/**
 * The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with
 * [OptionalVersionedTextDocumentIdentifier](#OptionalVersionedTextDocumentIdentifier) literals.
 */
var OptionalVersionedTextDocumentIdentifier;
(function (OptionalVersionedTextDocumentIdentifier) {
    /**
     * Creates a new OptionalVersionedTextDocumentIdentifier literal.
     * @param uri The document's uri.
     * @param uri The document's text.
     */
    function create(uri, version) {
        return { uri: uri, version: version };
    }
    OptionalVersionedTextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the [OptionalVersionedTextDocumentIdentifier](#OptionalVersionedTextDocumentIdentifier) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));
    }
    OptionalVersionedTextDocumentIdentifier.is = is;
})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));
/**
 * The TextDocumentItem namespace provides helper functions to work with
 * [TextDocumentItem](#TextDocumentItem) literals.
 */
var TextDocumentItem;
(function (TextDocumentItem) {
    /**
     * Creates a new TextDocumentItem literal.
     * @param uri The document's uri.
     * @param languageId The document's language identifier.
     * @param version The document's version number.
     * @param text The document's text.
     */
    function create(uri, languageId, version, text) {
        return { uri: uri, languageId: languageId, version: version, text: text };
    }
    TextDocumentItem.create = create;
    /**
     * Checks whether the given literal conforms to the [TextDocumentItem](#TextDocumentItem) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);
    }
    TextDocumentItem.is = is;
})(TextDocumentItem || (TextDocumentItem = {}));
/**
 * Describes the content type that a client supports in various
 * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.
 *
 * Please note that `MarkupKinds` must not start with a `$`. This kinds
 * are reserved for internal usage.
 */
var MarkupKind;
(function (MarkupKind) {
    /**
     * Plain text is supported as a content format
     */
    MarkupKind.PlainText = 'plaintext';
    /**
     * Markdown is supported as a content format
     */
    MarkupKind.Markdown = 'markdown';
})(MarkupKind || (MarkupKind = {}));
(function (MarkupKind) {
    /**
     * Checks whether the given value is a value of the [MarkupKind](#MarkupKind) type.
     */
    function is(value) {
        var candidate = value;
        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;
    }
    MarkupKind.is = is;
})(MarkupKind || (MarkupKind = {}));
var MarkupContent;
(function (MarkupContent) {
    /**
     * Checks whether the given value conforms to the [MarkupContent](#MarkupContent) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);
    }
    MarkupContent.is = is;
})(MarkupContent || (MarkupContent = {}));
/**
 * The kind of a completion entry.
 */
var CompletionItemKind;
(function (CompletionItemKind) {
    CompletionItemKind.Text = 1;
    CompletionItemKind.Method = 2;
    CompletionItemKind.Function = 3;
    CompletionItemKind.Constructor = 4;
    CompletionItemKind.Field = 5;
    CompletionItemKind.Variable = 6;
    CompletionItemKind.Class = 7;
    CompletionItemKind.Interface = 8;
    CompletionItemKind.Module = 9;
    CompletionItemKind.Property = 10;
    CompletionItemKind.Unit = 11;
    CompletionItemKind.Value = 12;
    CompletionItemKind.Enum = 13;
    CompletionItemKind.Keyword = 14;
    CompletionItemKind.Snippet = 15;
    CompletionItemKind.Color = 16;
    CompletionItemKind.File = 17;
    CompletionItemKind.Reference = 18;
    CompletionItemKind.Folder = 19;
    CompletionItemKind.EnumMember = 20;
    CompletionItemKind.Constant = 21;
    CompletionItemKind.Struct = 22;
    CompletionItemKind.Event = 23;
    CompletionItemKind.Operator = 24;
    CompletionItemKind.TypeParameter = 25;
})(CompletionItemKind || (CompletionItemKind = {}));
/**
 * Defines whether the insert text in a completion item should be interpreted as
 * plain text or a snippet.
 */
var InsertTextFormat;
(function (InsertTextFormat) {
    /**
     * The primary text to be inserted is treated as a plain string.
     */
    InsertTextFormat.PlainText = 1;
    /**
     * The primary text to be inserted is treated as a snippet.
     *
     * A snippet can define tab stops and placeholders with `$1`, `$2`
     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to
     * the end of the snippet. Placeholders with equal identifiers are linked,
     * that is typing in one will update others too.
     *
     * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax
     */
    InsertTextFormat.Snippet = 2;
})(InsertTextFormat || (InsertTextFormat = {}));
/**
 * Completion item tags are extra annotations that tweak the rendering of a completion
 * item.
 *
 * @since 3.15.0
 */
var CompletionItemTag;
(function (CompletionItemTag) {
    /**
     * Render a completion as obsolete, usually using a strike-out.
     */
    CompletionItemTag.Deprecated = 1;
})(CompletionItemTag || (CompletionItemTag = {}));
/**
 * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.
 *
 * @since 3.16.0
 */
var InsertReplaceEdit;
(function (InsertReplaceEdit) {
    /**
     * Creates a new insert / replace edit
     */
    function create(newText, insert, replace) {
        return { newText: newText, insert: insert, replace: replace };
    }
    InsertReplaceEdit.create = create;
    /**
     * Checks whether the given literal conforms to the [InsertReplaceEdit](#InsertReplaceEdit) interface.
     */
    function is(value) {
        var candidate = value;
        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);
    }
    InsertReplaceEdit.is = is;
})(InsertReplaceEdit || (InsertReplaceEdit = {}));
/**
 * How whitespace and indentation is handled during completion
 * item insertion.
 *
 * @since 3.16.0
 */
var InsertTextMode;
(function (InsertTextMode) {
    /**
     * The insertion or replace strings is taken as it is. If the
     * value is multi line the lines below the cursor will be
     * inserted using the indentation defined in the string value.
     * The client will not apply any kind of adjustments to the
     * string.
     */
    InsertTextMode.asIs = 1;
    /**
     * The editor adjusts leading whitespace of new lines so that
     * they match the indentation up to the cursor of the line for
     * which the item is accepted.
     *
     * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a
     * multi line completion item is indented using 2 tabs and all
     * following lines inserted will be indented using 2 tabs as well.
     */
    InsertTextMode.adjustIndentation = 2;
})(InsertTextMode || (InsertTextMode = {}));
/**
 * The CompletionItem namespace provides functions to deal with
 * completion items.
 */
var CompletionItem;
(function (CompletionItem) {
    /**
     * Create a completion item and seed it with a label.
     * @param label The completion item's label
     */
    function create(label) {
        return { label: label };
    }
    CompletionItem.create = create;
})(CompletionItem || (CompletionItem = {}));
/**
 * The CompletionList namespace provides functions to deal with
 * completion lists.
 */
var CompletionList;
(function (CompletionList) {
    /**
     * Creates a new completion list.
     *
     * @param items The completion items.
     * @param isIncomplete The list is not complete.
     */
    function create(items, isIncomplete) {
        return { items: items ? items : [], isIncomplete: !!isIncomplete };
    }
    CompletionList.create = create;
})(CompletionList || (CompletionList = {}));
var MarkedString;
(function (MarkedString) {
    /**
     * Creates a marked string from plain text.
     *
     * @param plainText The plain text.
     */
    function fromPlainText(plainText) {
        return plainText.replace(/[\\`*_{}[\]()#+\-.!]/g, '\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash
    }
    MarkedString.fromPlainText = fromPlainText;
    /**
     * Checks whether the given value conforms to the [MarkedString](#MarkedString) type.
     */
    function is(value) {
        var candidate = value;
        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));
    }
    MarkedString.is = is;
})(MarkedString || (MarkedString = {}));
var Hover;
(function (Hover) {
    /**
     * Checks whether the given value conforms to the [Hover](#Hover) interface.
     */
    function is(value) {
        var candidate = value;
        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||
            MarkedString.is(candidate.contents) ||
            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === undefined || Range.is(value.range));
    }
    Hover.is = is;
})(Hover || (Hover = {}));
/**
 * The ParameterInformation namespace provides helper functions to work with
 * [ParameterInformation](#ParameterInformation) literals.
 */
var ParameterInformation;
(function (ParameterInformation) {
    /**
     * Creates a new parameter information literal.
     *
     * @param label A label string.
     * @param documentation A doc string.
     */
    function create(label, documentation) {
        return documentation ? { label: label, documentation: documentation } : { label: label };
    }
    ParameterInformation.create = create;
})(ParameterInformation || (ParameterInformation = {}));
/**
 * The SignatureInformation namespace provides helper functions to work with
 * [SignatureInformation](#SignatureInformation) literals.
 */
var SignatureInformation;
(function (SignatureInformation) {
    function create(label, documentation) {
        var parameters = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            parameters[_i - 2] = arguments[_i];
        }
        var result = { label: label };
        if (Is.defined(documentation)) {
            result.documentation = documentation;
        }
        if (Is.defined(parameters)) {
            result.parameters = parameters;
        }
        else {
            result.parameters = [];
        }
        return result;
    }
    SignatureInformation.create = create;
})(SignatureInformation || (SignatureInformation = {}));
/**
 * A document highlight kind.
 */
var DocumentHighlightKind;
(function (DocumentHighlightKind) {
    /**
     * A textual occurrence.
     */
    DocumentHighlightKind.Text = 1;
    /**
     * Read-access of a symbol, like reading a variable.
     */
    DocumentHighlightKind.Read = 2;
    /**
     * Write-access of a symbol, like writing to a variable.
     */
    DocumentHighlightKind.Write = 3;
})(DocumentHighlightKind || (DocumentHighlightKind = {}));
/**
 * DocumentHighlight namespace to provide helper functions to work with
 * [DocumentHighlight](#DocumentHighlight) literals.
 */
var DocumentHighlight;
(function (DocumentHighlight) {
    /**
     * Create a DocumentHighlight object.
     * @param range The range the highlight applies to.
     */
    function create(range, kind) {
        var result = { range: range };
        if (Is.number(kind)) {
            result.kind = kind;
        }
        return result;
    }
    DocumentHighlight.create = create;
})(DocumentHighlight || (DocumentHighlight = {}));
/**
 * A symbol kind.
 */
var SymbolKind;
(function (SymbolKind) {
    SymbolKind.File = 1;
    SymbolKind.Module = 2;
    SymbolKind.Namespace = 3;
    SymbolKind.Package = 4;
    SymbolKind.Class = 5;
    SymbolKind.Method = 6;
    SymbolKind.Property = 7;
    SymbolKind.Field = 8;
    SymbolKind.Constructor = 9;
    SymbolKind.Enum = 10;
    SymbolKind.Interface = 11;
    SymbolKind.Function = 12;
    SymbolKind.Variable = 13;
    SymbolKind.Constant = 14;
    SymbolKind.String = 15;
    SymbolKind.Number = 16;
    SymbolKind.Boolean = 17;
    SymbolKind.Array = 18;
    SymbolKind.Object = 19;
    SymbolKind.Key = 20;
    SymbolKind.Null = 21;
    SymbolKind.EnumMember = 22;
    SymbolKind.Struct = 23;
    SymbolKind.Event = 24;
    SymbolKind.Operator = 25;
    SymbolKind.TypeParameter = 26;
})(SymbolKind || (SymbolKind = {}));
/**
 * Symbol tags are extra annotations that tweak the rendering of a symbol.
 * @since 3.16
 */
var SymbolTag;
(function (SymbolTag) {
    /**
     * Render a symbol as obsolete, usually using a strike-out.
     */
    SymbolTag.Deprecated = 1;
})(SymbolTag || (SymbolTag = {}));
var SymbolInformation;
(function (SymbolInformation) {
    /**
     * Creates a new symbol information literal.
     *
     * @param name The name of the symbol.
     * @param kind The kind of the symbol.
     * @param range The range of the location of the symbol.
     * @param uri The resource of the location of symbol, defaults to the current document.
     * @param containerName The name of the symbol containing the symbol.
     */
    function create(name, kind, range, uri, containerName) {
        var result = {
            name: name,
            kind: kind,
            location: { uri: uri, range: range }
        };
        if (containerName) {
            result.containerName = containerName;
        }
        return result;
    }
    SymbolInformation.create = create;
})(SymbolInformation || (SymbolInformation = {}));
var DocumentSymbol;
(function (DocumentSymbol) {
    /**
     * Creates a new symbol information literal.
     *
     * @param name The name of the symbol.
     * @param detail The detail of the symbol.
     * @param kind The kind of the symbol.
     * @param range The range of the symbol.
     * @param selectionRange The selectionRange of the symbol.
     * @param children Children of the symbol.
     */
    function create(name, detail, kind, range, selectionRange, children) {
        var result = {
            name: name,
            detail: detail,
            kind: kind,
            range: range,
            selectionRange: selectionRange
        };
        if (children !== undefined) {
            result.children = children;
        }
        return result;
    }
    DocumentSymbol.create = create;
    /**
     * Checks whether the given literal conforms to the [DocumentSymbol](#DocumentSymbol) interface.
     */
    function is(value) {
        var candidate = value;
        return candidate &&
            Is.string(candidate.name) && Is.number(candidate.kind) &&
            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&
            (candidate.detail === undefined || Is.string(candidate.detail)) &&
            (candidate.deprecated === undefined || Is.boolean(candidate.deprecated)) &&
            (candidate.children === undefined || Array.isArray(candidate.children)) &&
            (candidate.tags === undefined || Array.isArray(candidate.tags));
    }
    DocumentSymbol.is = is;
})(DocumentSymbol || (DocumentSymbol = {}));
/**
 * A set of predefined code action kinds
 */
var CodeActionKind;
(function (CodeActionKind) {
    /**
     * Empty kind.
     */
    CodeActionKind.Empty = '';
    /**
     * Base kind for quickfix actions: 'quickfix'
     */
    CodeActionKind.QuickFix = 'quickfix';
    /**
     * Base kind for refactoring actions: 'refactor'
     */
    CodeActionKind.Refactor = 'refactor';
    /**
     * Base kind for refactoring extraction actions: 'refactor.extract'
     *
     * Example extract actions:
     *
     * - Extract method
     * - Extract function
     * - Extract variable
     * - Extract interface from class
     * - ...
     */
    CodeActionKind.RefactorExtract = 'refactor.extract';
    /**
     * Base kind for refactoring inline actions: 'refactor.inline'
     *
     * Example inline actions:
     *
     * - Inline function
     * - Inline variable
     * - Inline constant
     * - ...
     */
    CodeActionKind.RefactorInline = 'refactor.inline';
    /**
     * Base kind for refactoring rewrite actions: 'refactor.rewrite'
     *
     * Example rewrite actions:
     *
     * - Convert JavaScript function to class
     * - Add or remove parameter
     * - Encapsulate field
     * - Make method static
     * - Move method to base class
     * - ...
     */
    CodeActionKind.RefactorRewrite = 'refactor.rewrite';
    /**
     * Base kind for source actions: `source`
     *
     * Source code actions apply to the entire file.
     */
    CodeActionKind.Source = 'source';
    /**
     * Base kind for an organize imports source action: `source.organizeImports`
     */
    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';
    /**
     * Base kind for auto-fix source actions: `source.fixAll`.
     *
     * Fix all actions automatically fix errors that have a clear fix that do not require user input.
     * They should not suppress errors or perform unsafe fixes such as generating new types or classes.
     *
     * @since 3.15.0
     */
    CodeActionKind.SourceFixAll = 'source.fixAll';
})(CodeActionKind || (CodeActionKind = {}));
/**
 * The CodeActionContext namespace provides helper functions to work with
 * [CodeActionContext](#CodeActionContext) literals.
 */
var CodeActionContext;
(function (CodeActionContext) {
    /**
     * Creates a new CodeActionContext literal.
     */
    function create(diagnostics, only) {
        var result = { diagnostics: diagnostics };
        if (only !== undefined && only !== null) {
            result.only = only;
        }
        return result;
    }
    CodeActionContext.create = create;
    /**
     * Checks whether the given literal conforms to the [CodeActionContext](#CodeActionContext) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is) && (candidate.only === undefined || Is.typedArray(candidate.only, Is.string));
    }
    CodeActionContext.is = is;
})(CodeActionContext || (CodeActionContext = {}));
var CodeAction;
(function (CodeAction) {
    function create(title, kindOrCommandOrEdit, kind) {
        var result = { title: title };
        var checkKind = true;
        if (typeof kindOrCommandOrEdit === 'string') {
            checkKind = false;
            result.kind = kindOrCommandOrEdit;
        }
        else if (Command.is(kindOrCommandOrEdit)) {
            result.command = kindOrCommandOrEdit;
        }
        else {
            result.edit = kindOrCommandOrEdit;
        }
        if (checkKind && kind !== undefined) {
            result.kind = kind;
        }
        return result;
    }
    CodeAction.create = create;
    function is(value) {
        var candidate = value;
        return candidate && Is.string(candidate.title) &&
            (candidate.diagnostics === undefined || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&
            (candidate.kind === undefined || Is.string(candidate.kind)) &&
            (candidate.edit !== undefined || candidate.command !== undefined) &&
            (candidate.command === undefined || Command.is(candidate.command)) &&
            (candidate.isPreferred === undefined || Is.boolean(candidate.isPreferred)) &&
            (candidate.edit === undefined || WorkspaceEdit.is(candidate.edit));
    }
    CodeAction.is = is;
})(CodeAction || (CodeAction = {}));
/**
 * The CodeLens namespace provides helper functions to work with
 * [CodeLens](#CodeLens) literals.
 */
var CodeLens;
(function (CodeLens) {
    /**
     * Creates a new CodeLens literal.
     */
    function create(range, data) {
        var result = { range: range };
        if (Is.defined(data)) {
            result.data = data;
        }
        return result;
    }
    CodeLens.create = create;
    /**
     * Checks whether the given literal conforms to the [CodeLens](#CodeLens) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));
    }
    CodeLens.is = is;
})(CodeLens || (CodeLens = {}));
/**
 * The FormattingOptions namespace provides helper functions to work with
 * [FormattingOptions](#FormattingOptions) literals.
 */
var FormattingOptions;
(function (FormattingOptions) {
    /**
     * Creates a new FormattingOptions literal.
     */
    function create(tabSize, insertSpaces) {
        return { tabSize: tabSize, insertSpaces: insertSpaces };
    }
    FormattingOptions.create = create;
    /**
     * Checks whether the given literal conforms to the [FormattingOptions](#FormattingOptions) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);
    }
    FormattingOptions.is = is;
})(FormattingOptions || (FormattingOptions = {}));
/**
 * The DocumentLink namespace provides helper functions to work with
 * [DocumentLink](#DocumentLink) literals.
 */
var DocumentLink;
(function (DocumentLink) {
    /**
     * Creates a new DocumentLink literal.
     */
    function create(range, target, data) {
        return { range: range, target: target, data: data };
    }
    DocumentLink.create = create;
    /**
     * Checks whether the given literal conforms to the [DocumentLink](#DocumentLink) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));
    }
    DocumentLink.is = is;
})(DocumentLink || (DocumentLink = {}));
/**
 * The SelectionRange namespace provides helper function to work with
 * SelectionRange literals.
 */
var SelectionRange;
(function (SelectionRange) {
    /**
     * Creates a new SelectionRange
     * @param range the range.
     * @param parent an optional parent.
     */
    function create(range, parent) {
        return { range: range, parent: parent };
    }
    SelectionRange.create = create;
    function is(value) {
        var candidate = value;
        return candidate !== undefined && Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));
    }
    SelectionRange.is = is;
})(SelectionRange || (SelectionRange = {}));
var EOL = ['\n', '\r\n', '\r'];
/**
 * @deprecated Use the text document from the new vscode-languageserver-textdocument package.
 */
var TextDocument;
(function (TextDocument) {
    /**
     * Creates a new ITextDocument literal from the given uri and content.
     * @param uri The document's uri.
     * @param languageId  The document's language Id.
     * @param content The document's content.
     */
    function create(uri, languageId, version, content) {
        return new FullTextDocument(uri, languageId, version, content);
    }
    TextDocument.create = create;
    /**
     * Checks whether the given literal conforms to the [ITextDocument](#ITextDocument) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount)
            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;
    }
    TextDocument.is = is;
    function applyEdits(document, edits) {
        var text = document.getText();
        var sortedEdits = mergeSort(edits, function (a, b) {
            var diff = a.range.start.line - b.range.start.line;
            if (diff === 0) {
                return a.range.start.character - b.range.start.character;
            }
            return diff;
        });
        var lastModifiedOffset = text.length;
        for (var i = sortedEdits.length - 1; i >= 0; i--) {
            var e = sortedEdits[i];
            var startOffset = document.offsetAt(e.range.start);
            var endOffset = document.offsetAt(e.range.end);
            if (endOffset <= lastModifiedOffset) {
                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);
            }
            else {
                throw new Error('Overlapping edit');
            }
            lastModifiedOffset = startOffset;
        }
        return text;
    }
    TextDocument.applyEdits = applyEdits;
    function mergeSort(data, compare) {
        if (data.length <= 1) {
            // sorted
            return data;
        }
        var p = (data.length / 2) | 0;
        var left = data.slice(0, p);
        var right = data.slice(p);
        mergeSort(left, compare);
        mergeSort(right, compare);
        var leftIdx = 0;
        var rightIdx = 0;
        var i = 0;
        while (leftIdx < left.length && rightIdx < right.length) {
            var ret = compare(left[leftIdx], right[rightIdx]);
            if (ret <= 0) {
                // smaller_equal -> take left to preserve order
                data[i++] = left[leftIdx++];
            }
            else {
                // greater -> take right
                data[i++] = right[rightIdx++];
            }
        }
        while (leftIdx < left.length) {
            data[i++] = left[leftIdx++];
        }
        while (rightIdx < right.length) {
            data[i++] = right[rightIdx++];
        }
        return data;
    }
})(TextDocument || (TextDocument = {}));
/**
 * @deprecated Use the text document from the new vscode-languageserver-textdocument package.
 */
var FullTextDocument = /** @class */ (function () {
    function FullTextDocument(uri, languageId, version, content) {
        this._uri = uri;
        this._languageId = languageId;
        this._version = version;
        this._content = content;
        this._lineOffsets = undefined;
    }
    Object.defineProperty(FullTextDocument.prototype, "uri", {
        get: function () {
            return this._uri;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FullTextDocument.prototype, "languageId", {
        get: function () {
            return this._languageId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FullTextDocument.prototype, "version", {
        get: function () {
            return this._version;
        },
        enumerable: false,
        configurable: true
    });
    FullTextDocument.prototype.getText = function (range) {
        if (range) {
            var start = this.offsetAt(range.start);
            var end = this.offsetAt(range.end);
            return this._content.substring(start, end);
        }
        return this._content;
    };
    FullTextDocument.prototype.update = function (event, version) {
        this._content = event.text;
        this._version = version;
        this._lineOffsets = undefined;
    };
    FullTextDocument.prototype.getLineOffsets = function () {
        if (this._lineOffsets === undefined) {
            var lineOffsets = [];
            var text = this._content;
            var isLineStart = true;
            for (var i = 0; i < text.length; i++) {
                if (isLineStart) {
                    lineOffsets.push(i);
                    isLineStart = false;
                }
                var ch = text.charAt(i);
                isLineStart = (ch === '\r' || ch === '\n');
                if (ch === '\r' && i + 1 < text.length && text.charAt(i + 1) === '\n') {
                    i++;
                }
            }
            if (isLineStart && text.length > 0) {
                lineOffsets.push(text.length);
            }
            this._lineOffsets = lineOffsets;
        }
        return this._lineOffsets;
    };
    FullTextDocument.prototype.positionAt = function (offset) {
        offset = Math.max(Math.min(offset, this._content.length), 0);
        var lineOffsets = this.getLineOffsets();
        var low = 0, high = lineOffsets.length;
        if (high === 0) {
            return Position.create(0, offset);
        }
        while (low < high) {
            var mid = Math.floor((low + high) / 2);
            if (lineOffsets[mid] > offset) {
                high = mid;
            }
            else {
                low = mid + 1;
            }
        }
        // low is the least x for which the line offset is larger than the current offset
        // or array.length if no line offset is larger than the current offset
        var line = low - 1;
        return Position.create(line, offset - lineOffsets[line]);
    };
    FullTextDocument.prototype.offsetAt = function (position) {
        var lineOffsets = this.getLineOffsets();
        if (position.line >= lineOffsets.length) {
            return this._content.length;
        }
        else if (position.line < 0) {
            return 0;
        }
        var lineOffset = lineOffsets[position.line];
        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;
        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
    };
    Object.defineProperty(FullTextDocument.prototype, "lineCount", {
        get: function () {
            return this.getLineOffsets().length;
        },
        enumerable: false,
        configurable: true
    });
    return FullTextDocument;
}());
var Is;
(function (Is) {
    var toString = Object.prototype.toString;
    function defined(value) {
        return typeof value !== 'undefined';
    }
    Is.defined = defined;
    function undefined(value) {
        return typeof value === 'undefined';
    }
    Is.undefined = undefined;
    function boolean(value) {
        return value === true || value === false;
    }
    Is.boolean = boolean;
    function string(value) {
        return toString.call(value) === '[object String]';
    }
    Is.string = string;
    function number(value) {
        return toString.call(value) === '[object Number]';
    }
    Is.number = number;
    function numberRange(value, min, max) {
        return toString.call(value) === '[object Number]' && min <= value && value <= max;
    }
    Is.numberRange = numberRange;
    function integer(value) {
        return toString.call(value) === '[object Number]' && -2147483648 <= value && value <= 2147483647;
    }
    Is.integer = integer;
    function uinteger(value) {
        return toString.call(value) === '[object Number]' && 0 <= value && value <= 2147483647;
    }
    Is.uinteger = uinteger;
    function func(value) {
        return toString.call(value) === '[object Function]';
    }
    Is.func = func;
    function objectLiteral(value) {
        // Strictly speaking class instances pass this check as well. Since the LSP
        // doesn't use classes we ignore this for now. If we do we need to add something
        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`
        return value !== null && typeof value === 'object';
    }
    Is.objectLiteral = objectLiteral;
    function typedArray(value, check) {
        return Array.isArray(value) && value.every(check);
    }
    Is.typedArray = typedArray;
})(Is || (Is = {}));


/***/ }),

/***/ "./node_modules/vscode-languageserver/lib/common/api.js":
/*!**************************************************************!*\
  !*** ./node_modules/vscode-languageserver/lib/common/api.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProposedFeatures = exports.SemanticTokensBuilder = void 0;
const semanticTokens_1 = __webpack_require__(/*! ./semanticTokens */ "./node_modules/vscode-languageserver/lib/common/semanticTokens.js");
Object.defineProperty(exports, "SemanticTokensBuilder", { enumerable: true, get: function () { return semanticTokens_1.SemanticTokensBuilder; } });
__exportStar(__webpack_require__(/*! vscode-languageserver-protocol/ */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js"), exports);
__exportStar(__webpack_require__(/*! ./server */ "./node_modules/vscode-languageserver/lib/common/server.js"), exports);
var ProposedFeatures;
(function (ProposedFeatures) {
    ProposedFeatures.all = {
        __brand: 'features'
    };
})(ProposedFeatures = exports.ProposedFeatures || (exports.ProposedFeatures = {}));
//# sourceMappingURL=api.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver/lib/common/callHierarchy.js":
/*!************************************************************************!*\
  !*** ./node_modules/vscode-languageserver/lib/common/callHierarchy.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", { value: true });
exports.CallHierarchyFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const CallHierarchyFeature = (Base) => {
    return class extends Base {
        get callHierarchy() {
            return {
                onPrepare: (handler) => {
                    this.connection.onRequest(vscode_languageserver_protocol_1.CallHierarchyPrepareRequest.type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), undefined);
                    });
                },
                onIncomingCalls: (handler) => {
                    const type = vscode_languageserver_protocol_1.CallHierarchyIncomingCallsRequest.type;
                    this.connection.onRequest(type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                    });
                },
                onOutgoingCalls: (handler) => {
                    const type = vscode_languageserver_protocol_1.CallHierarchyOutgoingCallsRequest.type;
                    this.connection.onRequest(type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                    });
                }
            };
        }
    };
};
exports.CallHierarchyFeature = CallHierarchyFeature;
//# sourceMappingURL=callHierarchy.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver/lib/common/configuration.js":
/*!************************************************************************!*\
  !*** ./node_modules/vscode-languageserver/lib/common/configuration.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const Is = __webpack_require__(/*! ./utils/is */ "./node_modules/vscode-languageserver/lib/common/utils/is.js");
const ConfigurationFeature = (Base) => {
    return class extends Base {
        getConfiguration(arg) {
            if (!arg) {
                return this._getConfiguration({});
            }
            else if (Is.string(arg)) {
                return this._getConfiguration({ section: arg });
            }
            else {
                return this._getConfiguration(arg);
            }
        }
        _getConfiguration(arg) {
            let params = {
                items: Array.isArray(arg) ? arg : [arg]
            };
            return this.connection.sendRequest(vscode_languageserver_protocol_1.ConfigurationRequest.type, params).then((result) => {
                return Array.isArray(arg) ? result : result[0];
            });
        }
    };
};
exports.ConfigurationFeature = ConfigurationFeature;
//# sourceMappingURL=configuration.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver/lib/common/fileOperations.js":
/*!*************************************************************************!*\
  !*** ./node_modules/vscode-languageserver/lib/common/fileOperations.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileOperationsFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const FileOperationsFeature = (Base) => {
    return class extends Base {
        onDidCreateFiles(handler) {
            this.connection.onNotification(vscode_languageserver_protocol_1.DidCreateFilesNotification.type, (params) => {
                handler(params);
            });
        }
        onDidRenameFiles(handler) {
            this.connection.onNotification(vscode_languageserver_protocol_1.DidRenameFilesNotification.type, (params) => {
                handler(params);
            });
        }
        onDidDeleteFiles(handler) {
            this.connection.onNotification(vscode_languageserver_protocol_1.DidDeleteFilesNotification.type, (params) => {
                handler(params);
            });
        }
        onWillCreateFiles(handler) {
            return this.connection.onRequest(vscode_languageserver_protocol_1.WillCreateFilesRequest.type, (params, cancel) => {
                return handler(params, cancel);
            });
        }
        onWillRenameFiles(handler) {
            return this.connection.onRequest(vscode_languageserver_protocol_1.WillRenameFilesRequest.type, (params, cancel) => {
                return handler(params, cancel);
            });
        }
        onWillDeleteFiles(handler) {
            return this.connection.onRequest(vscode_languageserver_protocol_1.WillDeleteFilesRequest.type, (params, cancel) => {
                return handler(params, cancel);
            });
        }
    };
};
exports.FileOperationsFeature = FileOperationsFeature;
//# sourceMappingURL=fileOperations.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver/lib/common/linkedEditingRange.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/vscode-languageserver/lib/common/linkedEditingRange.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinkedEditingRangeFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const LinkedEditingRangeFeature = (Base) => {
    return class extends Base {
        onLinkedEditingRange(handler) {
            this.connection.onRequest(vscode_languageserver_protocol_1.LinkedEditingRangeRequest.type, (params, cancel) => {
                return handler(params, cancel, this.attachWorkDoneProgress(params), undefined);
            });
        }
    };
};
exports.LinkedEditingRangeFeature = LinkedEditingRangeFeature;
//# sourceMappingURL=linkedEditingRange.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver/lib/common/moniker.js":
/*!******************************************************************!*\
  !*** ./node_modules/vscode-languageserver/lib/common/moniker.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", { value: true });
exports.MonikerFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const MonikerFeature = (Base) => {
    return class extends Base {
        get moniker() {
            return {
                on: (handler) => {
                    const type = vscode_languageserver_protocol_1.MonikerRequest.type;
                    this.connection.onRequest(type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                    });
                },
            };
        }
    };
};
exports.MonikerFeature = MonikerFeature;
//# sourceMappingURL=moniker.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver/lib/common/progress.js":
/*!*******************************************************************!*\
  !*** ./node_modules/vscode-languageserver/lib/common/progress.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.attachPartialResult = exports.ProgressFeature = exports.attachWorkDone = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const uuid_1 = __webpack_require__(/*! ./utils/uuid */ "./node_modules/vscode-languageserver/lib/common/utils/uuid.js");
class WorkDoneProgressReporterImpl {
    constructor(_connection, _token) {
        this._connection = _connection;
        this._token = _token;
        WorkDoneProgressReporterImpl.Instances.set(this._token, this);
    }
    begin(title, percentage, message, cancellable) {
        let param = {
            kind: 'begin',
            title,
            percentage,
            message,
            cancellable
        };
        this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, param);
    }
    report(arg0, arg1) {
        let param = {
            kind: 'report'
        };
        if (typeof arg0 === 'number') {
            param.percentage = arg0;
            if (arg1 !== undefined) {
                param.message = arg1;
            }
        }
        else {
            param.message = arg0;
        }
        this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, param);
    }
    done() {
        WorkDoneProgressReporterImpl.Instances.delete(this._token);
        this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, { kind: 'end' });
    }
}
WorkDoneProgressReporterImpl.Instances = new Map();
class WorkDoneProgressServerReporterImpl extends WorkDoneProgressReporterImpl {
    constructor(connection, token) {
        super(connection, token);
        this._source = new vscode_languageserver_protocol_1.CancellationTokenSource();
    }
    get token() {
        return this._source.token;
    }
    done() {
        this._source.dispose();
        super.done();
    }
    cancel() {
        this._source.cancel();
    }
}
class NullProgressReporter {
    constructor() {
    }
    begin() {
    }
    report() {
    }
    done() {
    }
}
class NullProgressServerReporter extends NullProgressReporter {
    constructor() {
        super();
        this._source = new vscode_languageserver_protocol_1.CancellationTokenSource();
    }
    get token() {
        return this._source.token;
    }
    done() {
        this._source.dispose();
    }
    cancel() {
        this._source.cancel();
    }
}
function attachWorkDone(connection, params) {
    if (params === undefined || params.workDoneToken === undefined) {
        return new NullProgressReporter();
    }
    const token = params.workDoneToken;
    delete params.workDoneToken;
    return new WorkDoneProgressReporterImpl(connection, token);
}
exports.attachWorkDone = attachWorkDone;
const ProgressFeature = (Base) => {
    return class extends Base {
        constructor() {
            super();
            this._progressSupported = false;
        }
        initialize(capabilities) {
            var _a;
            if (((_a = capabilities === null || capabilities === void 0 ? void 0 : capabilities.window) === null || _a === void 0 ? void 0 : _a.workDoneProgress) === true) {
                this._progressSupported = true;
                this.connection.onNotification(vscode_languageserver_protocol_1.WorkDoneProgressCancelNotification.type, (params) => {
                    let progress = WorkDoneProgressReporterImpl.Instances.get(params.token);
                    if (progress instanceof WorkDoneProgressServerReporterImpl || progress instanceof NullProgressServerReporter) {
                        progress.cancel();
                    }
                });
            }
        }
        attachWorkDoneProgress(token) {
            if (token === undefined) {
                return new NullProgressReporter();
            }
            else {
                return new WorkDoneProgressReporterImpl(this.connection, token);
            }
        }
        createWorkDoneProgress() {
            if (this._progressSupported) {
                const token = uuid_1.generateUuid();
                return this.connection.sendRequest(vscode_languageserver_protocol_1.WorkDoneProgressCreateRequest.type, { token }).then(() => {
                    const result = new WorkDoneProgressServerReporterImpl(this.connection, token);
                    return result;
                });
            }
            else {
                return Promise.resolve(new NullProgressServerReporter());
            }
        }
    };
};
exports.ProgressFeature = ProgressFeature;
var ResultProgress;
(function (ResultProgress) {
    ResultProgress.type = new vscode_languageserver_protocol_1.ProgressType();
})(ResultProgress || (ResultProgress = {}));
class ResultProgressReporterImpl {
    constructor(_connection, _token) {
        this._connection = _connection;
        this._token = _token;
    }
    report(data) {
        this._connection.sendProgress(ResultProgress.type, this._token, data);
    }
}
function attachPartialResult(connection, params) {
    if (params === undefined || params.partialResultToken === undefined) {
        return undefined;
    }
    const token = params.partialResultToken;
    delete params.partialResultToken;
    return new ResultProgressReporterImpl(connection, token);
}
exports.attachPartialResult = attachPartialResult;
//# sourceMappingURL=progress.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver/lib/common/semanticTokens.js":
/*!*************************************************************************!*\
  !*** ./node_modules/vscode-languageserver/lib/common/semanticTokens.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SemanticTokensBuilder = exports.SemanticTokensFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const SemanticTokensFeature = (Base) => {
    return class extends Base {
        get semanticTokens() {
            return {
                on: (handler) => {
                    const type = vscode_languageserver_protocol_1.SemanticTokensRequest.type;
                    this.connection.onRequest(type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                    });
                },
                onDelta: (handler) => {
                    const type = vscode_languageserver_protocol_1.SemanticTokensDeltaRequest.type;
                    this.connection.onRequest(type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                    });
                },
                onRange: (handler) => {
                    const type = vscode_languageserver_protocol_1.SemanticTokensRangeRequest.type;
                    this.connection.onRequest(type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                    });
                }
            };
        }
    };
};
exports.SemanticTokensFeature = SemanticTokensFeature;
class SemanticTokensBuilder {
    constructor() {
        this._prevData = undefined;
        this.initialize();
    }
    initialize() {
        this._id = Date.now();
        this._prevLine = 0;
        this._prevChar = 0;
        this._data = [];
        this._dataLen = 0;
    }
    push(line, char, length, tokenType, tokenModifiers) {
        let pushLine = line;
        let pushChar = char;
        if (this._dataLen > 0) {
            pushLine -= this._prevLine;
            if (pushLine === 0) {
                pushChar -= this._prevChar;
            }
        }
        this._data[this._dataLen++] = pushLine;
        this._data[this._dataLen++] = pushChar;
        this._data[this._dataLen++] = length;
        this._data[this._dataLen++] = tokenType;
        this._data[this._dataLen++] = tokenModifiers;
        this._prevLine = line;
        this._prevChar = char;
    }
    get id() {
        return this._id.toString();
    }
    previousResult(id) {
        if (this.id === id) {
            this._prevData = this._data;
        }
        this.initialize();
    }
    build() {
        this._prevData = undefined;
        return {
            resultId: this.id,
            data: this._data
        };
    }
    canBuildEdits() {
        return this._prevData !== undefined;
    }
    buildEdits() {
        if (this._prevData !== undefined) {
            const prevDataLength = this._prevData.length;
            const dataLength = this._data.length;
            let startIndex = 0;
            while (startIndex < dataLength && startIndex < prevDataLength && this._prevData[startIndex] === this._data[startIndex]) {
                startIndex++;
            }
            if (startIndex < dataLength && startIndex < prevDataLength) {
                // Find end index
                let endIndex = 0;
                while (endIndex < dataLength && endIndex < prevDataLength && this._prevData[prevDataLength - 1 - endIndex] === this._data[dataLength - 1 - endIndex]) {
                    endIndex++;
                }
                const newData = this._data.slice(startIndex, dataLength - endIndex);
                const result = {
                    resultId: this.id,
                    edits: [
                        { start: startIndex, deleteCount: prevDataLength - endIndex - startIndex, data: newData }
                    ]
                };
                return result;
            }
            else if (startIndex < dataLength) {
                return { resultId: this.id, edits: [
                        { start: startIndex, deleteCount: 0, data: this._data.slice(startIndex) }
                    ] };
            }
            else if (startIndex < prevDataLength) {
                return { resultId: this.id, edits: [
                        { start: startIndex, deleteCount: prevDataLength - startIndex }
                    ] };
            }
            else {
                return { resultId: this.id, edits: [] };
            }
        }
        else {
            return this.build();
        }
    }
}
exports.SemanticTokensBuilder = SemanticTokensBuilder;
//# sourceMappingURL=semanticTokens.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver/lib/common/server.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vscode-languageserver/lib/common/server.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConnection = exports.combineFeatures = exports.combineLanguagesFeatures = exports.combineWorkspaceFeatures = exports.combineWindowFeatures = exports.combineClientFeatures = exports.combineTracerFeatures = exports.combineTelemetryFeatures = exports.combineConsoleFeatures = exports._LanguagesImpl = exports.BulkUnregistration = exports.BulkRegistration = exports.ErrorMessageTracker = exports.TextDocuments = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const Is = __webpack_require__(/*! ./utils/is */ "./node_modules/vscode-languageserver/lib/common/utils/is.js");
const UUID = __webpack_require__(/*! ./utils/uuid */ "./node_modules/vscode-languageserver/lib/common/utils/uuid.js");
const progress_1 = __webpack_require__(/*! ./progress */ "./node_modules/vscode-languageserver/lib/common/progress.js");
const configuration_1 = __webpack_require__(/*! ./configuration */ "./node_modules/vscode-languageserver/lib/common/configuration.js");
const workspaceFolders_1 = __webpack_require__(/*! ./workspaceFolders */ "./node_modules/vscode-languageserver/lib/common/workspaceFolders.js");
const callHierarchy_1 = __webpack_require__(/*! ./callHierarchy */ "./node_modules/vscode-languageserver/lib/common/callHierarchy.js");
const semanticTokens_1 = __webpack_require__(/*! ./semanticTokens */ "./node_modules/vscode-languageserver/lib/common/semanticTokens.js");
const showDocument_1 = __webpack_require__(/*! ./showDocument */ "./node_modules/vscode-languageserver/lib/common/showDocument.js");
const fileOperations_1 = __webpack_require__(/*! ./fileOperations */ "./node_modules/vscode-languageserver/lib/common/fileOperations.js");
const linkedEditingRange_1 = __webpack_require__(/*! ./linkedEditingRange */ "./node_modules/vscode-languageserver/lib/common/linkedEditingRange.js");
const moniker_1 = __webpack_require__(/*! ./moniker */ "./node_modules/vscode-languageserver/lib/common/moniker.js");
function null2Undefined(value) {
    if (value === null) {
        return undefined;
    }
    return value;
}
/**
 * A manager for simple text documents
 */
class TextDocuments {
    /**
     * Create a new text document manager.
     */
    constructor(configuration) {
        this._documents = Object.create(null);
        this._configuration = configuration;
        this._onDidChangeContent = new vscode_languageserver_protocol_1.Emitter();
        this._onDidOpen = new vscode_languageserver_protocol_1.Emitter();
        this._onDidClose = new vscode_languageserver_protocol_1.Emitter();
        this._onDidSave = new vscode_languageserver_protocol_1.Emitter();
        this._onWillSave = new vscode_languageserver_protocol_1.Emitter();
    }
    /**
     * An event that fires when a text document managed by this manager
     * has been opened or the content changes.
     */
    get onDidChangeContent() {
        return this._onDidChangeContent.event;
    }
    /**
     * An event that fires when a text document managed by this manager
     * has been opened.
     */
    get onDidOpen() {
        return this._onDidOpen.event;
    }
    /**
     * An event that fires when a text document managed by this manager
     * will be saved.
     */
    get onWillSave() {
        return this._onWillSave.event;
    }
    /**
     * Sets a handler that will be called if a participant wants to provide
     * edits during a text document save.
     */
    onWillSaveWaitUntil(handler) {
        this._willSaveWaitUntil = handler;
    }
    /**
     * An event that fires when a text document managed by this manager
     * has been saved.
     */
    get onDidSave() {
        return this._onDidSave.event;
    }
    /**
     * An event that fires when a text document managed by this manager
     * has been closed.
     */
    get onDidClose() {
        return this._onDidClose.event;
    }
    /**
     * Returns the document for the given URI. Returns undefined if
     * the document is not managed by this instance.
     *
     * @param uri The text document's URI to retrieve.
     * @return the text document or `undefined`.
     */
    get(uri) {
        return this._documents[uri];
    }
    /**
     * Returns all text documents managed by this instance.
     *
     * @return all text documents.
     */
    all() {
        return Object.keys(this._documents).map(key => this._documents[key]);
    }
    /**
     * Returns the URIs of all text documents managed by this instance.
     *
     * @return the URI's of all text documents.
     */
    keys() {
        return Object.keys(this._documents);
    }
    /**
     * Listens for `low level` notification on the given connection to
     * update the text documents managed by this instance.
     *
     * Please note that the connection only provides handlers not an event model. Therefore
     * listening on a connection will overwrite the following handlers on a connection:
     * `onDidOpenTextDocument`, `onDidChangeTextDocument`, `onDidCloseTextDocument`,
     * `onWillSaveTextDocument`, `onWillSaveTextDocumentWaitUntil` and `onDidSaveTextDocument`.
     *
     * Use the corresponding events on the TextDocuments instance instead.
     *
     * @param connection The connection to listen on.
     */
    listen(connection) {
        connection.__textDocumentSync = vscode_languageserver_protocol_1.TextDocumentSyncKind.Full;
        connection.onDidOpenTextDocument((event) => {
            let td = event.textDocument;
            let document = this._configuration.create(td.uri, td.languageId, td.version, td.text);
            this._documents[td.uri] = document;
            let toFire = Object.freeze({ document });
            this._onDidOpen.fire(toFire);
            this._onDidChangeContent.fire(toFire);
        });
        connection.onDidChangeTextDocument((event) => {
            let td = event.textDocument;
            let changes = event.contentChanges;
            if (changes.length === 0) {
                return;
            }
            let document = this._documents[td.uri];
            const { version } = td;
            if (version === null || version === undefined) {
                throw new Error(`Received document change event for ${td.uri} without valid version identifier`);
            }
            document = this._configuration.update(document, changes, version);
            this._documents[td.uri] = document;
            this._onDidChangeContent.fire(Object.freeze({ document }));
        });
        connection.onDidCloseTextDocument((event) => {
            let document = this._documents[event.textDocument.uri];
            if (document) {
                delete this._documents[event.textDocument.uri];
                this._onDidClose.fire(Object.freeze({ document }));
            }
        });
        connection.onWillSaveTextDocument((event) => {
            let document = this._documents[event.textDocument.uri];
            if (document) {
                this._onWillSave.fire(Object.freeze({ document, reason: event.reason }));
            }
        });
        connection.onWillSaveTextDocumentWaitUntil((event, token) => {
            let document = this._documents[event.textDocument.uri];
            if (document && this._willSaveWaitUntil) {
                return this._willSaveWaitUntil(Object.freeze({ document, reason: event.reason }), token);
            }
            else {
                return [];
            }
        });
        connection.onDidSaveTextDocument((event) => {
            let document = this._documents[event.textDocument.uri];
            if (document) {
                this._onDidSave.fire(Object.freeze({ document }));
            }
        });
    }
}
exports.TextDocuments = TextDocuments;
/**
 * Helps tracking error message. Equal occurrences of the same
 * message are only stored once. This class is for example
 * useful if text documents are validated in a loop and equal
 * error message should be folded into one.
 */
class ErrorMessageTracker {
    constructor() {
        this._messages = Object.create(null);
    }
    /**
     * Add a message to the tracker.
     *
     * @param message The message to add.
     */
    add(message) {
        let count = this._messages[message];
        if (!count) {
            count = 0;
        }
        count++;
        this._messages[message] = count;
    }
    /**
     * Send all tracked messages to the connection's window.
     *
     * @param connection The connection established between client and server.
     */
    sendErrors(connection) {
        Object.keys(this._messages).forEach(message => {
            connection.window.showErrorMessage(message);
        });
    }
}
exports.ErrorMessageTracker = ErrorMessageTracker;
class RemoteConsoleImpl {
    constructor() {
    }
    rawAttach(connection) {
        this._rawConnection = connection;
    }
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    fillServerCapabilities(_capabilities) {
    }
    initialize(_capabilities) {
    }
    error(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Error, message);
    }
    warn(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Warning, message);
    }
    info(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Info, message);
    }
    log(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Log, message);
    }
    send(type, message) {
        if (this._rawConnection) {
            this._rawConnection.sendNotification(vscode_languageserver_protocol_1.LogMessageNotification.type, { type, message });
        }
    }
}
class _RemoteWindowImpl {
    constructor() {
    }
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    initialize(_capabilities) {
    }
    fillServerCapabilities(_capabilities) {
    }
    showErrorMessage(message, ...actions) {
        let params = { type: vscode_languageserver_protocol_1.MessageType.Error, message, actions };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
    }
    showWarningMessage(message, ...actions) {
        let params = { type: vscode_languageserver_protocol_1.MessageType.Warning, message, actions };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
    }
    showInformationMessage(message, ...actions) {
        let params = { type: vscode_languageserver_protocol_1.MessageType.Info, message, actions };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
    }
}
const RemoteWindowImpl = showDocument_1.ShowDocumentFeature(progress_1.ProgressFeature(_RemoteWindowImpl));
var BulkRegistration;
(function (BulkRegistration) {
    /**
     * Creates a new bulk registration.
     * @return an empty bulk registration.
     */
    function create() {
        return new BulkRegistrationImpl();
    }
    BulkRegistration.create = create;
})(BulkRegistration = exports.BulkRegistration || (exports.BulkRegistration = {}));
class BulkRegistrationImpl {
    constructor() {
        this._registrations = [];
        this._registered = new Set();
    }
    add(type, registerOptions) {
        const method = Is.string(type) ? type : type.method;
        if (this._registered.has(method)) {
            throw new Error(`${method} is already added to this registration`);
        }
        const id = UUID.generateUuid();
        this._registrations.push({
            id: id,
            method: method,
            registerOptions: registerOptions || {}
        });
        this._registered.add(method);
    }
    asRegistrationParams() {
        return {
            registrations: this._registrations
        };
    }
}
var BulkUnregistration;
(function (BulkUnregistration) {
    function create() {
        return new BulkUnregistrationImpl(undefined, []);
    }
    BulkUnregistration.create = create;
})(BulkUnregistration = exports.BulkUnregistration || (exports.BulkUnregistration = {}));
class BulkUnregistrationImpl {
    constructor(_connection, unregistrations) {
        this._connection = _connection;
        this._unregistrations = new Map();
        unregistrations.forEach(unregistration => {
            this._unregistrations.set(unregistration.method, unregistration);
        });
    }
    get isAttached() {
        return !!this._connection;
    }
    attach(connection) {
        this._connection = connection;
    }
    add(unregistration) {
        this._unregistrations.set(unregistration.method, unregistration);
    }
    dispose() {
        let unregistrations = [];
        for (let unregistration of this._unregistrations.values()) {
            unregistrations.push(unregistration);
        }
        let params = {
            unregisterations: unregistrations
        };
        this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(undefined, (_error) => {
            this._connection.console.info(`Bulk unregistration failed.`);
        });
    }
    disposeSingle(arg) {
        const method = Is.string(arg) ? arg : arg.method;
        const unregistration = this._unregistrations.get(method);
        if (!unregistration) {
            return false;
        }
        let params = {
            unregisterations: [unregistration]
        };
        this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(() => {
            this._unregistrations.delete(method);
        }, (_error) => {
            this._connection.console.info(`Un-registering request handler for ${unregistration.id} failed.`);
        });
        return true;
    }
}
class RemoteClientImpl {
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    initialize(_capabilities) {
    }
    fillServerCapabilities(_capabilities) {
    }
    register(typeOrRegistrations, registerOptionsOrType, registerOptions) {
        if (typeOrRegistrations instanceof BulkRegistrationImpl) {
            return this.registerMany(typeOrRegistrations);
        }
        else if (typeOrRegistrations instanceof BulkUnregistrationImpl) {
            return this.registerSingle1(typeOrRegistrations, registerOptionsOrType, registerOptions);
        }
        else {
            return this.registerSingle2(typeOrRegistrations, registerOptionsOrType);
        }
    }
    registerSingle1(unregistration, type, registerOptions) {
        const method = Is.string(type) ? type : type.method;
        const id = UUID.generateUuid();
        let params = {
            registrations: [{ id, method, registerOptions: registerOptions || {} }]
        };
        if (!unregistration.isAttached) {
            unregistration.attach(this.connection);
        }
        return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then((_result) => {
            unregistration.add({ id: id, method: method });
            return unregistration;
        }, (_error) => {
            this.connection.console.info(`Registering request handler for ${method} failed.`);
            return Promise.reject(_error);
        });
    }
    registerSingle2(type, registerOptions) {
        const method = Is.string(type) ? type : type.method;
        const id = UUID.generateUuid();
        let params = {
            registrations: [{ id, method, registerOptions: registerOptions || {} }]
        };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then((_result) => {
            return vscode_languageserver_protocol_1.Disposable.create(() => {
                this.unregisterSingle(id, method);
            });
        }, (_error) => {
            this.connection.console.info(`Registering request handler for ${method} failed.`);
            return Promise.reject(_error);
        });
    }
    unregisterSingle(id, method) {
        let params = {
            unregisterations: [{ id, method }]
        };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(undefined, (_error) => {
            this.connection.console.info(`Un-registering request handler for ${id} failed.`);
        });
    }
    registerMany(registrations) {
        let params = registrations.asRegistrationParams();
        return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then(() => {
            return new BulkUnregistrationImpl(this._connection, params.registrations.map(registration => { return { id: registration.id, method: registration.method }; }));
        }, (_error) => {
            this.connection.console.info(`Bulk registration failed.`);
            return Promise.reject(_error);
        });
    }
}
class _RemoteWorkspaceImpl {
    constructor() {
    }
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    initialize(_capabilities) {
    }
    fillServerCapabilities(_capabilities) {
    }
    applyEdit(paramOrEdit) {
        function isApplyWorkspaceEditParams(value) {
            return value && !!value.edit;
        }
        let params = isApplyWorkspaceEditParams(paramOrEdit) ? paramOrEdit : { edit: paramOrEdit };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.ApplyWorkspaceEditRequest.type, params);
    }
}
const RemoteWorkspaceImpl = fileOperations_1.FileOperationsFeature(workspaceFolders_1.WorkspaceFoldersFeature(configuration_1.ConfigurationFeature(_RemoteWorkspaceImpl)));
class TracerImpl {
    constructor() {
        this._trace = vscode_languageserver_protocol_1.Trace.Off;
    }
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    initialize(_capabilities) {
    }
    fillServerCapabilities(_capabilities) {
    }
    set trace(value) {
        this._trace = value;
    }
    log(message, verbose) {
        if (this._trace === vscode_languageserver_protocol_1.Trace.Off) {
            return;
        }
        this.connection.sendNotification(vscode_languageserver_protocol_1.LogTraceNotification.type, {
            message: message,
            verbose: this._trace === vscode_languageserver_protocol_1.Trace.Verbose ? verbose : undefined
        });
    }
}
class TelemetryImpl {
    constructor() {
    }
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    initialize(_capabilities) {
    }
    fillServerCapabilities(_capabilities) {
    }
    logEvent(data) {
        this.connection.sendNotification(vscode_languageserver_protocol_1.TelemetryEventNotification.type, data);
    }
}
class _LanguagesImpl {
    constructor() {
    }
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    initialize(_capabilities) {
    }
    fillServerCapabilities(_capabilities) {
    }
    attachWorkDoneProgress(params) {
        return progress_1.attachWorkDone(this.connection, params);
    }
    attachPartialResultProgress(_type, params) {
        return progress_1.attachPartialResult(this.connection, params);
    }
}
exports._LanguagesImpl = _LanguagesImpl;
const LanguagesImpl = moniker_1.MonikerFeature(linkedEditingRange_1.LinkedEditingRangeFeature(semanticTokens_1.SemanticTokensFeature(callHierarchy_1.CallHierarchyFeature(_LanguagesImpl))));
function combineConsoleFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineConsoleFeatures = combineConsoleFeatures;
function combineTelemetryFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineTelemetryFeatures = combineTelemetryFeatures;
function combineTracerFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineTracerFeatures = combineTracerFeatures;
function combineClientFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineClientFeatures = combineClientFeatures;
function combineWindowFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineWindowFeatures = combineWindowFeatures;
function combineWorkspaceFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineWorkspaceFeatures = combineWorkspaceFeatures;
function combineLanguagesFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineLanguagesFeatures = combineLanguagesFeatures;
function combineFeatures(one, two) {
    function combine(one, two, func) {
        if (one && two) {
            return func(one, two);
        }
        else if (one) {
            return one;
        }
        else {
            return two;
        }
    }
    let result = {
        __brand: 'features',
        console: combine(one.console, two.console, combineConsoleFeatures),
        tracer: combine(one.tracer, two.tracer, combineTracerFeatures),
        telemetry: combine(one.telemetry, two.telemetry, combineTelemetryFeatures),
        client: combine(one.client, two.client, combineClientFeatures),
        window: combine(one.window, two.window, combineWindowFeatures),
        workspace: combine(one.workspace, two.workspace, combineWorkspaceFeatures)
    };
    return result;
}
exports.combineFeatures = combineFeatures;
function createConnection(connectionFactory, watchDog, factories) {
    const logger = (factories && factories.console ? new (factories.console(RemoteConsoleImpl))() : new RemoteConsoleImpl());
    const connection = connectionFactory(logger);
    logger.rawAttach(connection);
    const tracer = (factories && factories.tracer ? new (factories.tracer(TracerImpl))() : new TracerImpl());
    const telemetry = (factories && factories.telemetry ? new (factories.telemetry(TelemetryImpl))() : new TelemetryImpl());
    const client = (factories && factories.client ? new (factories.client(RemoteClientImpl))() : new RemoteClientImpl());
    const remoteWindow = (factories && factories.window ? new (factories.window(RemoteWindowImpl))() : new RemoteWindowImpl());
    const workspace = (factories && factories.workspace ? new (factories.workspace(RemoteWorkspaceImpl))() : new RemoteWorkspaceImpl());
    const languages = (factories && factories.languages ? new (factories.languages(LanguagesImpl))() : new LanguagesImpl());
    const allRemotes = [logger, tracer, telemetry, client, remoteWindow, workspace, languages];
    function asPromise(value) {
        if (value instanceof Promise) {
            return value;
        }
        else if (Is.thenable(value)) {
            return new Promise((resolve, reject) => {
                value.then((resolved) => resolve(resolved), (error) => reject(error));
            });
        }
        else {
            return Promise.resolve(value);
        }
    }
    let shutdownHandler = undefined;
    let initializeHandler = undefined;
    let exitHandler = undefined;
    let protocolConnection = {
        listen: () => connection.listen(),
        sendRequest: (type, ...params) => connection.sendRequest(Is.string(type) ? type : type.method, ...params),
        onRequest: (type, handler) => connection.onRequest(type, handler),
        sendNotification: (type, param) => {
            const method = Is.string(type) ? type : type.method;
            if (arguments.length === 1) {
                connection.sendNotification(method);
            }
            else {
                connection.sendNotification(method, param);
            }
        },
        onNotification: (type, handler) => connection.onNotification(type, handler),
        onProgress: connection.onProgress,
        sendProgress: connection.sendProgress,
        onInitialize: (handler) => initializeHandler = handler,
        onInitialized: (handler) => connection.onNotification(vscode_languageserver_protocol_1.InitializedNotification.type, handler),
        onShutdown: (handler) => shutdownHandler = handler,
        onExit: (handler) => exitHandler = handler,
        get console() { return logger; },
        get telemetry() { return telemetry; },
        get tracer() { return tracer; },
        get client() { return client; },
        get window() { return remoteWindow; },
        get workspace() { return workspace; },
        get languages() { return languages; },
        onDidChangeConfiguration: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, handler),
        onDidChangeWatchedFiles: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type, handler),
        __textDocumentSync: undefined,
        onDidOpenTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type, handler),
        onDidChangeTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, handler),
        onDidCloseTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type, handler),
        onWillSaveTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.WillSaveTextDocumentNotification.type, handler),
        onWillSaveTextDocumentWaitUntil: (handler) => connection.onRequest(vscode_languageserver_protocol_1.WillSaveTextDocumentWaitUntilRequest.type, handler),
        onDidSaveTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type, handler),
        sendDiagnostics: (params) => connection.sendNotification(vscode_languageserver_protocol_1.PublishDiagnosticsNotification.type, params),
        onHover: (handler) => connection.onRequest(vscode_languageserver_protocol_1.HoverRequest.type, (params, cancel) => {
            return handler(params, cancel, progress_1.attachWorkDone(connection, params), undefined);
        }),
        onCompletion: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CompletionRequest.type, (params, cancel) => {
            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
        }),
        onCompletionResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CompletionResolveRequest.type, handler),
        onSignatureHelp: (handler) => connection.onRequest(vscode_languageserver_protocol_1.SignatureHelpRequest.type, (params, cancel) => {
            return handler(params, cancel, progress_1.attachWorkDone(connection, params), undefined);
        }),
        onDeclaration: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DeclarationRequest.type, (params, cancel) => {
            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
        }),
        onDefinition: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DefinitionRequest.type, (params, cancel) => {
            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
        }),
        onTypeDefinition: (handler) => connection.onRequest(vscode_languageserver_protocol_1.TypeDefinitionRequest.type, (params, cancel) => {
            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
        }),
        onImplementation: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ImplementationRequest.type, (params, cancel) => {
            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
        }),
        onReferences: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ReferencesRequest.type, (params, cancel) => {
            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
        }),
        onDocumentHighlight: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentHighlightRequest.type, (params, cancel) => {
            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
        }),
        onDocumentSymbol: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentSymbolRequest.type, (params, cancel) => {
            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
        }),
        onWorkspaceSymbol: (handler) => connection.onRequest(vscode_languageserver_protocol_1.WorkspaceSymbolRequest.type, (params, cancel) => {
            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
        }),
        onCodeAction: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeActionRequest.type, (params, cancel) => {
            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
        }),
        onCodeActionResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeActionResolveRequest.type, (params, cancel) => {
            return handler(params, cancel);
        }),
        onCodeLens: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeLensRequest.type, (params, cancel) => {
            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
        }),
        onCodeLensResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeLensResolveRequest.type, (params, cancel) => {
            return handler(params, cancel);
        }),
        onDocumentFormatting: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentFormattingRequest.type, (params, cancel) => {
            return handler(params, cancel, progress_1.attachWorkDone(connection, params), undefined);
        }),
        onDocumentRangeFormatting: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type, (params, cancel) => {
            return handler(params, cancel, progress_1.attachWorkDone(connection, params), undefined);
        }),
        onDocumentOnTypeFormatting: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type, (params, cancel) => {
            return handler(params, cancel);
        }),
        onRenameRequest: (handler) => connection.onRequest(vscode_languageserver_protocol_1.RenameRequest.type, (params, cancel) => {
            return handler(params, cancel, progress_1.attachWorkDone(connection, params), undefined);
        }),
        onPrepareRename: (handler) => connection.onRequest(vscode_languageserver_protocol_1.PrepareRenameRequest.type, (params, cancel) => {
            return handler(params, cancel);
        }),
        onDocumentLinks: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentLinkRequest.type, (params, cancel) => {
            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
        }),
        onDocumentLinkResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentLinkResolveRequest.type, (params, cancel) => {
            return handler(params, cancel);
        }),
        onDocumentColor: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, (params, cancel) => {
            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
        }),
        onColorPresentation: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, (params, cancel) => {
            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
        }),
        onFoldingRanges: (handler) => connection.onRequest(vscode_languageserver_protocol_1.FoldingRangeRequest.type, (params, cancel) => {
            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
        }),
        onSelectionRanges: (handler) => connection.onRequest(vscode_languageserver_protocol_1.SelectionRangeRequest.type, (params, cancel) => {
            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));
        }),
        onExecuteCommand: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ExecuteCommandRequest.type, (params, cancel) => {
            return handler(params, cancel, progress_1.attachWorkDone(connection, params), undefined);
        }),
        dispose: () => connection.dispose()
    };
    for (let remote of allRemotes) {
        remote.attach(protocolConnection);
    }
    connection.onRequest(vscode_languageserver_protocol_1.InitializeRequest.type, (params) => {
        watchDog.initialize(params);
        if (Is.string(params.trace)) {
            tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.trace);
        }
        for (let remote of allRemotes) {
            remote.initialize(params.capabilities);
        }
        if (initializeHandler) {
            let result = initializeHandler(params, new vscode_languageserver_protocol_1.CancellationTokenSource().token, progress_1.attachWorkDone(connection, params), undefined);
            return asPromise(result).then((value) => {
                if (value instanceof vscode_languageserver_protocol_1.ResponseError) {
                    return value;
                }
                let result = value;
                if (!result) {
                    result = { capabilities: {} };
                }
                let capabilities = result.capabilities;
                if (!capabilities) {
                    capabilities = {};
                    result.capabilities = capabilities;
                }
                if (capabilities.textDocumentSync === undefined || capabilities.textDocumentSync === null) {
                    capabilities.textDocumentSync = Is.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;
                }
                else if (!Is.number(capabilities.textDocumentSync) && !Is.number(capabilities.textDocumentSync.change)) {
                    capabilities.textDocumentSync.change = Is.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;
                }
                for (let remote of allRemotes) {
                    remote.fillServerCapabilities(capabilities);
                }
                return result;
            });
        }
        else {
            let result = { capabilities: { textDocumentSync: vscode_languageserver_protocol_1.TextDocumentSyncKind.None } };
            for (let remote of allRemotes) {
                remote.fillServerCapabilities(result.capabilities);
            }
            return result;
        }
    });
    connection.onRequest(vscode_languageserver_protocol_1.ShutdownRequest.type, () => {
        watchDog.shutdownReceived = true;
        if (shutdownHandler) {
            return shutdownHandler(new vscode_languageserver_protocol_1.CancellationTokenSource().token);
        }
        else {
            return undefined;
        }
    });
    connection.onNotification(vscode_languageserver_protocol_1.ExitNotification.type, () => {
        try {
            if (exitHandler) {
                exitHandler();
            }
        }
        finally {
            if (watchDog.shutdownReceived) {
                watchDog.exit(0);
            }
            else {
                watchDog.exit(1);
            }
        }
    });
    connection.onNotification(vscode_languageserver_protocol_1.SetTraceNotification.type, (params) => {
        tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.value);
    });
    return protocolConnection;
}
exports.createConnection = createConnection;
//# sourceMappingURL=server.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver/lib/common/showDocument.js":
/*!***********************************************************************!*\
  !*** ./node_modules/vscode-languageserver/lib/common/showDocument.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShowDocumentFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const ShowDocumentFeature = (Base) => {
    return class extends Base {
        showDocument(params) {
            return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowDocumentRequest.type, params);
        }
    };
};
exports.ShowDocumentFeature = ShowDocumentFeature;
//# sourceMappingURL=showDocument.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver/lib/common/utils/is.js":
/*!*******************************************************************!*\
  !*** ./node_modules/vscode-languageserver/lib/common/utils/is.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.thenable = exports.typedArray = exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
function boolean(value) {
    return value === true || value === false;
}
exports.boolean = boolean;
function string(value) {
    return typeof value === 'string' || value instanceof String;
}
exports.string = string;
function number(value) {
    return typeof value === 'number' || value instanceof Number;
}
exports.number = number;
function error(value) {
    return value instanceof Error;
}
exports.error = error;
function func(value) {
    return typeof value === 'function';
}
exports.func = func;
function array(value) {
    return Array.isArray(value);
}
exports.array = array;
function stringArray(value) {
    return array(value) && value.every(elem => string(elem));
}
exports.stringArray = stringArray;
function typedArray(value, check) {
    return Array.isArray(value) && value.every(check);
}
exports.typedArray = typedArray;
function thenable(value) {
    return value && func(value.then);
}
exports.thenable = thenable;
//# sourceMappingURL=is.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver/lib/common/utils/uuid.js":
/*!*********************************************************************!*\
  !*** ./node_modules/vscode-languageserver/lib/common/utils/uuid.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateUuid = exports.parse = exports.isUUID = exports.v4 = exports.empty = void 0;
class ValueUUID {
    constructor(_value) {
        this._value = _value;
        // empty
    }
    asHex() {
        return this._value;
    }
    equals(other) {
        return this.asHex() === other.asHex();
    }
}
class V4UUID extends ValueUUID {
    constructor() {
        super([
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            '-',
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            '-',
            '4',
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            '-',
            V4UUID._oneOf(V4UUID._timeHighBits),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            '-',
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
        ].join(''));
    }
    static _oneOf(array) {
        return array[Math.floor(array.length * Math.random())];
    }
    static _randomHex() {
        return V4UUID._oneOf(V4UUID._chars);
    }
}
V4UUID._chars = ['0', '1', '2', '3', '4', '5', '6', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];
V4UUID._timeHighBits = ['8', '9', 'a', 'b'];
/**
 * An empty UUID that contains only zeros.
 */
exports.empty = new ValueUUID('00000000-0000-0000-0000-000000000000');
function v4() {
    return new V4UUID();
}
exports.v4 = v4;
const _UUIDPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
function isUUID(value) {
    return _UUIDPattern.test(value);
}
exports.isUUID = isUUID;
/**
 * Parses a UUID that is of the format xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.
 * @param value A uuid string.
 */
function parse(value) {
    if (!isUUID(value)) {
        throw new Error('invalid uuid');
    }
    return new ValueUUID(value);
}
exports.parse = parse;
function generateUuid() {
    return v4().asHex();
}
exports.generateUuid = generateUuid;
//# sourceMappingURL=uuid.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver/lib/common/workspaceFolders.js":
/*!***************************************************************************!*\
  !*** ./node_modules/vscode-languageserver/lib/common/workspaceFolders.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspaceFoldersFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const WorkspaceFoldersFeature = (Base) => {
    return class extends Base {
        initialize(capabilities) {
            let workspaceCapabilities = capabilities.workspace;
            if (workspaceCapabilities && workspaceCapabilities.workspaceFolders) {
                this._onDidChangeWorkspaceFolders = new vscode_languageserver_protocol_1.Emitter();
                this.connection.onNotification(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type, (params) => {
                    this._onDidChangeWorkspaceFolders.fire(params.event);
                });
            }
        }
        getWorkspaceFolders() {
            return this.connection.sendRequest(vscode_languageserver_protocol_1.WorkspaceFoldersRequest.type);
        }
        get onDidChangeWorkspaceFolders() {
            if (!this._onDidChangeWorkspaceFolders) {
                throw new Error('Client doesn\'t support sending workspace folder change events.');
            }
            if (!this._unregistration) {
                this._unregistration = this.connection.client.register(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type);
            }
            return this._onDidChangeWorkspaceFolders.event;
        }
    };
};
exports.WorkspaceFoldersFeature = WorkspaceFoldersFeature;
//# sourceMappingURL=workspaceFolders.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver/lib/node/files.js":
/*!**************************************************************!*\
  !*** ./node_modules/vscode-languageserver/lib/node/files.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__filename) {
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveModulePath = exports.FileSystem = exports.resolveGlobalYarnPath = exports.resolveGlobalNodePath = exports.resolve = exports.uriToFilePath = void 0;
const url = __webpack_require__(/*! url */ "url");
const path = __webpack_require__(/*! path */ "path");
const fs = __webpack_require__(/*! fs */ "fs");
const child_process_1 = __webpack_require__(/*! child_process */ "child_process");
/**
 * @deprecated Use the `vscode-uri` npm module which provides a more
 * complete implementation of handling VS Code URIs.
 */
function uriToFilePath(uri) {
    let parsed = url.parse(uri);
    if (parsed.protocol !== 'file:' || !parsed.path) {
        return undefined;
    }
    let segments = parsed.path.split('/');
    for (var i = 0, len = segments.length; i < len; i++) {
        segments[i] = decodeURIComponent(segments[i]);
    }
    if (process.platform === 'win32' && segments.length > 1) {
        let first = segments[0];
        let second = segments[1];
        // Do we have a drive letter and we started with a / which is the
        // case if the first segement is empty (see split above)
        if (first.length === 0 && second.length > 1 && second[1] === ':') {
            // Remove first slash
            segments.shift();
        }
    }
    return path.normalize(segments.join('/'));
}
exports.uriToFilePath = uriToFilePath;
function isWindows() {
    return process.platform === 'win32';
}
function resolve(moduleName, nodePath, cwd, tracer) {
    const nodePathKey = 'NODE_PATH';
    const app = [
        'var p = process;',
        'p.on(\'message\',function(m){',
        'if(m.c===\'e\'){',
        'p.exit(0);',
        '}',
        'else if(m.c===\'rs\'){',
        'try{',
        'var r=require.resolve(m.a);',
        'p.send({c:\'r\',s:true,r:r});',
        '}',
        'catch(err){',
        'p.send({c:\'r\',s:false});',
        '}',
        '}',
        '});'
    ].join('');
    return new Promise((resolve, reject) => {
        let env = process.env;
        let newEnv = Object.create(null);
        Object.keys(env).forEach(key => newEnv[key] = env[key]);
        if (nodePath && fs.existsSync(nodePath) /* see issue 545 */) {
            if (newEnv[nodePathKey]) {
                newEnv[nodePathKey] = nodePath + path.delimiter + newEnv[nodePathKey];
            }
            else {
                newEnv[nodePathKey] = nodePath;
            }
            if (tracer) {
                tracer(`NODE_PATH value is: ${newEnv[nodePathKey]}`);
            }
        }
        newEnv['ELECTRON_RUN_AS_NODE'] = '1';
        try {
            let cp = child_process_1.fork('', [], {
                cwd: cwd,
                env: newEnv,
                execArgv: ['-e', app]
            });
            if (cp.pid === void 0) {
                reject(new Error(`Starting process to resolve node module  ${moduleName} failed`));
                return;
            }
            cp.on('error', (error) => {
                reject(error);
            });
            cp.on('message', (message) => {
                if (message.c === 'r') {
                    cp.send({ c: 'e' });
                    if (message.s) {
                        resolve(message.r);
                    }
                    else {
                        reject(new Error(`Failed to resolve module: ${moduleName}`));
                    }
                }
            });
            let message = {
                c: 'rs',
                a: moduleName
            };
            cp.send(message);
        }
        catch (error) {
            reject(error);
        }
    });
}
exports.resolve = resolve;
/**
 * Resolve the global npm package path.
 * @deprecated Since this depends on the used package manager and their version the best is that servers
 * implement this themselves since they know best what kind of package managers to support.
 * @param tracer the tracer to use
 */
function resolveGlobalNodePath(tracer) {
    let npmCommand = 'npm';
    const env = Object.create(null);
    Object.keys(process.env).forEach(key => env[key] = process.env[key]);
    env['NO_UPDATE_NOTIFIER'] = 'true';
    const options = {
        encoding: 'utf8',
        env
    };
    if (isWindows()) {
        npmCommand = 'npm.cmd';
        options.shell = true;
    }
    let handler = () => { };
    try {
        process.on('SIGPIPE', handler);
        let stdout = child_process_1.spawnSync(npmCommand, ['config', 'get', 'prefix'], options).stdout;
        if (!stdout) {
            if (tracer) {
                tracer(`'npm config get prefix' didn't return a value.`);
            }
            return undefined;
        }
        let prefix = stdout.trim();
        if (tracer) {
            tracer(`'npm config get prefix' value is: ${prefix}`);
        }
        if (prefix.length > 0) {
            if (isWindows()) {
                return path.join(prefix, 'node_modules');
            }
            else {
                return path.join(prefix, 'lib', 'node_modules');
            }
        }
        return undefined;
    }
    catch (err) {
        return undefined;
    }
    finally {
        process.removeListener('SIGPIPE', handler);
    }
}
exports.resolveGlobalNodePath = resolveGlobalNodePath;
/*
 * Resolve the global yarn pakage path.
 * @deprecated Since this depends on the used package manager and their version the best is that servers
 * implement this themselves since they know best what kind of package managers to support.
 * @param tracer the tracer to use
 */
function resolveGlobalYarnPath(tracer) {
    let yarnCommand = 'yarn';
    let options = {
        encoding: 'utf8'
    };
    if (isWindows()) {
        yarnCommand = 'yarn.cmd';
        options.shell = true;
    }
    let handler = () => { };
    try {
        process.on('SIGPIPE', handler);
        let results = child_process_1.spawnSync(yarnCommand, ['global', 'dir', '--json'], options);
        let stdout = results.stdout;
        if (!stdout) {
            if (tracer) {
                tracer(`'yarn global dir' didn't return a value.`);
                if (results.stderr) {
                    tracer(results.stderr);
                }
            }
            return undefined;
        }
        let lines = stdout.trim().split(/\r?\n/);
        for (let line of lines) {
            try {
                let yarn = JSON.parse(line);
                if (yarn.type === 'log') {
                    return path.join(yarn.data, 'node_modules');
                }
            }
            catch (e) {
                // Do nothing. Ignore the line
            }
        }
        return undefined;
    }
    catch (err) {
        return undefined;
    }
    finally {
        process.removeListener('SIGPIPE', handler);
    }
}
exports.resolveGlobalYarnPath = resolveGlobalYarnPath;
var FileSystem;
(function (FileSystem) {
    let _isCaseSensitive = undefined;
    function isCaseSensitive() {
        if (_isCaseSensitive !== void 0) {
            return _isCaseSensitive;
        }
        if (process.platform === 'win32') {
            _isCaseSensitive = false;
        }
        else {
            // convert current file name to upper case / lower case and check if file exists
            // (guards against cases when name is already all uppercase or lowercase)
            _isCaseSensitive = !fs.existsSync(__filename.toUpperCase()) || !fs.existsSync(__filename.toLowerCase());
        }
        return _isCaseSensitive;
    }
    FileSystem.isCaseSensitive = isCaseSensitive;
    function isParent(parent, child) {
        if (isCaseSensitive()) {
            return path.normalize(child).indexOf(path.normalize(parent)) === 0;
        }
        else {
            return path.normalize(child).toLowerCase().indexOf(path.normalize(parent).toLowerCase()) === 0;
        }
    }
    FileSystem.isParent = isParent;
})(FileSystem = exports.FileSystem || (exports.FileSystem = {}));
function resolveModulePath(workspaceRoot, moduleName, nodePath, tracer) {
    if (nodePath) {
        if (!path.isAbsolute(nodePath)) {
            nodePath = path.join(workspaceRoot, nodePath);
        }
        return resolve(moduleName, nodePath, nodePath, tracer).then((value) => {
            if (FileSystem.isParent(nodePath, value)) {
                return value;
            }
            else {
                return Promise.reject(new Error(`Failed to load ${moduleName} from node path location.`));
            }
        }).then(undefined, (_error) => {
            return resolve(moduleName, resolveGlobalNodePath(tracer), workspaceRoot, tracer);
        });
    }
    else {
        return resolve(moduleName, resolveGlobalNodePath(tracer), workspaceRoot, tracer);
    }
}
exports.resolveModulePath = resolveModulePath;
//# sourceMappingURL=files.js.map
/* WEBPACK VAR INJECTION */}.call(this, "/index.js"))

/***/ }),

/***/ "./node_modules/vscode-languageserver/lib/node/main.js":
/*!*************************************************************!*\
  !*** ./node_modules/vscode-languageserver/lib/node/main.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
/// <reference path="../../typings/thenable.d.ts" />
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConnection = exports.Files = void 0;
const Is = __webpack_require__(/*! ../common/utils/is */ "./node_modules/vscode-languageserver/lib/common/utils/is.js");
const server_1 = __webpack_require__(/*! ../common/server */ "./node_modules/vscode-languageserver/lib/common/server.js");
const fm = __webpack_require__(/*! ./files */ "./node_modules/vscode-languageserver/lib/node/files.js");
const node_1 = __webpack_require__(/*! vscode-languageserver-protocol/node */ "./node_modules/vscode-languageserver-protocol/node.js");
__exportStar(__webpack_require__(/*! vscode-languageserver-protocol/node */ "./node_modules/vscode-languageserver-protocol/node.js"), exports);
__exportStar(__webpack_require__(/*! ../common/api */ "./node_modules/vscode-languageserver/lib/common/api.js"), exports);
var Files;
(function (Files) {
    Files.uriToFilePath = fm.uriToFilePath;
    Files.resolveGlobalNodePath = fm.resolveGlobalNodePath;
    Files.resolveGlobalYarnPath = fm.resolveGlobalYarnPath;
    Files.resolve = fm.resolve;
    Files.resolveModulePath = fm.resolveModulePath;
})(Files = exports.Files || (exports.Files = {}));
let _protocolConnection;
function endProtocolConnection() {
    if (_protocolConnection === undefined) {
        return;
    }
    try {
        _protocolConnection.end();
    }
    catch (_err) {
        // Ignore. The client process could have already
        // did and we can't send an end into the connection.
    }
}
let _shutdownReceived = false;
let exitTimer = undefined;
function setupExitTimer() {
    const argName = '--clientProcessId';
    function runTimer(value) {
        try {
            let processId = parseInt(value);
            if (!isNaN(processId)) {
                exitTimer = setInterval(() => {
                    try {
                        process.kill(processId, 0);
                    }
                    catch (ex) {
                        // Parent process doesn't exist anymore. Exit the server.
                        endProtocolConnection();
                        process.exit(_shutdownReceived ? 0 : 1);
                    }
                }, 3000);
            }
        }
        catch (e) {
            // Ignore errors;
        }
    }
    for (let i = 2; i < process.argv.length; i++) {
        let arg = process.argv[i];
        if (arg === argName && i + 1 < process.argv.length) {
            runTimer(process.argv[i + 1]);
            return;
        }
        else {
            let args = arg.split('=');
            if (args[0] === argName) {
                runTimer(args[1]);
            }
        }
    }
}
setupExitTimer();
const watchDog = {
    initialize: (params) => {
        const processId = params.processId;
        if (Is.number(processId) && exitTimer === undefined) {
            // We received a parent process id. Set up a timer to periodically check
            // if the parent is still alive.
            setInterval(() => {
                try {
                    process.kill(processId, 0);
                }
                catch (ex) {
                    // Parent process doesn't exist anymore. Exit the server.
                    process.exit(_shutdownReceived ? 0 : 1);
                }
            }, 3000);
        }
    },
    get shutdownReceived() {
        return _shutdownReceived;
    },
    set shutdownReceived(value) {
        _shutdownReceived = value;
    },
    exit: (code) => {
        endProtocolConnection();
        process.exit(code);
    }
};
function createConnection(arg1, arg2, arg3, arg4) {
    let factories;
    let input;
    let output;
    let options;
    if (arg1 !== void 0 && arg1.__brand === 'features') {
        factories = arg1;
        arg1 = arg2;
        arg2 = arg3;
        arg3 = arg4;
    }
    if (node_1.ConnectionStrategy.is(arg1) || node_1.ConnectionOptions.is(arg1)) {
        options = arg1;
    }
    else {
        input = arg1;
        output = arg2;
        options = arg3;
    }
    return _createConnection(input, output, options, factories);
}
exports.createConnection = createConnection;
function _createConnection(input, output, options, factories) {
    if (!input && !output && process.argv.length > 2) {
        let port = void 0;
        let pipeName = void 0;
        let argv = process.argv.slice(2);
        for (let i = 0; i < argv.length; i++) {
            let arg = argv[i];
            if (arg === '--node-ipc') {
                input = new node_1.IPCMessageReader(process);
                output = new node_1.IPCMessageWriter(process);
                break;
            }
            else if (arg === '--stdio') {
                input = process.stdin;
                output = process.stdout;
                break;
            }
            else if (arg === '--socket') {
                port = parseInt(argv[i + 1]);
                break;
            }
            else if (arg === '--pipe') {
                pipeName = argv[i + 1];
                break;
            }
            else {
                var args = arg.split('=');
                if (args[0] === '--socket') {
                    port = parseInt(args[1]);
                    break;
                }
                else if (args[0] === '--pipe') {
                    pipeName = args[1];
                    break;
                }
            }
        }
        if (port) {
            let transport = node_1.createServerSocketTransport(port);
            input = transport[0];
            output = transport[1];
        }
        else if (pipeName) {
            let transport = node_1.createServerPipeTransport(pipeName);
            input = transport[0];
            output = transport[1];
        }
    }
    var commandLineMessage = 'Use arguments of createConnection or set command line parameters: \'--node-ipc\', \'--stdio\' or \'--socket={number}\'';
    if (!input) {
        throw new Error('Connection input stream is not set. ' + commandLineMessage);
    }
    if (!output) {
        throw new Error('Connection output stream is not set. ' + commandLineMessage);
    }
    // Backwards compatibility
    if (Is.func(input.read) && Is.func(input.on)) {
        let inputStream = input;
        inputStream.on('end', () => {
            endProtocolConnection();
            process.exit(_shutdownReceived ? 0 : 1);
        });
        inputStream.on('close', () => {
            endProtocolConnection();
            process.exit(_shutdownReceived ? 0 : 1);
        });
    }
    const connectionFactory = (logger) => {
        const result = node_1.createProtocolConnection(input, output, logger, options);
        return result;
    };
    return server_1.createConnection(connectionFactory, watchDog, factories);
}
//# sourceMappingURL=main.js.map

/***/ }),

/***/ "./node_modules/vscode-languageserver/node.js":
/*!****************************************************!*\
  !*** ./node_modules/vscode-languageserver/node.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ----------------------------------------------------------------------------------------- */


module.exports = __webpack_require__(/*! ./lib/node/main */ "./node_modules/vscode-languageserver/lib/node/main.js");

/***/ }),

/***/ "./src/TibboBasicDocumentFormatter.ts":
/*!********************************************!*\
  !*** ./src/TibboBasicDocumentFormatter.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscode_languageserver_1 = __webpack_require__(/*! vscode-languageserver */ "./node_modules/vscode-languageserver/lib/node/main.js");
const blockStart = [
    'if',
    'enum',
    'sub',
    'function',
    'type',
    'for',
    'select',
    'while',
    '#if',
    '#ifndef',
    '#ifdef'
];
const blockEnd = [
    'end if',
    'end enum',
    'end sub',
    'end function',
    'end type',
    'next',
    'end select',
    'wend',
    '#endif',
    '#endif',
    '#endif'
];
class TibboBasicDocumentFormatter {
    formatDocument(document, formatParams) {
        const edits = [];
        const lines = document.getText().split('\n');
        const tabSize = formatParams.options.tabSize;
        let currentIndent = 0;
        let pos = 0;
        const blockStarts = [];
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            const trimmed = line.trim().toLowerCase();
            if (trimmed == '' || trimmed[0] == "'") {
                pos += line.length + 1;
                continue;
            }
            let whiteSpaceLength = 0;
            for (let j = 0; j < blockEnd.length; j++) {
                if (trimmed.indexOf(blockEnd[j]) == 0) {
                    if (blockStarts[blockStarts.length - 1] == j) {
                        currentIndent--;
                        blockStarts.pop();
                        break;
                    }
                }
            }
            let hasTabs = false;
            for (let j = 0; j < line.length; j++) {
                if (line[j] == '\t') {
                    hasTabs = true;
                    whiteSpaceLength++;
                    continue;
                }
                if (line[j] != ' ') {
                    break;
                }
                whiteSpaceLength++;
            }
            if (whiteSpaceLength != currentIndent * tabSize || hasTabs) {
                let replaced = '';
                for (let j = 0; j < currentIndent * tabSize; j++) {
                    replaced += ' ';
                }
                const edit = vscode_languageserver_1.TextEdit.replace({ start: document.positionAt(pos), end: document.positionAt(pos + whiteSpaceLength) }, replaced);
                edits.push(edit);
            }
            pos += line.length + 1;
            for (let j = 0; j < blockStart.length; j++) {
                if (trimmed.indexOf(blockStart[j]) == 0) {
                    const next = trimmed.substr(trimmed.indexOf(blockStart[j]) + blockStart[j].length, 1);
                    if (next != ' ' && next != '\t') {
                        if (i != lines.length - 1) {
                            continue;
                        }
                    }
                    currentIndent++;
                    blockStarts.push(j);
                    if (blockStart[j] == 'if') {
                        if (trimmed.substr(trimmed.length - 4, 4) != 'then') {
                            currentIndent--;
                            blockStarts.pop();
                        }
                    }
                    break;
                }
            }
        }
        // let edit = TextEdit.replace({ start: document.positionAt(19), end: document.positionAt(20) }, '    ');
        // edits.push(edit);
        return Promise.resolve(edits);
    }
}
exports.default = TibboBasicDocumentFormatter;


/***/ }),

/***/ "./src/TibboBasicErrorListener.ts":
/*!****************************************!*\
  !*** ./src/TibboBasicErrorListener.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const antlr4 = __webpack_require__(/*! antlr4 */ "./node_modules/antlr4/index.js");
// const { SyntaxGenericError } = require(path.resolve('error', 'helper'));
/**
 * Custom Error Listener
 *
 * @returns {object}
 */
class TibboBasicErrorListener extends antlr4.error.ErrorListener {
    constructor() {
        super(...arguments);
        this.errors = [];
    }
    /**
     * Checks syntax error
     *
     * @param {object} recognizer The parsing support code essentially. Most of it is error recovery stuff
     * @param {object} symbol Offending symbol
     * @param {number} line Line of offending symbol
     * @param {number} column Position in line of offending symbol
     * @param {string} message Error message
     * @param {string} payload Stack trace
     */
    syntaxError(recognizer, symbol, line, column, message, payload) {
        // throw new Error(JSON.stringify({ line, column, message }));
        this.errors.push({ symbol: symbol, line, column, message });
    }
}
exports.default = TibboBasicErrorListener;


/***/ }),

/***/ "./src/TibboBasicPreprocessor.ts":
/*!***************************************!*\
  !*** ./src/TibboBasicPreprocessor.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PreprocessorListener = void 0;
const fs = __webpack_require__(/*! fs */ "fs");
const path = __webpack_require__(/*! path */ "path");
const ini = __webpack_require__(/*! ini */ "./node_modules/ini/ini.js");
const TibboBasicErrorListener_1 = __webpack_require__(/*! ./TibboBasicErrorListener */ "./src/TibboBasicErrorListener.ts");
const antlr4 = __webpack_require__(/*! antlr4 */ "./node_modules/antlr4/index.js");
const TibboBasicPreprocessorLexer = __webpack_require__(/*! ../language/TibboBasic/lib/TibboBasicPreprocessorLexer */ "./language/TibboBasic/lib/TibboBasicPreprocessorLexer.js").TibboBasicPreprocessorLexer;
const TibboBasicPreprocessorParser = __webpack_require__(/*! ../language/TibboBasic/lib/TibboBasicPreprocessorParser */ "./language/TibboBasic/lib/TibboBasicPreprocessorParser.js").TibboBasicPreprocessorParser;
const TibboBasicPreprocessorParserListener = __webpack_require__(/*! ../language/TibboBasic/lib/TibboBasicPreprocessorParserListener */ "./language/TibboBasic/lib/TibboBasicPreprocessorParserListener.js").TibboBasicPreprocessorParserListener;
class TibboBasicPreprocessor {
    constructor(projectPath, platformsPath) {
        this.defines = {};
        this.codes = {};
        this.files = {};
        this.filePriorities = [];
        this.originalFiles = {};
        let tprPath = '';
        this.projectPath = projectPath;
        fs.readdirSync(projectPath).forEach(file => {
            const ext = path.extname(file);
            if (ext == '.tpr') {
                tprPath = path.join(projectPath, file);
            }
        });
        const tpr = ini.parse(fs.readFileSync(tprPath, 'utf-8'));
        this.platformType = tpr['project']['platform'];
        this.platformsPath = platformsPath;
        this.platformVersion = tpr['project']['src_lib_ver'];
    }
    parsePlatforms() {
        this.codes = {};
        this.defines = {};
        //parse platforms
        const currentPath = path.join(this.platformsPath, this.platformType);
        this.parseFile(currentPath, this.platformType + '.tph');
    }
    getFilePath(currentDirectory, filePath) {
        const platformLibs = path.join(this.platformsPath, 'src', this.platformVersion);
        if (fs.existsSync(path.join(platformLibs, filePath.toLowerCase()))) {
            filePath = filePath.toLowerCase();
        }
        if (fs.existsSync(path.join(this.projectPath, filePath.toLowerCase()))) {
            filePath = filePath.toLowerCase();
        }
        if (fs.existsSync(path.join(currentDirectory, filePath.toLowerCase()))) {
            filePath = filePath.toLowerCase();
        }
        if (fs.existsSync(path.join(platformLibs, filePath))) { //check platforms path
            filePath = path.join(platformLibs, filePath);
        }
        else if (fs.existsSync(path.join(this.projectPath, filePath))) {
            filePath = path.join(this.projectPath, filePath);
        }
        else { //check relative
            filePath = path.join(currentDirectory, filePath);
        }
        return filePath;
    }
    parseFile(currentDirectory, filePath, update = false) {
        filePath = this.getFilePath(currentDirectory, filePath);
        if (this.files[filePath] && !update) {
            return filePath;
        }
        let deviceRootFile = '';
        if (this.originalFiles[filePath] == undefined) {
            this.filePriorities.push(filePath);
            deviceRootFile = fs.readFileSync(filePath, 'utf-8');
            this.originalFiles[filePath] = deviceRootFile;
        }
        deviceRootFile = this.originalFiles[filePath];
        const chars = new antlr4.InputStream(deviceRootFile);
        chars.name = filePath;
        let blankFile = this.originalFiles[filePath];
        blankFile = blankFile.replace(/[^\r\n\t]/g, ' ');
        this.files[filePath] = blankFile;
        this.codes[filePath] = [];
        const lexer = new TibboBasicPreprocessorLexer(chars);
        const tokens = new antlr4.CommonTokenStream(lexer);
        const parser = new TibboBasicPreprocessorParser(tokens);
        parser.buildParseTrees = true;
        const errorListener = new TibboBasicErrorListener_1.default();
        lexer.removeErrorListeners();
        // lexer.addErrorListener(errorListener);
        parser.removeErrorListeners();
        parser.addErrorListener(errorListener);
        const tree = parser.preprocessor();
        const preprocessor = new PreprocessorListener(filePath, this, chars);
        antlr4.tree.ParseTreeWalker.DEFAULT.walk(preprocessor, tree);
        if (errorListener.errors.length > 0) {
            // console.log(errorListener.errors);
        }
        return filePath;
    }
}
exports.default = TibboBasicPreprocessor;
class PreprocessorListener extends TibboBasicPreprocessorParserListener {
    constructor(filePath, preprocessor, charStream) {
        super();
        this.expressionStack = [];
        this.preprocessor = preprocessor;
        this.filePath = filePath;
        this.charStream = charStream;
        this.lastLine = 0;
        this.currentBlock = undefined;
    }
    enterCodeLine(ctx) {
        if (this.currentBlock != undefined) {
            if (this.currentBlock.shouldEvaluate) {
                if (this.getCurrentStack()) {
                    this.addCode(ctx);
                }
                else {
                    if (ctx.start.line == this.lastLine) {
                        this.addCode(ctx);
                    }
                }
            }
        }
        else {
            this.addCode(ctx);
        }
    }
    enterPreprocessorDefine(ctx) {
        if (this.getCurrentStack()) {
            const name = ctx.children[2].symbol.text;
            if (ctx.children.length == 4) { //define has value
                this.preprocessor.defines[name] = {
                    name: name,
                    value: ctx.children[3].start.text.trim(),
                    line: ctx.start.line
                };
            }
            else { //define with no value
                this.preprocessor.defines[name] = {
                    name: name,
                    value: "",
                    line: ctx.start.line
                };
            }
            this.addCode(ctx);
        }
    }
    enterPreprocessorInclude(ctx) {
        if (this.getCurrentStack()) {
            const symbol = ctx.children[1].symbol.text;
            let filePath = symbol.substring(1, symbol.length - 1);
            filePath = filePath.split('\\').join(path.sep);
            this.addCode(ctx);
            if (path.basename(this.filePath) == filePath) {
                return;
            }
            if (filePath == 'global.tbh') {
                return;
            }
            this.preprocessor.parseFile(path.dirname(this.filePath), filePath, true);
        }
    }
    enterPreprocessorDef(ctx) {
        if (this.currentBlock == undefined || this.currentBlock && this.currentBlock.shouldEvaluate) {
            this.addBlock(ctx);
            const type = ctx.children[1].symbol.type;
            const name = ctx.children[2].symbol.text;
            switch (type) {
                case TibboBasicPreprocessorParser.IFDEF:
                    this.addEvaluationResult(this.preprocessor.defines[name] != undefined, ctx);
                    break;
                case TibboBasicPreprocessorParser.IFNDEF:
                    this.addEvaluationResult(this.preprocessor.defines[name] == undefined, ctx);
                    break;
            }
            this.addCode(ctx);
        }
        else {
            this.addBlock(ctx);
            this.addEvaluationResult(false, ctx);
        }
    }
    enterPreprocessorUndef(ctx) {
        if (this.getCurrentStack()) {
            const name = ctx.children[1].symbol.text;
            this.defines[name] = undefined;
            this.addCode(ctx);
        }
    }
    enterPreprocessorEndConditional(ctx) {
        if (this.currentBlock != undefined) {
            if (this.currentBlock.shouldEvaluate) {
                this.addCode(ctx);
            }
            this.currentBlock = this.currentBlock.parentBlock;
        }
        else {
            this.addCode(ctx);
        }
    }
    enterPreprocessorConditional(ctx) {
        let shouldEvaluate = false;
        switch (ctx.children[1].symbol.type) {
            case TibboBasicPreprocessorParser.IF:
                if (this.currentBlock == undefined || (this.currentBlock
                    && this.currentBlock.shouldEvaluate)) {
                    if (this.currentBlock) {
                        if (this.currentBlock.evaluationResults[0]) {
                            shouldEvaluate = true;
                        }
                    }
                    else {
                        shouldEvaluate = true;
                    }
                }
                this.addBlock(ctx);
                break;
            case TibboBasicPreprocessorParser.ELIF:
                {
                    let found = false;
                    if (this.currentBlock != undefined && this.currentBlock.shouldEvaluate) {
                        for (let i = 0; i < this.currentBlock.evaluationResults.length; i++) {
                            if (this.currentBlock.evaluationResults[i]) {
                                found = true;
                            }
                        }
                    }
                    if (!found) {
                        shouldEvaluate = true;
                    }
                    else {
                        this.addEvaluationResult(false, ctx);
                    }
                }
                break;
            case TibboBasicPreprocessorParser.ELSE:
                {
                    let found = false;
                    if (this.currentBlock != undefined && this.currentBlock.shouldEvaluate) {
                        for (let i = 0; i < this.currentBlock.evaluationResults.length; i++) {
                            if (this.currentBlock.evaluationResults[i]) {
                                found = true;
                            }
                        }
                    }
                    if (!found) {
                        this.addCode(ctx);
                        this.addEvaluationResult(true, ctx);
                        return;
                    }
                    else {
                        this.addEvaluationResult(false, ctx);
                    }
                }
                break;
        }
        this.addCode(ctx);
        if (shouldEvaluate) {
            const result = this.evaluate(ctx.children);
            this.addEvaluationResult(result, ctx);
        }
    }
    evaluateStatement(ctx) {
        let result = true;
        let evalString = '';
        for (let i = 0; i < ctx.children.length; i++) {
            const item = ctx.children[i];
            evalString += this.getItemStatement(item);
        }
        result = eval(evalString);
        return result;
    }
    evaluate(items) {
        let result = false;
        for (let i = 0; i < items.length; i++) {
            const item = items[i];
            if (item.ruleIndex == TibboBasicPreprocessorParser.RULE_preprocessor_expression && item.op == undefined) {
                const text = item.children[0].getText();
                // let definedValue = this.getDefineValue(text);
                result = this.preprocessor.defines[text] != undefined && Number(this.preprocessor.defines[text].value) != 0;
            }
            if (item.ruleIndex == TibboBasicPreprocessorParser.RULE_preprocessor_expression && item.op != undefined) {
                switch (item.op.type) {
                    case TibboBasicPreprocessorParser.AND:
                        result = this.evaluate([item.children[0]]) && this.evaluate([item.children[2]]);
                        break;
                    case TibboBasicPreprocessorParser.OR:
                        result = this.evaluate([items[i].children[0]]) || this.evaluate([items[i].children[2]]);
                        break;
                    default:
                        {
                            const name = item.children[0].start.text;
                            const evalValue = this.getDefineValue(item.children[2].start.text);
                            const definedValue = this.getDefineValue(name);
                            switch (item.op.type) {
                                case TibboBasicPreprocessorParser.EQUAL:
                                    result = evalValue == definedValue;
                                    break;
                                case TibboBasicPreprocessorParser.NOTEQUAL:
                                    result = evalValue != definedValue;
                                    break;
                                case TibboBasicPreprocessorParser.LT:
                                    result = evalValue < definedValue;
                                    break;
                                case TibboBasicPreprocessorParser.GT:
                                    result = evalValue > definedValue;
                                    break;
                                case TibboBasicPreprocessorParser.LE:
                                    result = evalValue <= definedValue;
                                    break;
                                case TibboBasicPreprocessorParser.GE:
                                    result = evalValue >= definedValue;
                                    break;
                            }
                        }
                        break;
                }
            }
        }
        return result;
    }
    getItemStatement(item) {
        let evalString = '';
        if (item.children) {
            for (let i = 0; i < item.children.length; i++) {
                evalString += this.getItemStatement(item.children[i]);
            }
        }
        else {
            switch (item.symbol.type) {
                case TibboBasicPreprocessorParser.EQUAL:
                    evalString += '==';
                    break;
                case TibboBasicPreprocessorParser.NOTEQUAL:
                    evalString += '!=';
                    break;
                case TibboBasicPreprocessorParser.AND:
                    evalString += '&&';
                    break;
                case TibboBasicPreprocessorParser.OR:
                    evalString += '||';
                    break;
                case TibboBasicPreprocessorParser.LT:
                    evalString += '<';
                    break;
                case TibboBasicPreprocessorParser.GT:
                    evalString += '>';
                    break;
                case TibboBasicPreprocessorParser.LE:
                    evalString += '<=';
                    break;
                case TibboBasicPreprocessorParser.GE:
                    evalString += '>=';
                    break;
                case TibboBasicPreprocessorParser.CONDITIONAL_SYMBOL:
                    evalString += '"' + this.getDefineValue(item.symbol.text) + '"';
                    break;
                case TibboBasicPreprocessorParser.DECIMAL_LITERAL:
                case TibboBasicPreprocessorParser.DIRECTIVE_STRING:
                    evalString += '"' + item.symbol.text + '"';
                    break;
            }
        }
        return evalString;
    }
    getDefineValue(name) {
        if (this.preprocessor.defines[name] != undefined) {
            const define = this.preprocessor.defines[name];
            if (define.value != '') {
                const nestedDefineValue = this.getDefineValue(define.value);
                if (nestedDefineValue != name) {
                    return nestedDefineValue;
                }
                else {
                    return define.value;
                }
            }
            else {
                return define.value;
            }
        }
        return name;
    }
    addCode(context) {
        if (this.currentBlock != undefined) {
            if (!this.currentBlock.shouldEvaluate) {
                return;
            }
        }
        const text = this.charStream.getText(context.start.start, context.stop.stop);
        // this.preprocessor.codes[this.filePath]
        this.preprocessor.files[this.filePath] = this.replaceRange(this.preprocessor.files[this.filePath], context.start.start, context.stop.stop, text);
        // if (context.children != undefined) {
        //     for (let i = 0; i < context.children.length; i++) {
        //         this.addCode(context.children[i]);
        //     }
        // }
        // else {
        //     this.preprocessor.codes[this.filePath].push(context);
        // }
    }
    addEvaluationResult(result, ctx) {
        this.lastLine = ctx.start.line;
        if (this.currentBlock != undefined) {
            this.currentBlock.evaluationResults.push(result);
        }
    }
    replaceRange(s, start, end, substitute) {
        return s.substring(0, start) + substitute + s.substring(end + 1);
    }
    addBlock(ctx) {
        let shouldEvaluate = false;
        if (this.currentBlock == undefined) {
            shouldEvaluate = true;
        }
        else {
            shouldEvaluate = this.getCurrentStack();
        }
        const currentBlock = {
            shouldEvaluate: shouldEvaluate,
            parentBlock: this.currentBlock,
            blockStart: ctx.start.line,
            evaluationResults: []
        };
        this.currentBlock = currentBlock;
    }
    addExpressionBlock() {
        this.expressionStack.push(0);
    }
    getCurrentStack(block = undefined) {
        let result = true;
        if (block == undefined) {
            block = this.currentBlock;
        }
        if (block != undefined) {
            result = block.evaluationResults[block.evaluationResults.length - 1];
        }
        return result;
    }
    addExpressionCount() {
        if (this.expressionStack.length == 0) {
            this.addExpressionBlock();
        }
        this.expressionStack[this.expressionStack.length - 1]++;
    }
}
exports.PreprocessorListener = PreprocessorListener;


/***/ }),

/***/ "./src/TibboBasicProjectParser.ts":
/*!****************************************!*\
  !*** ./src/TibboBasicProjectParser.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const fs = __webpack_require__(/*! fs */ "fs");
// import path = require('path');
// import ini = require('ini');
const TibboBasicErrorListener_1 = __webpack_require__(/*! ./TibboBasicErrorListener */ "./src/TibboBasicErrorListener.ts");
const antlr4 = __webpack_require__(/*! antlr4 */ "./node_modules/antlr4/index.js");
const TibboBasicLexer = __webpack_require__(/*! ../language/TibboBasic/lib/TibboBasicLexer */ "./language/TibboBasic/lib/TibboBasicLexer.js").TibboBasicLexer;
const TibboBasicParser = __webpack_require__(/*! ../language/TibboBasic/lib/TibboBasicParser */ "./language/TibboBasic/lib/TibboBasicParser.js").TibboBasicParser;
const TibboBasicParserListener = __webpack_require__(/*! ../language/TibboBasic/lib/TibboBasicParserListener */ "./language/TibboBasic/lib/TibboBasicParserListener.js").TibboBasicParserListener;
class TibboBasicProjectParser {
    constructor() {
        this.objects = {};
        this.syscalls = {};
        this.tokens = {};
        this.trees = {};
        this.events = {};
        this.errors = {};
        this.enums = {};
        this.functions = {};
        this.consts = {};
        this.types = {};
        this.comments = {};
        this.variables = [];
        this.scopes = [];
        this.symbolDeclarations = {};
        this.references = {};
    }
    parseFile(filePath, fileContents) {
        // const t1 = new Date().getTime();
        let deviceRootFile = '';
        if (fileContents != undefined) {
            deviceRootFile = fileContents;
        }
        else {
            deviceRootFile = fs.readFileSync(filePath, 'utf-8');
        }
        if (deviceRootFile == undefined) {
            return;
        }
        this.resetFileSymbols(filePath);
        // console.log(`Parsing ${filePath}`);
        const chars = new antlr4.InputStream(deviceRootFile);
        chars.name = filePath;
        const lexer = new TibboBasicLexer(chars);
        const tokens = new antlr4.CommonTokenStream(lexer);
        const parser = new TibboBasicParser(tokens);
        parser.buildParseTrees = true;
        const errorListener = new TibboBasicErrorListener_1.default();
        lexer.removeErrorListeners();
        // lexer.addErrorListener(errorListener);
        parser.removeErrorListeners();
        parser.addErrorListener(errorListener);
        const tree = parser.startRule();
        this.tokens[filePath] = tokens;
        this.trees[filePath] = tree;
        const listener = new ParserListener(this);
        antlr4.tree.ParseTreeWalker.DEFAULT.walk(listener, tree);
        if (errorListener.errors.length > 0) {
            // console.log(errorListener.errors);
        }
        this.errors[filePath] = errorListener.errors;
        // const t2 = new Date().getTime();
        // const secondsElapsed = (t2 - t1) / 1000;
        // console.log(`parsed file in ${secondsElapsed} s`);
    }
    getTokenAtPosition(filePath, offset) {
        let tree = this.trees[filePath];
        if (tree == undefined) {
            tree = this.trees[filePath.charAt(0).toUpperCase() + filePath.slice(1)];
        }
        if (tree != undefined) {
            return this.findToken(offset, tree.children);
        }
    }
    findToken(offset, children) {
        for (let i = 0; i < children.length; i++) {
            if (children[i].children == undefined) {
                if (children[i].symbol && children[i].symbol.start <= offset && children[i].symbol.stop >= offset) {
                    return children[i];
                }
            }
            else {
                const item = this.findToken(offset, children[i].children);
                if (item != undefined) {
                    return item;
                }
            }
        }
        return undefined;
    }
    getScope(filePath, offset) {
        for (let i = 0; i < this.scopes.length; i++) {
            if (this.scopes[i].file == filePath) {
                if (this.scopes[i].start.start <= offset && this.scopes[i].end.start >= offset) {
                    return this.scopes[i];
                }
            }
        }
        return undefined;
    }
    getScopeVariables(scope) {
        const variables = [];
        if (!scope) {
            return variables;
        }
        for (let i = 0; i < this.variables.length; i++) {
            const variable = this.variables[i];
            if (variable.location.startToken.source[1].name == scope.file) {
                if (variable.location.startToken.start >= scope.start.start
                    && variable.location.startToken.start < scope.end.start) {
                    variables.push(variable);
                }
            }
        }
        return variables;
    }
    constructComments() {
        this.comments = {};
        for (const key in this.tokens) {
            const tokens = this.tokens[key].tokens;
            for (let i = 0; i < tokens.length; i++) {
                if (tokens[i].channel == TibboBasicLexer.COMMENTS_CHANNEL) {
                    const token = tokens[i];
                    const fileName = token.source[1].name;
                    if (this.comments[fileName] == undefined) {
                        this.comments[fileName] = [];
                    }
                    this.comments[fileName].push(token);
                }
            }
        }
        for (const key in this.objects) {
            const items = [
                this.objects[key].properties,
                this.objects[key].functions,
                this.objects[key].events
            ];
            items.forEach(prop => {
                for (let i = 0; i < prop.length; i++) {
                    const item = prop[i];
                    item.comments = this.findComments(item.location.stopToken);
                }
            });
            this.objects[key].comments = this.findComments(this.objects[key].location.stopToken);
        }
        let queue = [
            this.enums,
            this.consts,
            this.functions,
            this.variables,
            this.types,
            this.syscalls
        ];
        queue.forEach(table => {
            for (const key in table) {
                const item = table[key];
                if (!item.location) {
                    continue;
                }
                const fileName = item.location.startToken.source[1].name;
                if (this.symbolDeclarations[fileName] == undefined) {
                    this.symbolDeclarations[fileName] = [];
                }
                this.symbolDeclarations[fileName].push(item.location.startToken.line);
                if (item['members'] != undefined) {
                    for (let i = 0; i < item['members'].length; i++) {
                        this.symbolDeclarations[fileName].push(item['members'][i].location.startToken.line);
                    }
                }
            }
        });
        queue = [
            this.enums,
            this.consts,
            this.variables,
            this.types
        ];
        queue.forEach(table => {
            for (const key in table) {
                const item = table[key];
                if (!item.location) {
                    continue;
                }
                const fileName = item.location.startToken.source[1].name;
                if (this.symbolDeclarations[fileName] == undefined) {
                    this.symbolDeclarations[fileName] = [];
                }
                item.comments = this.findComments(item.location.stopToken, true);
                if (item['members'] != undefined) {
                    for (let i = 0; i < item['members'].length; i++) {
                        if (item['members'][i].comments.length == 0) {
                            item['members'][i].comments =
                                this.findComments(item['members'][i].location.stopToken, true);
                        }
                    }
                }
            }
        });
        queue = [
            this.functions,
            this.syscalls
        ];
        queue.forEach(table => {
            for (const key in table) {
                const item = table[key];
                if (!item.location) {
                    continue;
                }
                const fileName = item.location.startToken.source[1].name;
                if (this.symbolDeclarations[fileName] == undefined) {
                    this.symbolDeclarations[fileName] = [];
                }
                item.comments = this.findComments(item.location.stopToken);
            }
        });
    }
    findComments(location, startsInline = false) {
        const filePath = location.source[1].name;
        let line = location.line;
        const comments = [];
        const fileComments = this.comments[filePath];
        if (fileComments == undefined) {
            return comments;
        }
        for (let i = 0; i < fileComments.length; i++) {
            let found = false;
            if (comments.length == 0 && !startsInline) {
                if (line == fileComments[i].line || line + 1 == fileComments[i].line) {
                    found = true;
                    if (line + 1 == fileComments[i].line) {
                        line++;
                    }
                }
            }
            else if (line == fileComments[i].line) {
                found = true;
            }
            if (found) {
                if (this.symbolDeclarations[filePath] &&
                    this.symbolDeclarations[filePath].includes(line)) {
                    if (startsInline && line != location.line) {
                        break;
                    }
                }
                const comment = fileComments[i];
                comments.push(comment);
                line++;
            }
        }
        return comments;
    }
    addVariable(variable) {
        //TODO set scope of variable
        let found = false;
        for (let i = 0; i < this.variables.length; i++) {
            if (this.variables[i].name == variable.name) {
                if (this.variables[i].location.startToken.line == variable.location.startToken.line ||
                    Math.abs(variable.location.startToken.line - this.variables[i].location.startToken.line) < 3) {
                    found = true;
                }
            }
        }
        if (!found) {
            this.variables.push(variable);
        }
    }
    resetFileSymbols(filePath) {
        // enums: { [name: string]: TBEnum } = {};
        // functions: { [name: string]: TBFunction } = {};
        // subs: { [name: string]: TBSub } = {};
        // consts: { [name: string]: TBConst } = {};
        // types: { [name: string]: TBType } = {};
        // comments: { [fileName: string]: CommonToken[] } = {};
        // variables: Array<TBVariable> = [];
        // scopes: Array<TBScope> = [];
        // symbolDeclarations: { [fileName: string]: number[] } = {};
        for (const key in this.enums) {
            if (this.enums[key].location.startToken.source[1].name == filePath) {
                delete this.enums[key];
            }
        }
        for (const key in this.functions) {
            if (this.events[key] == undefined) {
                const location = this.functions[key].location;
                const func = this.functions[key];
                if (location != undefined) {
                    if (location.startToken.source[1].name == filePath) {
                        delete this.functions[key];
                    }
                }
                for (let i = 0; i < func.references.length; i++) {
                    if (func.references[i].startToken.source[1].name == filePath) {
                        func.references.splice(i, 1);
                        i--;
                    }
                }
            }
        }
        for (const key in this.consts) {
            if (this.consts[key].location.startToken.source[1].name == filePath) {
                delete this.consts[key];
            }
        }
        for (const key in this.types) {
            if (this.types[key].location.startToken.source[1].name == filePath) {
                delete this.types[key];
            }
        }
        for (let i = 0; i < this.scopes.length; i++) {
            if (this.scopes[i].file == filePath) {
                this.scopes.splice(i, 1);
                i--;
            }
        }
        for (let i = 0; i < this.variables.length; i++) {
            if (this.variables[i].location.startToken.source[1].name == filePath) {
                this.variables.splice(i, 1);
            }
        }
    }
}
exports.default = TibboBasicProjectParser;
class ParserListener extends TibboBasicParserListener {
    constructor(parser) {
        super();
        this.scopeStack = [];
        this.parser = parser;
    }
    enterObjectDeclaration(ctx) {
        const name = ctx.children[1].symbol.text;
        this.parser.objects[name] = {
            name: name,
            location: {
                startToken: ctx.start,
                stopToken: ctx.start
            },
            properties: [],
            events: [],
            functions: [],
            comments: []
        };
    }
    enterEnumerationStmt(ctx) {
        const name = ctx.children[1].symbol.text.toLowerCase();
        this.parser.enums[name] = {
            name: name,
            members: [],
            location: {
                startToken: ctx.start,
                stopToken: ctx.start
            },
            comments: []
        };
    }
    enterEnumerationStmt_Constant(ctx) {
        const enumName = ctx.parentCtx.children[1].symbol.text.toLowerCase();
        const name = ctx.children[0].symbol.text.toLowerCase();
        const value = (this.parser.enums[enumName].members.length).toString().toLowerCase();
        this.parser.enums[enumName].members.push({
            name: name,
            value: value,
            comments: [],
            location: {
                startToken: ctx.start,
                stopToken: ctx.start
            },
        });
    }
    enterSyscallDeclarationInner(ctx) {
        if (ctx.object != null) {
            const objectName = ctx.object.text;
            const functionName = ctx.property.text;
            if (this.parser.objects[objectName] != undefined) {
                this.parser.objects[objectName].functions.push({
                    name: functionName,
                    syscall: undefined,
                    location: {
                        startToken: ctx.start,
                        stopToken: ctx.start
                    },
                    parameters: [],
                    dataType: '',
                    comments: []
                });
            }
        }
        else {
            //non object syscall
            const name = ctx.property.text;
            let valueType = '';
            for (let i = 0; i < ctx.children.length; i++) {
                if (ctx.children[i].ruleIndex == TibboBasicParser.RULE_asTypeClause) {
                    valueType = ctx.children[i].valueType.getText();
                }
            }
            this.parser.syscalls[name] = {
                name: name,
                parameters: [],
                location: {
                    startToken: ctx.start,
                    stopToken: ctx.start
                },
                dataType: valueType,
                comments: []
            };
        }
    }
    enterPropertyDefineStmt(ctx) {
        const objectName = ctx.object.text;
        const propertyName = ctx.property.text;
        if (this.parser.objects[objectName] != undefined) {
            this.currentObject = objectName;
            this.currentProperty = propertyName;
            this.parser.objects[objectName].properties.push({
                name: propertyName,
                dataType: '',
                location: {
                    startToken: ctx.start,
                    stopToken: ctx.start
                },
                comments: []
            });
        }
    }
    exitPropertyDefineStmt(ctx) {
        this.currentObject = undefined;
        this.currentProperty = undefined;
    }
    enterAsTypeClause(ctx) {
        if (ctx.parentCtx.ruleIndex == TibboBasicParser.RULE_propertyGetStmt && this.currentObject != undefined) {
            const valueType = ctx.valueType.getText();
            for (let i = 0; i < this.parser.objects[this.currentObject].properties.length; i++) {
                if (this.parser.objects[this.currentObject].properties[i].name == this.currentProperty) {
                    this.parser.objects[this.currentObject].properties[i].dataType = valueType;
                    break;
                }
            }
        }
    }
    enterSubStmt(ctx) {
        if (ctx.name) {
            const name = ctx.name.text;
            this.addFunction(name, {
                location: {
                    startToken: ctx.start,
                    stopToken: ctx.name
                },
            });
            const scope = {
                file: ctx.start.source[1].name,
                start: ctx.start,
                end: ctx.stop
            };
            this.parser.scopes.push(scope);
            this.scopeStack.push(scope);
        }
    }
    exitSubStmt(ctx) {
        this.scopeStack.pop();
    }
    enterFunctionStmt(ctx) {
        if (ctx.name) {
            const name = ctx.name.text;
            let length = '';
            let location = {
                startToken: ctx.start,
                stopToken: ctx.start
            };
            for (let i = 0; i < ctx.children.length; i++) {
                if (ctx.children[i].ruleIndex == TibboBasicParser.RULE_asTypeClause) {
                    const valueType = ctx.children[i].valueType.getText();
                    if (ctx.children[i].children.length >= 4) {
                        length = ctx.children[i].children[2].getText();
                    }
                    location = {
                        startToken: ctx.start,
                        stopToken: ctx.children[i].stop
                    };
                    const variable = {
                        name: name,
                        value: '',
                        length: length,
                        dataType: valueType,
                        location: {
                            startToken: ctx.name,
                            stopToken: ctx.name
                        },
                        references: [],
                        comments: []
                    };
                    variable.parentScope = this.scopeStack[this.scopeStack.length - 1];
                    this.parser.addVariable(variable);
                }
            }
            this.addFunction(name, {
                dataType: ctx.returnType.children[1].getText(),
                location: location,
            });
            const scope = {
                file: ctx.start.source[1].name,
                start: ctx.start,
                end: ctx.stop
            };
            this.parser.scopes.push(scope);
            this.scopeStack.push(scope);
        }
    }
    enterConstSubStmt(ctx) {
        this.parser.consts[ctx.name.text] = {
            name: ctx.name.text,
            value: ctx.value.getText(),
            location: {
                startToken: ctx.start,
                stopToken: ctx.stop
            },
            comments: []
        };
    }
    enterVariableListItem(ctx) {
        if (ctx.parentCtx.variableType === null) {
            return;
        }
        const variableType = ctx.parentCtx.variableType.valueType.getText();
        let length = '';
        if (ctx.children.length >= 4) {
            length = ctx.children[2].getText();
        }
        const name = ctx.children[0].symbol.text;
        const variable = {
            name: name,
            value: '',
            length: length,
            dataType: variableType,
            location: {
                startToken: ctx.start,
                stopToken: ctx.start
            },
            references: [],
            comments: []
        };
        variable.parentScope = this.scopeStack[this.scopeStack.length - 1];
        this.parser.addVariable(variable);
    }
    enterParam(ctx) {
        if (ctx.parentCtx.parentCtx.ruleIndex == TibboBasicParser.RULE_declareSubStmt ||
            ctx.parentCtx.parentCtx.ruleIndex == TibboBasicParser.RULE_declareFuncStmt) {
            return;
        }
        let valueType = 'void';
        let length = '';
        ctx.children.forEach(element => {
            if (element.ruleIndex == TibboBasicParser.RULE_asTypeClause) {
                valueType = element.valueType.getText();
                if (element.children.length >= 4) {
                    length = element.children[2].getText();
                }
            }
        });
        const variable = {
            name: ctx.name.text,
            value: '',
            length: length,
            dataType: valueType,
            location: {
                startToken: ctx.name,
                stopToken: ctx.name
            },
            references: [],
            comments: []
        };
        const param = {
            name: ctx.name.text,
            dataType: valueType,
            byref: ctx.byref != null
        };
        this.parser.addVariable(variable);
        if (ctx.parentCtx.parentCtx.ruleIndex == TibboBasicParser.RULE_subStmt) {
            this.parser.functions[ctx.parentCtx.parentCtx.name.text].parameters.push(param);
        }
        if (ctx.parentCtx.parentCtx.ruleIndex == TibboBasicParser.RULE_functionStmt) {
            this.parser.functions[ctx.parentCtx.parentCtx.name.text].parameters.push(param);
        }
        if (ctx.parentCtx.parentCtx.ruleIndex == TibboBasicParser.RULE_syscallDeclarationInner) {
            const objName = ctx.parentCtx.parentCtx.object;
            if (objName) {
                const obj = this.parser.objects[ctx.parentCtx.parentCtx.children[0].symbol.text];
                const prop = ctx.parentCtx.parentCtx.children[2].symbol.text;
                for (let i = 0; i < obj.functions.length; i++) {
                    if (obj.functions[i].name == prop) {
                        obj.functions[i].parameters.push(param);
                        break;
                    }
                }
            }
            else {
                this.parser.syscalls[ctx.parentCtx.parentCtx.children[0].symbol.text].parameters.push(param);
            }
        }
    }
    enterBlockIfThenElse(ctx) {
        const scope = {
            file: ctx.start.source[1].name,
            start: ctx.start,
            end: ctx.stop,
            parentScope: this.scopeStack[this.scopeStack.length - 1]
        };
        this.parser.scopes.push(scope);
        this.scopeStack.push(scope);
    }
    exitBlockIfThenElse(ctx) {
        this.scopeStack.pop();
    }
    enterDeclareSubStmt(ctx) {
        const name = ctx.children[2].symbol.text;
        this.addFunction(name, {
            declaration: {
                startToken: ctx.start,
                stopToken: ctx.start
            },
        });
    }
    enterDeclareFuncStmt(ctx) {
        const name = ctx.children[2].symbol.text;
        this.addFunction(name, {
            declaration: {
                startToken: ctx.start,
                stopToken: ctx.start
            }
        });
    }
    enterInlineIfThenElse(ctx) {
        const scope = {
            file: ctx.start.source[1].name,
            start: ctx.start.start,
            end: ctx.stop.stop,
            parentScope: this.scopeStack[this.scopeStack.length - 1]
        };
        this.parser.scopes.push(scope);
        this.scopeStack.push(scope);
    }
    exitInlineIfThenElse(ctx) {
        this.scopeStack.pop();
    }
    enterTypeStmt(ctx) {
        const name = ctx.children[1].getText();
        const members = [];
        for (let i = 0; i < ctx.children.length; i++) {
            if (ctx.children[i].ruleIndex == TibboBasicParser.RULE_typeStmtElement) {
                const item = ctx.children[i];
                const varName = item.children[0].getText();
                let dataType = '';
                const length = '';
                let asType = item.children[1];
                for (let j = 0; j < item.children.length; j++) {
                    if (item.children[j].ruleIndex && item.children[j].ruleIndex == TibboBasicParser.RULE_asTypeClause) {
                        asType = item.children[j];
                        break;
                    }
                }
                dataType = asType.children[1].getText();
                const variable = {
                    name: varName,
                    value: '',
                    length: length,
                    dataType: dataType,
                    location: {
                        startToken: item.start,
                        stopToken: item.start
                    },
                    references: [],
                    comments: []
                };
                members.push(variable);
            }
        }
        this.parser.types[name] = {
            name: name,
            members: members,
            location: {
                startToken: ctx.start,
                stopToken: ctx.start
            },
            comments: []
        };
    }
    enterEventDeclaration(ctx) {
        const name = ctx.name.text;
        const params = [];
        this.parser.events[name] = {
            name: name,
            eventNumber: ctx.number,
            parameters: params,
            location: {
                startToken: ctx.start,
                stopToken: ctx.start
            },
            comments: []
        };
    }
    getComments(ctx) {
        let comments = '';
        if (ctx && ctx.children) {
            for (let i = 0; i < ctx.children.length; i++) {
                comments += ctx.children[i].getText().substring(1);
            }
        }
        return comments;
    }
    enterPrimaryExpression(ctx) {
        for (let i = 0; i < ctx.children.length; i++) {
            let item = ctx.children[i];
            if (item.ruleIndex == TibboBasicParser.RULE_literal && item.start.type == TibboBasicParser.IDENTIFIER) {
                let location = {
                    startToken: ctx.start,
                    stopToken: ctx.start
                };
                let symbolName = item.start.text;
                // this.addSymbolReference(symbolName, location);
                // this.addFunction(symbolName, {});
                // this.parser.functions[symbolName].references.push(location);
            }
        }
    }
    enterExpression(ctx) {
        if (!ctx.children) {
            return;
        }
        for (let i = 0; i < ctx.children.length; i++) {
            let item = ctx.children[i];
            if (item.ruleIndex == TibboBasicParser.RULE_literal && item.start.type == TibboBasicParser.IDENTIFIER) {
                let symbolName = item.start.text;
                console.log(symbolName);
            }
            // console.log(ctx.getText());
        }
    }
    addFunction(name, func) {
        if (name != undefined) {
            if (this.parser.functions[name] == undefined) {
                this.parser.functions[name] = {
                    name: name,
                    parameters: [],
                    comments: [],
                    references: []
                };
            }
        }
        for (const key in func) {
            this.parser.functions[name][key] = func[key];
        }
    }
    addSymbolReference(name, location) {
    }
}


/***/ }),

/***/ "./src/html2markdown/html2markdown.js":
/*!********************************************!*\
  !*** ./src/html2markdown/html2markdown.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * html2markdown - An HTML to Markdown converter.
 *
 * This implementation uses HTML or DOM parsing for conversion. Parsing code was
 * abstracted out in a parsing function which should be easy to remove in favor
 * of other parsing libraries.
 *
 * Converted MarkDown was tested with ShowDown library for HTML rendering. And
 * it tries to create MarkDown that does not confuse ShowDown when certain
 * combination of HTML tags come together.
 *
 * @author Himanshu Gilani
 * @author Kates Gasis (original author)
 *
 */

/**
 * html2markdown
 * @param html - html string to convert
 * @return converted markdown text
 */

/*
 Universal JavaScript Module, supports AMD (RequireJS), Node.js, and the browser.
 https://gist.github.com/kirel/1268753
*/

(function (name, definition) {
	if (true) { // AMD
		!(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else { var theModule, global, old; }
})('html2markdown', function() {

function trim(value) {
	return value.replace(/^\s+|\s+$/g,"");
}

function endsWith(value, suffix) {
	return value.match(suffix+"$") == suffix;
}

function startsWith(value, str) {
	return value.indexOf(str) == 0;
}

function html2markdown(html, opts) {
	opts = opts || {};

	var nodeList = [];
	var listTagStack = [];
	var linkAttrStack = [];
	var blockquoteStack = [];
	var preStack = [];
	var codeStack = [];
	var links = [];
	var inlineStyle = opts['inlineStyle'] || false;
	var parser = opts['parser'];
	var markdownTags = {
		"hr": "- - -\n\n",
		"br": "  \n",
		"title": "# ",
		"h1": "# ",
		"h2": "## ",
		"h3": "### ",
		"h4": "#### ",
		"h5": "##### ",
		"h6": "###### ",
		"b": "**",
		"strong": "**",
		"i": "_",
		"em": "_",
		"dfn": "_",
		"var": "_",
		"cite": "_",
		"span": " ",
		"ul": "* ",
		"ol": "1. ",
		"dl": "- ",
		"blockquote": "> "
	};

	if (!parser && typeof markdownDOMParser !== 'undefined') {
		parser = markdownDOMParser;
	}

	function getListMarkdownTag() {
		var listItem = "";
		if (listTagStack) {
			for (var i = 0; i < listTagStack.length - 1; i++) {
				listItem += "  ";
			}
		}
		listItem += peek(listTagStack);
		return listItem;
	}

	function convertAttrs(attrs) {
		var attributes = {};
		for (var k in attrs) {
			var attr = attrs[k];
			attributes[attr.name] = attr;
		}
		return attributes;
	}

	function peek(list) {
		if (list && list.length > 0) {
			return list.slice(-1)[0];
		}
		return "";
	}

	function peekTillNotEmpty(list) {
		if (!list) {
			return "";
		}

		for (var i = list.length - 1; i >= 0; i--){
			if (list[i] != "") {
				return list[i];
			}
		}
		return "";
	}

	function removeIfEmptyTag(start) {
		var cleaned = false;
		if (start == peekTillNotEmpty(nodeList)) {
			while (peek(nodeList) != start) {
				nodeList.pop();
			}
			nodeList.pop();
			cleaned = true;
		}
		return cleaned;
	}

	function sliceText(start) {
		var text = [];
		while (nodeList.length > 0 && peek(nodeList) != start) {
			var t = nodeList.pop();
			text.unshift(t);
		}
		return text.join("");
	}

	function block(isEndBlock) {
		var lastItem = nodeList.pop();
		if (!lastItem) {
			return;
		}

		if (!isEndBlock) {
			var block;
			if (/\s*\n\n\s*$/.test(lastItem)) {
				lastItem = lastItem.replace(/\s*\n\n\s*$/, "\n\n");
				block = "";
			} else if (/\s*\n\s*$/.test(lastItem)) {
				lastItem = lastItem.replace(/\s*\n\s*$/, "\n");
				block = "\n";
			} else if (/\s+$/.test(lastItem)) {
				block = "\n\n";
			} else {
				block = "\n\n";
			}

			nodeList.push(lastItem);
			nodeList.push(block);
		} else {
			nodeList.push(lastItem);
			if (!endsWith(lastItem, "\n")) {
				nodeList.push("\n\n");
			}
		}
	}

	function listBlock() {
		if (nodeList.length > 0) {
			var li = peek(nodeList);

			if (!endsWith(li, "\n")) {
				nodeList.push("\n");
			}
		} else {
			nodeList.push("\n");
		}
	}

	parser(html, {
		start: function(tag, attrs, unary) {
			tag = tag.toLowerCase();

			if (unary && (tag != "br" && tag != "hr" && tag != "img")) {
				return;
			}

			switch (tag) {
			case "br":
				nodeList.push(markdownTags[tag]);
				break;
			case "hr":
				block();
				nodeList.push(markdownTags[tag]);
				break;
			case "title":
			case "h1":
			case "h2":
			case "h3":
			case "h4":
			case "h5":
			case "h6":
				block();
				nodeList.push(markdownTags[tag]);
				break;
			case "b":
			case "strong":
			case "i":
			case "em":
			case "dfn":
			case "var":
			case "cite":
				nodeList.push(markdownTags[tag]);
				break;
			case "code":
			case "span":
				if (preStack.length > 0) {
					break;
				} else if (!/\s+$/.test(peek(nodeList))) {
					nodeList.push(markdownTags[tag]);
				}
				break;
			case "p":
			case "div":
			case "table":
			case "tbody":
			case "tr":
			case "td":
				block();
				break;
			case "ul":
			case "ol":
			case "dl":
				listTagStack.push(markdownTags[tag]);
				// lists are block elements
				if (listTagStack.length > 1) {
					listBlock();
				} else {
					block();
				}
				break;
			case "li":
			case "dt":
				var li = getListMarkdownTag();
				nodeList.push(li);
				break;
			case "a":
				var attribs = convertAttrs(attrs);
				linkAttrStack.push(attribs);
				nodeList.push("[");
				break;
			case "img":
				var attribs = convertAttrs(attrs);
				var alt, title, url;

				attribs["src"] ? url = attribs["src"].value : url = "";
				if (!url) {
					break;
				}

				attribs['alt'] ? alt = trim(attribs['alt'].value) : alt = "";
				attribs['title'] ? title = trim(attribs['title'].value) : title = "";

				// if parent of image tag is nested in anchor tag use inline style
				if (!inlineStyle && !startsWith(peekTillNotEmpty(nodeList), "[")) {
					var l = links.indexOf(url);
					if (l == -1) {
						links.push(url);
						l=links.length-1;
					}

					block();
					nodeList.push("![");
					if (alt!= "") {
						nodeList.push(alt);
					} else if (title != null) {
						nodeList.push(title);
					}

					nodeList.push("][" + l + "]");
					block();
				} else {
					//if image is not a link image then treat images as block elements
					if (!startsWith(peekTillNotEmpty(nodeList), "[")) {
						block();
					}

					nodeList.push("![" + alt + "](" + url + (title ? " \"" + title + "\"" : "") + ")");

					if (!startsWith(peekTillNotEmpty(nodeList), "[")) {
						block(true);
					}
				}
				break;
			case "blockquote":
				//listBlock();
				block();
				blockquoteStack.push(markdownTags[tag]);
				break;
			case "pre":
				block();
				preStack.push(true);
				nodeList.push("    ");
				break;
			case "table":
				nodeList.push("<table>");
				break;
			case "thead":
				nodeList.push("<thead>");
				break;
			case "tbody":
				nodeList.push("<tbody>");
				break;
			case "tr":
				nodeList.push("<tr>");
				break;
			case "td":
				nodeList.push("<td>");
				break;
			}
		},
		chars: function(text) {
			if (preStack.length > 0) {
				text = text.replace(/\n/g,"\n    ");
			} else if (trim(text) != "") {
				text = text.replace(/\s+/g, " ");

				var prevText = peekTillNotEmpty(nodeList);
				if (/\s+$/.test(prevText)) {
					text = text.replace(/^\s+/g, "");
				}
			} else {
				nodeList.push("");
				return;
			}

			//if(blockquoteStack.length > 0 && peekTillNotEmpty(nodeList).endsWith("\n")) {
			if (blockquoteStack.length > 0) {
				nodeList.push(blockquoteStack.join(""));
			}

			nodeList.push(text);
		},
		end: function(tag) {
			tag = tag.toLowerCase();

		switch (tag) {
			case "title":
			case "h1":
			case "h2":
			case "h3":
			case "h4":
			case "h5":
			case "h6":
				if(!removeIfEmptyTag(markdownTags[tag])) {
					block(true);
				}
				break;
			case "p":
			case "div":
			case "table":
			case "tbody":
			case "tr":
			case "td":
				while(nodeList.length > 0 && trim(peek(nodeList)) == "") {
					nodeList.pop();
				}
				block(true);
				break;
			case "b":
			case "strong":
			case "i":
			case "em":
			case "dfn":
			case "var":
			case "cite":
				if (!removeIfEmptyTag(markdownTags[tag])) {
					nodeList.push(trim(sliceText(markdownTags[tag])));
					nodeList.push(markdownTags[tag]);
				}
				break;
			case "a":
				var text = sliceText("[");
				text = text.replace(/\s+/g, " ");
				text = trim(text);

				if (text == "") {
					nodeList.pop();
					break;
				}

				var attrs = linkAttrStack.pop();
				var url;
				attrs["href"] &&  attrs["href"].value != "" ? url = attrs["href"].value : url = "";

				if (url == "") {
					nodeList.pop();
					nodeList.push(text);
					break;
				}

				nodeList.push(text);

				if (!inlineStyle && !startsWith(peek(nodeList), "!")){
					var l = links.indexOf(url);
					if (l == -1) {
						links.push(url);
						l=links.length-1;
					}
					nodeList.push("][" + l + "]");
				} else {
					if(startsWith(peek(nodeList), "!")){
						var text = nodeList.pop();
						text = nodeList.pop() + text;
						block();
						nodeList.push(text);
					}

					var title = attrs["title"];
					nodeList.push("](" + url + (title ? " \"" + trim(title.value).replace(/\s+/g, " ") + "\"" : "") + ")");

					if(startsWith(peek(nodeList), "!")){
						block(true);
					}
				}
				break;
			case "ul":
			case "ol":
			case "dl":
				listBlock();
				listTagStack.pop();
				break;
			case "li":
			case "dt":
				var li = getListMarkdownTag();
				if (!removeIfEmptyTag(li)) {
					var text = trim(sliceText(li));

					if (startsWith(text, "[![")) {
						nodeList.pop();
						block();
						nodeList.push(text);
						block(true);
					} else {
						nodeList.push(text);
						listBlock();
					}
				}
				break;
			case "blockquote":
				blockquoteStack.pop();
				break;
			case "pre":
				//uncomment following experimental code to discard line numbers when syntax highlighters are used
				//notes this code thorough testing before production user
				/*
				var p=[];
				var flag = true;
				var count = 0, whiteSpace = 0, line = 0;
				console.log(">> " + peek(nodeList));
				while(peek(nodeList).startsWith("    ") || flag == true)
				{
					//console.log('inside');
					var text = nodeList.pop();
					p.push(text);

					if(flag == true && !text.startsWith("    ")) {
						continue;
					} else {
						flag = false;
					}

					//var result = parseInt(text.trim());
					if(!isNaN(text.trim())) {
						count++;
					} else if(text.trim() == ""){
						whiteSpace++;
					} else {
						line++;
					}
					flag = false;
				}

				console.log(line);
				if(line != 0)
				{
					while(p.length != 0) {
						nodeList.push(p.pop());
					}
				}
				*/
				block(true);
				preStack.pop();
				break;
			case "code":
			case "span":
				if (preStack.length > 0) {
					break;
				} else if (trim(peek(nodeList)) == "") {
					nodeList.pop();
					nodeList.push(markdownTags[tag]);
				} else {
					var text = nodeList.pop();
					nodeList.push(trim(text));
					nodeList.push(markdownTags[tag]);
				}
				break;
			case "table":
				nodeList.push("</table>");
				break;
			case "thead":
				nodeList.push("</thead>");
				break;
			case "tbody":
				nodeList.push("</tbody>");
				break;
			case "tr":
				nodeList.push("</tr>");
				break;
			case "td":
				nodeList.push("</td>");
				break;
			case "br":
			case "hr":
			case "img":
				break;
			}

		}
	}, {"nodesToIgnore": ["script", "noscript", "object", "iframe", "frame", "head", "style", "label"]});

	if (!inlineStyle) {
		for (var i = 0; i < links.length; i++) {
			if (i == 0) {
				var lastItem = nodeList.pop();
				nodeList.push(lastItem.replace(/\s+$/g, ""));
				nodeList.push("\n\n[" + i + "]: " + links[i]);
			} else {
				nodeList.push("\n[" + i + "]: " + links[i]);
			}
		}
	}

	return nodeList.join("");

}

return html2markdown;

});


/***/ }),

/***/ "./src/html2markdown/index.js":
/*!************************************!*\
  !*** ./src/html2markdown/index.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var html2markdown = __webpack_require__(/*! ./html2markdown */ "./src/html2markdown/html2markdown.js");
var htmlParser = __webpack_require__(/*! ./markdown_html_parser */ "./src/html2markdown/markdown_html_parser.js");

module.exports = function(html, opts) {
  opts = opts || {};
  opts.parser = htmlParser;
  return html2markdown(html, opts);
};

/***/ }),

/***/ "./src/html2markdown/markdown_html_parser.js":
/*!***************************************************!*\
  !*** ./src/html2markdown/markdown_html_parser.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
 * HTML Parser By John Resig (ejohn.org)
 * Original code by Erik Arvidsson, Mozilla Public License
 * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
 *
 * // Use like so:
 * HTMLParser(htmlString, {
 *     start: function(tag, attrs, unary) {},
 *     end: function(tag) {},
 *     chars: function(text) {},
 *     comment: function(text) {}
 * });
 *
 * // or to get an XML string:
 * HTMLtoXML(htmlString);
 *
 * // or to get an XML DOM Document
 * HTMLtoDOM(htmlString);
 *
 * // or to inject into an existing document/DOM node
 * HTMLtoDOM(htmlString, document);
 * HTMLtoDOM(htmlString, document.body);
 *
 */

/*
 Universal JavaScript Module, supports AMD (RequireJS), Node.js, and the browser.
 https://gist.github.com/kirel/1268753
*/

(function (name, definition) {
	if (true) { // AMD
		!(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else { var theModule, global, old; }
})('markdownHTMLParser', function () {

	// Regular Expressions for parsing tags and attributes
	var startTag = /^<(\w+)((?:\s+\w+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)>/,
		endTag = /^<\/(\w+)[^>]*>/,
		attr = /(\w+)(?:\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|([^>\s]+)))?/g;

	// Empty Elements - HTML 4.01
	var empty = makeMap("area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed");

	// Block Elements - HTML 4.01
	var block = makeMap("address,applet,blockquote,button,center,dd,del,dir,div,dl,dt,fieldset,form,frameset,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,p,pre,script,table,tbody,td,tfoot,th,thead,tr,ul");

	// Inline Elements - HTML 4.01
	var inline = makeMap("a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,textarea,tt,u,var");

	// Elements that you can, intentionally, leave open
	// (and which close themselves)
	var closeSelf = makeMap("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr");

	// Attributes that have their values filled in disabled="disabled"
	var fillAttrs = makeMap("checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected");

	// Special Elements (can contain anything)
	var special = makeMap("script,style");

	function HTMLParser(html, handler) {
		var index, chars, match, stack = [], last = html;
		stack.last = function () {
			return this[this.length - 1];
		};

		while (html) {
			chars = true;

			// Make sure we're not in a script or style element
			if (!stack.last() || !special[stack.last()]) {

				// Comment
				if (html.indexOf("<!--") == 0) {
					index = html.indexOf("-->");

					if (index >= 0) {
						if (handler.comment)
							handler.comment(html.substring(4, index));
						html = html.substring(index + 3);
						chars = false;
					}

					// end tag
				} else if (html.indexOf("</") == 0) {
					match = html.match(endTag);

					if (match) {
						html = html.substring(match[0].length);
						match[0].replace(endTag, parseEndTag);
						chars = false;
					}

					// start tag
				} else if (html.indexOf("<") == 0) {
					match = html.match(startTag);

					if (match) {
						html = html.substring(match[0].length);
						match[0].replace(startTag, parseStartTag);
						chars = false;
					}
				}

				if (chars) {
					index = html.indexOf("<");
					if (index == 0) {
						index++;
					}

					var text = index < 0 ? html : html.substring(0, index);
					html = index < 0 ? "" : html.substring(index);

					if (handler.chars)
						handler.chars(text);
				}

			} else {
				html = html.replace(new RegExp("(.*)<\/" + stack.last() + "[^>]*>"), function (all, text) {
					text = text.replace(/<!--(.*?)-->/g, "$1")
						.replace(/<!\[CDATA\[(.*?)]]>/g, "$1");

					if (handler.chars)
						handler.chars(text);

					return "";
				});

				parseEndTag("", stack.last());
			}

			if (html == last)
				throw "Parse Error: " + html;
			last = html;
		}

		// Clean up any remaining tags
		parseEndTag();

		function parseStartTag(tag, tagName, rest, unary) {
			if (block[tagName]) {
				while (stack.last() && inline[stack.last()]) {
					parseEndTag("", stack.last());
				}
			}

			if (closeSelf[tagName] && stack.last() == tagName) {
				parseEndTag("", tagName);
			}

			unary = empty[tagName] || !!unary;

			if (!unary)
				stack.push(tagName);

			if (handler.start) {
				var attrs = [];

				rest.replace(attr, function (match, name) {
					var value = arguments[2] ? arguments[2] :
						arguments[3] ? arguments[3] :
							arguments[4] ? arguments[4] :
								fillAttrs[name] ? name : "";

					attrs.push({
						name: name,
						value: value,
						escaped: value.replace(/(^|[^\\])"/g, '$1\\\"') //"
					});
				});

				if (handler.start)
					handler.start(tagName, attrs, unary);
			}
		}

		function parseEndTag(tag, tagName) {
			// If no tag name is provided, clean shop
			if (!tagName)
				var pos = 0;

			// Find the closest opened tag of the same type
			else
				for (var pos = stack.length - 1; pos >= 0; pos--)
					if (stack[pos] == tagName)
						break;

			if (pos >= 0) {
				// Close all the open elements, up the stack
				for (var i = stack.length - 1; i >= pos; i--)
					if (handler.end)
						handler.end(stack[i]);

				// Remove the open elements from the stack
				stack.length = pos;
			}
		}
	};
	if (this) {
		this.HTMLtoXML = function (html) {
			var results = "";

			HTMLParser(html, {
				start: function (tag, attrs, unary) {
					results += "<" + tag;

					for (var i = 0; i < attrs.length; i++)
						results += " " + attrs[i].name + '="' + attrs[i].escaped + '"';

					results += (unary ? "/" : "") + ">";
				},
				end: function (tag) {
					results += "</" + tag + ">";
				},
				chars: function (text) {
					results += text;
				},
				comment: function (text) {
					results += "<!--" + text + "-->";
				}
			});

			return results;
		};

		this.HTMLtoDOM = function (html, doc) {
			// There can be only one of these elements
			var one = makeMap("html,head,body,title");

			// Enforce a structure for the document
			var structure = {
				link: "head",
				base: "head"
			};

			if (!doc) {
				if (typeof DOMDocument != "undefined")
					doc = new DOMDocument();
				else if (typeof document != "undefined" && document.implementation && document.implementation.createDocument)
					doc = document.implementation.createDocument("", "", null);
				else if (typeof ActiveX != "undefined")
					doc = new ActiveXObject("Msxml.DOMDocument");

			} else
				doc = doc.ownerDocument ||
					doc.getOwnerDocument && doc.getOwnerDocument() ||
					doc;

			var elems = [],
				documentElement = doc.documentElement ||
					doc.getDocumentElement && doc.getDocumentElement();

			// If we're dealing with an empty document then we
			// need to pre-populate it with the HTML document structure
			if (!documentElement && doc.createElement) (function () {
				var html = doc.createElement("html");
				var head = doc.createElement("head");
				head.appendChild(doc.createElement("title"));
				html.appendChild(head);
				html.appendChild(doc.createElement("body"));
				doc.appendChild(html);
			})();

			// Find all the unique elements
			if (doc.getElementsByTagName)
				for (var i in one)
					one[i] = doc.getElementsByTagName(i)[0];

			// If we're working with a document, inject contents into
			// the body element
			var curParentNode = one.body;

			HTMLParser(html, {
				start: function (tagName, attrs, unary) {
					// If it's a pre-built element, then we can ignore
					// its construction
					if (one[tagName]) {
						curParentNode = one[tagName];
						return;
					}

					var elem = doc.createElement(tagName);

					for (var attr in attrs)
						elem.setAttribute(attrs[attr].name, attrs[attr].value);

					if (structure[tagName] && typeof one[structure[tagName]] != "boolean")
						one[structure[tagName]].appendChild(elem);

					else if (curParentNode && curParentNode.appendChild)
						curParentNode.appendChild(elem);

					if (!unary) {
						elems.push(elem);
						curParentNode = elem;
					}
				},
				end: function (tag) {
					elems.length -= 1;

					// Init the new parentNode
					curParentNode = elems[elems.length - 1];
				},
				chars: function (text) {
					curParentNode.appendChild(doc.createTextNode(text));
				},
				comment: function (text) {
					// create comment node
				}
			});

			return doc;
		};
	}

	function makeMap(str) {
		var obj = {}, items = str.split(",");
		for (var i = 0; i < items.length; i++)
			obj[items[i]] = true;
		return obj;
	}

	return HTMLParser;

});

/***/ }),

/***/ "./src/server.ts":
/*!***********************!*\
  !*** ./src/server.ts ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscode_languageserver_1 = __webpack_require__(/*! vscode-languageserver */ "./node_modules/vscode-languageserver/lib/node/main.js");
const node_1 = __webpack_require__(/*! vscode-languageserver/node */ "./node_modules/vscode-languageserver/node.js");
const TibboBasicDocumentFormatter_1 = __webpack_require__(/*! ./TibboBasicDocumentFormatter */ "./src/TibboBasicDocumentFormatter.ts");
const fs = __webpack_require__(/*! fs */ "fs");
const path = __webpack_require__(/*! path */ "path");
const ini = __webpack_require__(/*! ini */ "./node_modules/ini/ini.js");
const TibboBasicPreprocessor_1 = __webpack_require__(/*! ./TibboBasicPreprocessor */ "./src/TibboBasicPreprocessor.ts");
const TibboBasicProjectParser_1 = __webpack_require__(/*! ./TibboBasicProjectParser */ "./src/TibboBasicProjectParser.ts");
const types_1 = __webpack_require__(/*! ./types */ "./src/types.ts");
const vscode_languageserver_textdocument_1 = __webpack_require__(/*! vscode-languageserver-textdocument */ "./node_modules/vscode-languageserver-textdocument/lib/esm/main.js");
const rpc = __webpack_require__(/*! vscode-jsonrpc */ "./node_modules/vscode-jsonrpc/lib/node/main.js");
const TibboBasicParser = __webpack_require__(/*! ../language/TibboBasic/lib/TibboBasicParser */ "./language/TibboBasic/lib/TibboBasicParser.js").TibboBasicParser;
// const turndownService = new TurndownService();
const supportedFileTypes = ['.tbs', '.tbh', '.tph'];
const html2markdown = __webpack_require__(/*! ./html2markdown */ "./src/html2markdown/index.js");
// const TIBBOBASIC = 'tibbo-basic';
// Create a connection for the server. The connection uses Node's IPC as a transport.
// Also include all preview / proposed LSP features.
const connection = node_1.createConnection(vscode_languageserver_1.ProposedFeatures.all);
const tbFormatter = new TibboBasicDocumentFormatter_1.default();
const VALIDATE_INTERVAL = 1500;
// Create a simple text document manager. The text document manager
// supports full document sync only
const documents = new vscode_languageserver_1.TextDocuments(vscode_languageserver_textdocument_1.TextDocument);
let hasConfigurationCapability = false;
let hasWorkspaceFolderCapability = false;
let workspaceRoot = '';
// let platformType: string = '';
let platformPreprocessor;
let platformProjectParser;
let preprocessor;
let projectParser;
const fileEdits = {};
let PLATFORMS_PATH = 'Platforms';
let tprPath = '';
let parsing = false;
let needsUpdate = false;
let platformsChanged = true;
const PROJECT_EXPLORER_EVENTS = 'Events';
const PROJECT_EXPLORER_PROJECT = 'Project';
const PROJECT_EXPLORER_LIBRARIES = 'Libraries';
const PROJECT_EXPLORER_PLATFORM = 'Platform';
let rootItems = [];
connection.onInitialize(async (params) => {
    const capabilities = params.capabilities;
    if (params.rootPath) {
        workspaceRoot = params.rootPath;
    }
    PLATFORMS_PATH = path.join(workspaceRoot, PLATFORMS_PATH);
    // Does the client support the `workspace/configuration` request?
    // If not, we will fall back using global settings
    hasConfigurationCapability = !!(capabilities.workspace && !!capabilities.workspace.configuration);
    hasWorkspaceFolderCapability = !!(capabilities.workspace && !!capabilities.workspace.workspaceFolders);
    if (!fs.existsSync(PLATFORMS_PATH)) {
        if (params.initializationOptions != undefined) {
            if (params.initializationOptions.platformsPath != undefined && params.initializationOptions.platformsPath != '') {
                PLATFORMS_PATH = params.initializationOptions.platformsPath;
            }
        }
    }
    if (workspaceRoot) {
        fs.readdirSync(workspaceRoot).forEach(file => {
            const ext = path.extname(file);
            if (ext == '.tpr') {
                if (workspaceRoot) {
                    tprPath = path.join(workspaceRoot, file);
                }
            }
        });
    }
    if (tprPath == '') {
        return {
            capabilities: {}
        };
    }
    await new Promise((resolve, reject) => {
        preprocessor = new TibboBasicPreprocessor_1.default(workspaceRoot, PLATFORMS_PATH);
        projectParser = new TibboBasicProjectParser_1.default();
        resolve();
    });
    setInterval(async () => {
        await new Promise((resolve, reject) => {
            validateTextDocument();
            resolve();
        });
    }, VALIDATE_INTERVAL);
    validateTextDocument();
    return {
        capabilities: {
            textDocumentSync: vscode_languageserver_1.TextDocumentSyncKind.Full,
            // Tell the client that the server supports code completion
            completionProvider: {
                resolveProvider: true,
                triggerCharacters: [
                    '.',
                    '=',
                    '(',
                    ','
                ]
            },
            documentFormattingProvider: true,
            hoverProvider: true,
            definitionProvider: true,
            documentSymbolProvider: true,
            renameProvider: {
                prepareProvider: true
            },
            declarationProvider: true,
            referencesProvider: true,
            signatureHelpProvider: {
                triggerCharacters: ['('],
                retriggerCharacters: [',']
            }
        }
    };
});
connection.onInitialized(async (params) => {
    if (hasConfigurationCapability) {
        // Register for all configuration changes.
        connection.client.register(vscode_languageserver_1.DidChangeConfigurationNotification.type, undefined);
    }
    if (hasWorkspaceFolderCapability) {
        connection.workspace.onDidChangeWorkspaceFolders(_event => {
            // connection.console.log('Workspace folder change event received.');
        });
    }
});
// The example settings
// interface ExampleSettings {
// 	maxNumberOfProblems: number;
// }
// The global settings, used when the `workspace/configuration` request is not supported by the client.
// Please note that this is not the case when using this server with the client provided in this example
// but could happen with other clients.
// const defaultSettings: ExampleSettings = { maxNumberOfProblems: 1000 };
// let globalSettings: ExampleSettings = defaultSettings;
// Cache the settings of all open documents
// let documentSettings: Map<string, Thenable<ExampleSettings>> = new Map();
connection.onDidChangeConfiguration(change => {
    if (hasConfigurationCapability) {
        // Reset all cached document settings
        // documentSettings.clear();
    }
    else {
        // globalSettings = <ExampleSettings>(
        // 	(change.settings.languageServerExample || defaultSettings)
        // );
    }
    // Revalidate all open text documents
    // documents.all().forEach(validateTextDocument);
});
// function getDocumentSettings(resource: string): Thenable<ExampleSettings> {
// 	if (!hasConfigurationCapability) {
// 		return Promise.resolve(globalSettings);
// 	}
// 	let result = documentSettings.get(resource);
// 	if (!result) {
// 		result = connection.workspace.getConfiguration({
// 			scopeUri: resource,
// 			section: 'tibbo-basic'
// 		});
// 		documentSettings.set(resource, result);
// 	}
// 	return result;
// }
// Only keep settings for open documents
documents.onDidClose(e => {
    // documentSettings.delete(e.document.uri);
});
// The content of a text document has changed. This event is emitted
// when the text document first opened or when its content has changed.
documents.onDidChangeContent(change => {
    try {
        const text = change.document.getText();
        const textDocument = change.document;
        const currentFilePath = getFileName(textDocument.uri);
        const ext = path.extname(currentFilePath);
        if (preprocessor.originalFiles[currentFilePath] != text) {
            fileEdits[currentFilePath] = text;
        }
        if (!platformsChanged && preprocessor && preprocessor.originalFiles) {
            if (ext == '.tpr') {
                platformsChanged = true;
                needsUpdate = true;
            }
        }
        if (platformsChanged) {
            needsUpdate = true;
        }
    }
    catch (ex) {
        connection.console.log(ex);
    }
});
function validateTextDocument() {
    // In this simple example we get the settings for every validate run.
    // let settings = await getDocumentSettings(textDocument.uri);
    // The validator creates diagnostics for all uppercase words length 2 and more
    // let problems = 0;
    let updated = false;
    for (const key in fileEdits) {
        updated = true;
        const currentFilePath = key;
        const text = fileEdits[key];
        const dirName = path.dirname(currentFilePath);
        const tmpPreprocessor1 = new TibboBasicPreprocessor_1.default(workspaceRoot, PLATFORMS_PATH);
        const tmpPreprocessor2 = new TibboBasicPreprocessor_1.default(workspaceRoot, PLATFORMS_PATH);
        tmpPreprocessor1.originalFiles[currentFilePath] = preprocessor.originalFiles[currentFilePath];
        tmpPreprocessor2.originalFiles[currentFilePath] = text;
        tmpPreprocessor1.parseFile(dirName, path.basename(currentFilePath), true);
        tmpPreprocessor2.parseFile(dirName, path.basename(currentFilePath), true);
        if (JSON.stringify(tmpPreprocessor1.defines) != JSON.stringify(tmpPreprocessor2.defines)) {
            needsUpdate = true;
            preprocessor.originalFiles[currentFilePath] = text;
        }
        delete fileEdits[key];
        if (!needsUpdate) {
            preprocessor.originalFiles[currentFilePath] = text;
            preprocessor.parseFile(dirName, path.basename(currentFilePath), true);
            projectParser.parseFile(currentFilePath, text);
        }
    }
    if (updated) {
        notifyDiagnostics();
        getProjectStructure();
        projectParser.constructComments();
    }
    if (parsing || !needsUpdate) {
        return;
    }
    parsing = true;
    const timeStart = new Date().getTime();
    try {
        if (platformsChanged) {
            platformPreprocessor = new TibboBasicPreprocessor_1.default(workspaceRoot, PLATFORMS_PATH);
            platformProjectParser = new TibboBasicProjectParser_1.default();
            platformPreprocessor.parsePlatforms();
            for (const filePath in platformPreprocessor.files) {
                const fileContents = platformPreprocessor.files[filePath];
                platformProjectParser.parseFile(filePath, fileContents);
            }
            platformsChanged = false;
        }
        copyProperties();
        //parse tpr file
        const tpr = ini.parse(fs.readFileSync(tprPath, 'utf-8'));
        const max = 999;
        const dirName = path.dirname(tprPath);
        for (let i = 1; i < max; i++) {
            const entryName = 'file' + i.toString();
            if (tpr[entryName] != undefined) {
                const originalFilePath = tpr[entryName]['path'].split('\\').join(path.sep);
                let filePath = originalFilePath;
                const ext = path.extname(filePath);
                if (!supportedFileTypes.includes(ext)) {
                    continue;
                }
                let directory = dirName;
                if (tpr[entryName]['location'] == 'commonlib') {
                    directory = PLATFORMS_PATH;
                }
                filePath = preprocessor.parseFile(directory, originalFilePath, needsUpdate);
                const fileContents = preprocessor.files[filePath];
                projectParser.parseFile(filePath, fileContents);
            }
            else {
                break;
            }
        }
        projectParser.constructComments();
    }
    catch (ex) {
        connection.console.log(ex.stack);
    }
    finally {
        parsing = false;
        needsUpdate = false;
        const timeEnd = new Date().getTime();
        const secondsElapsed = (timeEnd - timeStart) / 1000;
        notifyDiagnostics();
        connection.console.log(`parsed in ${secondsElapsed} s`);
    }
}
connection.onDidChangeWatchedFiles(_change => {
    // Monitored files have change in VSCode
    // connection.console.log('We received an file change event');
});
connection.onDocumentFormatting(formatParams => {
    const document = documents.get(formatParams.textDocument.uri);
    if (!document) {
        return;
    }
    return tbFormatter.formatDocument(document, formatParams);
});
connection.onCompletion((params) => {
    // const timeStart = new Date().getTime();
    const suggestions = [];
    const document = documents.get(params.textDocument.uri);
    const position = params.position;
    const textDocument = params.textDocument;
    let variableType = '';
    if (!document) {
        return suggestions;
    }
    let offset = document.offsetAt(position);
    const filePath = getFileName(textDocument.uri);
    const scope = projectParser.getScope(filePath, offset);
    const variables = projectParser.getScopeVariables(scope);
    parseFile(textDocument.uri);
    let triggerCharacter = '';
    let token = undefined;
    const MAX_ITERATIONS = 10;
    let index = MAX_ITERATIONS;
    while (token == undefined || index >= 0) {
        token = projectParser.getTokenAtPosition(filePath, offset);
        offset--;
        if (token != undefined) {
            triggerCharacter = token.getText();
            if (triggerCharacter != ')') {
                break;
            }
        }
        index--;
    }
    switch (triggerCharacter) {
        case '=':
            {
                let token = undefined;
                const MAX_ITERATIONS = 5;
                let index = MAX_ITERATIONS;
                while (token == undefined || index >= 0) {
                    token = projectParser.getTokenAtPosition(filePath, offset);
                    if (token != undefined) {
                        const obj = getObjectAtToken(token);
                        if (obj != undefined) {
                            const objProp = getObjectProperty(obj, token.symbol.text);
                            if (objProp != undefined) {
                                const dataType = objProp.dataType;
                                if (projectParser.enums[dataType.toLowerCase()] != undefined) {
                                    const members = projectParser.enums[dataType.toLowerCase()].members;
                                    for (let i = 0; i < members.length; i++) {
                                        suggestions.push({
                                            label: members[i].name.toUpperCase(),
                                            kind: vscode_languageserver_1.CompletionItemKind.EnumMember,
                                            data: getCommentString(members[i].comments)
                                        });
                                    }
                                    break;
                                }
                            }
                        }
                        const varD = getVariable(token.symbol.text, filePath, offset);
                        if (varD != undefined) {
                            variableType = varD.dataType;
                        }
                    }
                    offset--;
                    index--;
                }
            }
            break;
        case '.':
            {
                const token = projectParser.getTokenAtPosition(filePath, offset - 1);
                if (token != undefined) {
                    const obj = projectParser.objects[token.getText()];
                    if (obj != undefined) {
                        obj.functions.forEach(func => {
                            suggestions.push({
                                label: func.name,
                                kind: vscode_languageserver_1.CompletionItemKind.Function,
                                data: getCommentString(func.comments)
                            });
                        });
                        obj.properties.forEach(prop => {
                            suggestions.push({
                                label: prop.name,
                                kind: vscode_languageserver_1.CompletionItemKind.Property,
                                data: getCommentString(prop.comments)
                            });
                        });
                    }
                    const varD = getVariable(token.symbol.text, filePath, offset - 1);
                    if (varD != undefined) {
                        const dataType = varD.dataType;
                        if (projectParser.types[dataType] != undefined) {
                            const dType = projectParser.types[dataType];
                            for (let i = 0; i < dType.members.length; i++) {
                                suggestions.push({
                                    label: dType.members[i].name,
                                    kind: vscode_languageserver_1.CompletionItemKind.Property,
                                    data: getCommentString(dType.members[i].comments)
                                });
                            }
                        }
                    }
                }
            }
            break;
        case '(':
        case ')':
        case ',':
            {
                let commaCount = 0;
                const currentLine = params.position.line;
                offset = document.offsetAt(params.position);
                let cursor = document.positionAt(offset);
                while (cursor.line == currentLine) {
                    const tmpToken = projectParser.getTokenAtPosition(filePath, offset);
                    cursor = document.positionAt(offset);
                    if (tmpToken == undefined) {
                        break;
                    }
                    if ((tmpToken === null || tmpToken === void 0 ? void 0 : tmpToken.symbol.text) == ',') {
                        commaCount++;
                        offset--;
                    }
                    else if ((tmpToken === null || tmpToken === void 0 ? void 0 : tmpToken.symbol.text) == '(') {
                        offset--;
                        cursor = document.positionAt(offset);
                        token = projectParser.getTokenAtPosition(filePath, offset);
                        if (cursor.line != params.position.line || token == undefined) {
                            break;
                        }
                        const text = token.symbol.text;
                        if (token.parentCtx.ruleIndex == TibboBasicParser.RULE_postfixExpression) {
                            const obj = getObjectAtToken(token);
                            if (obj != undefined) {
                                const objFunc = getObjectFunction(obj, token.symbol.text);
                                if (objFunc != undefined && objFunc.parameters[commaCount] != undefined) {
                                    variableType = objFunc.parameters[commaCount].dataType;
                                }
                            }
                        }
                        else if (projectParser.syscalls[text] != undefined) {
                            const syscall = projectParser.syscalls[text];
                            if (syscall.parameters[commaCount] != undefined) {
                                variableType = syscall.parameters[commaCount].dataType;
                            }
                        }
                        else if (projectParser.functions[text] != undefined) {
                            const func = projectParser.functions[text];
                            if (func.parameters[commaCount] != undefined) {
                                variableType = func.parameters[commaCount].dataType;
                            }
                        }
                        break;
                    }
                    else {
                        offset = (tmpToken === null || tmpToken === void 0 ? void 0 : tmpToken.symbol.start) - 1;
                    }
                }
            }
            break;
        default:
            break;
    }
    if (variableType != '') {
        for (let i = 0; i < variables.length; i++) {
            if (variables[i].dataType == variableType) {
                suggestions.push({
                    label: variables[i].name,
                    kind: vscode_languageserver_1.CompletionItemKind.Variable
                });
            }
        }
        if (projectParser.enums[variableType.toLowerCase()] != undefined) {
            const members = projectParser.enums[variableType.toLowerCase()].members;
            for (let i = 0; i < members.length; i++) {
                suggestions.push({
                    label: members[i].name.toUpperCase(),
                    kind: vscode_languageserver_1.CompletionItemKind.Enum,
                    data: getCommentString(members[i].comments)
                });
            }
        }
    }
    // const timeEnd = new Date().getTime();
    // const secondsElapsed = (timeEnd - timeStart) / 1000;
    // connection.console.log(`completion in ${secondsElapsed} s`);
    return suggestions;
});
// This handler resolves additional information for the item selected in
// the completion list.
connection.onCompletionResolve((item) => {
    if (item.data) {
        item.documentation = {
            kind: vscode_languageserver_1.MarkupKind.Markdown,
            value: html2markdown(item.data)
        };
    }
    return item;
});
connection.onHover(({ textDocument, position }) => {
    const document = documents.get(textDocument.uri);
    const result = {
        kind: vscode_languageserver_1.MarkupKind.Markdown,
        value: ''
    };
    if (!document) {
        return;
    }
    const offset = document.offsetAt(position);
    const filePath = getFileName(textDocument.uri);
    const token = projectParser.getTokenAtPosition(filePath, offset);
    if (token != undefined) {
        const text = token.symbol.text;
        // let context: ParserRuleContext | undefined;
        switch (token.symbol.type) {
            case TibboBasicParser.IDENTIFIER:
                //get scope
                if (token.parentCtx.ruleIndex == TibboBasicParser.RULE_postfixExpression) {
                    const obj = getObjectAtToken(token);
                    if (obj != undefined) {
                        const func = getObjectFunction(obj, token.symbol.text);
                        const prop = getObjectProperty(obj, token.symbol.text);
                        if (func != undefined) {
                            result.value += '```tibbo-basic\n';
                            result.value += `${obj.name}.${func.name}\n`;
                            result.value += '```\n';
                            '';
                            result.value += getComments(func.comments);
                        }
                        else if (prop != undefined) {
                            result.value += '```tibbo-basic\n';
                            result.value += `${obj.name}.${prop.name}\n`;
                            result.value += '```\n';
                            result.value += getComments(prop.comments);
                        }
                    }
                }
                if (result.value == '') {
                    //TODO get correct variable at scope
                    const varD = getVariable(text, filePath, offset);
                    if (varD != undefined) {
                        let lengthField = '';
                        if (varD.length != undefined && varD.length != '') {
                            lengthField += '(' + varD.length + ')';
                        }
                        result.value = '```tibbo-basic\n';
                        result.value += `dim ${varD.name}${lengthField} as ${varD.dataType}`;
                        result.value += '\n```\n';
                        result.value += getComments(varD.comments);
                    }
                }
                if (result.value != '') {
                    //is object or complex type variable
                }
                else if (preprocessor.defines[text] != undefined) {
                    const define = preprocessor.defines[text];
                    result.value = '```tibbo-basic\n';
                    result.value += `#define ${define.name} ${define.value}\n`;
                    result.value += '```';
                }
                else if (projectParser.events[text.toLowerCase()] != undefined) {
                    const markdown = getComments(projectParser.events[text.toLowerCase()].comments);
                    result.value += markdown;
                }
                else if (projectParser.objects[text.toLowerCase()] != undefined) {
                    const obj = projectParser.objects[text.toLowerCase()];
                    result.value = '```tibbo-basic\n';
                    result.value += `object ${obj.name}`;
                    result.value += '\n```\n';
                    result.value += getComments(obj.comments);
                }
                else if (projectParser.functions[text] != undefined) {
                    const func = projectParser.functions[text];
                    if (func.location != undefined) {
                        result.value = '```tibbo-basic\n';
                        result.value += `sub ${func.name}(${func.parameters.map(param => {
                            return `${param.byref ? 'byref' : ''} ${param.name} as ${param.dataType}`;
                        }).join(',')})`;
                        if (func.dataType != undefined) {
                            result.value += ` as ${func.dataType}`;
                        }
                        result.value += '\n```\n';
                        result.value += getComments(func.comments);
                    }
                }
                else if (projectParser.consts[text] != undefined) {
                    result.value = '```tibbo-basic\n';
                    result.value += `const ${text} = ${projectParser.consts[text].value}`;
                    result.value += '\n```';
                }
                else if (projectParser.enums[text.toLowerCase()] != undefined) {
                    result.value = '```tibbo-basic\n';
                    result.value += 'enum ' + text + '\n';
                    for (let i = 0; i < projectParser.enums[text].members.length; i++) {
                        result.value += `    ${projectParser.enums[text].members[i].name.toUpperCase()}(${projectParser.enums[text].members[i].value})\n`;
                    }
                    result.value += 'end enum';
                    result.value += '\n```';
                }
                else if (projectParser.syscalls[text] != undefined) {
                    const syscall = projectParser.syscalls[text];
                    result.value = '```tibbo-basic\n';
                    result.value += `syscall ${syscall.name}(${syscall.parameters.map(param => {
                        return `${param.byref ? 'byref' : ''} ${param.name} as ${param.dataType}`;
                    }).join(',')})`;
                    if (syscall.dataType != '') {
                        result.value += ` as ${syscall.dataType}`;
                    }
                    result.value += '\n```\n';
                    result.value += getComments(syscall.comments);
                }
                else if (projectParser.types[text.toLowerCase()] != undefined) {
                    const type = projectParser.types[text.toLowerCase()];
                    result.value = '```tibbo-basic\n';
                    result.value += 'type ' + text + '\n';
                    for (let i = 0; i < type.members.length; i++) {
                        const member = type.members[i];
                        result.value += `    ${member.name} as ${member.dataType}`;
                        if (member.length) {
                            result.value += `(${member.length})`;
                        }
                        result.value += '\n';
                    }
                    result.value += 'end type';
                    result.value += '\n```\n';
                    result.value += getComments(type.comments);
                }
                if (result.value == '') {
                    //enums
                    for (const key in projectParser.enums) {
                        const enumItem = projectParser.enums[key];
                        for (let i = 0; i < enumItem.members.length; i++) {
                            if (text.toLowerCase() == enumItem.members[i].name.toLowerCase()) {
                                result.value = '```tibbo-basic\n';
                                result.value += 'enum ' + enumItem.name.toUpperCase() + '\n';
                                result.value += '```\n';
                                result.value += getComments(enumItem.members[i].comments);
                                break;
                            }
                        }
                    }
                }
                break;
        }
    }
    if (result.value != '') {
        return {
            contents: result
        };
    }
    return undefined;
});
connection.onDeclaration(({ textDocument, position }) => {
    const document = documents.get(textDocument.uri);
    if (!document) {
        return;
    }
    const offset = document.offsetAt(position);
    const filePath = getFileName(textDocument.uri);
    const token = projectParser.getTokenAtPosition(filePath, offset);
    if (token != undefined) {
        const text = token.symbol.text;
        let location = undefined;
        switch (token.symbol.type) {
            case TibboBasicParser.IDENTIFIER:
                if (projectParser.functions[text] != undefined) {
                    location = projectParser.functions[text].declaration;
                }
        }
        if (location != undefined) {
            const uri = getFileUrl(location.startToken.source[1].name);
            return {
                uri: uri,
                range: {
                    start: {
                        line: location.startToken.line - 1,
                        character: location.startToken.column
                    },
                    end: {
                        line: location.stopToken.line - 1,
                        character: location.stopToken.column
                    }
                }
            };
        }
    }
});
connection.onDefinition(({ textDocument, position }) => {
    const document = documents.get(textDocument.uri);
    if (!document) {
        return;
    }
    const offset = document.offsetAt(position);
    const filePath = getFileName(textDocument.uri);
    const token = projectParser.getTokenAtPosition(filePath, offset);
    if (token != undefined) {
        const text = token.symbol.text;
        let location = undefined;
        const varD = getVariable(text, filePath, offset);
        switch (token.symbol.type) {
            case TibboBasicParser.IDENTIFIER:
                if (projectParser.functions[text] != undefined) {
                    location = projectParser.functions[text].location;
                    for (let i = 0; i < projectParser.scopes.length; i++) {
                        if (location && location.startToken.start == projectParser.scopes[i].start.start) {
                            return {
                                uri: getFileUrl(location.startToken.source[1].name),
                                range: {
                                    start: { line: projectParser.scopes[i].start.line - 1, character: projectParser.scopes[i].start.column },
                                    end: { line: projectParser.scopes[i].end.line, character: projectParser.scopes[i].end.column },
                                }
                            };
                        }
                    }
                }
                if (projectParser.consts[text] != undefined) {
                    location = projectParser.consts[text].location;
                }
                if (projectParser.syscalls[text] != undefined) {
                    return;
                }
                if (token.parentCtx.ruleIndex == TibboBasicParser.RULE_postfixExpression) {
                    return;
                }
                if (varD != undefined && varD.location != undefined) {
                    return {
                        uri: getFileUrl(varD.location.startToken.source[1].name),
                        range: {
                            start: { line: varD.location.startToken.line - 1, character: varD.location.startToken.column },
                            end: { line: varD.location.stopToken.line - 1, character: varD.location.stopToken.column },
                        }
                    };
                }
                break;
            case TibboBasicParser.STRINGLITERAL:
                if (token.parentCtx.ruleIndex == TibboBasicParser.RULE_includeStmt) {
                    const dirName = path.dirname(tprPath);
                    let filePath = token.getText().replace(/"/g, '').split('\\').join(path.sep);
                    filePath = preprocessor.getFilePath(dirName, filePath);
                    return {
                        uri: getFileUrl(filePath),
                        range: {
                            start: { line: 0, character: 0 },
                            end: { line: 0, character: 0 },
                        }
                    };
                }
                break;
        }
        if (location != undefined) {
            const uri = getFileUrl(location.startToken.source[1].name);
            return {
                uri: uri,
                range: {
                    start: {
                        line: location.startToken.line - 1,
                        character: location.startToken.column
                    },
                    end: {
                        line: location.stopToken.line - 1,
                        character: location.stopToken.column
                    }
                }
            };
        }
    }
});
connection.onDocumentSymbol(({ textDocument }) => {
    const document = documents.get(textDocument.uri);
    if (!document) {
        return;
    }
    const symbols = [];
    const items = [
        {
            structure: projectParser.functions,
            kind: vscode_languageserver_1.SymbolKind.Function //Function
        },
        {
            structure: projectParser.functions,
            kind: vscode_languageserver_1.SymbolKind.Method //Method
        },
        {
            structure: projectParser.enums,
            kind: vscode_languageserver_1.SymbolKind.Enum,
        },
        {
            structure: projectParser.consts,
            kind: vscode_languageserver_1.SymbolKind.Constant,
        }
    ];
    const filePath = getFileName(textDocument.uri);
    for (let i = 0; i < items.length; i++) {
        for (const key in items[i].structure) {
            const location = items[i].structure[key].location;
            if (location != undefined && location.startToken.source[1].name == filePath) {
                const children = [];
                const scope = projectParser.getScope(filePath, location.startToken.start);
                if (scope && (items[i].kind == vscode_languageserver_1.SymbolKind.Function || items[i].kind == vscode_languageserver_1.SymbolKind.Method)) {
                    const variables = projectParser.getScopeVariables(scope);
                    for (let j = 0; j < variables.length; j++) {
                        const variable = variables[j];
                        children.push({
                            name: variable.name,
                            kind: vscode_languageserver_1.SymbolKind.Variable,
                            range: {
                                start: document.positionAt(variable.location.startToken.start),
                                end: document.positionAt(variable.location.stopToken.stop)
                            },
                            selectionRange: {
                                start: document.positionAt(variable.location.startToken.start),
                                end: document.positionAt(variable.location.stopToken.stop)
                            }
                        });
                    }
                }
                symbols.push({
                    name: items[i].structure[key].name,
                    kind: items[i].kind,
                    range: {
                        start: document.positionAt(location.startToken.start),
                        end: document.positionAt(location.stopToken.stop)
                    },
                    selectionRange: {
                        start: document.positionAt(location.startToken.start),
                        end: document.positionAt(location.stopToken.stop)
                    },
                    children: children
                });
            }
        }
    }
    symbols.sort((a, b) => {
        return a.range.start.line - b.range.start.line;
    });
    return symbols;
});
connection.onSignatureHelp((params) => {
    const help = {
        signatures: [],
        activeSignature: 0,
        activeParameter: 0
    };
    const document = documents.get(params.textDocument.uri);
    if (!document) {
        return null;
    }
    const currentLine = params.position.line;
    let offset = document.offsetAt(params.position);
    parseFile(params.textDocument.uri);
    const filePath = getFileName(params.textDocument.uri);
    let token = projectParser.getTokenAtPosition(filePath, offset);
    let commaCount = 0;
    let cursor = document.positionAt(offset);
    let found = false;
    while (cursor.line == currentLine && !found) {
        token = projectParser.getTokenAtPosition(filePath, offset);
        cursor = document.positionAt(offset);
        if ((token === null || token === void 0 ? void 0 : token.symbol.text) == ',') {
            commaCount++;
        }
        if (token != undefined) {
            offset = token.symbol.start - 1;
            const text = token.symbol.text;
            // let context: ParserRuleContext | undefined;
            switch (token.symbol.type) {
                case TibboBasicParser.IDENTIFIER:
                    {
                        //get scope
                        const info = {
                            label: '',
                            parameters: []
                        };
                        if (info.parameters == undefined) {
                            break;
                        }
                        let methodParams = [];
                        let returnValue = '';
                        let strIndex = 0;
                        if (token.parentCtx.ruleIndex == TibboBasicParser.RULE_postfixExpression) {
                            const obj = getObjectAtToken(token);
                            if (obj != undefined) {
                                const objFunc = getObjectFunction(obj, token.symbol.text);
                                if (objFunc != undefined) {
                                    found = true;
                                    info.label = `syscall ${obj.name}.${objFunc.name}`;
                                    methodParams = objFunc.parameters;
                                    returnValue = objFunc.dataType;
                                    info.documentation = {
                                        kind: vscode_languageserver_1.MarkupKind.Markdown,
                                        value: getComments(objFunc.comments)
                                    };
                                }
                            }
                        }
                        else if (projectParser.syscalls[text] != undefined) {
                            found = true;
                            const syscall = projectParser.syscalls[text];
                            info.label = 'syscall ' + syscall.name;
                            methodParams = syscall.parameters;
                            info.documentation = {
                                kind: vscode_languageserver_1.MarkupKind.Markdown,
                                value: getComments(syscall.comments)
                            };
                        }
                        else if (projectParser.functions[text] != undefined) {
                            found = true;
                            const func = projectParser.functions[text];
                            info.label = 'sub ' + func.name;
                            methodParams = func.parameters;
                            if (func.dataType != undefined) {
                                returnValue = func.dataType;
                            }
                            info.documentation = {
                                kind: vscode_languageserver_1.MarkupKind.Markdown,
                                value: getComments(func.comments)
                            };
                        }
                        if (found) {
                            info.label += '(';
                            strIndex = info.label.length;
                            if (methodParams.length > 0) {
                                for (let i = 0; i < methodParams.length; i++) {
                                    const param = methodParams[i];
                                    const str = `${param.byref ? 'byref ' : ''}${param.name} as ${param.dataType}`;
                                    info.label += str;
                                    info.parameters.push({
                                        label: [strIndex, strIndex + str.length],
                                        documentation: ''
                                    });
                                    strIndex += str.length;
                                    if (i < methodParams.length - 1) {
                                        info.label += ',';
                                        strIndex++;
                                    }
                                }
                            }
                            info.label += ')';
                            if (returnValue != '') {
                                info.label += ' as ' + returnValue;
                            }
                            help.signatures.push(info);
                        }
                    }
                    break;
            }
        }
        else {
            offset--;
        }
    }
    if (help.signatures.length > 0) {
        help.activeParameter = commaCount;
        return help;
    }
});
connection.onRenameRequest((params) => {
    const result = {
        changes: {}
    };
    const document = documents.get(params.textDocument.uri);
    let token = undefined;
    let tokenSymbolType = undefined;
    if (document != undefined) {
        const offset = document.offsetAt(params.position);
        const filePath = getFileName(params.textDocument.uri);
        token = projectParser.getTokenAtPosition(filePath, offset);
        if (token == undefined) {
            return result;
        }
        else {
            tokenSymbolType = getTokenSymbol(token);
        }
    }
    for (const fileName in preprocessor.originalFiles) {
        const contents = preprocessor.originalFiles[fileName];
        let index = 0;
        while (index >= 0) {
            if (token === null || token === void 0 ? void 0 : token.symbol.text) {
                let tmpIndex = index;
                tmpIndex = contents.indexOf(token === null || token === void 0 ? void 0 : token.symbol.text, index);
                if (tmpIndex == index || tmpIndex < 0) {
                    break;
                }
                const tmpToken = projectParser.getTokenAtPosition(fileName, tmpIndex);
                if (tmpToken != undefined) {
                    const tmpType = getTokenSymbol(tmpToken);
                    let fileUri = getFileUrl(fileName);
                    if (tmpType == tokenSymbolType && token.symbol.text == tmpToken.symbol.text && result.changes) {
                        if (result.changes[fileUri] == undefined) {
                            result.changes[fileUri] = [];
                        }
                        result.changes[fileUri].push({
                            range: {
                                start: getPosition(contents, tmpToken.symbol.start),
                                end: getPosition(contents, tmpToken.symbol.stop + 1)
                            },
                            newText: params.newName
                        });
                    }
                }
                index = tmpIndex + 1;
            }
            else {
                index = -1;
            }
        }
    }
    return result;
});
connection.onReferences((params) => {
    const result = [];
    const document = documents.get(params.textDocument.uri);
    let refs = [];
    if (document) {
        const offset = document.offsetAt(params.position);
        const filePath = getFileName(params.textDocument.uri);
        let token;
        let currentPosition = offset - 1;
        while (token == undefined) {
            token = projectParser.getTokenAtPosition(filePath, offset);
            currentPosition++;
            if (currentPosition > offset + 1) {
                break;
            }
        }
        if (token != undefined) {
            let text = token.getText();
            const varD = getVariable(text, token.symbol.source[1].name, token.symbol.start);
            if (varD != undefined) {
                refs = varD.references;
            }
            else if (projectParser.functions[text] != undefined) {
                refs = projectParser.functions[text].references;
            }
        }
    }
    for (let i = 0; i < refs.length; i++) {
        const ref = refs[i];
        result.push({
            uri: getFileUrl(ref.startToken.source[1].name),
            range: {
                start: { line: ref.startToken.line - 1, character: ref.startToken.column },
                // end: doc.positionAt(parserError.symbol.stop)
                end: { line: ref.stopToken.line - 1, character: ref.stopToken.column + (ref.stopToken.stop - ref.stopToken.start) + 1 }
            }
        });
    }
    return result;
});
connection.onPrepareRename((params) => {
    const document = documents.get(params.textDocument.uri);
    if (document != undefined) {
        const offset = document.offsetAt(params.position);
        const filePath = getFileName(params.textDocument.uri);
        const token = projectParser.getTokenAtPosition(filePath, offset - 1);
        if (token != undefined) {
            switch (token.symbol.type) {
                case TibboBasicParser.IDENTIFIER:
                    {
                        //get scope
                        const text = token.symbol.text.toLowerCase();
                        if (token.parentCtx.ruleIndex == TibboBasicParser.RULE_postfixExpression) {
                            const obj = getObjectAtToken(token);
                            if (obj != undefined) {
                                return null;
                            }
                        }
                        if (preprocessor.defines[text] != undefined) {
                            return null;
                        }
                        if (projectParser.events[text] != undefined) {
                            return null;
                        }
                        if (projectParser.objects[text] != undefined) {
                            return null;
                        }
                        if (projectParser.functions[text] != undefined) {
                            const func = projectParser.functions[text];
                            if (func.location && func.location.startToken.source[1].name.indexOf(PLATFORMS_PATH) == 0) {
                                return null;
                            }
                        }
                        if (projectParser.consts[text] != undefined) {
                            const cc = projectParser.consts[text];
                            if (cc.location.startToken.source[1].name.indexOf(PLATFORMS_PATH) == 0) {
                                return null;
                            }
                        }
                        if (projectParser.syscalls[text] != undefined) {
                            return null;
                        }
                        if (projectParser.types[text] != undefined) {
                            const tt = projectParser.types[text];
                            if (tt.location.startToken.source[1].name.indexOf(PLATFORMS_PATH) == 0) {
                                return null;
                            }
                        }
                        if (projectParser.enums[text] != undefined) {
                            const enu = projectParser.enums[text];
                            if (enu.location.startToken.source[1].name.indexOf(PLATFORMS_PATH) == 0) {
                                return null;
                            }
                        }
                        for (const key in projectParser.enums) {
                            const enu = projectParser.enums[key];
                            for (let i = 0; i < enu.members.length; i++) {
                                if (enu.members[i].name == text) {
                                    if (enu.location.startToken.source[1].name.indexOf(PLATFORMS_PATH) == 0) {
                                        return null;
                                    }
                                }
                            }
                        }
                    }
                    break;
                default:
                    return null;
            }
            return {
                start: document.positionAt(token.symbol.start),
                end: document.positionAt(token.symbol.stop + 1)
            };
        }
    }
    return null;
});
function getFileName(uri) {
    let result = uri.replace('file://', '');
    if (uri.indexOf('%3A') >= 0) {
        result = uri.replace('file:///', '');
        result = result.replace('%3A', ':');
        // result = result.charAt(0).toUpperCase() + result.slice(1);
    }
    result = decodeURIComponent(result);
    result = result.split('/').join(path.sep);
    return result;
}
function getFileUrl(filePath) {
    let result = filePath.split(path.sep).join('/');
    if (result.charAt(0) != '/') {
        result = 'file:///' + result.replace(':', '%3A');
    }
    else {
        result = 'file://' + result;
    }
    return result;
}
function getVariable(variableName, filePath, offset) {
    const scope = projectParser.getScope(filePath, offset);
    let varD;
    for (let i = 0; i < projectParser.variables.length; i++) {
        if (projectParser.variables[i].name == variableName) {
            const tmp = projectParser.variables[i];
            if (scope != undefined && scope.start.start <= tmp.location.startToken.start && scope.end.start >= tmp.location.startToken.start) {
                //in same scope
                varD = tmp;
                break;
            }
            else {
                const declaredScope = projectParser.getScope(tmp.location.startToken.source[1].name, tmp.location.startToken.start);
                if (declaredScope == undefined) {
                    varD = tmp;
                }
            }
        }
    }
    return varD;
}
function getCommentString(comments) {
    const result = comments.map(comment => {
        return comment.text.substring(1);
    }).join('\n');
    return result;
}
function getComments(comments) {
    let result = comments.map(comment => {
        return comment.text.substring(1);
    }).join('\n');
    result = html2markdown(result);
    // result = turndownService.turndown(result);
    // result = mkconverter.makeMarkdown(result, dom.window.document);
    return result;
}
function parseFile(fileUri) {
    const doc = documents.get(fileUri);
    if (doc == undefined) {
        return;
    }
    const text = doc.getText();
    const currentFilePath = getFileName(fileUri);
    preprocessor.originalFiles[currentFilePath] = text;
    preprocessor.files[currentFilePath] = '';
    const filePath = getFileName(fileUri);
    const dirName = path.dirname(filePath);
    preprocessor.parseFile(dirName, path.basename(filePath));
    const fileContents = preprocessor.files[filePath];
    projectParser.parseFile(filePath, fileContents);
}
function notifyDiagnostics() {
    for (const filePath in preprocessor.files) {
        const fileURI = getFileUrl(filePath);
        const diagnostics = [];
        if (projectParser.errors[filePath] != undefined) {
            for (let i = 0; i < projectParser.errors[filePath].length; i++) {
                const parserError = projectParser.errors[filePath][i];
                const diagnostic = {
                    severity: vscode_languageserver_1.DiagnosticSeverity.Error,
                    range: {
                        start: { line: parserError.symbol.line - 1, character: parserError.symbol.column },
                        // end: doc.positionAt(parserError.symbol.stop)
                        end: { line: parserError.symbol.line - 1, character: parserError.symbol.column + (parserError.symbol.stop - parserError.symbol.start) + 1 }
                    },
                    message: parserError.message,
                    source: 'ex'
                };
                diagnostic.relatedInformation = [
                    {
                        location: {
                            uri: getFileUrl(filePath),
                            range: Object.assign({}, diagnostic.range)
                        },
                        message: parserError.message
                    }
                ];
                diagnostics.push(diagnostic);
            }
            // connection.sendDiagnostics({ uri: fileURI, diagnostics });
        }
        for (let i = 0; i < projectParser.variables.length; i++) {
            const variable = projectParser.variables[i];
            if (variable.references.length == 0) {
                const loc = variable.location;
                if (loc.startToken.source[1].name != filePath) {
                    continue;
                }
                // const diagnostic: Diagnostic = {
                //     severity: DiagnosticSeverity.Warning,
                //     range: {
                //         start: { line: loc.startToken.line - 1, character: loc.startToken.column },
                //         // end: doc.positionAt(parserError.symbol.stop)
                //         end: { line: loc.stopToken.line - 1, character: loc.stopToken.column + loc.stopToken.text.length }
                //     },
                //     message: `${variable.name} is not used anywhere`,
                //     source: 'ex'
                // };
                // diagnostic.relatedInformation = [
                //     {
                //         location: {
                //             uri: getFileUrl(filePath),
                //             range: Object.assign({}, diagnostic.range)
                //         },
                //         message: `Unused variable`,
                //     }
                // ];
                // diagnostics.push(diagnostic);
            }
        }
        for (const funcName in projectParser.functions) {
            if (projectParser.functions[funcName].references.length == 0 && projectParser.functions[funcName].declaration != undefined) {
                if (projectParser.events[funcName] != undefined) {
                    continue;
                }
                const loc = projectParser.functions[funcName].location;
                if (loc) {
                    if (loc.startToken.source[1].name != filePath) {
                        continue;
                    }
                    const diagnostic = {
                        severity: vscode_languageserver_1.DiagnosticSeverity.Warning,
                        range: {
                            start: { line: loc.startToken.line - 1, character: loc.startToken.column },
                            // end: doc.positionAt(parserError.symbol.stop)
                            end: { line: loc.stopToken.line - 1, character: loc.stopToken.column + loc.stopToken.text.length }
                        },
                        message: `${funcName} is not called anywhere`,
                        source: 'ex'
                    };
                    diagnostic.relatedInformation = [
                        {
                            location: {
                                uri: getFileUrl(filePath),
                                range: Object.assign({}, diagnostic.range)
                            },
                            message: `${funcName} is not called anywhere`,
                        }
                    ];
                    // diagnostics.push(diagnostic);
                }
            }
        }
        // diagnostics = [];
        // let index = 0;
        // const oLines = preprocessor.originalFiles[filePath].split('\n');
        // const nLines = preprocessor.files[filePath].split('\n');
        // const contents = preprocessor.originalFiles[filePath];
        // for (let i = 0; i < oLines.length; i++) {
        //     if (oLines[i] != nLines[i]) {
        //         const range = {
        //             start: getPosition(contents, index),
        //             end: getPosition(contents, index + oLines[i].length)
        //         };
        //         diagnostics.push({
        //             range: range,
        //             severity: 4,
        //             message: 'not included',
        //             tags: [
        //                 DiagnosticTag.Unnecessary
        //             ]
        //         });
        //     }
        //     index += oLines[i].length + 1;
        // }
        connection.sendDiagnostics({ uri: fileURI, diagnostics });
    }
}
function copyProperties() {
    preprocessor.defines = JSON.parse(JSON.stringify(platformPreprocessor.defines));
    preprocessor.codes = JSON.parse(JSON.stringify(platformPreprocessor.codes));
    preprocessor.files = JSON.parse(JSON.stringify(platformPreprocessor.files));
    // preprocessor.originalFiles = JSON.parse(JSON.stringify(platformPreprocessor.originalFiles));
    projectParser.objects = platformProjectParser.objects;
    projectParser.syscalls = platformProjectParser.syscalls;
    projectParser.events = platformProjectParser.events;
    projectParser.errors = platformProjectParser.errors;
    const props = ['tokens', 'trees', 'events', 'enums', 'functions',
        'subs', 'consts', 'types'];
    props.forEach((prop) => {
        projectParser[prop] = {};
        const obj = platformProjectParser[prop];
        for (const key in obj) {
            projectParser[prop][key] = obj[key];
        }
    });
    projectParser.variables = [];
    projectParser.scopes = [];
    projectParser.variables = projectParser.variables.concat(platformProjectParser.variables);
    projectParser.scopes = projectParser.scopes.concat(platformProjectParser.scopes);
}
function getObjectAtToken(token) {
    while (token.parentCtx != undefined) {
        token = token.parentCtx;
        if (token.ruleIndex == TibboBasicParser.RULE_unaryExpression) {
            const name = token.start.text;
            if (projectParser.objects[name] != undefined) {
                return projectParser.objects[name];
            }
        }
    }
    return undefined;
}
function getObjectFunction(obj, functionName) {
    for (let i = 0; i < obj.functions.length; i++) {
        if (obj.functions[i].name == functionName) {
            return obj.functions[i];
        }
    }
    return undefined;
}
function getObjectProperty(obj, propName) {
    for (let i = 0; i < obj.properties.length; i++) {
        if (obj.properties[i].name == propName) {
            return obj.properties[i];
        }
    }
    return undefined;
}
function getTokenSymbol(token) {
    let symbolType = undefined;
    const text = token.symbol.text;
    switch (token.symbol.type) {
        case TibboBasicParser.IDENTIFIER:
            //get scope
            if (token.parentCtx.ruleIndex == TibboBasicParser.RULE_postfixExpression) {
                const obj = getObjectAtToken(token);
                if (obj != undefined) {
                    const func = getObjectFunction(obj, token.symbol.text);
                    const prop = getObjectProperty(obj, token.symbol.text);
                    if (func != undefined) {
                        symbolType = types_1.TBSymbolType.OBJECT_PROPERTY;
                    }
                    else if (prop != undefined) {
                        symbolType = types_1.TBSymbolType.OBJECT_PROPERTY;
                    }
                }
            }
            else if (preprocessor.defines[text] != undefined) {
                symbolType = types_1.TBSymbolType.DEFINE;
            }
            else if (projectParser.events[text.toLowerCase()] != undefined) {
                //
            }
            else if (projectParser.objects[text.toLowerCase()] != undefined) {
                symbolType = types_1.TBSymbolType.OBJECT;
            }
            else if (projectParser.functions[text] != undefined) {
                if (projectParser.functions[text].dataType != undefined) {
                    symbolType = types_1.TBSymbolType.FUNCTION;
                }
                else {
                    symbolType = types_1.TBSymbolType.SUB;
                }
            }
            else if (projectParser.consts[text] != undefined) {
                symbolType = types_1.TBSymbolType.CONST;
            }
            else if (projectParser.enums[text.toLowerCase()] != undefined) {
                symbolType = types_1.TBSymbolType.ENUM;
            }
            else if (projectParser.syscalls[text] != undefined) {
                symbolType = types_1.TBSymbolType.SYSCALL;
            }
            else if (projectParser.types[text.toLowerCase()] != undefined) {
                symbolType = types_1.TBSymbolType.TYPE;
            }
            if (symbolType == undefined) {
                //enums
                for (const key in projectParser.enums) {
                    const enumItem = projectParser.enums[key];
                    for (let i = 0; i < enumItem.members.length; i++) {
                        if (text.toLowerCase() == enumItem.members[i].name.toLowerCase()) {
                            symbolType = types_1.TBSymbolType.ENUM_MEMBER;
                            break;
                        }
                    }
                }
            }
            if (symbolType == undefined) {
                //TODO get correct variable at scope
                const varD = getVariable(text, token.symbol.source[1].name, token.symbol.start);
                if (varD != undefined) {
                    symbolType = types_1.TBSymbolType.DIM;
                }
            }
            break;
    }
    return symbolType;
}
function getProjectStructure() {
    //TODO only send structure if changed
    const notification = new rpc.NotificationType('projectExplorer');
    const objects = [];
    const events = [];
    Object.keys(projectParser.objects).forEach((key) => {
        const object = projectParser.objects[key];
        const children = [];
        const item = {
            name: key,
            docs: getCommentString(object.comments),
            children: children,
        };
        for (let i = 0; i < object.properties.length; i++) {
            children.push({
                name: object.properties[i].name,
                docs: getCommentString(object.properties[i].comments)
            });
        }
        objects.push(item);
    });
    Object.keys(projectParser.events).forEach((key) => {
        const event = projectParser.events[key];
        const item = {
            name: key,
            docs: getCommentString(event.comments)
        };
        events.push(item);
    });
    const tmpRootItems = [
        {
            name: PROJECT_EXPLORER_EVENTS,
            children: events,
            docs: 'Platform Events. Double click on event to create or edit an event handler in the source code.'
        },
        {
            name: PROJECT_EXPLORER_PROJECT,
            children: [],
            docs: ''
        },
        {
            name: PROJECT_EXPLORER_LIBRARIES,
            children: [],
            docs: ''
        },
        {
            name: PROJECT_EXPLORER_PLATFORM,
            children: [
                {
                    name: 'Objects',
                    children: objects,
                    docs: 'Platform objects. Hover over an item name to get help.'
                }
            ],
            docs: ''
        }
    ];
    if (objects.length > 0) {
        if (JSON.stringify(rootItems) != JSON.stringify(tmpRootItems)) {
            rootItems = tmpRootItems;
        }
        sortProjectChildren(rootItems);
        connection.sendNotification(notification, JSON.stringify(rootItems));
    }
}
function sortProjectChildren(children) {
    children.sort((a, b) => {
        if (a.name < b.name)
            return -1;
        if (a.name > b.name)
            return 1;
        return 0;
    });
    for (let i = 0; i < children.length; i++) {
        const items = children[i].children;
        if (items != undefined) {
            sortProjectChildren(items);
        }
    }
}
function getPosition(text, offset) {
    const lines = text.split('\n');
    let index = 0;
    let lineNumber = 0;
    let column = 0;
    for (let i = 0; i < lines.length; i++) {
        const len = lines[i].length + 1; //include newline
        if (index + len < offset) {
            index += len;
        }
        else {
            lineNumber = i;
            column = offset - index;
            break;
        }
    }
    return {
        line: lineNumber,
        character: column
    };
}
connection.onDidOpenTextDocument((params) => {
    // A text document got opened in VSCode.
    // params.uri uniquely identifies the document. For documents store on disk this is a file URI.
    // params.text the initial full content of the document.
    connection.console.log(`${params.textDocument.uri} opened.`);
});
connection.onDidChangeTextDocument((params) => {
    // The content of a text document did change in VSCode.
    // params.uri uniquely identifies the document.
    // params.contentChanges describe the content changes to the document.
    connection.console.log(`${params.textDocument.uri} changed: ${JSON.stringify(params.contentChanges)}`);
});
connection.onDidCloseTextDocument((params) => {
    // A text document got closed in VSCode.
    // params.uri uniquely identifies the document.
    connection.console.log(`${params.textDocument.uri} closed.`);
});
// Make the text document manager listen on the connection
// for open, change and close text document events
documents.listen(connection);
// Listen on the connection
connection.listen();


/***/ }),

/***/ "./src/types.ts":
/*!**********************!*\
  !*** ./src/types.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TBSymbolType = void 0;
var TBSymbolType;
(function (TBSymbolType) {
    TBSymbolType["ENUM"] = "enum";
    TBSymbolType["ENUM_MEMBER"] = "enum_member";
    TBSymbolType["TYPE"] = "type";
    TBSymbolType["TYPE_MEMBER"] = "type_member";
    TBSymbolType["FUNCTION"] = "function";
    TBSymbolType["SUB"] = "sub";
    TBSymbolType["DIM"] = "dim";
    TBSymbolType["CONST"] = "const";
    TBSymbolType["OBJECT"] = "object";
    TBSymbolType["OBJECT_PROPERTY"] = "object_property";
    TBSymbolType["SYSCALL"] = "syscall";
    TBSymbolType["DEFINE"] = "define";
})(TBSymbolType = exports.TBSymbolType || (exports.TBSymbolType = {}));


/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("net");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("util");

/***/ })

/******/ })));
//# sourceMappingURL=server.js.map