declare function val(sourcestr: any): number;
declare function lval(sourcestr: any): number;
declare function str(num: any): any;
declare function lstr(num: any): any;
declare function stri(num: any): void;
declare function lstri(num: any): void;
declare function hex(num: any): void;
declare function lhex(num: any): void;
declare function bin(num: any): void;
declare function lbin(num: any): void;
declare function left(sourcestr: any, len: any): any;
declare function right(sourcestr: any, len: any): any;
declare function mid(sourcestr: any, frompos: any, len: any): any;
declare function len(sourcestr: any): any;
declare function instr(frompos: any, sourcestr: any, substr: any, num: any): any;
declare function asc(sourcestr: any): void;
declare function chr(asciicode: any): string;
declare function ddstr(str: any): void;
declare function ddval(str: any): void;
declare function strgen(len: any, substr: any): void;
declare function strsum(sourcestr: any): void;
declare function weekday(daycount: any): void;
declare function year(daycount: any): void;
declare function month(daycount: any): void;
declare function date(daycount: any): void;
declare function daycount(year: any, month: any, date: any): void;
declare function hours(mincount: any): void;
declare function minutes(mincount: any): void;
declare function mincount(hours: any, minutes: any): void;
declare function cfloat(num: any): void;
declare function ftostr(num: any, mode: any, rnd: any): void;
declare function strtof(str: any): void;
declare function md5(str: any, input_hash: any, md5_mode: any, total_len: any): void;
declare function sha1(str: any, input_hash: any, sha1_mode: any, totallen: any): void;
declare function random(len: any): void;
declare function insert(dest_str: any, pos: any, insert_str: any): void;
declare function aes128enc(key: any, plain: any): void;
declare function aes128dec(key: any, cypher: any): void;
declare function rc4(key: any, skip: any, data: any): void;
declare function strand(str1: any, str2: any): void;
declare function stror(str1: any, str2: any): void;
declare function strxor(str1: any, str2: any): void;
declare function sin(angle: any): void;
declare function asin(x: any): void;
declare function cos(angle: any): void;
declare function acos(x: any): void;
declare function tan(angle: any): void;
declare function atan(x: any): void;
declare function sqrt(x: any): void;
declare function atan2(y: any, x: any): void;
declare let mainApp: any;
declare function startSimulator(app: any): void;
declare function stopSimulator(app: any): void;
declare namespace bt {
    function enable(): void;
    function disable(): void;
    const enabled: number;
    const name: number;
    const emulation: number;
    function rxbuffrq(numpages: any): void;
    function txbuffrq(numpages: any): void;
    const rxbuffsize: number;
    const txbuffsize: number;
    const rxlen: number;
    const txlen: number;
    const txfree: number;
    const newtxlen: number;
    function rxclear(): void;
    function txclear(): void;
    function getdata(maxinplen: any): void;
    function peekdata(maxinplen: any): void;
    function setdata(txdata: any): void;
    function send(): void;
    function notifysent(threshold: any): void;
    const advertise: number;
    const connected: number;
    const mac: number;
    const flowcontrol: number;
}
declare namespace wln {
    function activescan(ssid: any): void;
    function associate(bssid: any, ssid: any, channel: any, bssmode: any): void;
    const associationstate: number;
    function boot(offset: any): void;
    function buffrq(numpages: any): void;
    const buffsize: number;
    const clkmap: number;
    const csmap: number;
    const dimap: number;
    function disassociate(): void;
    const domain: number;
    const domap: number;
    const enabled_1: number;
    export { enabled_1 as enabled };
    const gatewayip: number;
    function getmoduletype(): void;
    const monversion: number;
    const fwversion: number;
    function disable(): void;
    function setupgraderegion(region: any): void;
    function writeflashpage(page: any): void;
    function upgrade(region: any, fwlength: any, checksum: any): void;
    function waitforupgradecompletion(): void;
    const band: number;
    const ip: number;
    const mac_1: number;
    export { mac_1 as mac };
    const netmask: number;
    function networkstart(ssid: any, channel: any): void;
    function networkstop(): void;
    const rssi: number;
    function scan(ssid: any): void;
    const scanfilter: number;
    const scanresultbssid: number;
    const scanresultbssmode: number;
    const scanresultchannel: number;
    const scanresultrssi: number;
    const scanresultssid: number;
    const scanresultwpainfo: number;
    function settxpower(level: any): void;
    function setwep(wepkey: any, wepmode: any): void;
    function setwpa(wpamode: any, algorithm: any, wpakey: any, cast: any): void;
    const task: number;
    const mfgenabled: number;
}
declare namespace tpram {
    const triggerpolarity: number;
    const tamperdetection: number;
    const timestamping: number;
    const capacity: number;
    function getdata(startaddr: any, len: any): void;
    function setdata(datatoset: any, startaddr: any): void;
    function gettimestamp(daycount: any, mincount: any, seconds: any, overflow: any): void;
}
declare namespace fd {
    const availableflashspace: number;
    const buffernum: number;
    const capacity_1: number;
    export { capacity_1 as capacity };
    function checksum(mode: any, csum: any): void;
    function close(): void;
    function copyfirmware(numsectors: any): void;
    function copyfirmwarefromfile(): void;
    function copyfirmwarelzo(app_present: any): void;
    function copyfirmwarefromfilelzo(): void;
    function cutfromtop(numsectors: any): void;
    function create(name_attr: any): void;
    const filenum: number;
    const fileopened: number;
    const filesize: number;
    function find(frompos: any, substr: any, instance: any, dir: any, incr: any, mode: any): void;
    function flush(): void;
    function format(totalsize: any, maxstoredfiles: any): void;
    function formatj(totalsize: any, maxstoredfiles: any, maxjournalsectors: any): void;
    function getattributes(name: any): any;
    function getbuffer(offset: any, len: any): void;
    function getdata(maxinplen: any): void;
    function getfreespace(): void;
    function getnextdirmember(): void;
    function getnumfiles(): void;
    function getsector(num: any): void;
    const laststatus: number;
    const maxopenedfiles: number;
    const maxstoredfiles: number;
    function mount(): void;
    const numservicesectors: number;
    function open(name: any): void;
    const pointer: number;
    const ready: number;
    function rename(old_name: any, new_name: any): void;
    function resetdirpointer(): void;
    const sector: number;
    function setattributes(name: any, attr: any): void;
    function setbuffer(data: any, offset: any): void;
    function setdata(data: any): void;
    function setfilesize(newsize: any): void;
    function setpointer(pos: any): void;
    function setsector(num: any): void;
    const totalsize: number;
    const leveling: number;
    const errordata: number;
    const transactioncapacityremaining: number;
    function transactioncommit(): void;
    function transactionstart(): void;
    const transactionstarted: number;
    function copymonitor(x1: any, x2: any, x3: any, x4: any): void;
}
declare namespace ssi {
    const baudrate: number;
    const channel: number;
    const clkmap_1: number;
    export { clkmap_1 as clkmap };
    const dimap_1: number;
    export { dimap_1 as dimap };
    const direction: number;
    const domap_1: number;
    export { domap_1 as domap };
    const enabled_2: number;
    export { enabled_2 as enabled };
    const mode: number;
    function str(txdata: any, ack_bit: any): void;
    function value(txdata: any, len: any): void;
    const zmode: number;
}
declare namespace kp {
    const mode_1: number;
    export { mode_1 as mode };
    const idlecode: number;
    const autodisablecodes: number;
    const enabled_3: number;
    export { enabled_3 as enabled };
    const longpressdelay: number;
    const longreleasedelay: number;
    const pressdelay: number;
    const releasedelay: number;
    const repeatdelay: number;
    const lockupdelay: number;
    const returnlinesmapping: number;
    const scanlinesmapping: number;
    function getkey(key_event: any, key_code: any): void;
    const genkpevent: number;
    const overflow: number;
    function clearbuffer(): void;
}
declare namespace lcd {
    const backcolor: number;
    const bitsperpixel: number;
    const bluebits: number;
    function bmp(offset: any, x: any, y: any, x_offset: any, y_offset: any, maxwidth: any, maxheight: any): void;
    function bmpfromfile(ignored_parameter: any, x: any, y: any, x_offset: any, y_offset: any, maxwidth: any, maxheight: any): void;
    const enabled_4: number;
    export { enabled_4 as enabled };
    const error: number;
    function fill(x: any, y: any, width: any, height: any): void;
    function filledrectangle(x1: any, y1: any, x2: any, y2: any): void;
    const fontheight: number;
    const fontpixelpacking: number;
    const forecolor: number;
    function getprintwidth(str: any): void;
    const greenbits: number;
    const height: number;
    function horline(x1: any, x2: any, y: any): void;
    const inverted: number;
    const iomapping: number;
    function line(x1: any, y1: any, x2: any, y2: any): void;
    const linewidth: number;
    function lock(): void;
    const lockcount: number;
    const paneltype: number;
    const pixelpacking: number;
    function print(str: any, x: any, y: any): void;
    function printaligned(str: any, x: any, y: any, width: any, height: any): void;
    function rectangle(x1: any, y1: any, x2: any, y2: any): void;
    const redbits: number;
    const rotated: number;
    function setfont(offset: any): void;
    function setpixel(dt: any, x: any, y: any): void;
    function getpixel(x: any, y: any): void;
    const textalignment: number;
    const texthorizontalspacing: number;
    const textorientation: number;
    const textverticalspacing: number;
    function unlock(): void;
    function verline(x: any, y1: any, y2: any): void;
    const width: number;
    const buffsize_1: number;
    export { buffsize_1 as buffsize };
}
declare namespace rtc {
    function getdata(daycount: any, mincount: any, seconds: any): void;
    function setdata(daycount: any, mincount: any, seconds: any): void;
    const running: number;
}
declare namespace beep {
    function play(pattern: any, patint: any): void;
    const divider: number;
}
declare namespace io {
    const intcheck: number;
    const num: number;
    const portnum: number;
    const state: number;
    const portstate: number;
    const enabled_5: number;
    export { enabled_5 as enabled };
    const portenabled: number;
    function invert(num: any): void;
    function lineget(num: any): void;
    function lineset(num: any, state: any): void;
    function portget(num: any): void;
    function portset(num: any, state: any): void;
    const intnum: number;
    const intenabled: number;
}
declare namespace pppoe {
    const acmac: number;
    const ip_1: number;
    export { ip_1 as ip };
    const sessionid: number;
}
declare namespace net {
    const mac_2: number;
    export { mac_2 as mac };
    const ip_2: number;
    export { ip_2 as ip };
    const netmask_1: number;
    export { netmask_1 as netmask };
    const gatewayip_1: number;
    export { gatewayip_1 as gatewayip };
    const failure: number;
    const linkstate: number;
}
declare namespace sys {
    const limitbuffersize: number;
    const runmode: number;
    const resettype: number;
    const extresettype: number;
    const totalbuffpages: number;
    const freebuffpages: number;
    function halt(): void;
    function reboot(): void;
    function buffalloc(): void;
    const version: number;
    const timercount: number;
    const timercount32: number;
    const timercountms: number;
    const onsystimerperiod: number;
    const serialnum: number;
    function setserialnum(str: any): void;
    function debugprint(str: any): void;
    function sleep(): void;
    function stop(): void;
    function standby(): void;
    const wdenabled: number;
    const wdautoreset: number;
    const wdperiod: number;
    function wdreset(): void;
    const speed: number;
    const hsclock: number;
    const wakeupperiod: number;
    function getexceptioninfo(hfsr: any, cfsr: any, lr: any, pc: any, current_lr: any): void;
    function causeexception(): void;
    const monversion_1: number;
    export { monversion_1 as monversion };
    const userbuffpages: number;
}
declare namespace stor {
    function getdata(startaddr: any, len: any): void;
    function setdata(datatoset: any, startaddr: any): void;
    const base: number;
    const size: number;
}
declare namespace sock {
    const numofsock: number;
    const num_1: number;
    export { num_1 as num };
    const state_1: number;
    export { state_1 as state };
    const statesimple: number;
    const inconmode: number;
    const reconmode: number;
    const localportlist: number;
    const httpportlist: number;
    const localport: number;
    const outport: number;
    const acceptbcast: number;
    const targetip: number;
    const targetmac: number;
    const targetport: number;
    const targetbcast: number;
    const remotemac: number;
    const remoteip: number;
    const remoteport: number;
    const bcast: number;
    const protocol: number;
    const splittcppackets: number;
    const httpmode: number;
    const httpnoclose: number;
    const connectiontout: number;
    const toutcounter: number;
    const inbandcommands: number;
    const escchar: number;
    const endchar: number;
    const gendataarrivalevent: number;
    const rxbuffsize_1: number;
    export { rxbuffsize_1 as rxbuffsize };
    const txbuffsize_1: number;
    export { txbuffsize_1 as txbuffsize };
    const cmdbuffsize: number;
    const rplbuffsize: number;
    const varbuffsize: number;
    const tx2buffsize: number;
    const httprqtype: number;
    const rxlen_1: number;
    export { rxlen_1 as rxlen };
    const txlen_1: number;
    export { txlen_1 as txlen };
    const txfree_1: number;
    export { txfree_1 as txfree };
    const newtxlen_1: number;
    export { newtxlen_1 as newtxlen };
    const httprqstring: number;
    function gethttprqstring(maxinplen: any): void;
    const rxpacketlen: number;
    const cmdlen: number;
    const varlen: number;
    const rpllen: number;
    const rplfree: number;
    const tx2len: number;
    function rxclear(): void;
    function txclear(): void;
    function getdata(maxinplen: any): void;
    function peekdata(maxinplen: any): void;
    function setdata(txdata: any): void;
    function send(): void;
    function getinband(): void;
    function peekinband(): void;
    function setsendinband(data: any): void;
    function notifysent(threshold: any): void;
    function nextpacket(): void;
    function connect(): void;
    function close(): void;
    function reset(): void;
    function discard(): void;
    function rxbuffrq(numpages: any): void;
    function txbuffrq(numpages: any): void;
    function cmdbuffrq(numpages: any): void;
    function rplbuffrq(numpages: any): void;
    function varbuffrq(numpages: any): void;
    function tx2buffrq(numpages: any): void;
    function redir(redir: any): void;
    const inconenabledmaster: number;
    const urlsubstitutes: number;
    const sinkdata: number;
    const allowedinterfaces: number;
    const availableinterfaces: number;
    const targetinterface: number;
    const currentinterface: number;
}
declare const ser: typeof ser;
declare namespace romfile {
    function find(frompos: any, substr: any, num: any): number;
    function find32(frompos: any, substr: any, num: any): void;
    function getdata(maxinplen: any): any;
    const offset: number;
    function open(filename: any): void;
    const pointer_1: number;
    export { pointer_1 as pointer };
    const pointer32: number;
    const size_1: any;
    export { size_1 as size };
}
declare namespace ppp {
    const enabled_6: number;
    export { enabled_6 as enabled };
    const portnum_1: number;
    export { portnum_1 as portnum };
    function buffrq(numpages: any): void;
    const buffsize_2: number;
    export { buffsize_2 as buffsize };
    const ip_3: number;
    export { ip_3 as ip };
}
declare namespace pat {
    function play(pattern: any, patint: any): void;
    const channel_1: number;
    export { channel_1 as channel };
    const greenmap: number;
    const redmap: number;
}
declare namespace button {
    const pressed: number;
    const time: number;
}
declare const PL_BT_FC_ENABLED: 1;
declare const PL_BT_FC_DISABLED: 0;
declare const PL_BT_EVENT_DISABLED: 3;
declare const PL_BT_EVENT_ENABLED: 2;
declare const PL_BT_EVENT_DISCONNECTED: 1;
declare const PL_BT_EVENT_CONNECTED: 0;
declare const PL_WLN_BT_EMULATION_MODE_MICROCHIP: 2;
declare const PL_WLN_BT_EMULATION_MODE_NORDIC: 1;
declare const PL_WLN_BT_EMULATION_MODE_TI: 0;
declare const PL_WLN_MFGTX_RATE_72M: 13;
declare const PL_WLN_MFGTX_RATE_54M: 12;
declare const PL_WLN_MFGTX_RATE_48M: 11;
declare const PL_WLN_MFGTX_RATE_36M: 10;
declare const PL_WLN_MFGTX_RATE_24M: 9;
declare const PL_WLN_MFGTX_RATE_18M: 8;
declare const PL_WLN_MFGTX_RATE_12M: 7;
declare const PL_WLN_MFGTX_RATE_9M: 6;
declare const PL_WLN_MFGTX_RATE_6M: 5;
declare const PL_WLN_MFGTX_RATE_22M: 4;
declare const PL_WLN_MFGTX_RATE_11M: 3;
declare const PL_WLN_MFGTX_RATE_5_5M: 2;
declare const PL_WLN_MFGTX_RATE_2M: 1;
declare const PL_WLN_MFGTX_RATE_1M: 0;
declare const PL_WLN_MFGTX_MODE_DATATX: 2;
declare const PL_WLN_MFGTX_MODE_BURST: 1;
declare const PL_WLN_MFGTX_MODE_CONTINUOUS: 0;
declare const PL_WLN_WPA_CAST_MULTICAST: 1;
declare const PL_WLN_WPA_CAST_UNICAST: 0;
declare const PL_WLN_WPA_ALGORITHM_AES: 1;
declare const PL_WLN_WPA_ALGORITHM_TKIP: 0;
declare const PL_WLN_WPA_WPA2_PSK: 2;
declare const PL_WLN_WPA_WPA1_PSK: 1;
declare const PL_WLN_WPA_DISABLED: 0;
declare const PL_WLN_WEP_MODE_128: 2;
declare const PL_WLN_WEP_MODE_64: 1;
declare const PL_WLN_WEP_MODE_DISABLED: 0;
declare const PL_WLN_OWN_ADHOC: 2;
declare const PL_WLN_ASCAN_INFRASTRUCTURE: 1;
declare const PL_WLN_SCAN_ALL: 0;
declare const PL_WLN_TASK_SET_EAP_TTLS: 13;
declare const PL_WLN_TASK_SET_EAP_PEAP: 12;
declare const PL_WLN_TASK_SET_EAP_TLS: 11;
declare const PL_WLN_TASK_UPDATERSSI: 10;
declare const PL_WLN_TASK_ACTIVESCAN: 9;
declare const PL_WLN_TASK_SETWPA: 8;
declare const PL_WLN_TASK_NETWORK_STOP: 7;
declare const PL_WLN_TASK_NETWORK_START: 6;
declare const PL_WLN_TASK_DISASSOCIATE: 5;
declare const PL_WLN_TASK_SETWEP: 4;
declare const PL_WLN_TASK_SETTXPOWER: 3;
declare const PL_WLN_TASK_ASSOCIATE: 2;
declare const PL_WLN_TASK_SCAN: 1;
declare const PL_WLN_TASK_IDLE: 0;
declare const PL_WLN_EVENT_DISASSOCIATED: 1;
declare const PL_WLN_EVENT_DISABLED: 0;
declare const PL_WLN_UPGRADE_REGION_MONITOR: 1;
declare const PL_WLN_UPGRADE_REGION_MAIN: 0;
declare const PL_WLN_MODULE_TYPE_WA2000: 1;
declare const PL_WLN_MODULE_TYPE_GA1000: 0;
declare const PL_WLN_DOMAIN_JAPAN: 2;
declare const PL_WLN_DOMAIN_EU: 1;
declare const PL_WLN_DOMAIN_FCC: 0;
declare const WIFI_PHY_11N_5G: 11;
declare const WIFI_PHY_11AGN_MIXED: 10;
declare const WIFI_PHY_11BGN_MIXED: 9;
declare const WIFI_PHY_11AN_MIXED: 8;
declare const WIFI_PHY_11GN_MIXED: 7;
declare const WIFI_PHY_11N_2_4G: 6;
declare const WIFI_PHY_11ABGN_MIXED: 5;
declare const WIFI_PHY_11G: 4;
declare const WIFI_PHY_11ABG_MIXED: 3;
declare const WIFI_PHY_11A: 2;
declare const WIFI_PHY_11B: 1;
declare const WIFI_PHY_11BG_MIXED: 0;
declare const PL_WLN_OWN_NETWORK: 2;
declare const PL_WLN_ASSOCIATED: 1;
declare const PL_WLN_NOT_ASSOCIATED: 0;
declare const PL_WLN_BSS_MODE_ADHOC: 1;
declare const PL_WLN_BSS_MODE_INFRASTRUCTURE: 0;
declare const FD_ERROR_MOUNT_JOURNAL_COMMITTING_FAILED2: 110;
declare const FD_ERROR_MOUNT_JOURNAL_COMMITTING_FAILED: 109;
declare const FD_ERROR_MOUNT_JOURNAL_DATA_INVALID: 108;
declare const FD_ERROR_FIND_GNSOFC_CHAIN_ERROR: 107;
declare const FD_ERROR_FIND_GNSOFC_CS_ERROR_1: 106;
declare const FD_ERROR_FIND_GNSOFC_READ_ERROR_1: 105;
declare const FD_ERROR_FIND_DATASECTOR_CS_ERROR_3: 104;
declare const FD_ERROR_FIND_DATASECTOR_READ_ERROR_3: 103;
declare const FD_ERROR_FIND_DATASECTOR_CS_ERROR_2: 102;
declare const FD_ERROR_FIND_DATASECTOR_READ_ERROR_2: 101;
declare const FD_ERROR_FIND_DATASECTOR_CS_ERROR_1: 100;
declare const FD_ERROR_FIND_DATASECTOR_READ_ERROR_1: 99;
declare const FD_ERROR_SAVE_FRT_SECTOR_WRITE_ERROR_2: 98;
declare const FD_ERROR_SAVE_FRT_SECTOR_WRITE_ERROR_1: 97;
declare const FD_ERROR_SAVE_FAT_SECTOR_WRITE_ERROR_2: 96;
declare const FD_ERROR_SAVE_FAT_SECTOR_WRITE_ERROR_1: 95;
declare const FD_ERROR_GNSOFC_WRITE_ERROR: 94;
declare const FD_ERROR_GNSOFC_CS_ERROR_4: 93;
declare const FD_ERROR_GNSOFC_READ_ERROR_4: 92;
declare const FD_ERROR_GNSOFC_CS_ERROR_3: 91;
declare const FD_ERROR_GNSOFC_READ_ERROR_3: 90;
declare const FD_ERROR_GNSOFC_CS_ERROR_2: 89;
declare const FD_ERROR_GNSOFC_READ_ERROR_2: 88;
declare const FD_ERROR_GNSOFC_CHAIN_ERROR_2: 87;
declare const FD_ERROR_GNSOFC_CHAIN_ERROR_1: 86;
declare const FD_ERROR_GNSOFC_CS_ERROR_1: 85;
declare const FD_ERROR_GNSOFC_READ_ERROR_1: 84;
declare const FD_ERROR_SETDATA_DATASECT_CS_ERROR_4: 83;
declare const FD_ERROR_SETDATA_DATASECT_READ_ERROR_4: 82;
declare const FD_ERROR_SETDATA_DATASECT_CS_ERROR_3: 81;
declare const FD_ERROR_SETDATA_DATASECT_READ_ERROR_3: 80;
declare const FD_ERROR_SETDATA_DATASECT_CS_ERROR_2: 79;
declare const FD_ERROR_SETDATA_DATASECT_READ_ERROR_2: 78;
declare const FD_ERROR_SETDATA_DATASECT_CS_ERROR_1: 77;
declare const FD_ERROR_SETDATA_DATASECT_READ_ERROR_1: 76;
declare const FD_ERROR_GETDATA_DATASECT_CS_ERROR_3: 75;
declare const FD_ERROR_GETDATA_DATASECT_READ_ERROR_3: 74;
declare const FD_ERROR_GETDATA_DATASECT_CS_ERROR_2: 73;
declare const FD_ERROR_GETDATA_DATASECT_READ_ERROR_2: 72;
declare const FD_ERROR_GETDATA_DATASECT_CS_ERROR_1: 71;
declare const FD_ERROR_GETDATA_DATASECT_READ_ERROR_1: 70;
declare const FD_ERROR_FINDFREESECTOR_FAT_CS_ERROR: 69;
declare const FD_ERROR_FINDFREESECTOR_FAT_READ_ERROR: 68;
declare const FD_ERROR_FINDFREESECTOR_FAT_INVALID_DATA: 67;
declare const FD_ERROR_FREESPACE_FAT_INVALID_DATA: 66;
declare const FD_ERROR_FREESPACE_FAT_CS_ERROR: 65;
declare const FD_ERROR_FREESPACE_FAT_READ_ERROR: 64;
declare const FD_ERROR_GETNEXTDIRMEMBER_FRT_CS_ERROR: 63;
declare const FD_ERROR_GETNEXTDIRMEMBER_FRT_READ_ERROR: 62;
declare const FD_ERROR_GETNUMFILES_FRT_CS_ERROR: 61;
declare const FD_ERROR_GETNUMFILES_FRT_READ_ERROR: 60;
declare const FD_ERROR_CREATE_FRT_WRITE_ERROR: 59;
declare const FD_ERROR_CREATE_FRT_CS_ERROR: 58;
declare const FD_ERROR_CREATE_FRT_READ_ERROR: 57;
declare const FD_ERROR_CREATE_DATASECTOR_WRITE_ERROR: 56;
declare const FD_ERROR_CREATE_FAT_WRITE_ERROR: 55;
declare const FD_ERROR_CREATE_FAT_CS_ERROR: 54;
declare const FD_ERROR_CREATE_FAT_READ_ERROR: 53;
declare const FD_ERROR_CREATE_COMMON_PORTION_ERROR: 52;
declare const FD_ERROR_DELETE_FAT_WRITE_ERROR_2: 51;
declare const FD_ERROR_DELETE_INVALID_FAT_CHAIN_2: 50;
declare const FD_ERROR_DELETE_INVALID_FAT_CHAIN_1: 49;
declare const FD_ERROR_DELETE_FAT_CS_ERROR: 48;
declare const FD_ERROR_DELETE_FAT_READ_ERROR: 47;
declare const FD_ERROR_DELETE_FAT_WRITE_ERROR_1: 46;
declare const FD_ERROR_DELETE_ENTRY_SECTOR_INVALID: 45;
declare const FD_ERROR_DELETE_FRT_WRITE_ERROR: 44;
declare const FD_ERROR_DELETE_FRT_CS_ERROR: 43;
declare const FD_ERROR_DELETE_FRT_READ_ERROR: 42;
declare const FD_ERROR_DELETE_COMMON_PORTION_ERROR: 41;
declare const FD_ERROR_SETATTRIBUTES_FRT_WRITE_ERROR: 40;
declare const FD_ERROR_SETATTRIBUTES_FRT_CS_ERROR: 39;
declare const FD_ERROR_SETATTRIBUTES_FRT_READ_ERROR: 38;
declare const FD_ERROR_SETATTRIBUTES_COMMON_PORTION_ERROR: 37;
declare const FD_ERROR_FLUSH_DATASECTOR_WRITE_ERROR: 36;
declare const FD_ERROR_OPEN_FRT_WRITE_ERROR: 35;
declare const FD_ERROR_OPEN_FRT_CS_ERROR: 34;
declare const FD_ERROR_OPEN_FRT_READ_ERROR: 33;
declare const FD_ERROR_OPEN_COMMON_PORTION_ERROR: 32;
declare const FD_ERROR_RENAME_FRT_WRITE_ERROR: 31;
declare const FD_ERROR_RENAME_FRT_CS_ERROR: 30;
declare const FD_ERROR_RENAME_FRT_READ_ERROR: 29;
declare const FD_ERROR_RENAME_COMMON_PORTION_ERROR: 28;
declare const FD_ERROR_FORMAT_FAT_WRITE_ERROR: 27;
declare const FD_ERROR_FORMAT_FRT_WRITE_ERROR: 26;
declare const FD_ERROR_FORMAT_ENDBOOT_WRITE_ERROR: 25;
declare const FD_ERROR_FORMAT_BOOT_WRITE_ERROR: 24;
declare const FD_ERROR_MOUNT_FAT_EMPTY_MAPPING_DETECTED: 23;
declare const FD_ERROR_MOUNT_FAT_INVALID_ACTIVE_SECTOR_COUNT: 22;
declare const FD_ERROR_MOUNT_FAT_WRITE_ERROR_2: 21;
declare const FD_ERROR_MOUNT_FAT_WRITE_ERROR_1: 20;
declare const FD_ERROR_FAT_LOGICAL_NUMBER_DUPLICATION: 19;
declare const FD_ERROR_MOUNT_FAT_LOGICAL_NUMBER_OOR: 18;
declare const FD_ERROR_MOUNT_FAT_CS_ERROR: 17;
declare const FD_ERROR_MOUNT_FAT_READ_ERROR: 16;
declare const FD_ERROR_MOUNT_FRT_EMPTY_MAPPING_DETECTED: 15;
declare const FD_ERROR_MOUNT_FRT_INVALID_ACTIVE_SECTOR_COUNT: 14;
declare const FD_ERROR_MOUNT_FRT_WRITE_ERROR_2: 13;
declare const FD_ERROR_MOUNT_FRT_WRITE_ERROR_1: 12;
declare const FD_ERROR_MOUNT_FRT_LOGICAL_NUMBER_DUPLICATION: 11;
declare const FD_ERROR_MOUNT_FRT_LOGICAL_NUMBER_OOR: 10;
declare const FD_ERROR_MOUNT_FRT_CS_ERROR: 9;
declare const FD_ERROR_MOUNT_FRT_READ_ERROR: 8;
declare const FD_ERROR_MOUNT_ENDBOOT_DATA_INVALID: 7;
declare const FD_ERROR_MOUNT_ENDBOOT_CS_ERROR: 6;
declare const FD_ERROR_MOUNT_ENDBOOT_READ_ERROR: 5;
declare const FD_ERROR_MOUNT_BOOT_DATA_INVALID: 4;
declare const FD_ERROR_MOUNT_BOOT_MARKER_INVALID: 3;
declare const FD_ERROR_MOUNT_BOOT_CS_ERROR: 2;
declare const FD_ERROR_MOUNT_BOOT_READ_ERROR: 1;
declare const FD_ERROR_NO_ADDITIONAL_ERROR_DATA: 0;
declare const PL_FD_FIND_LESSER_EQUAL: 5;
declare const PL_FD_FIND_LESSER: 4;
declare const PL_FD_FIND_GREATER_EQUAL: 3;
declare const PL_FD_FIND_GREATER: 2;
declare const PL_FD_FIND_NOT_EQUAL: 1;
declare const PL_FD_FIND_EQUAL: 0;
declare const PL_FD_CSUM_MODE_CALCULATE: 1;
declare const PL_FD_CSUM_MODE_VERIFY: 0;
declare const PL_FD_STATUS_FLASH_NOT_DETECTED: 16;
declare const PL_FD_STATUS_TRANSACTIONS_NOT_SUPPORTED: 15;
declare const PL_FD_STATUS_TRANSACTION_CAPACITY_EXCEEDED: 14;
declare const PL_FD_STATUS_TRANSACTION_NOT_YET_STARTED: 13;
declare const PL_FD_STATUS_TRANSACTION_ALREADY_STARTED: 12;
declare const PL_FD_STATUS_ALREADY_OPENED: 11;
declare const PL_FD_STATUS_NOT_OPENED: 10;
declare const PL_FD_STATUS_NOT_FOUND: 9;
declare const PL_FD_STATUS_NOT_READY: 8;
declare const PL_FD_STATUS_DATA_FULL: 7;
declare const PL_FD_STATUS_FILE_TABLE_FULL: 6;
declare const PL_FD_STATUS_DUPLICATE_NAME: 5;
declare const PL_FD_STATUS_INV_PARAM: 4;
declare const PL_FD_STATUS_FORMAT_ERR: 3;
declare const PL_FD_STATUS_CHECKSUM_ERR: 2;
declare const PL_FD_STATUS_FAIL: 1;
declare const PL_FD_STATUS_OK: 0;
declare const PL_SSI_ZMODE_ENABLED_ON_ZERO: 1;
declare const PL_SSI_ZMODE_ALWAYS_ENABLED: 0;
declare const PL_SSI_ACK_ALL_BUT_LAST: 3;
declare const PL_SSI_ACK_TX_ALL: 2;
declare const PL_SSI_ACK_RX: 1;
declare const PL_SSI_ACK_OFF: 0;
declare const PL_SSI_MODE_3: 3;
declare const PL_SSI_MODE_2: 2;
declare const PL_SSI_MODE_1: 1;
declare const PL_SSI_MODE_0: 0;
declare const PL_SSI_DIRECTION_LEFT: 1;
declare const PL_SSI_DIRECTION_RIGHT: 0;
declare const PL_KP_EVENT_LOCKEDUP: 5;
declare const PL_KP_EVENT_REPEATPRESSED: 4;
declare const PL_KP_EVENT_LONGPRESSED: 3;
declare const PL_KP_EVENT_PRESSED: 2;
declare const PL_KP_EVENT_RELEASED: 1;
declare const PL_KP_EVENT_LONGRELEASED: 0;
declare const PL_KP_MODE_BINARY: 1;
declare const PL_KP_MODE_MATRIX: 0;
declare const PL_LCD_TEXT_ORIENTATION_270: 3;
declare const PL_LCD_TEXT_ORIENTATION_180: 2;
declare const PL_LCD_TEXT_ORIENTATION_90: 1;
declare const PL_LCD_TEXT_ORIENTATION_0: 0;
declare const PL_LCD_TEXT_ALIGNMENT_BOTTOM_RIGHT: 8;
declare const PL_LCD_TEXT_ALIGNMENT_BOTTOM_CENTER: 7;
declare const PL_LCD_TEXT_ALIGNMENT_BOTTOM_LEFT: 6;
declare const PL_LCD_TEXT_ALIGNMENT_MIDDLE_RIGHT: 5;
declare const PL_LCD_TEXT_ALIGNMENT_MIDDLE_CENTER: 4;
declare const PL_LCD_TEXT_ALIGNMENT_MIDDLE_LEFT: 3;
declare const PL_LCD_TEXT_ALIGNMENT_TOP_RIGHT: 2;
declare const PL_LCD_TEXT_ALIGNMENT_TOP_CENTER: 1;
declare const PL_LCD_TEXT_ALIGNMENT_TOP_LEFT: 0;
declare const PL_LCD_PANELTYPE_COLOR: 1;
declare const PL_LCD_PANELTYPE_GRAYSCALE: 0;
declare const PL_BEEP_CANINT: 1;
declare const PL_BEEP_NOINT: 0;
declare const PL_NET_LINKSTAT_100BASET: 2;
declare const PL_NET_LINKSTAT_10BASET: 1;
declare const PL_NET_LINKSTAT_NOLINK: 0;
declare const PL_SYS_SPEED_FULL: 2;
declare const PL_SYS_SPEED_MEDIUM: 1;
declare const PL_SYS_SPEED_LOW: 0;
declare const PL_SYS_EXT_RESET_TYPE_RSTPIN: 4;
declare const PL_SYS_EXT_RESET_TYPE_BROWNOUT: 3;
declare const PL_SYS_EXT_RESET_TYPE_POWERUP: 2;
declare const PL_SYS_EXT_RESET_TYPE_WATCHDOG: 1;
declare const PL_SYS_EXT_RESET_TYPE_INTERNAL: 0;
declare const PL_SYS_RESET_TYPE_EXTERNAL: 1;
declare const PL_SYS_RESET_TYPE_INTERNAL: 0;
declare const PL_SYS_MODE_DEBUG: 1;
declare const PL_SYS_MODE_RELEASE: 0;
declare const PL_SOCK_HTTP_RQ_POST: 1;
declare const PL_SOCK_HTTP_RQ_GET: 0;
declare const PL_SOCK_PROTOCOL_RAW: 2;
declare const PL_SOCK_PROTOCOL_TCP: 1;
declare const PL_SOCK_PROTOCOL_UDP: 0;
declare const PL_SOCK_RECONMODE_3: 3;
declare const PL_SOCK_RECONMODE_2: 2;
declare const PL_SOCK_RECONMODE_1: 1;
declare const PL_SOCK_RECONMODE_0: 0;
declare const PL_SOCK_INCONMODE_ANY_IP_ANY_PORT: 3;
declare const PL_SOCK_INCONMODE_SPECIFIC_IP_ANY_PORT: 2;
declare const PL_SOCK_INCONMODE_SPECIFIC_IPPORT: 1;
declare const PL_SOCK_INCONMODE_NONE: 0;
declare const PL_SSTS_AC: 6;
declare const PL_SSTS_PC: 5;
declare const PL_SSTS_EST: 4;
declare const PL_SSTS_AO: 3;
declare const PL_SSTS_PO: 2;
declare const PL_SSTS_ARP: 1;
declare const PL_SSTS_CLOSED: 0;
declare const PL_SST_AC: number;
declare const PL_SST_PC: number;
declare const PL_SST_EST_AOPENED: number;
declare const PL_SST_EST_POPENED: number;
declare const PL_SST_EST: number;
declare const PL_SST_AO: number;
declare const PL_SST_PO: number;
declare const PL_SST_ARP: number;
declare const PL_SST_CL_DISCARDED_TOUT: 21;
declare const PL_SST_CL_DISCARDED_ARPFL: 20;
declare const PL_SST_CL_DISCARDED_AO_WCS: 19;
declare const PL_SST_CL_DISCARDED_PO_WCS: 18;
declare const PL_SST_CL_DISCARDED_CMD: 17;
declare const PL_SST_CL_ARESET_DERR: 16;
declare const PL_SST_CL_ARESET_TOUT: 15;
declare const PL_SST_CL_ARESET_RE_AC: 14;
declare const PL_SST_CL_ARESET_RE_PC: 13;
declare const PL_SST_CL_ARESET_RE_EST: 12;
declare const PL_SST_CL_ARESET_RE_AO: 11;
declare const PL_SST_CL_ARESET_RE_PO: 10;
declare const PL_SST_CL_ARESET_CMD: 9;
declare const PL_SST_CL_PRESET_STRANGE: 8;
declare const PL_SST_CL_PRESET_ACLOSING: 7;
declare const PL_SST_CL_PRESET_PCLOSING: 6;
declare const PL_SST_CL_PRESET_EST: 5;
declare const PL_SST_CL_PRESET_AOPENING: 4;
declare const PL_SST_CL_PRESET_POPENING: 3;
declare const PL_SST_CL_ACLOSED: 2;
declare const PL_SST_CL_PCLOSED: 1;
declare const PL_SST_CLOSED: 0;
declare const PL_SER_ET_TYPE2: 2;
declare const PL_SER_ET_TYPE1: 1;
declare const PL_SER_ET_DISABLED: 0;
declare const PL_SER_BB_8: 1;
declare const PL_SER_BB_7: 0;
declare const PL_SER_PR_SPACE: 4;
declare const PL_SER_PR_MARK: 3;
declare const PL_SER_PR_ODD: 2;
declare const PL_SER_PR_EVEN: 1;
declare const PL_SER_PR_NONE: 0;
declare const PL_SER_DCP_HIGHFORINPUT: 1;
declare const PL_SER_DCP_LOWFORINPUT: 0;
declare const PL_SER_FC_XONOFF: 2;
declare const PL_SER_FC_RTSCTS: 1;
declare const PL_SER_FC_DISABLED: 0;
declare const PL_SER_SI_HALFDUPLEX: 1;
declare const PL_SER_SI_FULLDUPLEX: 0;
declare const PL_SER_MODE_CLOCKDATA: 2;
declare const PL_SER_MODE_WIEGAND: 1;
declare const PL_SER_MODE_UART: 0;
declare const PL_PAT_CANINT: 1;
declare const PL_PAT_NOINT: 0;
declare const SHA1_FINISH: 1;
declare const SHA1_UPDATE: 0;
declare const MD5_FINISH: 1;
declare const MD5_UPDATE: 0;
declare const FTOSTR_MODE_PLAIN: 2;
declare const FTOSTR_MODE_ME: 1;
declare const FTOSTR_MODE_AUTO: 0;
declare const PL_MONTH_DECEMBER: 12;
declare const PL_MONTH_NOVEMBER: 11;
declare const PL_MONTH_OCTOBER: 10;
declare const PL_MONTH_SEPTEMBER: 9;
declare const PL_MONTH_AUGUST: 8;
declare const PL_MONTH_JULY: 7;
declare const PL_MONTH_JUNE: 6;
declare const PL_MONTH_MAY: 5;
declare const PL_MONTH_APRIL: 4;
declare const PL_MONTH_MARCH: 3;
declare const PL_MONTH_FEBRUARY: 2;
declare const PL_MONTH_JANUARY: 1;
declare const PL_DOW_SUNDAY: 7;
declare const PL_DOW_SATURDAY: 6;
declare const PL_DOW_FRIDAY: 5;
declare const PL_DOW_THURSDAY: 4;
declare const PL_DOW_WEDNESDAY: 3;
declare const PL_DOW_TUESDAY: 2;
declare const PL_DOW_MONDAY: 1;
declare const PL_REDIR_SOCK15: 21;
declare const PL_REDIR_SOCK14: 20;
declare const PL_REDIR_SOCK13: 19;
declare const PL_REDIR_SOCK12: 18;
declare const PL_REDIR_SOCK11: 17;
declare const PL_REDIR_SOCK10: 16;
declare const PL_REDIR_SOCK9: 15;
declare const PL_REDIR_SOCK8: 14;
declare const PL_REDIR_SOCK7: 13;
declare const PL_REDIR_SOCK6: 12;
declare const PL_REDIR_SOCK5: 11;
declare const PL_REDIR_SOCK4: 10;
declare const PL_REDIR_SOCK3: 9;
declare const PL_REDIR_SOCK2: 8;
declare const PL_REDIR_SOCK1: 7;
declare const PL_REDIR_SOCK0: 6;
declare const PL_REDIR_SER3: 4;
declare const PL_REDIR_SER2: 3;
declare const PL_REDIR_SER1: 2;
declare const PL_REDIR_SER0: 1;
declare const PL_REDIR_SER: 1;
declare const PL_REDIR_NONE: 0;
declare const FALLING: 1;
declare const RISING: 0;
declare const PL_HORIZONTAL: 1;
declare const PL_VERTICAL: 0;
declare const BACK: 1;
declare const FORWARD: 0;
declare const REJECTED: 1;
declare const ACCEPTED: 0;
declare const INVALID: 1;
declare const VALID: 0;
declare const WLN_REJ: 2;
declare const WLN_NG: 1;
declare const WLN_OK: 0;
declare const NG: 1;
declare const OK: 0;
declare const HIGH: 1;
declare const LOW: 0;
declare const ENABLED: 1;
declare const DISABLED: 0;
declare const YES: 1;
declare const yes: 1;
declare const NO: 0;
declare const no: 0;
declare const PL_ON: 1;
declare const PL_OFF: 0;
declare const PL_INT_NULL: 8;
declare const PL_INT_NUM_7: 7;
declare const PL_INT_NUM_6: 6;
declare const PL_INT_NUM_5: 5;
declare const PL_INT_NUM_4: 4;
declare const PL_INT_NUM_3: 3;
declare const PL_INT_NUM_2: 2;
declare const PL_INT_NUM_1: 1;
declare const PL_INT_NUM_0: 0;
declare const PL_IO_PORT_NUM_0: 0;
declare const PL_IO_NULL: 56;
declare const PL_IO_NUM_55: 55;
declare const PL_IO_NUM_54: 54;
declare const PL_IO_NUM_53: 53;
declare const PL_IO_NUM_52: 52;
declare const PL_IO_NUM_51: 51;
declare const PL_IO_NUM_50: 50;
declare const PL_IO_NUM_49: 49;
declare const PL_IO_NUM_48: 48;
declare const PL_IO_NUM_47: 47;
declare const PL_IO_NUM_46: 46;
declare const PL_IO_NUM_45_CO: 45;
declare const PL_IO_NUM_44: 44;
declare const PL_IO_NUM_43: 43;
declare const PL_IO_NUM_42: 42;
declare const PL_IO_NUM_41: 41;
declare const PL_IO_NUM_40: 40;
declare const PL_IO_NUM_39: 39;
declare const PL_IO_NUM_38: 38;
declare const PL_IO_NUM_37: 37;
declare const PL_IO_NUM_36: 36;
declare const PL_IO_NUM_35: 35;
declare const PL_IO_NUM_34: 34;
declare const PL_IO_NUM_33: 33;
declare const PL_IO_NUM_32: 32;
declare const PL_IO_NUM_31: 31;
declare const PL_IO_NUM_30: 30;
declare const PL_IO_NUM_29: 29;
declare const PL_IO_NUM_28: 28;
declare const PL_IO_NUM_27: 27;
declare const PL_IO_NUM_26: 26;
declare const PL_IO_NUM_25: 25;
declare const PL_IO_NUM_24: 24;
declare const PL_IO_NUM_23_INT7: 23;
declare const PL_IO_NUM_22_INT6: 22;
declare const PL_IO_NUM_21_INT5: 21;
declare const PL_IO_NUM_20_INT4: 20;
declare const PL_IO_NUM_19_INT3: 19;
declare const PL_IO_NUM_18_INT2: 18;
declare const PL_IO_NUM_17_INT1: 17;
declare const PL_IO_NUM_16_INT0: 16;
declare const PL_IO_NUM_15_TX3: 15;
declare const PL_IO_NUM_14_RX3: 14;
declare const PL_IO_NUM_13_TX2: 13;
declare const PL_IO_NUM_12_RX2: 12;
declare const PL_IO_NUM_11_TX1: 11;
declare const PL_IO_NUM_10_RX1: 10;
declare const PL_IO_NUM_9_TX0: 9;
declare const PL_IO_NUM_8_RX0: 8;
declare const PL_IO_NUM_7: 7;
declare const PL_IO_NUM_6: 6;
declare const PL_IO_NUM_5: 5;
declare const PL_IO_NUM_4: 4;
declare const PL_IO_NUM_3: 3;
declare const PL_IO_NUM_2: 2;
declare const PL_IO_NUM_1: 1;
declare const PL_IO_NUM_0: 0;
declare const PL_SOCK_INTERFACE_PPPOE: 4;
declare const PL_SOCK_INTERFACE_PPP: 3;
declare const PL_SOCK_INTERFACE_WLN: 2;
declare const PL_SOCK_INTERFACE_NET: 1;
declare const PL_SOCK_INTERFACE_NULL: 0;
