// Generated from /Users/jimmyhu/Projects/tibbo-basic/server/language/TibboBasic/TibboBasicParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var TibboBasicParserListener = require('./TibboBasicParserListener').TibboBasicParserListener;
var TibboBasicParserVisitor = require('./TibboBasicParserVisitor').TibboBasicParserVisitor;

var grammarFileName = "TibboBasicParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u0092\u030e\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0003",
    "\u0002\u0007\u0002\u0080\n\u0002\f\u0002\u000e\u0002\u0083\u000b\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003",
    "\u0096\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0006\u0005\u0006\u009f\n\u0006\u0003\u0006",
    "\u0007\u0006\u00a2\n\u0006\f\u0006\u000e\u0006\u00a5\u000b\u0006\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u00b1\n\u0007",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0007\b\u00b7\n\b\f\b\u000e\b\u00ba",
    "\u000b\b\u0003\t\u0003\t\u0005\t\u00be\n\t\u0003\t\u0003\t\u0003\t\u0003",
    "\n\u0005\n\u00c4\n\n\u0003\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0005\u000b\u00cd\n\u000b\u0003\u000b\u0003",
    "\u000b\u0005\u000b\u00d1\n\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0005",
    "\f\u00d7\n\f\u0003\f\u0003\f\u0005\f\u00db\n\f\u0003\f\u0003\f\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u00ef\n\r",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0007\u000e\u00f4\n\u000e\f\u000e",
    "\u000e\u000e\u00f7\u000b\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0005\u000f\u00fe\n\u000f\u0003\u000f\u0005\u000f",
    "\u0101\n\u000f\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u010b\n\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u0110\n\u0011\u0003",
    "\u0012\u0005\u0012\u0113\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0005\u0012\u0118\n\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u011c",
    "\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0013",
    "\u0003\u0013\u0005\u0013\u0124\n\u0013\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005",
    "\u0015\u012e\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015",
    "\u0133\n\u0015\u0005\u0015\u0135\n\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0006\u0015\u013d\n\u0015",
    "\r\u0015\u000e\u0015\u013e\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0007\u0015\u0147\n\u0015\f\u0015\u000e",
    "\u0015\u014a\u000b\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u014e\n",
    "\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0152\n\u0015\u0003\u0016",
    "\u0003\u0016\u0003\u0017\u0003\u0017\u0005\u0017\u0158\n\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0007\u0017\u015e\n\u0017",
    "\f\u0017\u000e\u0017\u0161\u000b\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0018\u0003\u0018\u0005\u0018\u0167\n\u0018\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0005\u0019\u0171\n\u0019\u0005\u0019\u0173\n\u0019\u0005\u0019\u0175",
    "\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0005\u001a\u0182\n\u001a\u0005\u001a\u0184\n\u001a\u0005\u001a\u0186",
    "\n\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u0191\n",
    "\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0005\u001c\u0199\n\u001c\u0005\u001c\u019b\n\u001c\u0005\u001c",
    "\u019d\n\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u01a2",
    "\n\u001c\u0003\u001d\u0003\u001d\u0005\u001d\u01a6\n\u001d\u0003\u001d",
    "\u0003\u001d\u0005\u001d\u01aa\n\u001d\u0003\u001d\u0005\u001d\u01ad",
    "\n\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u01b2\n\u001e",
    "\u0003\u001e\u0003\u001e\u0005\u001e\u01b6\n\u001e\u0003\u001e\u0005",
    "\u001e\u01b9\n\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0007\u001f\u01bf\n\u001f\f\u001f\u000e\u001f\u01c2\u000b\u001f\u0005",
    "\u001f\u01c4\n\u001f\u0003\u001f\u0003\u001f\u0003 \u0005 \u01c9\n ",
    "\u0003 \u0003 \u0005 \u01cd\n \u0003!\u0003!\u0003!\u0003!\u0005!\u01d3",
    "\n!\u0003!\u0007!\u01d6\n!\f!\u000e!\u01d9\u000b!\u0003!\u0005!\u01dc",
    "\n!\u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0003\"\u0007\"\u01e4\n\"",
    "\f\"\u000e\"\u01e7\u000b\"\u0003\"\u0005\"\u01ea\n\"\u0003\"\u0003\"",
    "\u0003#\u0003#\u0005#\u01f0\n#\u0003#\u0003#\u0003$\u0003$\u0003%\u0005",
    "%\u01f7\n%\u0003%\u0003%\u0003%\u0005%\u01fc\n%\u0003%\u0003%\u0005",
    "%\u0200\n%\u0003%\u0003%\u0003%\u0003&\u0005&\u0206\n&\u0003&\u0003",
    "&\u0003&\u0007&\u020b\n&\f&\u000e&\u020e\u000b&\u0003&\u0003&\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0005\'\u0217\n\'\u0003\'\u0003\'",
    "\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0005(\u0221\n(\u0003(\u0003",
    "(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003",
    "(\u0003(\u0003(\u0003(\u0007(\u0232\n(\f(\u000e(\u0235\u000b(\u0003",
    ")\u0003)\u0003)\u0003)\u0005)\u023b\n)\u0003*\u0003*\u0003+\u0003+\u0003",
    "+\u0007+\u0242\n+\f+\u000e+\u0245\u000b+\u0003+\u0003+\u0003+\u0003",
    "+\u0007+\u024b\n+\f+\u000e+\u024e\u000b+\u0007+\u0250\n+\f+\u000e+\u0253",
    "\u000b+\u0003,\u0003,\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u025c",
    "\n-\u0003.\u0005.\u025f\n.\u0003.\u0003.\u0003.\u0003/\u0003/\u0003",
    "/\u0005/\u0267\n/\u0007/\u0269\n/\f/\u000e/\u026c\u000b/\u0003/\u0003",
    "/\u0003/\u0003/\u0005/\u0272\n/\u0005/\u0274\n/\u00030\u00030\u0003",
    "0\u00030\u00030\u00050\u027b\n0\u00031\u00031\u00031\u00031\u00031\u0003",
    "2\u00032\u00032\u00033\u00033\u00033\u00033\u00073\u0289\n3\f3\u000e",
    "3\u028c\u000b3\u00053\u028e\n3\u00033\u00033\u00034\u00034\u00035\u0003",
    "5\u00035\u00035\u00075\u0298\n5\f5\u000e5\u029b\u000b5\u00055\u029d",
    "\n5\u00035\u00035\u00036\u00056\u02a2\n6\u00036\u00036\u00036\u0003",
    "6\u00056\u02a8\n6\u00036\u00056\u02ab\n6\u00037\u00037\u00057\u02af",
    "\n7\u00037\u00037\u00057\u02b3\n7\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00058\u02c1\n8\u0003",
    "8\u00038\u00058\u02c5\n8\u00038\u00058\u02c8\n8\u00058\u02ca\n8\u0003",
    "9\u00039\u00039\u00079\u02cf\n9\f9\u000e9\u02d2\u000b9\u0003:\u0003",
    ":\u0003:\u0003;\u0003;\u0003;\u0003<\u0003<\u0003<\u0005<\u02dd\n<\u0003",
    "<\u0006<\u02e0\n<\r<\u000e<\u02e1\u0003<\u0005<\u02e5\n<\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0005<\u02ed\n<\u0003=\u0003=\u0003=\u0005",
    "=\u02f2\n=\u0003=\u0003=\u0003=\u0005=\u02f7\n=\u0007=\u02f9\n=\f=\u000e",
    "=\u02fc\u000b=\u0003=\u0005=\u02ff\n=\u0003=\u0003=\u0003>\u0003>\u0005",
    ">\u0305\n>\u0003>\u0003>\u0003>\u0005>\u030a\n>\u0003?\u0003?\u0003",
    "?\u0002\u0004NT@\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016",
    "\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnp",
    "rtvxz|\u0002\u000e\u0004\u0002JJLL\u0003\u0002\"\'\u0004\u0002PPpp\u0004",
    "\u0002\b\b\n\n\u0005\u000266UU]]\u0004\u0002\\\\__\u0004\u0002WY[[\u0004",
    "\u0002VV^^\u0007\u0002\u0004\u000489>>@@NN\u0004\u000288\\\\\u0003\u0002",
    "kl\u0004\u0002TTpp\u0002\u035e\u0002\u0081\u0003\u0002\u0002\u0002\u0004",
    "\u0095\u0003\u0002\u0002\u0002\u0006\u0097\u0003\u0002\u0002\u0002\b",
    "\u009a\u0003\u0002\u0002\u0002\n\u00a3\u0003\u0002\u0002\u0002\f\u00b0",
    "\u0003\u0002\u0002\u0002\u000e\u00b2\u0003\u0002\u0002\u0002\u0010\u00bb",
    "\u0003\u0002\u0002\u0002\u0012\u00c3\u0003\u0002\u0002\u0002\u0014\u00c8",
    "\u0003\u0002\u0002\u0002\u0016\u00d2\u0003\u0002\u0002\u0002\u0018\u00ee",
    "\u0003\u0002\u0002\u0002\u001a\u00f0\u0003\u0002\u0002\u0002\u001c\u00fa",
    "\u0003\u0002\u0002\u0002\u001e\u0102\u0003\u0002\u0002\u0002 \u0104",
    "\u0003\u0002\u0002\u0002\"\u0112\u0003\u0002\u0002\u0002$\u0123\u0003",
    "\u0002\u0002\u0002&\u0125\u0003\u0002\u0002\u0002(\u0151\u0003\u0002",
    "\u0002\u0002*\u0153\u0003\u0002\u0002\u0002,\u0155\u0003\u0002\u0002",
    "\u0002.\u0166\u0003\u0002\u0002\u00020\u0168\u0003\u0002\u0002\u0002",
    "2\u0179\u0003\u0002\u0002\u00024\u018a\u0003\u0002\u0002\u00026\u0192",
    "\u0003\u0002\u0002\u00028\u01a5\u0003\u0002\u0002\u0002:\u01ae\u0003",
    "\u0002\u0002\u0002<\u01ba\u0003\u0002\u0002\u0002>\u01c8\u0003\u0002",
    "\u0002\u0002@\u01ce\u0003\u0002\u0002\u0002B\u01df\u0003\u0002\u0002",
    "\u0002D\u01ed\u0003\u0002\u0002\u0002F\u01f3\u0003\u0002\u0002\u0002",
    "H\u01f6\u0003\u0002\u0002\u0002J\u0205\u0003\u0002\u0002\u0002L\u0211",
    "\u0003\u0002\u0002\u0002N\u0220\u0003\u0002\u0002\u0002P\u023a\u0003",
    "\u0002\u0002\u0002R\u023c\u0003\u0002\u0002\u0002T\u023e\u0003\u0002",
    "\u0002\u0002V\u0254\u0003\u0002\u0002\u0002X\u025b\u0003\u0002\u0002",
    "\u0002Z\u025e\u0003\u0002\u0002\u0002\\\u0263\u0003\u0002\u0002\u0002",
    "^\u0275\u0003\u0002\u0002\u0002`\u027c\u0003\u0002\u0002\u0002b\u0281",
    "\u0003\u0002\u0002\u0002d\u0284\u0003\u0002\u0002\u0002f\u0291\u0003",
    "\u0002\u0002\u0002h\u0293\u0003\u0002\u0002\u0002j\u02a1\u0003\u0002",
    "\u0002\u0002l\u02ac\u0003\u0002\u0002\u0002n\u02c9\u0003\u0002\u0002",
    "\u0002p\u02cb\u0003\u0002\u0002\u0002r\u02d3\u0003\u0002\u0002\u0002",
    "t\u02d6\u0003\u0002\u0002\u0002v\u02ec\u0003\u0002\u0002\u0002x\u02ee",
    "\u0003\u0002\u0002\u0002z\u0304\u0003\u0002\u0002\u0002|\u030b\u0003",
    "\u0002\u0002\u0002~\u0080\u0005\u0004\u0003\u0002\u007f~\u0003\u0002",
    "\u0002\u0002\u0080\u0083\u0003\u0002\u0002\u0002\u0081\u007f\u0003\u0002",
    "\u0002\u0002\u0081\u0082\u0003\u0002\u0002\u0002\u0082\u0084\u0003\u0002",
    "\u0002\u0002\u0083\u0081\u0003\u0002\u0002\u0002\u0084\u0085\u0007\u0002",
    "\u0002\u0003\u0085\u0003\u0003\u0002\u0002\u0002\u0086\u0096\u0005\u0006",
    "\u0004\u0002\u0087\u0096\u0005\b\u0005\u0002\u0088\u0096\u0005\u001a",
    "\u000e\u0002\u0089\u0096\u0005\u000e\b\u0002\u008a\u0096\u0005\u0014",
    "\u000b\u0002\u008b\u0096\u0005\u0016\f\u0002\u008c\u0096\u0005\u0012",
    "\n\u0002\u008d\u0096\u0005Z.\u0002\u008e\u0096\u0005H%\u0002\u008f\u0096",
    "\u0005\"\u0012\u0002\u0090\u0096\u0005b2\u0002\u0091\u0096\u0005,\u0017",
    "\u0002\u0092\u0096\u00054\u001b\u0002\u0093\u0096\u00056\u001c\u0002",
    "\u0094\u0096\u0005J&\u0002\u0095\u0086\u0003\u0002\u0002\u0002\u0095",
    "\u0087\u0003\u0002\u0002\u0002\u0095\u0088\u0003\u0002\u0002\u0002\u0095",
    "\u0089\u0003\u0002\u0002\u0002\u0095\u008a\u0003\u0002\u0002\u0002\u0095",
    "\u008b\u0003\u0002\u0002\u0002\u0095\u008c\u0003\u0002\u0002\u0002\u0095",
    "\u008d\u0003\u0002\u0002\u0002\u0095\u008e\u0003\u0002\u0002\u0002\u0095",
    "\u008f\u0003\u0002\u0002\u0002\u0095\u0090\u0003\u0002\u0002\u0002\u0095",
    "\u0091\u0003\u0002\u0002\u0002\u0095\u0092\u0003\u0002\u0002\u0002\u0095",
    "\u0093\u0003\u0002\u0002\u0002\u0095\u0094\u0003\u0002\u0002\u0002\u0096",
    "\u0005\u0003\u0002\u0002\u0002\u0097\u0098\u00071\u0002\u0002\u0098",
    "\u0099\u0007P\u0002\u0002\u0099\u0007\u0003\u0002\u0002\u0002\u009a",
    "\u009b\u00072\u0002\u0002\u009b\u009c\u0007P\u0002\u0002\u009c\t\u0003",
    "\u0002\u0002\u0002\u009d\u009f\u0005t;\u0002\u009e\u009d\u0003\u0002",
    "\u0002\u0002\u009e\u009f\u0003\u0002\u0002\u0002\u009f\u00a0\u0003\u0002",
    "\u0002\u0002\u00a0\u00a2\u0005\f\u0007\u0002\u00a1\u009e\u0003\u0002",
    "\u0002\u0002\u00a2\u00a5\u0003\u0002\u0002\u0002\u00a3\u00a1\u0003\u0002",
    "\u0002\u0002\u00a3\u00a4\u0003\u0002\u0002\u0002\u00a4\u000b\u0003\u0002",
    "\u0002\u0002\u00a5\u00a3\u0003\u0002\u0002\u0002\u00a6\u00b1\u0005t",
    ";\u0002\u00a7\u00b1\u0005\u000e\b\u0002\u00a8\u00b1\u0005\u0018\r\u0002",
    "\u00a9\u00b1\u0005 \u0011\u0002\u00aa\u00b1\u0005$\u0013\u0002\u00ab",
    "\u00b1\u0005(\u0015\u0002\u00ac\u00b1\u0005@!\u0002\u00ad\u00b1\u0005",
    "Z.\u0002\u00ae\u00b1\u0005`1\u0002\u00af\u00b1\u0005N(\u0002\u00b0\u00a6",
    "\u0003\u0002\u0002\u0002\u00b0\u00a7\u0003\u0002\u0002\u0002\u00b0\u00a8",
    "\u0003\u0002\u0002\u0002\u00b0\u00a9\u0003\u0002\u0002\u0002\u00b0\u00aa",
    "\u0003\u0002\u0002\u0002\u00b0\u00ab\u0003\u0002\u0002\u0002\u00b0\u00ac",
    "\u0003\u0002\u0002\u0002\u00b0\u00ad\u0003\u0002\u0002\u0002\u00b0\u00ae",
    "\u0003\u0002\u0002\u0002\u00b0\u00af\u0003\u0002\u0002\u0002\u00b1\r",
    "\u0003\u0002\u0002\u0002\u00b2\u00b3\u0007\u000e\u0002\u0002\u00b3\u00b8",
    "\u0005\u0010\t\u0002\u00b4\u00b5\u0007j\u0002\u0002\u00b5\u00b7\u0005",
    "\u0010\t\u0002\u00b6\u00b4\u0003\u0002\u0002\u0002\u00b7\u00ba\u0003",
    "\u0002\u0002\u0002\u00b8\u00b6\u0003\u0002\u0002\u0002\u00b8\u00b9\u0003",
    "\u0002\u0002\u0002\u00b9\u000f\u0003\u0002\u0002\u0002\u00ba\u00b8\u0003",
    "\u0002\u0002\u0002\u00bb\u00bd\u0007p\u0002\u0002\u00bc\u00be\u0005",
    "l7\u0002\u00bd\u00bc\u0003\u0002\u0002\u0002\u00bd\u00be\u0003\u0002",
    "\u0002\u0002\u00be\u00bf\u0003\u0002\u0002\u0002\u00bf\u00c0\u0007V",
    "\u0002\u0002\u00c0\u00c1\u0005N(\u0002\u00c1\u0011\u0003\u0002\u0002",
    "\u0002\u00c2\u00c4\u0005|?\u0002\u00c3\u00c2\u0003\u0002\u0002\u0002",
    "\u00c3\u00c4\u0003\u0002\u0002\u0002\u00c4\u00c5\u0003\u0002\u0002\u0002",
    "\u00c5\u00c6\u0007\u0010\u0002\u0002\u00c6\u00c7\u0005\\/\u0002\u00c7",
    "\u0013\u0003\u0002\u0002\u0002\u00c8\u00c9\u0007\u0010\u0002\u0002\u00c9",
    "\u00cc\u0007D\u0002\u0002\u00ca\u00cb\u0007p\u0002\u0002\u00cb\u00cd",
    "\u0007k\u0002\u0002\u00cc\u00ca\u0003\u0002\u0002\u0002\u00cc\u00cd",
    "\u0003\u0002\u0002\u0002\u00cd\u00ce\u0003\u0002\u0002\u0002\u00ce\u00d0",
    "\u0007p\u0002\u0002\u00cf\u00d1\u0005h5\u0002\u00d0\u00cf\u0003\u0002",
    "\u0002\u0002\u00d0\u00d1\u0003\u0002\u0002\u0002\u00d1\u0015\u0003\u0002",
    "\u0002\u0002\u00d2\u00d3\u0007\u0010\u0002\u0002\u00d3\u00d6\u0007+",
    "\u0002\u0002\u00d4\u00d5\u0007p\u0002\u0002\u00d5\u00d7\u0007k\u0002",
    "\u0002\u00d6\u00d4\u0003\u0002\u0002\u0002\u00d6\u00d7\u0003\u0002\u0002",
    "\u0002\u00d7\u00d8\u0003\u0002\u0002\u0002\u00d8\u00da\u0007p\u0002",
    "\u0002\u00d9\u00db\u0005h5\u0002\u00da\u00d9\u0003\u0002\u0002\u0002",
    "\u00da\u00db\u0003\u0002\u0002\u0002\u00db\u00dc\u0003\u0002\u0002\u0002",
    "\u00dc\u00dd\u0005l7\u0002\u00dd\u0017\u0003\u0002\u0002\u0002\u00de",
    "\u00df\u0007\u0012\u0002\u0002\u00df\u00e0\u0005\n\u0006\u0002\u00e0",
    "\u00e1\u00075\u0002\u0002\u00e1\u00ef\u0003\u0002\u0002\u0002\u00e2",
    "\u00e3\u0007\u0012\u0002\u0002\u00e3\u00e4\t\u0002\u0002\u0002\u00e4",
    "\u00e5\u0005N(\u0002\u00e5\u00e6\u0005\n\u0006\u0002\u00e6\u00e7\u0007",
    "5\u0002\u0002\u00e7\u00ef\u0003\u0002\u0002\u0002\u00e8\u00e9\u0007",
    "\u0012\u0002\u0002\u00e9\u00ea\u0005\n\u0006\u0002\u00ea\u00eb\u0007",
    "5\u0002\u0002\u00eb\u00ec\t\u0002\u0002\u0002\u00ec\u00ed\u0005N(\u0002",
    "\u00ed\u00ef\u0003\u0002\u0002\u0002\u00ee\u00de\u0003\u0002\u0002\u0002",
    "\u00ee\u00e2\u0003\u0002\u0002\u0002\u00ee\u00e8\u0003\u0002\u0002\u0002",
    "\u00ef\u0019\u0003\u0002\u0002\u0002\u00f0\u00f1\u0007\u0018\u0002\u0002",
    "\u00f1\u00f5\u0007p\u0002\u0002\u00f2\u00f4\u0005\u001c\u000f\u0002",
    "\u00f3\u00f2\u0003\u0002\u0002\u0002\u00f4\u00f7\u0003\u0002\u0002\u0002",
    "\u00f5\u00f3\u0003\u0002\u0002\u0002\u00f5\u00f6\u0003\u0002\u0002\u0002",
    "\u00f6\u00f8\u0003\u0002\u0002\u0002\u00f7\u00f5\u0003\u0002\u0002\u0002",
    "\u00f8\u00f9\u0007\u0019\u0002\u0002\u00f9\u001b\u0003\u0002\u0002\u0002",
    "\u00fa\u00fd\u0007p\u0002\u0002\u00fb\u00fc\u0007V\u0002\u0002\u00fc",
    "\u00fe\u0005N(\u0002\u00fd\u00fb\u0003\u0002\u0002\u0002\u00fd\u00fe",
    "\u0003\u0002\u0002\u0002\u00fe\u0100\u0003\u0002\u0002\u0002\u00ff\u0101",
    "\u0007j\u0002\u0002\u0100\u00ff\u0003\u0002\u0002\u0002\u0100\u0101",
    "\u0003\u0002\u0002\u0002\u0101\u001d\u0003\u0002\u0002\u0002\u0102\u0103",
    "\t\u0003\u0002\u0002\u0103\u001f\u0003\u0002\u0002\u0002\u0104\u0105",
    "\u0007*\u0002\u0002\u0105\u0106\u0005N(\u0002\u0106\u0107\u0007F\u0002",
    "\u0002\u0107\u010a\u0005N(\u0002\u0108\u0109\u0007B\u0002\u0002\u0109",
    "\u010b\u0005N(\u0002\u010a\u0108\u0003\u0002\u0002\u0002\u010a\u010b",
    "\u0003\u0002\u0002\u0002\u010b\u010c\u0003\u0002\u0002\u0002\u010c\u010d",
    "\u0005\n\u0006\u0002\u010d\u010f\u00077\u0002\u0002\u010e\u0110\u0005",
    "N(\u0002\u010f\u010e\u0003\u0002\u0002\u0002\u010f\u0110\u0003\u0002",
    "\u0002\u0002\u0110!\u0003\u0002\u0002\u0002\u0111\u0113\u0005|?\u0002",
    "\u0112\u0111\u0003\u0002\u0002\u0002\u0112\u0113\u0003\u0002\u0002\u0002",
    "\u0113\u0114\u0003\u0002\u0002\u0002\u0114\u0117\u0007+\u0002\u0002",
    "\u0115\u0116\u0007p\u0002\u0002\u0116\u0118\u0007k\u0002\u0002\u0117",
    "\u0115\u0003\u0002\u0002\u0002\u0117\u0118\u0003\u0002\u0002\u0002\u0118",
    "\u0119\u0003\u0002\u0002\u0002\u0119\u011b\u0007p\u0002\u0002\u011a",
    "\u011c\u0005h5\u0002\u011b\u011a\u0003\u0002\u0002\u0002\u011b\u011c",
    "\u0003\u0002\u0002\u0002\u011c\u011d\u0003\u0002\u0002\u0002\u011d\u011e",
    "\u0005l7\u0002\u011e\u011f\u0005\n\u0006\u0002\u011f\u0120\u0007\u001a",
    "\u0002\u0002\u0120#\u0003\u0002\u0002\u0002\u0121\u0124\u0005&\u0014",
    "\u0002\u0122\u0124\u0005\u001e\u0010\u0002\u0123\u0121\u0003\u0002\u0002",
    "\u0002\u0123\u0122\u0003\u0002\u0002\u0002\u0124%\u0003\u0002\u0002",
    "\u0002\u0125\u0126\u0007-\u0002\u0002\u0126\u0127\u0007p\u0002\u0002",
    "\u0127\'\u0003\u0002\u0002\u0002\u0128\u0129\u0007.\u0002\u0002\u0129",
    "\u012a\u0005N(\u0002\u012a\u012d\u0007E\u0002\u0002\u012b\u012e\u0005",
    "\f\u0007\u0002\u012c\u012e\u0005$\u0013\u0002\u012d\u012b\u0003\u0002",
    "\u0002\u0002\u012d\u012c\u0003\u0002\u0002\u0002\u012e\u0134\u0003\u0002",
    "\u0002\u0002\u012f\u0132\u0007\u0014\u0002\u0002\u0130\u0133\u0005\f",
    "\u0007\u0002\u0131\u0133\u0005$\u0013\u0002\u0132\u0130\u0003\u0002",
    "\u0002\u0002\u0132\u0131\u0003\u0002\u0002\u0002\u0133\u0135\u0003\u0002",
    "\u0002\u0002\u0134\u012f\u0003\u0002\u0002\u0002\u0134\u0135\u0003\u0002",
    "\u0002\u0002\u0135\u0136\u0003\u0002\u0002\u0002\u0136\u0137\u0007e",
    "\u0002\u0002\u0137\u0152\u0003\u0002\u0002\u0002\u0138\u0139\u0007.",
    "\u0002\u0002\u0139\u013a\u0005N(\u0002\u013a\u013c\u0007E\u0002\u0002",
    "\u013b\u013d\u0007e\u0002\u0002\u013c\u013b\u0003\u0002\u0002\u0002",
    "\u013d\u013e\u0003\u0002\u0002\u0002\u013e\u013c\u0003\u0002\u0002\u0002",
    "\u013e\u013f\u0003\u0002\u0002\u0002\u013f\u0140\u0003\u0002\u0002\u0002",
    "\u0140\u0148\u0005\n\u0006\u0002\u0141\u0142\u0007\u0017\u0002\u0002",
    "\u0142\u0143\u0005*\u0016\u0002\u0143\u0144\u0007E\u0002\u0002\u0144",
    "\u0145\u0005\n\u0006\u0002\u0145\u0147\u0003\u0002\u0002\u0002\u0146",
    "\u0141\u0003\u0002\u0002\u0002\u0147\u014a\u0003\u0002\u0002\u0002\u0148",
    "\u0146\u0003\u0002\u0002\u0002\u0148\u0149\u0003\u0002\u0002\u0002\u0149",
    "\u014d\u0003\u0002\u0002\u0002\u014a\u0148\u0003\u0002\u0002\u0002\u014b",
    "\u014c\u0007\u0014\u0002\u0002\u014c\u014e\u0005\n\u0006\u0002\u014d",
    "\u014b\u0003\u0002\u0002\u0002\u014d\u014e\u0003\u0002\u0002\u0002\u014e",
    "\u014f\u0003\u0002\u0002\u0002\u014f\u0150\u0007\u001b\u0002\u0002\u0150",
    "\u0152\u0003\u0002\u0002\u0002\u0151\u0128\u0003\u0002\u0002\u0002\u0151",
    "\u0138\u0003\u0002\u0002\u0002\u0152)\u0003\u0002\u0002\u0002\u0153",
    "\u0154\u0005N(\u0002\u0154+\u0003\u0002\u0002\u0002\u0155\u0157\u0007",
    ":\u0002\u0002\u0156\u0158\u0007l\u0002\u0002\u0157\u0156\u0003\u0002",
    "\u0002\u0002\u0157\u0158\u0003\u0002\u0002\u0002\u0158\u0159\u0003\u0002",
    "\u0002\u0002\u0159\u015a\u0007p\u0002\u0002\u015a\u015b\u0007k\u0002",
    "\u0002\u015b\u015f\u0007p\u0002\u0002\u015c\u015e\u0005.\u0018\u0002",
    "\u015d\u015c\u0003\u0002\u0002\u0002\u015e\u0161\u0003\u0002\u0002\u0002",
    "\u015f\u015d\u0003\u0002\u0002\u0002\u015f\u0160\u0003\u0002\u0002\u0002",
    "\u0160\u0162\u0003\u0002\u0002\u0002\u0161\u015f\u0003\u0002\u0002\u0002",
    "\u0162\u0163\u0007\u001c\u0002\u0002\u0163-\u0003\u0002\u0002\u0002",
    "\u0164\u0167\u00050\u0019\u0002\u0165\u0167\u00052\u001a\u0002\u0166",
    "\u0164\u0003\u0002\u0002\u0002\u0166\u0165\u0003\u0002\u0002\u0002\u0167",
    "/\u0003\u0002\u0002\u0002\u0168\u0169\u0007,\u0002\u0002\u0169\u016a",
    "\u0007V\u0002\u0002\u016a\u016b\u0007n\u0002\u0002\u016b\u0174\u0007",
    "Z\u0002\u0002\u016c\u0172\u0007T\u0002\u0002\u016d\u016e\u0007j\u0002",
    "\u0002\u016e\u0170\t\u0004\u0002\u0002\u016f\u0171\u0007_\u0002\u0002",
    "\u0170\u016f\u0003\u0002\u0002\u0002\u0170\u0171\u0003\u0002\u0002\u0002",
    "\u0171\u0173\u0003\u0002\u0002\u0002\u0172\u016d\u0003\u0002\u0002\u0002",
    "\u0172\u0173\u0003\u0002\u0002\u0002\u0173\u0175\u0003\u0002\u0002\u0002",
    "\u0174\u016c\u0003\u0002\u0002\u0002\u0174\u0175\u0003\u0002\u0002\u0002",
    "\u0175\u0176\u0003\u0002\u0002\u0002\u0176\u0177\u0007`\u0002\u0002",
    "\u0177\u0178\u0005l7\u0002\u01781\u0003\u0002\u0002\u0002\u0179\u017a",
    "\u0007=\u0002\u0002\u017a\u017b\u0007V\u0002\u0002\u017b\u017c\u0007",
    "n\u0002\u0002\u017c\u0185\u0007Z\u0002\u0002\u017d\u0183\u0007T\u0002",
    "\u0002\u017e\u017f\u0007j\u0002\u0002\u017f\u0181\t\u0004\u0002\u0002",
    "\u0180\u0182\u0007_\u0002\u0002\u0181\u0180\u0003\u0002\u0002\u0002",
    "\u0181\u0182\u0003\u0002\u0002\u0002\u0182\u0184\u0003\u0002\u0002\u0002",
    "\u0183\u017e\u0003\u0002\u0002\u0002\u0183\u0184\u0003\u0002\u0002\u0002",
    "\u0184\u0186\u0003\u0002\u0002\u0002\u0185\u017d\u0003\u0002\u0002\u0002",
    "\u0185\u0186\u0003\u0002\u0002\u0002\u0186\u0187\u0003\u0002\u0002\u0002",
    "\u0187\u0188\u0007`\u0002\u0002\u0188\u0189\u0005h5\u0002\u01893\u0003",
    "\u0002\u0002\u0002\u018a\u018b\u0007!\u0002\u0002\u018b\u018c\u0007",
    "Z\u0002\u0002\u018c\u018d\u0007T\u0002\u0002\u018d\u018e\u0007`\u0002",
    "\u0002\u018e\u0190\u0007p\u0002\u0002\u018f\u0191\u0005h5\u0002\u0190",
    "\u018f\u0003\u0002\u0002\u0002\u0190\u0191\u0003\u0002\u0002\u0002\u0191",
    "5\u0003\u0002\u0002\u0002\u0192\u0193\u0007n\u0002\u0002\u0193\u019c",
    "\u0007Z\u0002\u0002\u0194\u019a\u0007T\u0002\u0002\u0195\u0196\u0007",
    "j\u0002\u0002\u0196\u0198\t\u0004\u0002\u0002\u0197\u0199\u0007_\u0002",
    "\u0002\u0198\u0197\u0003\u0002\u0002\u0002\u0198\u0199\u0003\u0002\u0002",
    "\u0002\u0199\u019b\u0003\u0002\u0002\u0002\u019a\u0195\u0003\u0002\u0002",
    "\u0002\u019a\u019b\u0003\u0002\u0002\u0002\u019b\u019d\u0003\u0002\u0002",
    "\u0002\u019c\u0194\u0003\u0002\u0002\u0002\u019c\u019d\u0003\u0002\u0002",
    "\u0002\u019d\u019e\u0003\u0002\u0002\u0002\u019e\u01a1\u0007`\u0002",
    "\u0002\u019f\u01a2\u00058\u001d\u0002\u01a0\u01a2\u0005:\u001e\u0002",
    "\u01a1\u019f\u0003\u0002\u0002\u0002\u01a1\u01a0\u0003\u0002\u0002\u0002",
    "\u01a27\u0003\u0002\u0002\u0002\u01a3\u01a4\u0007p\u0002\u0002\u01a4",
    "\u01a6\u0007k\u0002\u0002\u01a5\u01a3\u0003\u0002\u0002\u0002\u01a5",
    "\u01a6\u0003\u0002\u0002\u0002\u01a6\u01a7\u0003\u0002\u0002\u0002\u01a7",
    "\u01a9\u0007p\u0002\u0002\u01a8\u01aa\u0005h5\u0002\u01a9\u01a8\u0003",
    "\u0002\u0002\u0002\u01a9\u01aa\u0003\u0002\u0002\u0002\u01aa\u01ac\u0003",
    "\u0002\u0002\u0002\u01ab\u01ad\u0005l7\u0002\u01ac\u01ab\u0003\u0002",
    "\u0002\u0002\u01ac\u01ad\u0003\u0002\u0002\u0002\u01ad9\u0003\u0002",
    "\u0002\u0002\u01ae\u01b1\u0007l\u0002\u0002\u01af\u01b0\u0007p\u0002",
    "\u0002\u01b0\u01b2\u0007k\u0002\u0002\u01b1\u01af\u0003\u0002\u0002",
    "\u0002\u01b1\u01b2\u0003\u0002\u0002\u0002\u01b2\u01b3\u0003\u0002\u0002",
    "\u0002\u01b3\u01b5\u0007p\u0002\u0002\u01b4\u01b6\u0005<\u001f\u0002",
    "\u01b5\u01b4\u0003\u0002\u0002\u0002\u01b5\u01b6\u0003\u0002\u0002\u0002",
    "\u01b6\u01b8\u0003\u0002\u0002\u0002\u01b7\u01b9\u0005l7\u0002\u01b8",
    "\u01b7\u0003\u0002\u0002\u0002\u01b8\u01b9\u0003\u0002\u0002\u0002\u01b9",
    ";\u0003\u0002\u0002\u0002\u01ba\u01c3\u0007Z\u0002\u0002\u01bb\u01c0",
    "\u0005> \u0002\u01bc\u01bd\u0007j\u0002\u0002\u01bd\u01bf\u0005> \u0002",
    "\u01be\u01bc\u0003\u0002\u0002\u0002\u01bf\u01c2\u0003\u0002\u0002\u0002",
    "\u01c0\u01be\u0003\u0002\u0002\u0002\u01c0\u01c1\u0003\u0002\u0002\u0002",
    "\u01c1\u01c4\u0003\u0002\u0002\u0002\u01c2\u01c0\u0003\u0002\u0002\u0002",
    "\u01c3\u01bb\u0003\u0002\u0002\u0002\u01c3\u01c4\u0003\u0002\u0002\u0002",
    "\u01c4\u01c5\u0003\u0002\u0002\u0002\u01c5\u01c6\u0007`\u0002\u0002",
    "\u01c6=\u0003\u0002\u0002\u0002\u01c7\u01c9\t\u0005\u0002\u0002\u01c8",
    "\u01c7\u0003\u0002\u0002\u0002\u01c8\u01c9\u0003\u0002\u0002\u0002\u01c9",
    "\u01ca\u0003\u0002\u0002\u0002\u01ca\u01cc\u0007p\u0002\u0002\u01cb",
    "\u01cd\u0005l7\u0002\u01cc\u01cb\u0003\u0002\u0002\u0002\u01cc\u01cd",
    "\u0003\u0002\u0002\u0002\u01cd?\u0003\u0002\u0002\u0002\u01ce\u01cf",
    "\u0007<\u0002\u0002\u01cf\u01d0\u0007\u000b\u0002\u0002\u01d0\u01d2",
    "\u0005N(\u0002\u01d1\u01d3\u0007h\u0002\u0002\u01d2\u01d1\u0003\u0002",
    "\u0002\u0002\u01d2\u01d3\u0003\u0002\u0002\u0002\u01d3\u01d7\u0003\u0002",
    "\u0002\u0002\u01d4\u01d6\u0005B\"\u0002\u01d5\u01d4\u0003\u0002\u0002",
    "\u0002\u01d6\u01d9\u0003\u0002\u0002\u0002\u01d7\u01d5\u0003\u0002\u0002",
    "\u0002\u01d7\u01d8\u0003\u0002\u0002\u0002\u01d8\u01db\u0003\u0002\u0002",
    "\u0002\u01d9\u01d7\u0003\u0002\u0002\u0002\u01da\u01dc\u0005D#\u0002",
    "\u01db\u01da\u0003\u0002\u0002\u0002\u01db\u01dc\u0003\u0002\u0002\u0002",
    "\u01dc\u01dd\u0003\u0002\u0002\u0002\u01dd\u01de\u0007\u001d\u0002\u0002",
    "\u01deA\u0003\u0002\u0002\u0002\u01df\u01e0\u0007\u000b\u0002\u0002",
    "\u01e0\u01e5\u0005F$\u0002\u01e1\u01e2\u0007j\u0002\u0002\u01e2\u01e4",
    "\u0005F$\u0002\u01e3\u01e1\u0003\u0002\u0002\u0002\u01e4\u01e7\u0003",
    "\u0002\u0002\u0002\u01e5\u01e3\u0003\u0002\u0002\u0002\u01e5\u01e6\u0003",
    "\u0002\u0002\u0002\u01e6\u01e9\u0003\u0002\u0002\u0002\u01e7\u01e5\u0003",
    "\u0002\u0002\u0002\u01e8\u01ea\u0007h\u0002\u0002\u01e9\u01e8\u0003",
    "\u0002\u0002\u0002\u01e9\u01ea\u0003\u0002\u0002\u0002\u01ea\u01eb\u0003",
    "\u0002\u0002\u0002\u01eb\u01ec\u0005\n\u0006\u0002\u01ecC\u0003\u0002",
    "\u0002\u0002\u01ed\u01ef\u0007\f\u0002\u0002\u01ee\u01f0\u0007h\u0002",
    "\u0002\u01ef\u01ee\u0003\u0002\u0002\u0002\u01ef\u01f0\u0003\u0002\u0002",
    "\u0002\u01f0\u01f1\u0003\u0002\u0002\u0002\u01f1\u01f2\u0005\n\u0006",
    "\u0002\u01f2E\u0003\u0002\u0002\u0002\u01f3\u01f4\u0005N(\u0002\u01f4",
    "G\u0003\u0002\u0002\u0002\u01f5\u01f7\u0005|?\u0002\u01f6\u01f5\u0003",
    "\u0002\u0002\u0002\u01f6\u01f7\u0003\u0002\u0002\u0002\u01f7\u01f8\u0003",
    "\u0002\u0002\u0002\u01f8\u01fb\u0007D\u0002\u0002\u01f9\u01fa\u0007",
    "p\u0002\u0002\u01fa\u01fc\u0007k\u0002\u0002\u01fb\u01f9\u0003\u0002",
    "\u0002\u0002\u01fb\u01fc\u0003\u0002\u0002\u0002\u01fc\u01fd\u0003\u0002",
    "\u0002\u0002\u01fd\u01ff\u0007p\u0002\u0002\u01fe\u0200\u0005h5\u0002",
    "\u01ff\u01fe\u0003\u0002\u0002\u0002\u01ff\u0200\u0003\u0002\u0002\u0002",
    "\u0200\u0201\u0003\u0002\u0002\u0002\u0201\u0202\u0005\n\u0006\u0002",
    "\u0202\u0203\u0007\u001e\u0002\u0002\u0203I\u0003\u0002\u0002\u0002",
    "\u0204\u0206\u0005|?\u0002\u0205\u0204\u0003\u0002\u0002\u0002\u0205",
    "\u0206\u0003\u0002\u0002\u0002\u0206\u0207\u0003\u0002\u0002\u0002\u0207",
    "\u0208\u0007H\u0002\u0002\u0208\u020c\u0007p\u0002\u0002\u0209\u020b",
    "\u0005L\'\u0002\u020a\u0209\u0003\u0002\u0002\u0002\u020b\u020e\u0003",
    "\u0002\u0002\u0002\u020c\u020a\u0003\u0002\u0002\u0002\u020c\u020d\u0003",
    "\u0002\u0002\u0002\u020d\u020f\u0003\u0002\u0002\u0002\u020e\u020c\u0003",
    "\u0002\u0002\u0002\u020f\u0210\u0007\u001f\u0002\u0002\u0210K\u0003",
    "\u0002\u0002\u0002\u0211\u0216\u0007p\u0002\u0002\u0212\u0213\u0007",
    "Z\u0002\u0002\u0213\u0214\u0005v<\u0002\u0214\u0215\u0007`\u0002\u0002",
    "\u0215\u0217\u0003\u0002\u0002\u0002\u0216\u0212\u0003\u0002\u0002\u0002",
    "\u0216\u0217\u0003\u0002\u0002\u0002\u0217\u0218\u0003\u0002\u0002\u0002",
    "\u0218\u0219\u0005l7\u0002\u0219M\u0003\u0002\u0002\u0002\u021a\u021b",
    "\b(\u0001\u0002\u021b\u0221\u0005P)\u0002\u021c\u021d\u0007Z\u0002\u0002",
    "\u021d\u021e\u0005N(\u0002\u021e\u021f\u0007`\u0002\u0002\u021f\u0221",
    "\u0003\u0002\u0002\u0002\u0220\u021a\u0003\u0002\u0002\u0002\u0220\u021c",
    "\u0003\u0002\u0002\u0002\u0221\u0233\u0003\u0002\u0002\u0002\u0222\u0223",
    "\f\b\u0002\u0002\u0223\u0224\t\u0006\u0002\u0002\u0224\u0232\u0005N",
    "(\t\u0225\u0226\f\u0007\u0002\u0002\u0226\u0227\t\u0007\u0002\u0002",
    "\u0227\u0232\u0005N(\b\u0228\u0229\f\u0006\u0002\u0002\u0229\u022a\t",
    "\b\u0002\u0002\u022a\u0232\u0005N(\u0007\u022b\u022c\f\u0005\u0002\u0002",
    "\u022c\u022d\t\t\u0002\u0002\u022d\u0232\u0005N(\u0006\u022e\u022f\f",
    "\u0004\u0002\u0002\u022f\u0230\t\n\u0002\u0002\u0230\u0232\u0005N(\u0005",
    "\u0231\u0222\u0003\u0002\u0002\u0002\u0231\u0225\u0003\u0002\u0002\u0002",
    "\u0231\u0228\u0003\u0002\u0002\u0002\u0231\u022b\u0003\u0002\u0002\u0002",
    "\u0231\u022e\u0003\u0002\u0002\u0002\u0232\u0235\u0003\u0002\u0002\u0002",
    "\u0233\u0231\u0003\u0002\u0002\u0002\u0233\u0234\u0003\u0002\u0002\u0002",
    "\u0234O\u0003\u0002\u0002\u0002\u0235\u0233\u0003\u0002\u0002\u0002",
    "\u0236\u023b\u0005T+\u0002\u0237\u0238\u0005R*\u0002\u0238\u0239\u0005",
    "X-\u0002\u0239\u023b\u0003\u0002\u0002\u0002\u023a\u0236\u0003\u0002",
    "\u0002\u0002\u023a\u0237\u0003\u0002\u0002\u0002\u023bQ\u0003\u0002",
    "\u0002\u0002\u023c\u023d\t\u000b\u0002\u0002\u023dS\u0003\u0002\u0002",
    "\u0002\u023e\u023f\b+\u0001\u0002\u023f\u0243\u0005X-\u0002\u0240\u0242",
    "\u0005V,\u0002\u0241\u0240\u0003\u0002\u0002\u0002\u0242\u0245\u0003",
    "\u0002\u0002\u0002\u0243\u0241\u0003\u0002\u0002\u0002\u0243\u0244\u0003",
    "\u0002\u0002\u0002\u0244\u0251\u0003\u0002\u0002\u0002\u0245\u0243\u0003",
    "\u0002\u0002\u0002\u0246\u0247\f\u0003\u0002\u0002\u0247\u0248\u0007",
    "k\u0002\u0002\u0248\u024c\u0007p\u0002\u0002\u0249\u024b\u0005V,\u0002",
    "\u024a\u0249\u0003\u0002\u0002\u0002\u024b\u024e\u0003\u0002\u0002\u0002",
    "\u024c\u024a\u0003\u0002\u0002\u0002\u024c\u024d\u0003\u0002\u0002\u0002",
    "\u024d\u0250\u0003\u0002\u0002\u0002\u024e\u024c\u0003\u0002\u0002\u0002",
    "\u024f\u0246\u0003\u0002\u0002\u0002\u0250\u0253\u0003\u0002\u0002\u0002",
    "\u0251\u024f\u0003\u0002\u0002\u0002\u0251\u0252\u0003\u0002\u0002\u0002",
    "\u0252U\u0003\u0002\u0002\u0002\u0253\u0251\u0003\u0002\u0002\u0002",
    "\u0254\u0255\u0005d3\u0002\u0255W\u0003\u0002\u0002\u0002\u0256\u025c",
    "\u0005v<\u0002\u0257\u0258\u0007Z\u0002\u0002\u0258\u0259\u0005N(\u0002",
    "\u0259\u025a\u0007`\u0002\u0002\u025a\u025c\u0003\u0002\u0002\u0002",
    "\u025b\u0256\u0003\u0002\u0002\u0002\u025b\u0257\u0003\u0002\u0002\u0002",
    "\u025cY\u0003\u0002\u0002\u0002\u025d\u025f\u0005|?\u0002\u025e\u025d",
    "\u0003\u0002\u0002\u0002\u025e\u025f\u0003\u0002\u0002\u0002\u025f\u0260",
    "\u0003\u0002\u0002\u0002\u0260\u0261\u0007\u0011\u0002\u0002\u0261\u0262",
    "\u0005\\/\u0002\u0262[\u0003\u0002\u0002\u0002\u0263\u026a\u0005^0\u0002",
    "\u0264\u0266\u0007j\u0002\u0002\u0265\u0267\u0005^0\u0002\u0266\u0265",
    "\u0003\u0002\u0002\u0002\u0266\u0267\u0003\u0002\u0002\u0002\u0267\u0269",
    "\u0003\u0002\u0002\u0002\u0268\u0264\u0003\u0002\u0002\u0002\u0269\u026c",
    "\u0003\u0002\u0002\u0002\u026a\u0268\u0003\u0002\u0002\u0002\u026a\u026b",
    "\u0003\u0002\u0002\u0002\u026b\u026d\u0003\u0002\u0002\u0002\u026c\u026a",
    "\u0003\u0002\u0002\u0002\u026d\u0273\u0005l7\u0002\u026e\u0271\u0007",
    "V\u0002\u0002\u026f\u0272\u0005N(\u0002\u0270\u0272\u0005x=\u0002\u0271",
    "\u026f\u0003\u0002\u0002\u0002\u0271\u0270\u0003\u0002\u0002\u0002\u0272",
    "\u0274\u0003\u0002\u0002\u0002\u0273\u026e\u0003\u0002\u0002\u0002\u0273",
    "\u0274\u0003\u0002\u0002\u0002\u0274]\u0003\u0002\u0002\u0002\u0275",
    "\u027a\u0007p\u0002\u0002\u0276\u0277\u0007Z\u0002\u0002\u0277\u0278",
    "\u0005v<\u0002\u0278\u0279\u0007`\u0002\u0002\u0279\u027b\u0003\u0002",
    "\u0002\u0002\u027a\u0276\u0003\u0002\u0002\u0002\u027a\u027b\u0003\u0002",
    "\u0002\u0002\u027b_\u0003\u0002\u0002\u0002\u027c\u027d\u0007L\u0002",
    "\u0002\u027d\u027e\u0005N(\u0002\u027e\u027f\u0005\n\u0006\u0002\u027f",
    "\u0280\u0007K\u0002\u0002\u0280a\u0003\u0002\u0002\u0002\u0281\u0282",
    "\u0007\u0003\u0002\u0002\u0282\u0283\u0007p\u0002\u0002\u0283c\u0003",
    "\u0002\u0002\u0002\u0284\u028d\u0007Z\u0002\u0002\u0285\u028a\u0005",
    "f4\u0002\u0286\u0287\u0007j\u0002\u0002\u0287\u0289\u0005f4\u0002\u0288",
    "\u0286\u0003\u0002\u0002\u0002\u0289\u028c\u0003\u0002\u0002\u0002\u028a",
    "\u0288\u0003\u0002\u0002\u0002\u028a\u028b\u0003\u0002\u0002\u0002\u028b",
    "\u028e\u0003\u0002\u0002\u0002\u028c\u028a\u0003\u0002\u0002\u0002\u028d",
    "\u0285\u0003\u0002\u0002\u0002\u028d\u028e\u0003\u0002\u0002\u0002\u028e",
    "\u028f\u0003\u0002\u0002\u0002\u028f\u0290\u0007`\u0002\u0002\u0290",
    "e\u0003\u0002\u0002\u0002\u0291\u0292\u0005N(\u0002\u0292g\u0003\u0002",
    "\u0002\u0002\u0293\u029c\u0007Z\u0002\u0002\u0294\u0299\u0005j6\u0002",
    "\u0295\u0296\u0007j\u0002\u0002\u0296\u0298\u0005j6\u0002\u0297\u0295",
    "\u0003\u0002\u0002\u0002\u0298\u029b\u0003\u0002\u0002\u0002\u0299\u0297",
    "\u0003\u0002\u0002\u0002\u0299\u029a\u0003\u0002\u0002\u0002\u029a\u029d",
    "\u0003\u0002\u0002\u0002\u029b\u0299\u0003\u0002\u0002\u0002\u029c\u0294",
    "\u0003\u0002\u0002\u0002\u029c\u029d\u0003\u0002\u0002\u0002\u029d\u029e",
    "\u0003\u0002\u0002\u0002\u029e\u029f\u0007`\u0002\u0002\u029fi\u0003",
    "\u0002\u0002\u0002\u02a0\u02a2\t\u0005\u0002\u0002\u02a1\u02a0\u0003",
    "\u0002\u0002\u0002\u02a1\u02a2\u0003\u0002\u0002\u0002\u02a2\u02a3\u0003",
    "\u0002\u0002\u0002\u02a3\u02a7\u0007p\u0002\u0002\u02a4\u02a5\u0007",
    "Z\u0002\u0002\u02a5\u02a6\u0007T\u0002\u0002\u02a6\u02a8\u0007`\u0002",
    "\u0002\u02a7\u02a4\u0003\u0002\u0002\u0002\u02a7\u02a8\u0003\u0002\u0002",
    "\u0002\u02a8\u02aa\u0003\u0002\u0002\u0002\u02a9\u02ab\u0005l7\u0002",
    "\u02aa\u02a9\u0003\u0002\u0002\u0002\u02aa\u02ab\u0003\u0002\u0002\u0002",
    "\u02abk\u0003\u0002\u0002\u0002\u02ac\u02ae\u0007\u0005\u0002\u0002",
    "\u02ad\u02af\u0007\u0018\u0002\u0002\u02ae\u02ad\u0003\u0002\u0002\u0002",
    "\u02ae\u02af\u0003\u0002\u0002\u0002\u02af\u02b0\u0003\u0002\u0002\u0002",
    "\u02b0\u02b2\u0005z>\u0002\u02b1\u02b3\u0005r:\u0002\u02b2\u02b1\u0003",
    "\u0002\u0002\u0002\u02b2\u02b3\u0003\u0002\u0002\u0002\u02b3m\u0003",
    "\u0002\u0002\u0002\u02b4\u02ca\u0007\r\u0002\u0002\u02b5\u02ca\u0007",
    "?\u0002\u0002\u02b6\u02ca\u0007M\u0002\u0002\u02b7\u02ca\u0007\u0013",
    "\u0002\u0002\u02b8\u02ca\u0007)\u0002\u0002\u02b9\u02ca\u0007\u0007",
    "\u0002\u0002\u02ba\u02ca\u0007\u0006\u0002\u0002\u02bb\u02ca\u0007\t",
    "\u0002\u0002\u02bc\u02ca\u00073\u0002\u0002\u02bd\u02ca\u00074\u0002",
    "\u0002\u02be\u02c7\u0007C\u0002\u0002\u02bf\u02c1\u0007o\u0002\u0002",
    "\u02c0\u02bf\u0003\u0002\u0002\u0002\u02c0\u02c1\u0003\u0002\u0002\u0002",
    "\u02c1\u02c2\u0003\u0002\u0002\u0002\u02c2\u02c4\u0007]\u0002\u0002",
    "\u02c3\u02c5\u0007o\u0002\u0002\u02c4\u02c3\u0003\u0002\u0002\u0002",
    "\u02c4\u02c5\u0003\u0002\u0002\u0002\u02c5\u02c6\u0003\u0002\u0002\u0002",
    "\u02c6\u02c8\u0005N(\u0002\u02c7\u02c0\u0003\u0002\u0002\u0002\u02c7",
    "\u02c8\u0003\u0002\u0002\u0002\u02c8\u02ca\u0003\u0002\u0002\u0002\u02c9",
    "\u02b4\u0003\u0002\u0002\u0002\u02c9\u02b5\u0003\u0002\u0002\u0002\u02c9",
    "\u02b6\u0003\u0002\u0002\u0002\u02c9\u02b7\u0003\u0002\u0002\u0002\u02c9",
    "\u02b8\u0003\u0002\u0002\u0002\u02c9\u02b9\u0003\u0002\u0002\u0002\u02c9",
    "\u02ba\u0003\u0002\u0002\u0002\u02c9\u02bb\u0003\u0002\u0002\u0002\u02c9",
    "\u02bc\u0003\u0002\u0002\u0002\u02c9\u02bd\u0003\u0002\u0002\u0002\u02c9",
    "\u02be\u0003\u0002\u0002\u0002\u02cao\u0003\u0002\u0002\u0002\u02cb",
    "\u02d0\u0007p\u0002\u0002\u02cc\u02cd\t\f\u0002\u0002\u02cd\u02cf\u0007",
    "p\u0002\u0002\u02ce\u02cc\u0003\u0002\u0002\u0002\u02cf\u02d2\u0003",
    "\u0002\u0002\u0002\u02d0\u02ce\u0003\u0002\u0002\u0002\u02d0\u02d1\u0003",
    "\u0002\u0002\u0002\u02d1q\u0003\u0002\u0002\u0002\u02d2\u02d0\u0003",
    "\u0002\u0002\u0002\u02d3\u02d4\u0007]\u0002\u0002\u02d4\u02d5\t\r\u0002",
    "\u0002\u02d5s\u0003\u0002\u0002\u0002\u02d6\u02d7\u0007p\u0002\u0002",
    "\u02d7\u02d8\u0007h\u0002\u0002\u02d8u\u0003\u0002\u0002\u0002\u02d9",
    "\u02ed\u0007R\u0002\u0002\u02da\u02ed\u0007S\u0002\u0002\u02db\u02dd",
    "\t\u0007\u0002\u0002\u02dc\u02db\u0003\u0002\u0002\u0002\u02dc\u02dd",
    "\u0003\u0002\u0002\u0002\u02dd\u02e4\u0003\u0002\u0002\u0002\u02de\u02e0",
    "\u0007T\u0002\u0002\u02df\u02de\u0003\u0002\u0002\u0002\u02e0\u02e1",
    "\u0003\u0002\u0002\u0002\u02e1\u02df\u0003\u0002\u0002\u0002\u02e1\u02e2",
    "\u0003\u0002\u0002\u0002\u02e2\u02e3\u0003\u0002\u0002\u0002\u02e3\u02e5",
    "\u0007k\u0002\u0002\u02e4\u02df\u0003\u0002\u0002\u0002\u02e4\u02e5",
    "\u0003\u0002\u0002\u0002\u02e5\u02e6\u0003\u0002\u0002\u0002\u02e6\u02ed",
    "\u0007T\u0002\u0002\u02e7\u02ed\u0007P\u0002\u0002\u02e8\u02ed\u0007",
    "Q\u0002\u0002\u02e9\u02ed\u0007G\u0002\u0002\u02ea\u02ed\u0007(\u0002",
    "\u0002\u02eb\u02ed\u0007p\u0002\u0002\u02ec\u02d9\u0003\u0002\u0002",
    "\u0002\u02ec\u02da\u0003\u0002\u0002\u0002\u02ec\u02dc\u0003\u0002\u0002",
    "\u0002\u02ec\u02e7\u0003\u0002\u0002\u0002\u02ec\u02e8\u0003\u0002\u0002",
    "\u0002\u02ec\u02e9\u0003\u0002\u0002\u0002\u02ec\u02ea\u0003\u0002\u0002",
    "\u0002\u02ec\u02eb\u0003\u0002\u0002\u0002\u02edw\u0003\u0002\u0002",
    "\u0002\u02ee\u02f1\u0007c\u0002\u0002\u02ef\u02f2\u0005v<\u0002\u02f0",
    "\u02f2\u0005x=\u0002\u02f1\u02ef\u0003\u0002\u0002\u0002\u02f1\u02f0",
    "\u0003\u0002\u0002\u0002\u02f2\u02fa\u0003\u0002\u0002\u0002\u02f3\u02f6",
    "\u0007j\u0002\u0002\u02f4\u02f7\u0005v<\u0002\u02f5\u02f7\u0005x=\u0002",
    "\u02f6\u02f4\u0003\u0002\u0002\u0002\u02f6\u02f5\u0003\u0002\u0002\u0002",
    "\u02f7\u02f9\u0003\u0002\u0002\u0002\u02f8\u02f3\u0003\u0002\u0002\u0002",
    "\u02f9\u02fc\u0003\u0002\u0002\u0002\u02fa\u02f8\u0003\u0002\u0002\u0002",
    "\u02fa\u02fb\u0003\u0002\u0002\u0002\u02fb\u02fe\u0003\u0002\u0002\u0002",
    "\u02fc\u02fa\u0003\u0002\u0002\u0002\u02fd\u02ff\u0007j\u0002\u0002",
    "\u02fe\u02fd\u0003\u0002\u0002\u0002\u02fe\u02ff\u0003\u0002\u0002\u0002",
    "\u02ff\u0300\u0003\u0002\u0002\u0002\u0300\u0301\u0007d\u0002\u0002",
    "\u0301y\u0003\u0002\u0002\u0002\u0302\u0305\u0005n8\u0002\u0303\u0305",
    "\u0005p9\u0002\u0304\u0302\u0003\u0002\u0002\u0002\u0304\u0303\u0003",
    "\u0002\u0002\u0002\u0305\u0309\u0003\u0002\u0002\u0002\u0306\u0307\u0007",
    "Z\u0002\u0002\u0307\u0308\t\r\u0002\u0002\u0308\u030a\u0007`\u0002\u0002",
    "\u0309\u0306\u0003\u0002\u0002\u0002\u0309\u030a\u0003\u0002\u0002\u0002",
    "\u030a{\u0003\u0002\u0002\u0002\u030b\u030c\u0007;\u0002\u0002\u030c",
    "}\u0003\u0002\u0002\u0002i\u0081\u0095\u009e\u00a3\u00b0\u00b8\u00bd",
    "\u00c3\u00cc\u00d0\u00d6\u00da\u00ee\u00f5\u00fd\u0100\u010a\u010f\u0112",
    "\u0117\u011b\u0123\u012d\u0132\u0134\u013e\u0148\u014d\u0151\u0157\u015f",
    "\u0166\u0170\u0172\u0174\u0181\u0183\u0185\u0190\u0198\u019a\u019c\u01a1",
    "\u01a5\u01a9\u01ac\u01b1\u01b5\u01b8\u01c0\u01c3\u01c8\u01cc\u01d2\u01d7",
    "\u01db\u01e5\u01e9\u01ef\u01f6\u01fb\u01ff\u0205\u020c\u0216\u0220\u0231",
    "\u0233\u023a\u0243\u024c\u0251\u025b\u025e\u0266\u026a\u0271\u0273\u027a",
    "\u028a\u028d\u0299\u029c\u02a1\u02a7\u02aa\u02ae\u02b2\u02c0\u02c4\u02c7",
    "\u02c9\u02d0\u02dc\u02e1\u02e4\u02ec\u02f1\u02f6\u02fa\u02fe\u0304\u0309"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     "'-'", "'*'", null, "'+'", null, "'['", "']'", "'{'", 
                     "'}'", null, null, "'''", "':'", "';'", "','", "'.'", 
                     null, "'_'" ];

var symbolicNames = [ null, "OBJECT", "AND", "AS", "BOOLEAN", "REAL", "BYREF", 
                      "BYTE", "BYVAL", "CASE", "CASE_ELSE", "CHAR", "CONST", 
                      "COUNTOF", "DECLARE", "DIM", "DO", "DWORD", "ELSE", 
                      "ELIF", "END", "ELSEIF", "ENUM", "END_ENUM", "END_FUNCTION", 
                      "END_IF", "END_PROPERTY", "END_SELECT", "END_SUB", 
                      "END_TYPE", "END_WITH", "EVENT", "EXIT_DO", "EXIT_FOR", 
                      "EXIT_FUNCTION", "EXIT_PROPERTY", "EXIT_SUB", "EXIT_WHILE", 
                      "FALSE", "FLOAT", "FOR", "FUNCTION", "GET", "GOTO", 
                      "IF", "IFDEF", "IFNDEF", "INCLUDE", "INCLUDEPP", "INTEGER", 
                      "LONG", "LOOP", "MOD", "NEXT", "NOT", "OR", "PROPERTY", 
                      "PUBLIC", "SELECT", "SET", "SHL", "SHORT", "SHR", 
                      "SIZEOF", "STEP", "STRING", "SUB", "THEN", "TO", "TRUE", 
                      "TYPE", "UNDEF", "UNTIL", "WEND", "WHILE", "WORD", 
                      "XOR", "SHARP", "STRINGLITERAL", "TemplateStringLiteral", 
                      "HEXLITERAL", "BINLITERAL", "INTEGERLITERAL", "DIV", 
                      "EQ", "GEQ", "GT", "LEQ", "LPAREN", "LT", "MINUS", 
                      "MULT", "NEQ", "PLUS", "RPAREN", "L_SQUARE_BRACKET", 
                      "R_SQUARE_BRACKET", "L_CURLY_BRACKET", "R_CURLY_BRACKET", 
                      "NEWLINE", "COMMENT", "SINGLEQUOTE", "COLON", "SEMICOLON", 
                      "COMMA", "DOT", "BANG", "UNDERSCORE", "SYSCALL", "WS", 
                      "IDENTIFIER", "DIRECTIVE_INCLUDE", "DIRECTIVE_INCLUDEPP", 
                      "DIRECTIVE_DEFINE", "DIRECTIVE_IF", "DIRECTIVE_ELIF", 
                      "DIRECTIVE_ELSE", "DIRECTIVE_UNDEF", "DIRECTIVE_IFDEF", 
                      "DIRECTIVE_IFNDEF", "DIRECTIVE_ENDIF", "DIRECTIVE_ERROR", 
                      "DIRECTIVE_BANG", "DIRECTIVE_LP", "DIRECTIVE_RP", 
                      "DIRECTIVE_EQUAL", "DIRECTIVE_NOTEQUAL", "DIRECTIVE_AND", 
                      "DIRECTIVE_OR", "DIRECTIVE_LT", "DIRECTIVE_GT", "DIRECTIVE_LE", 
                      "DIRECTIVE_GE", "DIRECTIVE_ID", "DIRECTIVE_DECIMAL_LITERAL", 
                      "DIRECTIVE_FLOAT", "DIRECTIVE_NEWLINE", "DIRECTIVE_SINGLE_COMMENT", 
                      "DIRECTIVE_BACKSLASH_NEWLINE", "DIRECTIVE_TEXT_NEWLINE", 
                      "DIRECTIVE_TEXT_BACKSLASH_NEWLINE", "DIRECTIVE_TEXT_MULTI_COMMENT", 
                      "DIRECTIVE_TEXT_SINGLE_COMMENT", "DIRECTIVE_TEXT", 
                      "ANY" ];

var ruleNames =  [ "startRule", "topLevelDeclaration", "includeStmt", "includeppStmt", 
                   "block", "statement", "constStmt", "constSubStmt", "declareVariableStmt", 
                   "declareSubStmt", "declareFuncStmt", "doLoopStmt", "enumerationStmt", 
                   "enumerationStmt_Constant", "exitStmt", "forNextStmt", 
                   "functionStmt", "jumpStmt", "goToStmt", "ifThenElseStmt", 
                   "ifConditionStmt", "propertyDefineStmt", "propertyDefineStmt_InStmt", 
                   "propertyGetStmt", "propertySetStmt", "eventDeclaration", 
                   "syscallDeclaration", "syscallDeclarationInner", "syscallInternalDeclarationInner", 
                   "syscallInternalParamList", "paramInternal", "selectCaseStmt", 
                   "sC_Case", "sC_Default", "sC_Cond", "subStmt", "typeStmt", 
                   "typeStmtElement", "expression", "unaryExpression", "unaryOperator", 
                   "postfixExpression", "postfix", "primaryExpression", 
                   "variableStmt", "variableListStmt", "variableListItem", 
                   "whileWendStmt", "objectDeclaration", "argList", "arg", 
                   "paramList", "param", "asTypeClause", "baseType", "complexType", 
                   "fieldLength", "lineLabel", "literal", "arrayLiteral", 
                   "type", "visibility" ];

function TibboBasicParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

TibboBasicParser.prototype = Object.create(antlr4.Parser.prototype);
TibboBasicParser.prototype.constructor = TibboBasicParser;

Object.defineProperty(TibboBasicParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

TibboBasicParser.EOF = antlr4.Token.EOF;
TibboBasicParser.OBJECT = 1;
TibboBasicParser.AND = 2;
TibboBasicParser.AS = 3;
TibboBasicParser.BOOLEAN = 4;
TibboBasicParser.REAL = 5;
TibboBasicParser.BYREF = 6;
TibboBasicParser.BYTE = 7;
TibboBasicParser.BYVAL = 8;
TibboBasicParser.CASE = 9;
TibboBasicParser.CASE_ELSE = 10;
TibboBasicParser.CHAR = 11;
TibboBasicParser.CONST = 12;
TibboBasicParser.COUNTOF = 13;
TibboBasicParser.DECLARE = 14;
TibboBasicParser.DIM = 15;
TibboBasicParser.DO = 16;
TibboBasicParser.DWORD = 17;
TibboBasicParser.ELSE = 18;
TibboBasicParser.ELIF = 19;
TibboBasicParser.END = 20;
TibboBasicParser.ELSEIF = 21;
TibboBasicParser.ENUM = 22;
TibboBasicParser.END_ENUM = 23;
TibboBasicParser.END_FUNCTION = 24;
TibboBasicParser.END_IF = 25;
TibboBasicParser.END_PROPERTY = 26;
TibboBasicParser.END_SELECT = 27;
TibboBasicParser.END_SUB = 28;
TibboBasicParser.END_TYPE = 29;
TibboBasicParser.END_WITH = 30;
TibboBasicParser.EVENT = 31;
TibboBasicParser.EXIT_DO = 32;
TibboBasicParser.EXIT_FOR = 33;
TibboBasicParser.EXIT_FUNCTION = 34;
TibboBasicParser.EXIT_PROPERTY = 35;
TibboBasicParser.EXIT_SUB = 36;
TibboBasicParser.EXIT_WHILE = 37;
TibboBasicParser.FALSE = 38;
TibboBasicParser.FLOAT = 39;
TibboBasicParser.FOR = 40;
TibboBasicParser.FUNCTION = 41;
TibboBasicParser.GET = 42;
TibboBasicParser.GOTO = 43;
TibboBasicParser.IF = 44;
TibboBasicParser.IFDEF = 45;
TibboBasicParser.IFNDEF = 46;
TibboBasicParser.INCLUDE = 47;
TibboBasicParser.INCLUDEPP = 48;
TibboBasicParser.INTEGER = 49;
TibboBasicParser.LONG = 50;
TibboBasicParser.LOOP = 51;
TibboBasicParser.MOD = 52;
TibboBasicParser.NEXT = 53;
TibboBasicParser.NOT = 54;
TibboBasicParser.OR = 55;
TibboBasicParser.PROPERTY = 56;
TibboBasicParser.PUBLIC = 57;
TibboBasicParser.SELECT = 58;
TibboBasicParser.SET = 59;
TibboBasicParser.SHL = 60;
TibboBasicParser.SHORT = 61;
TibboBasicParser.SHR = 62;
TibboBasicParser.SIZEOF = 63;
TibboBasicParser.STEP = 64;
TibboBasicParser.STRING = 65;
TibboBasicParser.SUB = 66;
TibboBasicParser.THEN = 67;
TibboBasicParser.TO = 68;
TibboBasicParser.TRUE = 69;
TibboBasicParser.TYPE = 70;
TibboBasicParser.UNDEF = 71;
TibboBasicParser.UNTIL = 72;
TibboBasicParser.WEND = 73;
TibboBasicParser.WHILE = 74;
TibboBasicParser.WORD = 75;
TibboBasicParser.XOR = 76;
TibboBasicParser.SHARP = 77;
TibboBasicParser.STRINGLITERAL = 78;
TibboBasicParser.TemplateStringLiteral = 79;
TibboBasicParser.HEXLITERAL = 80;
TibboBasicParser.BINLITERAL = 81;
TibboBasicParser.INTEGERLITERAL = 82;
TibboBasicParser.DIV = 83;
TibboBasicParser.EQ = 84;
TibboBasicParser.GEQ = 85;
TibboBasicParser.GT = 86;
TibboBasicParser.LEQ = 87;
TibboBasicParser.LPAREN = 88;
TibboBasicParser.LT = 89;
TibboBasicParser.MINUS = 90;
TibboBasicParser.MULT = 91;
TibboBasicParser.NEQ = 92;
TibboBasicParser.PLUS = 93;
TibboBasicParser.RPAREN = 94;
TibboBasicParser.L_SQUARE_BRACKET = 95;
TibboBasicParser.R_SQUARE_BRACKET = 96;
TibboBasicParser.L_CURLY_BRACKET = 97;
TibboBasicParser.R_CURLY_BRACKET = 98;
TibboBasicParser.NEWLINE = 99;
TibboBasicParser.COMMENT = 100;
TibboBasicParser.SINGLEQUOTE = 101;
TibboBasicParser.COLON = 102;
TibboBasicParser.SEMICOLON = 103;
TibboBasicParser.COMMA = 104;
TibboBasicParser.DOT = 105;
TibboBasicParser.BANG = 106;
TibboBasicParser.UNDERSCORE = 107;
TibboBasicParser.SYSCALL = 108;
TibboBasicParser.WS = 109;
TibboBasicParser.IDENTIFIER = 110;
TibboBasicParser.DIRECTIVE_INCLUDE = 111;
TibboBasicParser.DIRECTIVE_INCLUDEPP = 112;
TibboBasicParser.DIRECTIVE_DEFINE = 113;
TibboBasicParser.DIRECTIVE_IF = 114;
TibboBasicParser.DIRECTIVE_ELIF = 115;
TibboBasicParser.DIRECTIVE_ELSE = 116;
TibboBasicParser.DIRECTIVE_UNDEF = 117;
TibboBasicParser.DIRECTIVE_IFDEF = 118;
TibboBasicParser.DIRECTIVE_IFNDEF = 119;
TibboBasicParser.DIRECTIVE_ENDIF = 120;
TibboBasicParser.DIRECTIVE_ERROR = 121;
TibboBasicParser.DIRECTIVE_BANG = 122;
TibboBasicParser.DIRECTIVE_LP = 123;
TibboBasicParser.DIRECTIVE_RP = 124;
TibboBasicParser.DIRECTIVE_EQUAL = 125;
TibboBasicParser.DIRECTIVE_NOTEQUAL = 126;
TibboBasicParser.DIRECTIVE_AND = 127;
TibboBasicParser.DIRECTIVE_OR = 128;
TibboBasicParser.DIRECTIVE_LT = 129;
TibboBasicParser.DIRECTIVE_GT = 130;
TibboBasicParser.DIRECTIVE_LE = 131;
TibboBasicParser.DIRECTIVE_GE = 132;
TibboBasicParser.DIRECTIVE_ID = 133;
TibboBasicParser.DIRECTIVE_DECIMAL_LITERAL = 134;
TibboBasicParser.DIRECTIVE_FLOAT = 135;
TibboBasicParser.DIRECTIVE_NEWLINE = 136;
TibboBasicParser.DIRECTIVE_SINGLE_COMMENT = 137;
TibboBasicParser.DIRECTIVE_BACKSLASH_NEWLINE = 138;
TibboBasicParser.DIRECTIVE_TEXT_NEWLINE = 139;
TibboBasicParser.DIRECTIVE_TEXT_BACKSLASH_NEWLINE = 140;
TibboBasicParser.DIRECTIVE_TEXT_MULTI_COMMENT = 141;
TibboBasicParser.DIRECTIVE_TEXT_SINGLE_COMMENT = 142;
TibboBasicParser.DIRECTIVE_TEXT = 143;
TibboBasicParser.ANY = 144;

TibboBasicParser.RULE_startRule = 0;
TibboBasicParser.RULE_topLevelDeclaration = 1;
TibboBasicParser.RULE_includeStmt = 2;
TibboBasicParser.RULE_includeppStmt = 3;
TibboBasicParser.RULE_block = 4;
TibboBasicParser.RULE_statement = 5;
TibboBasicParser.RULE_constStmt = 6;
TibboBasicParser.RULE_constSubStmt = 7;
TibboBasicParser.RULE_declareVariableStmt = 8;
TibboBasicParser.RULE_declareSubStmt = 9;
TibboBasicParser.RULE_declareFuncStmt = 10;
TibboBasicParser.RULE_doLoopStmt = 11;
TibboBasicParser.RULE_enumerationStmt = 12;
TibboBasicParser.RULE_enumerationStmt_Constant = 13;
TibboBasicParser.RULE_exitStmt = 14;
TibboBasicParser.RULE_forNextStmt = 15;
TibboBasicParser.RULE_functionStmt = 16;
TibboBasicParser.RULE_jumpStmt = 17;
TibboBasicParser.RULE_goToStmt = 18;
TibboBasicParser.RULE_ifThenElseStmt = 19;
TibboBasicParser.RULE_ifConditionStmt = 20;
TibboBasicParser.RULE_propertyDefineStmt = 21;
TibboBasicParser.RULE_propertyDefineStmt_InStmt = 22;
TibboBasicParser.RULE_propertyGetStmt = 23;
TibboBasicParser.RULE_propertySetStmt = 24;
TibboBasicParser.RULE_eventDeclaration = 25;
TibboBasicParser.RULE_syscallDeclaration = 26;
TibboBasicParser.RULE_syscallDeclarationInner = 27;
TibboBasicParser.RULE_syscallInternalDeclarationInner = 28;
TibboBasicParser.RULE_syscallInternalParamList = 29;
TibboBasicParser.RULE_paramInternal = 30;
TibboBasicParser.RULE_selectCaseStmt = 31;
TibboBasicParser.RULE_sC_Case = 32;
TibboBasicParser.RULE_sC_Default = 33;
TibboBasicParser.RULE_sC_Cond = 34;
TibboBasicParser.RULE_subStmt = 35;
TibboBasicParser.RULE_typeStmt = 36;
TibboBasicParser.RULE_typeStmtElement = 37;
TibboBasicParser.RULE_expression = 38;
TibboBasicParser.RULE_unaryExpression = 39;
TibboBasicParser.RULE_unaryOperator = 40;
TibboBasicParser.RULE_postfixExpression = 41;
TibboBasicParser.RULE_postfix = 42;
TibboBasicParser.RULE_primaryExpression = 43;
TibboBasicParser.RULE_variableStmt = 44;
TibboBasicParser.RULE_variableListStmt = 45;
TibboBasicParser.RULE_variableListItem = 46;
TibboBasicParser.RULE_whileWendStmt = 47;
TibboBasicParser.RULE_objectDeclaration = 48;
TibboBasicParser.RULE_argList = 49;
TibboBasicParser.RULE_arg = 50;
TibboBasicParser.RULE_paramList = 51;
TibboBasicParser.RULE_param = 52;
TibboBasicParser.RULE_asTypeClause = 53;
TibboBasicParser.RULE_baseType = 54;
TibboBasicParser.RULE_complexType = 55;
TibboBasicParser.RULE_fieldLength = 56;
TibboBasicParser.RULE_lineLabel = 57;
TibboBasicParser.RULE_literal = 58;
TibboBasicParser.RULE_arrayLiteral = 59;
TibboBasicParser.RULE_type = 60;
TibboBasicParser.RULE_visibility = 61;


function StartRuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_startRule;
    return this;
}

StartRuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartRuleContext.prototype.constructor = StartRuleContext;

StartRuleContext.prototype.EOF = function() {
    return this.getToken(TibboBasicParser.EOF, 0);
};

StartRuleContext.prototype.topLevelDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TopLevelDeclarationContext);
    } else {
        return this.getTypedRuleContext(TopLevelDeclarationContext,i);
    }
};

StartRuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterStartRule(this);
	}
};

StartRuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitStartRule(this);
	}
};

StartRuleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitStartRule(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.StartRuleContext = StartRuleContext;

TibboBasicParser.prototype.startRule = function() {

    var localctx = new StartRuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, TibboBasicParser.RULE_startRule);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 127;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << TibboBasicParser.OBJECT) | (1 << TibboBasicParser.CONST) | (1 << TibboBasicParser.DECLARE) | (1 << TibboBasicParser.DIM) | (1 << TibboBasicParser.ENUM) | (1 << TibboBasicParser.EVENT))) !== 0) || ((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (TibboBasicParser.FUNCTION - 41)) | (1 << (TibboBasicParser.INCLUDE - 41)) | (1 << (TibboBasicParser.INCLUDEPP - 41)) | (1 << (TibboBasicParser.PROPERTY - 41)) | (1 << (TibboBasicParser.PUBLIC - 41)) | (1 << (TibboBasicParser.SUB - 41)) | (1 << (TibboBasicParser.TYPE - 41)))) !== 0) || _la===TibboBasicParser.SYSCALL) {
            this.state = 124;
            this.topLevelDeclaration();
            this.state = 129;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 130;
        this.match(TibboBasicParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TopLevelDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_topLevelDeclaration;
    return this;
}

TopLevelDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TopLevelDeclarationContext.prototype.constructor = TopLevelDeclarationContext;

TopLevelDeclarationContext.prototype.includeStmt = function() {
    return this.getTypedRuleContext(IncludeStmtContext,0);
};

TopLevelDeclarationContext.prototype.includeppStmt = function() {
    return this.getTypedRuleContext(IncludeppStmtContext,0);
};

TopLevelDeclarationContext.prototype.enumerationStmt = function() {
    return this.getTypedRuleContext(EnumerationStmtContext,0);
};

TopLevelDeclarationContext.prototype.constStmt = function() {
    return this.getTypedRuleContext(ConstStmtContext,0);
};

TopLevelDeclarationContext.prototype.declareSubStmt = function() {
    return this.getTypedRuleContext(DeclareSubStmtContext,0);
};

TopLevelDeclarationContext.prototype.declareFuncStmt = function() {
    return this.getTypedRuleContext(DeclareFuncStmtContext,0);
};

TopLevelDeclarationContext.prototype.declareVariableStmt = function() {
    return this.getTypedRuleContext(DeclareVariableStmtContext,0);
};

TopLevelDeclarationContext.prototype.variableStmt = function() {
    return this.getTypedRuleContext(VariableStmtContext,0);
};

TopLevelDeclarationContext.prototype.subStmt = function() {
    return this.getTypedRuleContext(SubStmtContext,0);
};

TopLevelDeclarationContext.prototype.functionStmt = function() {
    return this.getTypedRuleContext(FunctionStmtContext,0);
};

TopLevelDeclarationContext.prototype.objectDeclaration = function() {
    return this.getTypedRuleContext(ObjectDeclarationContext,0);
};

TopLevelDeclarationContext.prototype.propertyDefineStmt = function() {
    return this.getTypedRuleContext(PropertyDefineStmtContext,0);
};

TopLevelDeclarationContext.prototype.eventDeclaration = function() {
    return this.getTypedRuleContext(EventDeclarationContext,0);
};

TopLevelDeclarationContext.prototype.syscallDeclaration = function() {
    return this.getTypedRuleContext(SyscallDeclarationContext,0);
};

TopLevelDeclarationContext.prototype.typeStmt = function() {
    return this.getTypedRuleContext(TypeStmtContext,0);
};

TopLevelDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterTopLevelDeclaration(this);
	}
};

TopLevelDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitTopLevelDeclaration(this);
	}
};

TopLevelDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitTopLevelDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.TopLevelDeclarationContext = TopLevelDeclarationContext;

TibboBasicParser.prototype.topLevelDeclaration = function() {

    var localctx = new TopLevelDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, TibboBasicParser.RULE_topLevelDeclaration);
    try {
        this.state = 147;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 132;
            this.includeStmt();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 133;
            this.includeppStmt();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 134;
            this.enumerationStmt();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 135;
            this.constStmt();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 136;
            this.declareSubStmt();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 137;
            this.declareFuncStmt();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 138;
            this.declareVariableStmt();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 139;
            this.variableStmt();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 140;
            this.subStmt();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 141;
            this.functionStmt();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 142;
            this.objectDeclaration();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 143;
            this.propertyDefineStmt();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 144;
            this.eventDeclaration();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 145;
            this.syscallDeclaration();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 146;
            this.typeStmt();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IncludeStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_includeStmt;
    return this;
}

IncludeStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IncludeStmtContext.prototype.constructor = IncludeStmtContext;

IncludeStmtContext.prototype.INCLUDE = function() {
    return this.getToken(TibboBasicParser.INCLUDE, 0);
};

IncludeStmtContext.prototype.STRINGLITERAL = function() {
    return this.getToken(TibboBasicParser.STRINGLITERAL, 0);
};

IncludeStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterIncludeStmt(this);
	}
};

IncludeStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitIncludeStmt(this);
	}
};

IncludeStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitIncludeStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.IncludeStmtContext = IncludeStmtContext;

TibboBasicParser.prototype.includeStmt = function() {

    var localctx = new IncludeStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, TibboBasicParser.RULE_includeStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 149;
        this.match(TibboBasicParser.INCLUDE);
        this.state = 150;
        this.match(TibboBasicParser.STRINGLITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IncludeppStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_includeppStmt;
    return this;
}

IncludeppStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IncludeppStmtContext.prototype.constructor = IncludeppStmtContext;

IncludeppStmtContext.prototype.INCLUDEPP = function() {
    return this.getToken(TibboBasicParser.INCLUDEPP, 0);
};

IncludeppStmtContext.prototype.STRINGLITERAL = function() {
    return this.getToken(TibboBasicParser.STRINGLITERAL, 0);
};

IncludeppStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterIncludeppStmt(this);
	}
};

IncludeppStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitIncludeppStmt(this);
	}
};

IncludeppStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitIncludeppStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.IncludeppStmtContext = IncludeppStmtContext;

TibboBasicParser.prototype.includeppStmt = function() {

    var localctx = new IncludeppStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, TibboBasicParser.RULE_includeppStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 152;
        this.match(TibboBasicParser.INCLUDEPP);
        this.state = 153;
        this.match(TibboBasicParser.STRINGLITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

BlockContext.prototype.lineLabel = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LineLabelContext);
    } else {
        return this.getTypedRuleContext(LineLabelContext,i);
    }
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitBlock(this);
	}
};

BlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.BlockContext = BlockContext;

TibboBasicParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, TibboBasicParser.RULE_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 161;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << TibboBasicParser.CONST) | (1 << TibboBasicParser.DIM) | (1 << TibboBasicParser.DO))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (TibboBasicParser.EXIT_DO - 32)) | (1 << (TibboBasicParser.EXIT_FOR - 32)) | (1 << (TibboBasicParser.EXIT_FUNCTION - 32)) | (1 << (TibboBasicParser.EXIT_PROPERTY - 32)) | (1 << (TibboBasicParser.EXIT_SUB - 32)) | (1 << (TibboBasicParser.EXIT_WHILE - 32)) | (1 << (TibboBasicParser.FALSE - 32)) | (1 << (TibboBasicParser.FOR - 32)) | (1 << (TibboBasicParser.GOTO - 32)) | (1 << (TibboBasicParser.IF - 32)) | (1 << (TibboBasicParser.NOT - 32)) | (1 << (TibboBasicParser.PUBLIC - 32)) | (1 << (TibboBasicParser.SELECT - 32)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (TibboBasicParser.TRUE - 69)) | (1 << (TibboBasicParser.WHILE - 69)) | (1 << (TibboBasicParser.STRINGLITERAL - 69)) | (1 << (TibboBasicParser.TemplateStringLiteral - 69)) | (1 << (TibboBasicParser.HEXLITERAL - 69)) | (1 << (TibboBasicParser.BINLITERAL - 69)) | (1 << (TibboBasicParser.INTEGERLITERAL - 69)) | (1 << (TibboBasicParser.LPAREN - 69)) | (1 << (TibboBasicParser.MINUS - 69)) | (1 << (TibboBasicParser.PLUS - 69)))) !== 0) || _la===TibboBasicParser.IDENTIFIER) {
            this.state = 156;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
            if(la_===1) {
                this.state = 155;
                this.lineLabel();

            }
            this.state = 158;
            this.statement();
            this.state = 163;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.lineLabel = function() {
    return this.getTypedRuleContext(LineLabelContext,0);
};

StatementContext.prototype.constStmt = function() {
    return this.getTypedRuleContext(ConstStmtContext,0);
};

StatementContext.prototype.doLoopStmt = function() {
    return this.getTypedRuleContext(DoLoopStmtContext,0);
};

StatementContext.prototype.forNextStmt = function() {
    return this.getTypedRuleContext(ForNextStmtContext,0);
};

StatementContext.prototype.jumpStmt = function() {
    return this.getTypedRuleContext(JumpStmtContext,0);
};

StatementContext.prototype.ifThenElseStmt = function() {
    return this.getTypedRuleContext(IfThenElseStmtContext,0);
};

StatementContext.prototype.selectCaseStmt = function() {
    return this.getTypedRuleContext(SelectCaseStmtContext,0);
};

StatementContext.prototype.variableStmt = function() {
    return this.getTypedRuleContext(VariableStmtContext,0);
};

StatementContext.prototype.whileWendStmt = function() {
    return this.getTypedRuleContext(WhileWendStmtContext,0);
};

StatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitStatement(this);
	}
};

StatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.StatementContext = StatementContext;

TibboBasicParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, TibboBasicParser.RULE_statement);
    try {
        this.state = 174;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 164;
            this.lineLabel();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 165;
            this.constStmt();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 166;
            this.doLoopStmt();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 167;
            this.forNextStmt();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 168;
            this.jumpStmt();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 169;
            this.ifThenElseStmt();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 170;
            this.selectCaseStmt();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 171;
            this.variableStmt();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 172;
            this.whileWendStmt();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 173;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_constStmt;
    return this;
}

ConstStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstStmtContext.prototype.constructor = ConstStmtContext;

ConstStmtContext.prototype.CONST = function() {
    return this.getToken(TibboBasicParser.CONST, 0);
};

ConstStmtContext.prototype.constSubStmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstSubStmtContext);
    } else {
        return this.getTypedRuleContext(ConstSubStmtContext,i);
    }
};

ConstStmtContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.COMMA);
    } else {
        return this.getToken(TibboBasicParser.COMMA, i);
    }
};


ConstStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterConstStmt(this);
	}
};

ConstStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitConstStmt(this);
	}
};

ConstStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitConstStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.ConstStmtContext = ConstStmtContext;

TibboBasicParser.prototype.constStmt = function() {

    var localctx = new ConstStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, TibboBasicParser.RULE_constStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 176;
        this.match(TibboBasicParser.CONST);
        this.state = 177;
        this.constSubStmt();
        this.state = 182;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TibboBasicParser.COMMA) {
            this.state = 178;
            this.match(TibboBasicParser.COMMA);
            this.state = 179;
            this.constSubStmt();
            this.state = 184;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstSubStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_constSubStmt;
    this.name = null; // Token
    this.value = null; // ExpressionContext
    return this;
}

ConstSubStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstSubStmtContext.prototype.constructor = ConstSubStmtContext;

ConstSubStmtContext.prototype.EQ = function() {
    return this.getToken(TibboBasicParser.EQ, 0);
};

ConstSubStmtContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

ConstSubStmtContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConstSubStmtContext.prototype.asTypeClause = function() {
    return this.getTypedRuleContext(AsTypeClauseContext,0);
};

ConstSubStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterConstSubStmt(this);
	}
};

ConstSubStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitConstSubStmt(this);
	}
};

ConstSubStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitConstSubStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.ConstSubStmtContext = ConstSubStmtContext;

TibboBasicParser.prototype.constSubStmt = function() {

    var localctx = new ConstSubStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, TibboBasicParser.RULE_constSubStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 185;
        localctx.name = this.match(TibboBasicParser.IDENTIFIER);
        this.state = 187;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.AS) {
            this.state = 186;
            this.asTypeClause();
        }

        this.state = 189;
        this.match(TibboBasicParser.EQ);
        this.state = 190;
        localctx.value = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclareVariableStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_declareVariableStmt;
    return this;
}

DeclareVariableStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclareVariableStmtContext.prototype.constructor = DeclareVariableStmtContext;

DeclareVariableStmtContext.prototype.DECLARE = function() {
    return this.getToken(TibboBasicParser.DECLARE, 0);
};

DeclareVariableStmtContext.prototype.variableListStmt = function() {
    return this.getTypedRuleContext(VariableListStmtContext,0);
};

DeclareVariableStmtContext.prototype.visibility = function() {
    return this.getTypedRuleContext(VisibilityContext,0);
};

DeclareVariableStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterDeclareVariableStmt(this);
	}
};

DeclareVariableStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitDeclareVariableStmt(this);
	}
};

DeclareVariableStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitDeclareVariableStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.DeclareVariableStmtContext = DeclareVariableStmtContext;

TibboBasicParser.prototype.declareVariableStmt = function() {

    var localctx = new DeclareVariableStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, TibboBasicParser.RULE_declareVariableStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 193;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.PUBLIC) {
            this.state = 192;
            this.visibility();
        }

        this.state = 195;
        this.match(TibboBasicParser.DECLARE);
        this.state = 196;
        this.variableListStmt();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclareSubStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_declareSubStmt;
    this.name = null; // Token
    return this;
}

DeclareSubStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclareSubStmtContext.prototype.constructor = DeclareSubStmtContext;

DeclareSubStmtContext.prototype.DECLARE = function() {
    return this.getToken(TibboBasicParser.DECLARE, 0);
};

DeclareSubStmtContext.prototype.SUB = function() {
    return this.getToken(TibboBasicParser.SUB, 0);
};

DeclareSubStmtContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.IDENTIFIER);
    } else {
        return this.getToken(TibboBasicParser.IDENTIFIER, i);
    }
};


DeclareSubStmtContext.prototype.DOT = function() {
    return this.getToken(TibboBasicParser.DOT, 0);
};

DeclareSubStmtContext.prototype.paramList = function() {
    return this.getTypedRuleContext(ParamListContext,0);
};

DeclareSubStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterDeclareSubStmt(this);
	}
};

DeclareSubStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitDeclareSubStmt(this);
	}
};

DeclareSubStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitDeclareSubStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.DeclareSubStmtContext = DeclareSubStmtContext;

TibboBasicParser.prototype.declareSubStmt = function() {

    var localctx = new DeclareSubStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, TibboBasicParser.RULE_declareSubStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 198;
        this.match(TibboBasicParser.DECLARE);
        this.state = 199;
        this.match(TibboBasicParser.SUB);
        this.state = 202;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
        if(la_===1) {
            this.state = 200;
            this.match(TibboBasicParser.IDENTIFIER);
            this.state = 201;
            this.match(TibboBasicParser.DOT);

        }
        this.state = 204;
        localctx.name = this.match(TibboBasicParser.IDENTIFIER);
        this.state = 206;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.LPAREN) {
            this.state = 205;
            this.paramList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclareFuncStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_declareFuncStmt;
    this.name = null; // Token
    this.returnType = null; // AsTypeClauseContext
    return this;
}

DeclareFuncStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclareFuncStmtContext.prototype.constructor = DeclareFuncStmtContext;

DeclareFuncStmtContext.prototype.DECLARE = function() {
    return this.getToken(TibboBasicParser.DECLARE, 0);
};

DeclareFuncStmtContext.prototype.FUNCTION = function() {
    return this.getToken(TibboBasicParser.FUNCTION, 0);
};

DeclareFuncStmtContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.IDENTIFIER);
    } else {
        return this.getToken(TibboBasicParser.IDENTIFIER, i);
    }
};


DeclareFuncStmtContext.prototype.asTypeClause = function() {
    return this.getTypedRuleContext(AsTypeClauseContext,0);
};

DeclareFuncStmtContext.prototype.DOT = function() {
    return this.getToken(TibboBasicParser.DOT, 0);
};

DeclareFuncStmtContext.prototype.paramList = function() {
    return this.getTypedRuleContext(ParamListContext,0);
};

DeclareFuncStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterDeclareFuncStmt(this);
	}
};

DeclareFuncStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitDeclareFuncStmt(this);
	}
};

DeclareFuncStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitDeclareFuncStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.DeclareFuncStmtContext = DeclareFuncStmtContext;

TibboBasicParser.prototype.declareFuncStmt = function() {

    var localctx = new DeclareFuncStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, TibboBasicParser.RULE_declareFuncStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 208;
        this.match(TibboBasicParser.DECLARE);
        this.state = 209;
        this.match(TibboBasicParser.FUNCTION);
        this.state = 212;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
        if(la_===1) {
            this.state = 210;
            this.match(TibboBasicParser.IDENTIFIER);
            this.state = 211;
            this.match(TibboBasicParser.DOT);

        }
        this.state = 214;
        localctx.name = this.match(TibboBasicParser.IDENTIFIER);
        this.state = 216;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.LPAREN) {
            this.state = 215;
            this.paramList();
        }

        this.state = 218;
        localctx.returnType = this.asTypeClause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DoLoopStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_doLoopStmt;
    this.condition = null; // ExpressionContext
    return this;
}

DoLoopStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DoLoopStmtContext.prototype.constructor = DoLoopStmtContext;

DoLoopStmtContext.prototype.DO = function() {
    return this.getToken(TibboBasicParser.DO, 0);
};

DoLoopStmtContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

DoLoopStmtContext.prototype.LOOP = function() {
    return this.getToken(TibboBasicParser.LOOP, 0);
};

DoLoopStmtContext.prototype.WHILE = function() {
    return this.getToken(TibboBasicParser.WHILE, 0);
};

DoLoopStmtContext.prototype.UNTIL = function() {
    return this.getToken(TibboBasicParser.UNTIL, 0);
};

DoLoopStmtContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DoLoopStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterDoLoopStmt(this);
	}
};

DoLoopStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitDoLoopStmt(this);
	}
};

DoLoopStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitDoLoopStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.DoLoopStmtContext = DoLoopStmtContext;

TibboBasicParser.prototype.doLoopStmt = function() {

    var localctx = new DoLoopStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, TibboBasicParser.RULE_doLoopStmt);
    var _la = 0; // Token type
    try {
        this.state = 236;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 220;
            this.match(TibboBasicParser.DO);
            this.state = 221;
            this.block();
            this.state = 222;
            this.match(TibboBasicParser.LOOP);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 224;
            this.match(TibboBasicParser.DO);
            this.state = 225;
            _la = this._input.LA(1);
            if(!(_la===TibboBasicParser.UNTIL || _la===TibboBasicParser.WHILE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 226;
            localctx.condition = this.expression(0);
            this.state = 227;
            this.block();
            this.state = 228;
            this.match(TibboBasicParser.LOOP);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 230;
            this.match(TibboBasicParser.DO);
            this.state = 231;
            this.block();
            this.state = 232;
            this.match(TibboBasicParser.LOOP);
            this.state = 233;
            _la = this._input.LA(1);
            if(!(_la===TibboBasicParser.UNTIL || _la===TibboBasicParser.WHILE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 234;
            localctx.condition = this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumerationStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_enumerationStmt;
    return this;
}

EnumerationStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumerationStmtContext.prototype.constructor = EnumerationStmtContext;

EnumerationStmtContext.prototype.ENUM = function() {
    return this.getToken(TibboBasicParser.ENUM, 0);
};

EnumerationStmtContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

EnumerationStmtContext.prototype.END_ENUM = function() {
    return this.getToken(TibboBasicParser.END_ENUM, 0);
};

EnumerationStmtContext.prototype.enumerationStmt_Constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumerationStmt_ConstantContext);
    } else {
        return this.getTypedRuleContext(EnumerationStmt_ConstantContext,i);
    }
};

EnumerationStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterEnumerationStmt(this);
	}
};

EnumerationStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitEnumerationStmt(this);
	}
};

EnumerationStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitEnumerationStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.EnumerationStmtContext = EnumerationStmtContext;

TibboBasicParser.prototype.enumerationStmt = function() {

    var localctx = new EnumerationStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, TibboBasicParser.RULE_enumerationStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 238;
        this.match(TibboBasicParser.ENUM);
        this.state = 239;
        this.match(TibboBasicParser.IDENTIFIER);
        this.state = 243;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TibboBasicParser.IDENTIFIER) {
            this.state = 240;
            this.enumerationStmt_Constant();
            this.state = 245;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 246;
        this.match(TibboBasicParser.END_ENUM);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumerationStmt_ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_enumerationStmt_Constant;
    return this;
}

EnumerationStmt_ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumerationStmt_ConstantContext.prototype.constructor = EnumerationStmt_ConstantContext;

EnumerationStmt_ConstantContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

EnumerationStmt_ConstantContext.prototype.EQ = function() {
    return this.getToken(TibboBasicParser.EQ, 0);
};

EnumerationStmt_ConstantContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

EnumerationStmt_ConstantContext.prototype.COMMA = function() {
    return this.getToken(TibboBasicParser.COMMA, 0);
};

EnumerationStmt_ConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterEnumerationStmt_Constant(this);
	}
};

EnumerationStmt_ConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitEnumerationStmt_Constant(this);
	}
};

EnumerationStmt_ConstantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitEnumerationStmt_Constant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.EnumerationStmt_ConstantContext = EnumerationStmt_ConstantContext;

TibboBasicParser.prototype.enumerationStmt_Constant = function() {

    var localctx = new EnumerationStmt_ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, TibboBasicParser.RULE_enumerationStmt_Constant);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 248;
        this.match(TibboBasicParser.IDENTIFIER);
        this.state = 251;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.EQ) {
            this.state = 249;
            this.match(TibboBasicParser.EQ);
            this.state = 250;
            this.expression(0);
        }

        this.state = 254;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.COMMA) {
            this.state = 253;
            this.match(TibboBasicParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExitStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_exitStmt;
    return this;
}

ExitStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExitStmtContext.prototype.constructor = ExitStmtContext;

ExitStmtContext.prototype.EXIT_DO = function() {
    return this.getToken(TibboBasicParser.EXIT_DO, 0);
};

ExitStmtContext.prototype.EXIT_FOR = function() {
    return this.getToken(TibboBasicParser.EXIT_FOR, 0);
};

ExitStmtContext.prototype.EXIT_FUNCTION = function() {
    return this.getToken(TibboBasicParser.EXIT_FUNCTION, 0);
};

ExitStmtContext.prototype.EXIT_PROPERTY = function() {
    return this.getToken(TibboBasicParser.EXIT_PROPERTY, 0);
};

ExitStmtContext.prototype.EXIT_SUB = function() {
    return this.getToken(TibboBasicParser.EXIT_SUB, 0);
};

ExitStmtContext.prototype.EXIT_WHILE = function() {
    return this.getToken(TibboBasicParser.EXIT_WHILE, 0);
};

ExitStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterExitStmt(this);
	}
};

ExitStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitExitStmt(this);
	}
};

ExitStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitExitStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.ExitStmtContext = ExitStmtContext;

TibboBasicParser.prototype.exitStmt = function() {

    var localctx = new ExitStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, TibboBasicParser.RULE_exitStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 256;
        _la = this._input.LA(1);
        if(!(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (TibboBasicParser.EXIT_DO - 32)) | (1 << (TibboBasicParser.EXIT_FOR - 32)) | (1 << (TibboBasicParser.EXIT_FUNCTION - 32)) | (1 << (TibboBasicParser.EXIT_PROPERTY - 32)) | (1 << (TibboBasicParser.EXIT_SUB - 32)) | (1 << (TibboBasicParser.EXIT_WHILE - 32)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForNextStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_forNextStmt;
    this.step = null; // ExpressionContext
    return this;
}

ForNextStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForNextStmtContext.prototype.constructor = ForNextStmtContext;

ForNextStmtContext.prototype.FOR = function() {
    return this.getToken(TibboBasicParser.FOR, 0);
};

ForNextStmtContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ForNextStmtContext.prototype.TO = function() {
    return this.getToken(TibboBasicParser.TO, 0);
};

ForNextStmtContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ForNextStmtContext.prototype.NEXT = function() {
    return this.getToken(TibboBasicParser.NEXT, 0);
};

ForNextStmtContext.prototype.STEP = function() {
    return this.getToken(TibboBasicParser.STEP, 0);
};

ForNextStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterForNextStmt(this);
	}
};

ForNextStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitForNextStmt(this);
	}
};

ForNextStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitForNextStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.ForNextStmtContext = ForNextStmtContext;

TibboBasicParser.prototype.forNextStmt = function() {

    var localctx = new ForNextStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, TibboBasicParser.RULE_forNextStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 258;
        this.match(TibboBasicParser.FOR);
        this.state = 259;
        this.expression(0);
        this.state = 260;
        this.match(TibboBasicParser.TO);
        this.state = 261;
        this.expression(0);
        this.state = 264;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.STEP) {
            this.state = 262;
            this.match(TibboBasicParser.STEP);
            this.state = 263;
            localctx.step = this.expression(0);
        }

        this.state = 266;
        this.block();
        this.state = 267;
        this.match(TibboBasicParser.NEXT);
        this.state = 269;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
        if(la_===1) {
            this.state = 268;
            this.expression(0);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_functionStmt;
    this.name = null; // Token
    this.returnType = null; // AsTypeClauseContext
    return this;
}

FunctionStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionStmtContext.prototype.constructor = FunctionStmtContext;

FunctionStmtContext.prototype.FUNCTION = function() {
    return this.getToken(TibboBasicParser.FUNCTION, 0);
};

FunctionStmtContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FunctionStmtContext.prototype.END_FUNCTION = function() {
    return this.getToken(TibboBasicParser.END_FUNCTION, 0);
};

FunctionStmtContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.IDENTIFIER);
    } else {
        return this.getToken(TibboBasicParser.IDENTIFIER, i);
    }
};


FunctionStmtContext.prototype.asTypeClause = function() {
    return this.getTypedRuleContext(AsTypeClauseContext,0);
};

FunctionStmtContext.prototype.visibility = function() {
    return this.getTypedRuleContext(VisibilityContext,0);
};

FunctionStmtContext.prototype.DOT = function() {
    return this.getToken(TibboBasicParser.DOT, 0);
};

FunctionStmtContext.prototype.paramList = function() {
    return this.getTypedRuleContext(ParamListContext,0);
};

FunctionStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterFunctionStmt(this);
	}
};

FunctionStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitFunctionStmt(this);
	}
};

FunctionStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitFunctionStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.FunctionStmtContext = FunctionStmtContext;

TibboBasicParser.prototype.functionStmt = function() {

    var localctx = new FunctionStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, TibboBasicParser.RULE_functionStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 272;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.PUBLIC) {
            this.state = 271;
            this.visibility();
        }

        this.state = 274;
        this.match(TibboBasicParser.FUNCTION);
        this.state = 277;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        if(la_===1) {
            this.state = 275;
            this.match(TibboBasicParser.IDENTIFIER);
            this.state = 276;
            this.match(TibboBasicParser.DOT);

        }
        this.state = 279;
        localctx.name = this.match(TibboBasicParser.IDENTIFIER);
        this.state = 281;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.LPAREN) {
            this.state = 280;
            this.paramList();
        }

        this.state = 283;
        localctx.returnType = this.asTypeClause();
        this.state = 284;
        this.block();
        this.state = 285;
        this.match(TibboBasicParser.END_FUNCTION);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JumpStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_jumpStmt;
    return this;
}

JumpStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JumpStmtContext.prototype.constructor = JumpStmtContext;

JumpStmtContext.prototype.goToStmt = function() {
    return this.getTypedRuleContext(GoToStmtContext,0);
};

JumpStmtContext.prototype.exitStmt = function() {
    return this.getTypedRuleContext(ExitStmtContext,0);
};

JumpStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterJumpStmt(this);
	}
};

JumpStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitJumpStmt(this);
	}
};

JumpStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitJumpStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.JumpStmtContext = JumpStmtContext;

TibboBasicParser.prototype.jumpStmt = function() {

    var localctx = new JumpStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, TibboBasicParser.RULE_jumpStmt);
    try {
        this.state = 289;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TibboBasicParser.GOTO:
            this.enterOuterAlt(localctx, 1);
            this.state = 287;
            this.goToStmt();
            break;
        case TibboBasicParser.EXIT_DO:
        case TibboBasicParser.EXIT_FOR:
        case TibboBasicParser.EXIT_FUNCTION:
        case TibboBasicParser.EXIT_PROPERTY:
        case TibboBasicParser.EXIT_SUB:
        case TibboBasicParser.EXIT_WHILE:
            this.enterOuterAlt(localctx, 2);
            this.state = 288;
            this.exitStmt();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GoToStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_goToStmt;
    return this;
}

GoToStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GoToStmtContext.prototype.constructor = GoToStmtContext;

GoToStmtContext.prototype.GOTO = function() {
    return this.getToken(TibboBasicParser.GOTO, 0);
};

GoToStmtContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

GoToStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterGoToStmt(this);
	}
};

GoToStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitGoToStmt(this);
	}
};

GoToStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitGoToStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.GoToStmtContext = GoToStmtContext;

TibboBasicParser.prototype.goToStmt = function() {

    var localctx = new GoToStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, TibboBasicParser.RULE_goToStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 291;
        this.match(TibboBasicParser.GOTO);
        this.state = 292;
        this.match(TibboBasicParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfThenElseStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_ifThenElseStmt;
    return this;
}

IfThenElseStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfThenElseStmtContext.prototype.constructor = IfThenElseStmtContext;


 
IfThenElseStmtContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function BlockIfThenElseContext(parser, ctx) {
	IfThenElseStmtContext.call(this, parser);
    IfThenElseStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BlockIfThenElseContext.prototype = Object.create(IfThenElseStmtContext.prototype);
BlockIfThenElseContext.prototype.constructor = BlockIfThenElseContext;

TibboBasicParser.BlockIfThenElseContext = BlockIfThenElseContext;

BlockIfThenElseContext.prototype.IF = function() {
    return this.getToken(TibboBasicParser.IF, 0);
};

BlockIfThenElseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BlockIfThenElseContext.prototype.THEN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.THEN);
    } else {
        return this.getToken(TibboBasicParser.THEN, i);
    }
};


BlockIfThenElseContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

BlockIfThenElseContext.prototype.END_IF = function() {
    return this.getToken(TibboBasicParser.END_IF, 0);
};

BlockIfThenElseContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.NEWLINE);
    } else {
        return this.getToken(TibboBasicParser.NEWLINE, i);
    }
};


BlockIfThenElseContext.prototype.ELSEIF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.ELSEIF);
    } else {
        return this.getToken(TibboBasicParser.ELSEIF, i);
    }
};


BlockIfThenElseContext.prototype.ifConditionStmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IfConditionStmtContext);
    } else {
        return this.getTypedRuleContext(IfConditionStmtContext,i);
    }
};

BlockIfThenElseContext.prototype.ELSE = function() {
    return this.getToken(TibboBasicParser.ELSE, 0);
};
BlockIfThenElseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterBlockIfThenElse(this);
	}
};

BlockIfThenElseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitBlockIfThenElse(this);
	}
};

BlockIfThenElseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitBlockIfThenElse(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InlineIfThenElseContext(parser, ctx) {
	IfThenElseStmtContext.call(this, parser);
    IfThenElseStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InlineIfThenElseContext.prototype = Object.create(IfThenElseStmtContext.prototype);
InlineIfThenElseContext.prototype.constructor = InlineIfThenElseContext;

TibboBasicParser.InlineIfThenElseContext = InlineIfThenElseContext;

InlineIfThenElseContext.prototype.IF = function() {
    return this.getToken(TibboBasicParser.IF, 0);
};

InlineIfThenElseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

InlineIfThenElseContext.prototype.THEN = function() {
    return this.getToken(TibboBasicParser.THEN, 0);
};

InlineIfThenElseContext.prototype.NEWLINE = function() {
    return this.getToken(TibboBasicParser.NEWLINE, 0);
};

InlineIfThenElseContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

InlineIfThenElseContext.prototype.jumpStmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JumpStmtContext);
    } else {
        return this.getTypedRuleContext(JumpStmtContext,i);
    }
};

InlineIfThenElseContext.prototype.ELSE = function() {
    return this.getToken(TibboBasicParser.ELSE, 0);
};
InlineIfThenElseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterInlineIfThenElse(this);
	}
};

InlineIfThenElseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitInlineIfThenElse(this);
	}
};

InlineIfThenElseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitInlineIfThenElse(this);
    } else {
        return visitor.visitChildren(this);
    }
};



TibboBasicParser.IfThenElseStmtContext = IfThenElseStmtContext;

TibboBasicParser.prototype.ifThenElseStmt = function() {

    var localctx = new IfThenElseStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, TibboBasicParser.RULE_ifThenElseStmt);
    var _la = 0; // Token type
    try {
        this.state = 335;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        switch(la_) {
        case 1:
            localctx = new InlineIfThenElseContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 294;
            this.match(TibboBasicParser.IF);
            this.state = 295;
            this.expression(0);
            this.state = 296;
            this.match(TibboBasicParser.THEN);
            this.state = 299;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
            switch(la_) {
            case 1:
                this.state = 297;
                this.statement();
                break;

            case 2:
                this.state = 298;
                this.jumpStmt();
                break;

            }
            this.state = 306;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TibboBasicParser.ELSE) {
                this.state = 301;
                this.match(TibboBasicParser.ELSE);
                this.state = 304;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 302;
                    this.statement();
                    break;

                case 2:
                    this.state = 303;
                    this.jumpStmt();
                    break;

                }
            }

            this.state = 308;
            this.match(TibboBasicParser.NEWLINE);
            break;

        case 2:
            localctx = new BlockIfThenElseContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 310;
            this.match(TibboBasicParser.IF);
            this.state = 311;
            this.expression(0);
            this.state = 312;
            this.match(TibboBasicParser.THEN);
            this.state = 314; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 313;
                this.match(TibboBasicParser.NEWLINE);
                this.state = 316; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===TibboBasicParser.NEWLINE);
            this.state = 318;
            this.block();
            this.state = 326;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TibboBasicParser.ELSEIF) {
                this.state = 319;
                this.match(TibboBasicParser.ELSEIF);
                this.state = 320;
                this.ifConditionStmt();
                this.state = 321;
                this.match(TibboBasicParser.THEN);
                this.state = 322;
                this.block();
                this.state = 328;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 331;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TibboBasicParser.ELSE) {
                this.state = 329;
                this.match(TibboBasicParser.ELSE);
                this.state = 330;
                this.block();
            }

            this.state = 333;
            this.match(TibboBasicParser.END_IF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfConditionStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_ifConditionStmt;
    return this;
}

IfConditionStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfConditionStmtContext.prototype.constructor = IfConditionStmtContext;

IfConditionStmtContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IfConditionStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterIfConditionStmt(this);
	}
};

IfConditionStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitIfConditionStmt(this);
	}
};

IfConditionStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitIfConditionStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.IfConditionStmtContext = IfConditionStmtContext;

TibboBasicParser.prototype.ifConditionStmt = function() {

    var localctx = new IfConditionStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, TibboBasicParser.RULE_ifConditionStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 337;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PropertyDefineStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_propertyDefineStmt;
    this.object = null; // Token
    this.property = null; // Token
    return this;
}

PropertyDefineStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDefineStmtContext.prototype.constructor = PropertyDefineStmtContext;

PropertyDefineStmtContext.prototype.PROPERTY = function() {
    return this.getToken(TibboBasicParser.PROPERTY, 0);
};

PropertyDefineStmtContext.prototype.DOT = function() {
    return this.getToken(TibboBasicParser.DOT, 0);
};

PropertyDefineStmtContext.prototype.END_PROPERTY = function() {
    return this.getToken(TibboBasicParser.END_PROPERTY, 0);
};

PropertyDefineStmtContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.IDENTIFIER);
    } else {
        return this.getToken(TibboBasicParser.IDENTIFIER, i);
    }
};


PropertyDefineStmtContext.prototype.BANG = function() {
    return this.getToken(TibboBasicParser.BANG, 0);
};

PropertyDefineStmtContext.prototype.propertyDefineStmt_InStmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyDefineStmt_InStmtContext);
    } else {
        return this.getTypedRuleContext(PropertyDefineStmt_InStmtContext,i);
    }
};

PropertyDefineStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterPropertyDefineStmt(this);
	}
};

PropertyDefineStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitPropertyDefineStmt(this);
	}
};

PropertyDefineStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitPropertyDefineStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.PropertyDefineStmtContext = PropertyDefineStmtContext;

TibboBasicParser.prototype.propertyDefineStmt = function() {

    var localctx = new PropertyDefineStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, TibboBasicParser.RULE_propertyDefineStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 339;
        this.match(TibboBasicParser.PROPERTY);
        this.state = 341;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.BANG) {
            this.state = 340;
            this.match(TibboBasicParser.BANG);
        }

        this.state = 343;
        localctx.object = this.match(TibboBasicParser.IDENTIFIER);
        this.state = 344;
        this.match(TibboBasicParser.DOT);
        this.state = 345;
        localctx.property = this.match(TibboBasicParser.IDENTIFIER);
        this.state = 349;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TibboBasicParser.GET || _la===TibboBasicParser.SET) {
            this.state = 346;
            this.propertyDefineStmt_InStmt();
            this.state = 351;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 352;
        this.match(TibboBasicParser.END_PROPERTY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PropertyDefineStmt_InStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_propertyDefineStmt_InStmt;
    return this;
}

PropertyDefineStmt_InStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDefineStmt_InStmtContext.prototype.constructor = PropertyDefineStmt_InStmtContext;

PropertyDefineStmt_InStmtContext.prototype.propertyGetStmt = function() {
    return this.getTypedRuleContext(PropertyGetStmtContext,0);
};

PropertyDefineStmt_InStmtContext.prototype.propertySetStmt = function() {
    return this.getTypedRuleContext(PropertySetStmtContext,0);
};

PropertyDefineStmt_InStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterPropertyDefineStmt_InStmt(this);
	}
};

PropertyDefineStmt_InStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitPropertyDefineStmt_InStmt(this);
	}
};

PropertyDefineStmt_InStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitPropertyDefineStmt_InStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.PropertyDefineStmt_InStmtContext = PropertyDefineStmt_InStmtContext;

TibboBasicParser.prototype.propertyDefineStmt_InStmt = function() {

    var localctx = new PropertyDefineStmt_InStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, TibboBasicParser.RULE_propertyDefineStmt_InStmt);
    try {
        this.state = 356;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TibboBasicParser.GET:
            this.enterOuterAlt(localctx, 1);
            this.state = 354;
            this.propertyGetStmt();
            break;
        case TibboBasicParser.SET:
            this.enterOuterAlt(localctx, 2);
            this.state = 355;
            this.propertySetStmt();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PropertyGetStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_propertyGetStmt;
    return this;
}

PropertyGetStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyGetStmtContext.prototype.constructor = PropertyGetStmtContext;

PropertyGetStmtContext.prototype.GET = function() {
    return this.getToken(TibboBasicParser.GET, 0);
};

PropertyGetStmtContext.prototype.EQ = function() {
    return this.getToken(TibboBasicParser.EQ, 0);
};

PropertyGetStmtContext.prototype.SYSCALL = function() {
    return this.getToken(TibboBasicParser.SYSCALL, 0);
};

PropertyGetStmtContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

PropertyGetStmtContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

PropertyGetStmtContext.prototype.asTypeClause = function() {
    return this.getTypedRuleContext(AsTypeClauseContext,0);
};

PropertyGetStmtContext.prototype.INTEGERLITERAL = function() {
    return this.getToken(TibboBasicParser.INTEGERLITERAL, 0);
};

PropertyGetStmtContext.prototype.COMMA = function() {
    return this.getToken(TibboBasicParser.COMMA, 0);
};

PropertyGetStmtContext.prototype.STRINGLITERAL = function() {
    return this.getToken(TibboBasicParser.STRINGLITERAL, 0);
};

PropertyGetStmtContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

PropertyGetStmtContext.prototype.PLUS = function() {
    return this.getToken(TibboBasicParser.PLUS, 0);
};

PropertyGetStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterPropertyGetStmt(this);
	}
};

PropertyGetStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitPropertyGetStmt(this);
	}
};

PropertyGetStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitPropertyGetStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.PropertyGetStmtContext = PropertyGetStmtContext;

TibboBasicParser.prototype.propertyGetStmt = function() {

    var localctx = new PropertyGetStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, TibboBasicParser.RULE_propertyGetStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 358;
        this.match(TibboBasicParser.GET);
        this.state = 359;
        this.match(TibboBasicParser.EQ);
        this.state = 360;
        this.match(TibboBasicParser.SYSCALL);
        this.state = 361;
        this.match(TibboBasicParser.LPAREN);
        this.state = 370;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.INTEGERLITERAL) {
            this.state = 362;
            this.match(TibboBasicParser.INTEGERLITERAL);
            this.state = 368;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TibboBasicParser.COMMA) {
                this.state = 363;
                this.match(TibboBasicParser.COMMA);
                this.state = 364;
                _la = this._input.LA(1);
                if(!(_la===TibboBasicParser.STRINGLITERAL || _la===TibboBasicParser.IDENTIFIER)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 366;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TibboBasicParser.PLUS) {
                    this.state = 365;
                    this.match(TibboBasicParser.PLUS);
                }

            }

        }

        this.state = 372;
        this.match(TibboBasicParser.RPAREN);
        this.state = 373;
        this.asTypeClause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PropertySetStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_propertySetStmt;
    return this;
}

PropertySetStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertySetStmtContext.prototype.constructor = PropertySetStmtContext;

PropertySetStmtContext.prototype.SET = function() {
    return this.getToken(TibboBasicParser.SET, 0);
};

PropertySetStmtContext.prototype.EQ = function() {
    return this.getToken(TibboBasicParser.EQ, 0);
};

PropertySetStmtContext.prototype.SYSCALL = function() {
    return this.getToken(TibboBasicParser.SYSCALL, 0);
};

PropertySetStmtContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

PropertySetStmtContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

PropertySetStmtContext.prototype.paramList = function() {
    return this.getTypedRuleContext(ParamListContext,0);
};

PropertySetStmtContext.prototype.INTEGERLITERAL = function() {
    return this.getToken(TibboBasicParser.INTEGERLITERAL, 0);
};

PropertySetStmtContext.prototype.COMMA = function() {
    return this.getToken(TibboBasicParser.COMMA, 0);
};

PropertySetStmtContext.prototype.STRINGLITERAL = function() {
    return this.getToken(TibboBasicParser.STRINGLITERAL, 0);
};

PropertySetStmtContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

PropertySetStmtContext.prototype.PLUS = function() {
    return this.getToken(TibboBasicParser.PLUS, 0);
};

PropertySetStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterPropertySetStmt(this);
	}
};

PropertySetStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitPropertySetStmt(this);
	}
};

PropertySetStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitPropertySetStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.PropertySetStmtContext = PropertySetStmtContext;

TibboBasicParser.prototype.propertySetStmt = function() {

    var localctx = new PropertySetStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, TibboBasicParser.RULE_propertySetStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 375;
        this.match(TibboBasicParser.SET);
        this.state = 376;
        this.match(TibboBasicParser.EQ);
        this.state = 377;
        this.match(TibboBasicParser.SYSCALL);
        this.state = 378;
        this.match(TibboBasicParser.LPAREN);
        this.state = 387;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.INTEGERLITERAL) {
            this.state = 379;
            this.match(TibboBasicParser.INTEGERLITERAL);
            this.state = 385;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TibboBasicParser.COMMA) {
                this.state = 380;
                this.match(TibboBasicParser.COMMA);
                this.state = 381;
                _la = this._input.LA(1);
                if(!(_la===TibboBasicParser.STRINGLITERAL || _la===TibboBasicParser.IDENTIFIER)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 383;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TibboBasicParser.PLUS) {
                    this.state = 382;
                    this.match(TibboBasicParser.PLUS);
                }

            }

        }

        this.state = 389;
        this.match(TibboBasicParser.RPAREN);
        this.state = 390;
        this.paramList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EventDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_eventDeclaration;
    this.number = null; // Token
    this.name = null; // Token
    this.params = null; // ParamListContext
    return this;
}

EventDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventDeclarationContext.prototype.constructor = EventDeclarationContext;

EventDeclarationContext.prototype.EVENT = function() {
    return this.getToken(TibboBasicParser.EVENT, 0);
};

EventDeclarationContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

EventDeclarationContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

EventDeclarationContext.prototype.INTEGERLITERAL = function() {
    return this.getToken(TibboBasicParser.INTEGERLITERAL, 0);
};

EventDeclarationContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

EventDeclarationContext.prototype.paramList = function() {
    return this.getTypedRuleContext(ParamListContext,0);
};

EventDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterEventDeclaration(this);
	}
};

EventDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitEventDeclaration(this);
	}
};

EventDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitEventDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.EventDeclarationContext = EventDeclarationContext;

TibboBasicParser.prototype.eventDeclaration = function() {

    var localctx = new EventDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, TibboBasicParser.RULE_eventDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 392;
        this.match(TibboBasicParser.EVENT);
        this.state = 393;
        this.match(TibboBasicParser.LPAREN);
        this.state = 394;
        localctx.number = this.match(TibboBasicParser.INTEGERLITERAL);
        this.state = 395;
        this.match(TibboBasicParser.RPAREN);
        this.state = 396;
        localctx.name = this.match(TibboBasicParser.IDENTIFIER);
        this.state = 398;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.LPAREN) {
            this.state = 397;
            localctx.params = this.paramList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SyscallDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_syscallDeclaration;
    return this;
}

SyscallDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyscallDeclarationContext.prototype.constructor = SyscallDeclarationContext;

SyscallDeclarationContext.prototype.SYSCALL = function() {
    return this.getToken(TibboBasicParser.SYSCALL, 0);
};

SyscallDeclarationContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

SyscallDeclarationContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

SyscallDeclarationContext.prototype.syscallDeclarationInner = function() {
    return this.getTypedRuleContext(SyscallDeclarationInnerContext,0);
};

SyscallDeclarationContext.prototype.syscallInternalDeclarationInner = function() {
    return this.getTypedRuleContext(SyscallInternalDeclarationInnerContext,0);
};

SyscallDeclarationContext.prototype.INTEGERLITERAL = function() {
    return this.getToken(TibboBasicParser.INTEGERLITERAL, 0);
};

SyscallDeclarationContext.prototype.COMMA = function() {
    return this.getToken(TibboBasicParser.COMMA, 0);
};

SyscallDeclarationContext.prototype.STRINGLITERAL = function() {
    return this.getToken(TibboBasicParser.STRINGLITERAL, 0);
};

SyscallDeclarationContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

SyscallDeclarationContext.prototype.PLUS = function() {
    return this.getToken(TibboBasicParser.PLUS, 0);
};

SyscallDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterSyscallDeclaration(this);
	}
};

SyscallDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitSyscallDeclaration(this);
	}
};

SyscallDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitSyscallDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.SyscallDeclarationContext = SyscallDeclarationContext;

TibboBasicParser.prototype.syscallDeclaration = function() {

    var localctx = new SyscallDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, TibboBasicParser.RULE_syscallDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 400;
        this.match(TibboBasicParser.SYSCALL);
        this.state = 401;
        this.match(TibboBasicParser.LPAREN);
        this.state = 410;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.INTEGERLITERAL) {
            this.state = 402;
            this.match(TibboBasicParser.INTEGERLITERAL);
            this.state = 408;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TibboBasicParser.COMMA) {
                this.state = 403;
                this.match(TibboBasicParser.COMMA);
                this.state = 404;
                _la = this._input.LA(1);
                if(!(_la===TibboBasicParser.STRINGLITERAL || _la===TibboBasicParser.IDENTIFIER)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 406;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TibboBasicParser.PLUS) {
                    this.state = 405;
                    this.match(TibboBasicParser.PLUS);
                }

            }

        }

        this.state = 412;
        this.match(TibboBasicParser.RPAREN);
        this.state = 415;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TibboBasicParser.IDENTIFIER:
            this.state = 413;
            this.syscallDeclarationInner();
            break;
        case TibboBasicParser.BANG:
            this.state = 414;
            this.syscallInternalDeclarationInner();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SyscallDeclarationInnerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_syscallDeclarationInner;
    this.object = null; // Token
    this.property = null; // Token
    return this;
}

SyscallDeclarationInnerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyscallDeclarationInnerContext.prototype.constructor = SyscallDeclarationInnerContext;

SyscallDeclarationInnerContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.IDENTIFIER);
    } else {
        return this.getToken(TibboBasicParser.IDENTIFIER, i);
    }
};


SyscallDeclarationInnerContext.prototype.DOT = function() {
    return this.getToken(TibboBasicParser.DOT, 0);
};

SyscallDeclarationInnerContext.prototype.paramList = function() {
    return this.getTypedRuleContext(ParamListContext,0);
};

SyscallDeclarationInnerContext.prototype.asTypeClause = function() {
    return this.getTypedRuleContext(AsTypeClauseContext,0);
};

SyscallDeclarationInnerContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterSyscallDeclarationInner(this);
	}
};

SyscallDeclarationInnerContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitSyscallDeclarationInner(this);
	}
};

SyscallDeclarationInnerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitSyscallDeclarationInner(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.SyscallDeclarationInnerContext = SyscallDeclarationInnerContext;

TibboBasicParser.prototype.syscallDeclarationInner = function() {

    var localctx = new SyscallDeclarationInnerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, TibboBasicParser.RULE_syscallDeclarationInner);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 419;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
        if(la_===1) {
            this.state = 417;
            localctx.object = this.match(TibboBasicParser.IDENTIFIER);
            this.state = 418;
            this.match(TibboBasicParser.DOT);

        }
        this.state = 421;
        localctx.property = this.match(TibboBasicParser.IDENTIFIER);
        this.state = 423;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.LPAREN) {
            this.state = 422;
            this.paramList();
        }

        this.state = 426;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.AS) {
            this.state = 425;
            this.asTypeClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SyscallInternalDeclarationInnerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_syscallInternalDeclarationInner;
    this.object = null; // Token
    this.property = null; // Token
    return this;
}

SyscallInternalDeclarationInnerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyscallInternalDeclarationInnerContext.prototype.constructor = SyscallInternalDeclarationInnerContext;

SyscallInternalDeclarationInnerContext.prototype.BANG = function() {
    return this.getToken(TibboBasicParser.BANG, 0);
};

SyscallInternalDeclarationInnerContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.IDENTIFIER);
    } else {
        return this.getToken(TibboBasicParser.IDENTIFIER, i);
    }
};


SyscallInternalDeclarationInnerContext.prototype.DOT = function() {
    return this.getToken(TibboBasicParser.DOT, 0);
};

SyscallInternalDeclarationInnerContext.prototype.syscallInternalParamList = function() {
    return this.getTypedRuleContext(SyscallInternalParamListContext,0);
};

SyscallInternalDeclarationInnerContext.prototype.asTypeClause = function() {
    return this.getTypedRuleContext(AsTypeClauseContext,0);
};

SyscallInternalDeclarationInnerContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterSyscallInternalDeclarationInner(this);
	}
};

SyscallInternalDeclarationInnerContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitSyscallInternalDeclarationInner(this);
	}
};

SyscallInternalDeclarationInnerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitSyscallInternalDeclarationInner(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.SyscallInternalDeclarationInnerContext = SyscallInternalDeclarationInnerContext;

TibboBasicParser.prototype.syscallInternalDeclarationInner = function() {

    var localctx = new SyscallInternalDeclarationInnerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, TibboBasicParser.RULE_syscallInternalDeclarationInner);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 428;
        this.match(TibboBasicParser.BANG);
        this.state = 431;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        if(la_===1) {
            this.state = 429;
            localctx.object = this.match(TibboBasicParser.IDENTIFIER);
            this.state = 430;
            this.match(TibboBasicParser.DOT);

        }
        this.state = 433;
        localctx.property = this.match(TibboBasicParser.IDENTIFIER);
        this.state = 435;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.LPAREN) {
            this.state = 434;
            this.syscallInternalParamList();
        }

        this.state = 438;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.AS) {
            this.state = 437;
            this.asTypeClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SyscallInternalParamListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_syscallInternalParamList;
    return this;
}

SyscallInternalParamListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyscallInternalParamListContext.prototype.constructor = SyscallInternalParamListContext;

SyscallInternalParamListContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

SyscallInternalParamListContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

SyscallInternalParamListContext.prototype.paramInternal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParamInternalContext);
    } else {
        return this.getTypedRuleContext(ParamInternalContext,i);
    }
};

SyscallInternalParamListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.COMMA);
    } else {
        return this.getToken(TibboBasicParser.COMMA, i);
    }
};


SyscallInternalParamListContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterSyscallInternalParamList(this);
	}
};

SyscallInternalParamListContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitSyscallInternalParamList(this);
	}
};

SyscallInternalParamListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitSyscallInternalParamList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.SyscallInternalParamListContext = SyscallInternalParamListContext;

TibboBasicParser.prototype.syscallInternalParamList = function() {

    var localctx = new SyscallInternalParamListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, TibboBasicParser.RULE_syscallInternalParamList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 440;
        this.match(TibboBasicParser.LPAREN);
        this.state = 449;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.BYREF || _la===TibboBasicParser.BYVAL || _la===TibboBasicParser.IDENTIFIER) {
            this.state = 441;
            this.paramInternal();
            this.state = 446;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TibboBasicParser.COMMA) {
                this.state = 442;
                this.match(TibboBasicParser.COMMA);
                this.state = 443;
                this.paramInternal();
                this.state = 448;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 451;
        this.match(TibboBasicParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParamInternalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_paramInternal;
    return this;
}

ParamInternalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParamInternalContext.prototype.constructor = ParamInternalContext;

ParamInternalContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

ParamInternalContext.prototype.asTypeClause = function() {
    return this.getTypedRuleContext(AsTypeClauseContext,0);
};

ParamInternalContext.prototype.BYVAL = function() {
    return this.getToken(TibboBasicParser.BYVAL, 0);
};

ParamInternalContext.prototype.BYREF = function() {
    return this.getToken(TibboBasicParser.BYREF, 0);
};

ParamInternalContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterParamInternal(this);
	}
};

ParamInternalContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitParamInternal(this);
	}
};

ParamInternalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitParamInternal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.ParamInternalContext = ParamInternalContext;

TibboBasicParser.prototype.paramInternal = function() {

    var localctx = new ParamInternalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, TibboBasicParser.RULE_paramInternal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 454;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.BYREF || _la===TibboBasicParser.BYVAL) {
            this.state = 453;
            _la = this._input.LA(1);
            if(!(_la===TibboBasicParser.BYREF || _la===TibboBasicParser.BYVAL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 456;
        this.match(TibboBasicParser.IDENTIFIER);
        this.state = 458;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.AS) {
            this.state = 457;
            this.asTypeClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectCaseStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_selectCaseStmt;
    return this;
}

SelectCaseStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectCaseStmtContext.prototype.constructor = SelectCaseStmtContext;

SelectCaseStmtContext.prototype.SELECT = function() {
    return this.getToken(TibboBasicParser.SELECT, 0);
};

SelectCaseStmtContext.prototype.CASE = function() {
    return this.getToken(TibboBasicParser.CASE, 0);
};

SelectCaseStmtContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SelectCaseStmtContext.prototype.END_SELECT = function() {
    return this.getToken(TibboBasicParser.END_SELECT, 0);
};

SelectCaseStmtContext.prototype.COLON = function() {
    return this.getToken(TibboBasicParser.COLON, 0);
};

SelectCaseStmtContext.prototype.sC_Case = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SC_CaseContext);
    } else {
        return this.getTypedRuleContext(SC_CaseContext,i);
    }
};

SelectCaseStmtContext.prototype.sC_Default = function() {
    return this.getTypedRuleContext(SC_DefaultContext,0);
};

SelectCaseStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterSelectCaseStmt(this);
	}
};

SelectCaseStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitSelectCaseStmt(this);
	}
};

SelectCaseStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitSelectCaseStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.SelectCaseStmtContext = SelectCaseStmtContext;

TibboBasicParser.prototype.selectCaseStmt = function() {

    var localctx = new SelectCaseStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, TibboBasicParser.RULE_selectCaseStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 460;
        this.match(TibboBasicParser.SELECT);
        this.state = 461;
        this.match(TibboBasicParser.CASE);
        this.state = 462;
        this.expression(0);
        this.state = 464;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.COLON) {
            this.state = 463;
            this.match(TibboBasicParser.COLON);
        }

        this.state = 469;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TibboBasicParser.CASE) {
            this.state = 466;
            this.sC_Case();
            this.state = 471;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 473;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.CASE_ELSE) {
            this.state = 472;
            this.sC_Default();
        }

        this.state = 475;
        this.match(TibboBasicParser.END_SELECT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SC_CaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_sC_Case;
    return this;
}

SC_CaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SC_CaseContext.prototype.constructor = SC_CaseContext;

SC_CaseContext.prototype.CASE = function() {
    return this.getToken(TibboBasicParser.CASE, 0);
};

SC_CaseContext.prototype.sC_Cond = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SC_CondContext);
    } else {
        return this.getTypedRuleContext(SC_CondContext,i);
    }
};

SC_CaseContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

SC_CaseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.COMMA);
    } else {
        return this.getToken(TibboBasicParser.COMMA, i);
    }
};


SC_CaseContext.prototype.COLON = function() {
    return this.getToken(TibboBasicParser.COLON, 0);
};

SC_CaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterSC_Case(this);
	}
};

SC_CaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitSC_Case(this);
	}
};

SC_CaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitSC_Case(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.SC_CaseContext = SC_CaseContext;

TibboBasicParser.prototype.sC_Case = function() {

    var localctx = new SC_CaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, TibboBasicParser.RULE_sC_Case);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 477;
        this.match(TibboBasicParser.CASE);
        this.state = 478;
        this.sC_Cond();
        this.state = 483;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TibboBasicParser.COMMA) {
            this.state = 479;
            this.match(TibboBasicParser.COMMA);
            this.state = 480;
            this.sC_Cond();
            this.state = 485;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 487;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.COLON) {
            this.state = 486;
            this.match(TibboBasicParser.COLON);
        }

        this.state = 489;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SC_DefaultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_sC_Default;
    return this;
}

SC_DefaultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SC_DefaultContext.prototype.constructor = SC_DefaultContext;

SC_DefaultContext.prototype.CASE_ELSE = function() {
    return this.getToken(TibboBasicParser.CASE_ELSE, 0);
};

SC_DefaultContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

SC_DefaultContext.prototype.COLON = function() {
    return this.getToken(TibboBasicParser.COLON, 0);
};

SC_DefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterSC_Default(this);
	}
};

SC_DefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitSC_Default(this);
	}
};

SC_DefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitSC_Default(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.SC_DefaultContext = SC_DefaultContext;

TibboBasicParser.prototype.sC_Default = function() {

    var localctx = new SC_DefaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, TibboBasicParser.RULE_sC_Default);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 491;
        this.match(TibboBasicParser.CASE_ELSE);
        this.state = 493;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.COLON) {
            this.state = 492;
            this.match(TibboBasicParser.COLON);
        }

        this.state = 495;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SC_CondContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_sC_Cond;
    return this;
}

SC_CondContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SC_CondContext.prototype.constructor = SC_CondContext;

SC_CondContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SC_CondContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterSC_Cond(this);
	}
};

SC_CondContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitSC_Cond(this);
	}
};

SC_CondContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitSC_Cond(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.SC_CondContext = SC_CondContext;

TibboBasicParser.prototype.sC_Cond = function() {

    var localctx = new SC_CondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, TibboBasicParser.RULE_sC_Cond);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 497;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SubStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_subStmt;
    this.name = null; // Token
    return this;
}

SubStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubStmtContext.prototype.constructor = SubStmtContext;

SubStmtContext.prototype.SUB = function() {
    return this.getToken(TibboBasicParser.SUB, 0);
};

SubStmtContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

SubStmtContext.prototype.END_SUB = function() {
    return this.getToken(TibboBasicParser.END_SUB, 0);
};

SubStmtContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.IDENTIFIER);
    } else {
        return this.getToken(TibboBasicParser.IDENTIFIER, i);
    }
};


SubStmtContext.prototype.visibility = function() {
    return this.getTypedRuleContext(VisibilityContext,0);
};

SubStmtContext.prototype.DOT = function() {
    return this.getToken(TibboBasicParser.DOT, 0);
};

SubStmtContext.prototype.paramList = function() {
    return this.getTypedRuleContext(ParamListContext,0);
};

SubStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterSubStmt(this);
	}
};

SubStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitSubStmt(this);
	}
};

SubStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitSubStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.SubStmtContext = SubStmtContext;

TibboBasicParser.prototype.subStmt = function() {

    var localctx = new SubStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, TibboBasicParser.RULE_subStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 500;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.PUBLIC) {
            this.state = 499;
            this.visibility();
        }

        this.state = 502;
        this.match(TibboBasicParser.SUB);
        this.state = 505;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
        if(la_===1) {
            this.state = 503;
            this.match(TibboBasicParser.IDENTIFIER);
            this.state = 504;
            this.match(TibboBasicParser.DOT);

        }
        this.state = 507;
        localctx.name = this.match(TibboBasicParser.IDENTIFIER);
        this.state = 509;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
        if(la_===1) {
            this.state = 508;
            this.paramList();

        }
        this.state = 511;
        this.block();
        this.state = 512;
        this.match(TibboBasicParser.END_SUB);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_typeStmt;
    this.name = null; // Token
    return this;
}

TypeStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeStmtContext.prototype.constructor = TypeStmtContext;

TypeStmtContext.prototype.TYPE = function() {
    return this.getToken(TibboBasicParser.TYPE, 0);
};

TypeStmtContext.prototype.END_TYPE = function() {
    return this.getToken(TibboBasicParser.END_TYPE, 0);
};

TypeStmtContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

TypeStmtContext.prototype.visibility = function() {
    return this.getTypedRuleContext(VisibilityContext,0);
};

TypeStmtContext.prototype.typeStmtElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeStmtElementContext);
    } else {
        return this.getTypedRuleContext(TypeStmtElementContext,i);
    }
};

TypeStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterTypeStmt(this);
	}
};

TypeStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitTypeStmt(this);
	}
};

TypeStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitTypeStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.TypeStmtContext = TypeStmtContext;

TibboBasicParser.prototype.typeStmt = function() {

    var localctx = new TypeStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, TibboBasicParser.RULE_typeStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 515;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.PUBLIC) {
            this.state = 514;
            this.visibility();
        }

        this.state = 517;
        this.match(TibboBasicParser.TYPE);
        this.state = 518;
        localctx.name = this.match(TibboBasicParser.IDENTIFIER);
        this.state = 522;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TibboBasicParser.IDENTIFIER) {
            this.state = 519;
            this.typeStmtElement();
            this.state = 524;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 525;
        this.match(TibboBasicParser.END_TYPE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeStmtElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_typeStmtElement;
    this.valueType = null; // AsTypeClauseContext
    return this;
}

TypeStmtElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeStmtElementContext.prototype.constructor = TypeStmtElementContext;

TypeStmtElementContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

TypeStmtElementContext.prototype.asTypeClause = function() {
    return this.getTypedRuleContext(AsTypeClauseContext,0);
};

TypeStmtElementContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

TypeStmtElementContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

TypeStmtElementContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

TypeStmtElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterTypeStmtElement(this);
	}
};

TypeStmtElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitTypeStmtElement(this);
	}
};

TypeStmtElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitTypeStmtElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.TypeStmtElementContext = TypeStmtElementContext;

TibboBasicParser.prototype.typeStmtElement = function() {

    var localctx = new TypeStmtElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, TibboBasicParser.RULE_typeStmtElement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 527;
        this.match(TibboBasicParser.IDENTIFIER);
        this.state = 532;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.LPAREN) {
            this.state = 528;
            this.match(TibboBasicParser.LPAREN);
            this.state = 529;
            this.literal();
            this.state = 530;
            this.match(TibboBasicParser.RPAREN);
        }

        this.state = 534;
        localctx.valueType = this.asTypeClause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_expression;
    this.op = null; // Token
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

ExpressionContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

ExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

ExpressionContext.prototype.MULT = function() {
    return this.getToken(TibboBasicParser.MULT, 0);
};

ExpressionContext.prototype.DIV = function() {
    return this.getToken(TibboBasicParser.DIV, 0);
};

ExpressionContext.prototype.MOD = function() {
    return this.getToken(TibboBasicParser.MOD, 0);
};

ExpressionContext.prototype.PLUS = function() {
    return this.getToken(TibboBasicParser.PLUS, 0);
};

ExpressionContext.prototype.MINUS = function() {
    return this.getToken(TibboBasicParser.MINUS, 0);
};

ExpressionContext.prototype.LEQ = function() {
    return this.getToken(TibboBasicParser.LEQ, 0);
};

ExpressionContext.prototype.GEQ = function() {
    return this.getToken(TibboBasicParser.GEQ, 0);
};

ExpressionContext.prototype.LT = function() {
    return this.getToken(TibboBasicParser.LT, 0);
};

ExpressionContext.prototype.GT = function() {
    return this.getToken(TibboBasicParser.GT, 0);
};

ExpressionContext.prototype.NEQ = function() {
    return this.getToken(TibboBasicParser.NEQ, 0);
};

ExpressionContext.prototype.EQ = function() {
    return this.getToken(TibboBasicParser.EQ, 0);
};

ExpressionContext.prototype.SHL = function() {
    return this.getToken(TibboBasicParser.SHL, 0);
};

ExpressionContext.prototype.SHR = function() {
    return this.getToken(TibboBasicParser.SHR, 0);
};

ExpressionContext.prototype.NOT = function() {
    return this.getToken(TibboBasicParser.NOT, 0);
};

ExpressionContext.prototype.AND = function() {
    return this.getToken(TibboBasicParser.AND, 0);
};

ExpressionContext.prototype.XOR = function() {
    return this.getToken(TibboBasicParser.XOR, 0);
};

ExpressionContext.prototype.OR = function() {
    return this.getToken(TibboBasicParser.OR, 0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitExpression(this);
	}
};

ExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



TibboBasicParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 76;
    this.enterRecursionRule(localctx, 76, TibboBasicParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 542;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        switch(la_) {
        case 1:
            this.state = 537;
            this.unaryExpression();
            break;

        case 2:
            this.state = 538;
            this.match(TibboBasicParser.LPAREN);
            this.state = 539;
            this.expression(0);
            this.state = 540;
            this.match(TibboBasicParser.RPAREN);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 561;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,67,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 559;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, TibboBasicParser.RULE_expression);
                    this.state = 544;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 545;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===TibboBasicParser.MOD || _la===TibboBasicParser.DIV || _la===TibboBasicParser.MULT)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 546;
                    this.expression(7);
                    break;

                case 2:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, TibboBasicParser.RULE_expression);
                    this.state = 547;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 548;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===TibboBasicParser.MINUS || _la===TibboBasicParser.PLUS)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 549;
                    this.expression(6);
                    break;

                case 3:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, TibboBasicParser.RULE_expression);
                    this.state = 550;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 551;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (TibboBasicParser.GEQ - 85)) | (1 << (TibboBasicParser.GT - 85)) | (1 << (TibboBasicParser.LEQ - 85)) | (1 << (TibboBasicParser.LT - 85)))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 552;
                    this.expression(5);
                    break;

                case 4:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, TibboBasicParser.RULE_expression);
                    this.state = 553;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 554;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===TibboBasicParser.EQ || _la===TibboBasicParser.NEQ)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 555;
                    this.expression(4);
                    break;

                case 5:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, TibboBasicParser.RULE_expression);
                    this.state = 556;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 557;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===TibboBasicParser.AND || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (TibboBasicParser.NOT - 54)) | (1 << (TibboBasicParser.OR - 54)) | (1 << (TibboBasicParser.SHL - 54)) | (1 << (TibboBasicParser.SHR - 54)) | (1 << (TibboBasicParser.XOR - 54)))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 558;
                    this.expression(3);
                    break;

                } 
            }
            this.state = 563;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,67,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function UnaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_unaryExpression;
    return this;
}

UnaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryExpressionContext.prototype.constructor = UnaryExpressionContext;

UnaryExpressionContext.prototype.postfixExpression = function() {
    return this.getTypedRuleContext(PostfixExpressionContext,0);
};

UnaryExpressionContext.prototype.unaryOperator = function() {
    return this.getTypedRuleContext(UnaryOperatorContext,0);
};

UnaryExpressionContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

UnaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterUnaryExpression(this);
	}
};

UnaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitUnaryExpression(this);
	}
};

UnaryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitUnaryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.UnaryExpressionContext = UnaryExpressionContext;

TibboBasicParser.prototype.unaryExpression = function() {

    var localctx = new UnaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, TibboBasicParser.RULE_unaryExpression);
    try {
        this.state = 568;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 564;
            this.postfixExpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 565;
            this.unaryOperator();
            this.state = 566;
            this.primaryExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnaryOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_unaryOperator;
    return this;
}

UnaryOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryOperatorContext.prototype.constructor = UnaryOperatorContext;

UnaryOperatorContext.prototype.MINUS = function() {
    return this.getToken(TibboBasicParser.MINUS, 0);
};

UnaryOperatorContext.prototype.NOT = function() {
    return this.getToken(TibboBasicParser.NOT, 0);
};

UnaryOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterUnaryOperator(this);
	}
};

UnaryOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitUnaryOperator(this);
	}
};

UnaryOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitUnaryOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.UnaryOperatorContext = UnaryOperatorContext;

TibboBasicParser.prototype.unaryOperator = function() {

    var localctx = new UnaryOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, TibboBasicParser.RULE_unaryOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 570;
        _la = this._input.LA(1);
        if(!(_la===TibboBasicParser.NOT || _la===TibboBasicParser.MINUS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PostfixExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_postfixExpression;
    this.property = null; // Token
    return this;
}

PostfixExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostfixExpressionContext.prototype.constructor = PostfixExpressionContext;

PostfixExpressionContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

PostfixExpressionContext.prototype.postfix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PostfixContext);
    } else {
        return this.getTypedRuleContext(PostfixContext,i);
    }
};

PostfixExpressionContext.prototype.postfixExpression = function() {
    return this.getTypedRuleContext(PostfixExpressionContext,0);
};

PostfixExpressionContext.prototype.DOT = function() {
    return this.getToken(TibboBasicParser.DOT, 0);
};

PostfixExpressionContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

PostfixExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterPostfixExpression(this);
	}
};

PostfixExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitPostfixExpression(this);
	}
};

PostfixExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitPostfixExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



TibboBasicParser.prototype.postfixExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PostfixExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 82;
    this.enterRecursionRule(localctx, 82, TibboBasicParser.RULE_postfixExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 573;
        this.primaryExpression();
        this.state = 577;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,69,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 574;
                this.postfix(); 
            }
            this.state = 579;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,69,this._ctx);
        }

        this._ctx.stop = this._input.LT(-1);
        this.state = 591;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,71,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, TibboBasicParser.RULE_postfixExpression);
                this.state = 580;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 581;
                this.match(TibboBasicParser.DOT);
                this.state = 582;
                localctx.property = this.match(TibboBasicParser.IDENTIFIER);
                this.state = 586;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,70,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 583;
                        this.postfix(); 
                    }
                    this.state = 588;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,70,this._ctx);
                }
         
            }
            this.state = 593;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,71,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function PostfixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_postfix;
    return this;
}

PostfixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostfixContext.prototype.constructor = PostfixContext;

PostfixContext.prototype.argList = function() {
    return this.getTypedRuleContext(ArgListContext,0);
};

PostfixContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterPostfix(this);
	}
};

PostfixContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitPostfix(this);
	}
};

PostfixContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitPostfix(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.PostfixContext = PostfixContext;

TibboBasicParser.prototype.postfix = function() {

    var localctx = new PostfixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, TibboBasicParser.RULE_postfix);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 594;
        this.argList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_primaryExpression;
    return this;
}

PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;

PrimaryExpressionContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

PrimaryExpressionContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

PrimaryExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PrimaryExpressionContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

PrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterPrimaryExpression(this);
	}
};

PrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitPrimaryExpression(this);
	}
};

PrimaryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitPrimaryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.PrimaryExpressionContext = PrimaryExpressionContext;

TibboBasicParser.prototype.primaryExpression = function() {

    var localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, TibboBasicParser.RULE_primaryExpression);
    try {
        this.state = 601;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TibboBasicParser.FALSE:
        case TibboBasicParser.TRUE:
        case TibboBasicParser.STRINGLITERAL:
        case TibboBasicParser.TemplateStringLiteral:
        case TibboBasicParser.HEXLITERAL:
        case TibboBasicParser.BINLITERAL:
        case TibboBasicParser.INTEGERLITERAL:
        case TibboBasicParser.MINUS:
        case TibboBasicParser.PLUS:
        case TibboBasicParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 596;
            this.literal();
            break;
        case TibboBasicParser.LPAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 597;
            this.match(TibboBasicParser.LPAREN);
            this.state = 598;
            this.expression(0);
            this.state = 599;
            this.match(TibboBasicParser.RPAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_variableStmt;
    return this;
}

VariableStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableStmtContext.prototype.constructor = VariableStmtContext;

VariableStmtContext.prototype.DIM = function() {
    return this.getToken(TibboBasicParser.DIM, 0);
};

VariableStmtContext.prototype.variableListStmt = function() {
    return this.getTypedRuleContext(VariableListStmtContext,0);
};

VariableStmtContext.prototype.visibility = function() {
    return this.getTypedRuleContext(VisibilityContext,0);
};

VariableStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterVariableStmt(this);
	}
};

VariableStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitVariableStmt(this);
	}
};

VariableStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitVariableStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.VariableStmtContext = VariableStmtContext;

TibboBasicParser.prototype.variableStmt = function() {

    var localctx = new VariableStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, TibboBasicParser.RULE_variableStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 604;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.PUBLIC) {
            this.state = 603;
            this.visibility();
        }

        this.state = 606;
        this.match(TibboBasicParser.DIM);
        this.state = 607;
        this.variableListStmt();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableListStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_variableListStmt;
    this.variableType = null; // AsTypeClauseContext
    return this;
}

VariableListStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableListStmtContext.prototype.constructor = VariableListStmtContext;

VariableListStmtContext.prototype.variableListItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableListItemContext);
    } else {
        return this.getTypedRuleContext(VariableListItemContext,i);
    }
};

VariableListStmtContext.prototype.asTypeClause = function() {
    return this.getTypedRuleContext(AsTypeClauseContext,0);
};

VariableListStmtContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.COMMA);
    } else {
        return this.getToken(TibboBasicParser.COMMA, i);
    }
};


VariableListStmtContext.prototype.EQ = function() {
    return this.getToken(TibboBasicParser.EQ, 0);
};

VariableListStmtContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

VariableListStmtContext.prototype.arrayLiteral = function() {
    return this.getTypedRuleContext(ArrayLiteralContext,0);
};

VariableListStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterVariableListStmt(this);
	}
};

VariableListStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitVariableListStmt(this);
	}
};

VariableListStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitVariableListStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.VariableListStmtContext = VariableListStmtContext;

TibboBasicParser.prototype.variableListStmt = function() {

    var localctx = new VariableListStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, TibboBasicParser.RULE_variableListStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 609;
        this.variableListItem();
        this.state = 616;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TibboBasicParser.COMMA) {
            this.state = 610;
            this.match(TibboBasicParser.COMMA);
            this.state = 612;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TibboBasicParser.IDENTIFIER) {
                this.state = 611;
                this.variableListItem();
            }

            this.state = 618;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 619;
        localctx.variableType = this.asTypeClause();
        this.state = 625;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.EQ) {
            this.state = 620;
            this.match(TibboBasicParser.EQ);
            this.state = 623;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TibboBasicParser.FALSE:
            case TibboBasicParser.NOT:
            case TibboBasicParser.TRUE:
            case TibboBasicParser.STRINGLITERAL:
            case TibboBasicParser.TemplateStringLiteral:
            case TibboBasicParser.HEXLITERAL:
            case TibboBasicParser.BINLITERAL:
            case TibboBasicParser.INTEGERLITERAL:
            case TibboBasicParser.LPAREN:
            case TibboBasicParser.MINUS:
            case TibboBasicParser.PLUS:
            case TibboBasicParser.IDENTIFIER:
                this.state = 621;
                this.expression(0);
                break;
            case TibboBasicParser.L_CURLY_BRACKET:
                this.state = 622;
                this.arrayLiteral();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableListItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_variableListItem;
    return this;
}

VariableListItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableListItemContext.prototype.constructor = VariableListItemContext;

VariableListItemContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

VariableListItemContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

VariableListItemContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

VariableListItemContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

VariableListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterVariableListItem(this);
	}
};

VariableListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitVariableListItem(this);
	}
};

VariableListItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitVariableListItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.VariableListItemContext = VariableListItemContext;

TibboBasicParser.prototype.variableListItem = function() {

    var localctx = new VariableListItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, TibboBasicParser.RULE_variableListItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 627;
        this.match(TibboBasicParser.IDENTIFIER);
        this.state = 632;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.LPAREN) {
            this.state = 628;
            this.match(TibboBasicParser.LPAREN);
            this.state = 629;
            this.literal();
            this.state = 630;
            this.match(TibboBasicParser.RPAREN);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhileWendStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_whileWendStmt;
    return this;
}

WhileWendStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileWendStmtContext.prototype.constructor = WhileWendStmtContext;

WhileWendStmtContext.prototype.WHILE = function() {
    return this.getToken(TibboBasicParser.WHILE, 0);
};

WhileWendStmtContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WhileWendStmtContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

WhileWendStmtContext.prototype.WEND = function() {
    return this.getToken(TibboBasicParser.WEND, 0);
};

WhileWendStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterWhileWendStmt(this);
	}
};

WhileWendStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitWhileWendStmt(this);
	}
};

WhileWendStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitWhileWendStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.WhileWendStmtContext = WhileWendStmtContext;

TibboBasicParser.prototype.whileWendStmt = function() {

    var localctx = new WhileWendStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, TibboBasicParser.RULE_whileWendStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 634;
        this.match(TibboBasicParser.WHILE);
        this.state = 635;
        this.expression(0);
        this.state = 636;
        this.block();
        this.state = 637;
        this.match(TibboBasicParser.WEND);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_objectDeclaration;
    return this;
}

ObjectDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectDeclarationContext.prototype.constructor = ObjectDeclarationContext;

ObjectDeclarationContext.prototype.OBJECT = function() {
    return this.getToken(TibboBasicParser.OBJECT, 0);
};

ObjectDeclarationContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

ObjectDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterObjectDeclaration(this);
	}
};

ObjectDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitObjectDeclaration(this);
	}
};

ObjectDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitObjectDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.ObjectDeclarationContext = ObjectDeclarationContext;

TibboBasicParser.prototype.objectDeclaration = function() {

    var localctx = new ObjectDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, TibboBasicParser.RULE_objectDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 639;
        this.match(TibboBasicParser.OBJECT);
        this.state = 640;
        this.match(TibboBasicParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArgListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_argList;
    return this;
}

ArgListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgListContext.prototype.constructor = ArgListContext;

ArgListContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

ArgListContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

ArgListContext.prototype.arg = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgContext);
    } else {
        return this.getTypedRuleContext(ArgContext,i);
    }
};

ArgListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.COMMA);
    } else {
        return this.getToken(TibboBasicParser.COMMA, i);
    }
};


ArgListContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterArgList(this);
	}
};

ArgListContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitArgList(this);
	}
};

ArgListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitArgList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.ArgListContext = ArgListContext;

TibboBasicParser.prototype.argList = function() {

    var localctx = new ArgListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, TibboBasicParser.RULE_argList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 642;
        this.match(TibboBasicParser.LPAREN);
        this.state = 651;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (TibboBasicParser.FALSE - 38)) | (1 << (TibboBasicParser.NOT - 38)) | (1 << (TibboBasicParser.TRUE - 38)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (TibboBasicParser.STRINGLITERAL - 78)) | (1 << (TibboBasicParser.TemplateStringLiteral - 78)) | (1 << (TibboBasicParser.HEXLITERAL - 78)) | (1 << (TibboBasicParser.BINLITERAL - 78)) | (1 << (TibboBasicParser.INTEGERLITERAL - 78)) | (1 << (TibboBasicParser.LPAREN - 78)) | (1 << (TibboBasicParser.MINUS - 78)) | (1 << (TibboBasicParser.PLUS - 78)))) !== 0) || _la===TibboBasicParser.IDENTIFIER) {
            this.state = 643;
            this.arg();
            this.state = 648;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TibboBasicParser.COMMA) {
                this.state = 644;
                this.match(TibboBasicParser.COMMA);
                this.state = 645;
                this.arg();
                this.state = 650;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 653;
        this.match(TibboBasicParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArgContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_arg;
    return this;
}

ArgContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgContext.prototype.constructor = ArgContext;

ArgContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ArgContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterArg(this);
	}
};

ArgContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitArg(this);
	}
};

ArgContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitArg(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.ArgContext = ArgContext;

TibboBasicParser.prototype.arg = function() {

    var localctx = new ArgContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, TibboBasicParser.RULE_arg);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 655;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParamListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_paramList;
    return this;
}

ParamListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParamListContext.prototype.constructor = ParamListContext;

ParamListContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

ParamListContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

ParamListContext.prototype.param = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParamContext);
    } else {
        return this.getTypedRuleContext(ParamContext,i);
    }
};

ParamListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.COMMA);
    } else {
        return this.getToken(TibboBasicParser.COMMA, i);
    }
};


ParamListContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterParamList(this);
	}
};

ParamListContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitParamList(this);
	}
};

ParamListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitParamList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.ParamListContext = ParamListContext;

TibboBasicParser.prototype.paramList = function() {

    var localctx = new ParamListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, TibboBasicParser.RULE_paramList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 657;
        this.match(TibboBasicParser.LPAREN);
        this.state = 666;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.BYREF || _la===TibboBasicParser.BYVAL || _la===TibboBasicParser.IDENTIFIER) {
            this.state = 658;
            this.param();
            this.state = 663;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TibboBasicParser.COMMA) {
                this.state = 659;
                this.match(TibboBasicParser.COMMA);
                this.state = 660;
                this.param();
                this.state = 665;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 668;
        this.match(TibboBasicParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParamContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_param;
    this.name = null; // Token
    this.valueType = null; // AsTypeClauseContext
    return this;
}

ParamContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParamContext.prototype.constructor = ParamContext;

ParamContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

ParamContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

ParamContext.prototype.INTEGERLITERAL = function() {
    return this.getToken(TibboBasicParser.INTEGERLITERAL, 0);
};

ParamContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

ParamContext.prototype.BYVAL = function() {
    return this.getToken(TibboBasicParser.BYVAL, 0);
};

ParamContext.prototype.BYREF = function() {
    return this.getToken(TibboBasicParser.BYREF, 0);
};

ParamContext.prototype.asTypeClause = function() {
    return this.getTypedRuleContext(AsTypeClauseContext,0);
};

ParamContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterParam(this);
	}
};

ParamContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitParam(this);
	}
};

ParamContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitParam(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.ParamContext = ParamContext;

TibboBasicParser.prototype.param = function() {

    var localctx = new ParamContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, TibboBasicParser.RULE_param);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 671;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.BYREF || _la===TibboBasicParser.BYVAL) {
            this.state = 670;
            _la = this._input.LA(1);
            if(!(_la===TibboBasicParser.BYREF || _la===TibboBasicParser.BYVAL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 673;
        localctx.name = this.match(TibboBasicParser.IDENTIFIER);
        this.state = 677;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.LPAREN) {
            this.state = 674;
            this.match(TibboBasicParser.LPAREN);
            this.state = 675;
            this.match(TibboBasicParser.INTEGERLITERAL);
            this.state = 676;
            this.match(TibboBasicParser.RPAREN);
        }

        this.state = 680;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.AS) {
            this.state = 679;
            localctx.valueType = this.asTypeClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AsTypeClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_asTypeClause;
    this.valueType = null; // TypeContext
    return this;
}

AsTypeClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AsTypeClauseContext.prototype.constructor = AsTypeClauseContext;

AsTypeClauseContext.prototype.AS = function() {
    return this.getToken(TibboBasicParser.AS, 0);
};

AsTypeClauseContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

AsTypeClauseContext.prototype.ENUM = function() {
    return this.getToken(TibboBasicParser.ENUM, 0);
};

AsTypeClauseContext.prototype.fieldLength = function() {
    return this.getTypedRuleContext(FieldLengthContext,0);
};

AsTypeClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterAsTypeClause(this);
	}
};

AsTypeClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitAsTypeClause(this);
	}
};

AsTypeClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitAsTypeClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.AsTypeClauseContext = AsTypeClauseContext;

TibboBasicParser.prototype.asTypeClause = function() {

    var localctx = new AsTypeClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, TibboBasicParser.RULE_asTypeClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 682;
        this.match(TibboBasicParser.AS);
        this.state = 684;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.ENUM) {
            this.state = 683;
            this.match(TibboBasicParser.ENUM);
        }

        this.state = 686;
        localctx.valueType = this.type();
        this.state = 688;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.MULT) {
            this.state = 687;
            this.fieldLength();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BaseTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_baseType;
    return this;
}

BaseTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BaseTypeContext.prototype.constructor = BaseTypeContext;

BaseTypeContext.prototype.CHAR = function() {
    return this.getToken(TibboBasicParser.CHAR, 0);
};

BaseTypeContext.prototype.SHORT = function() {
    return this.getToken(TibboBasicParser.SHORT, 0);
};

BaseTypeContext.prototype.WORD = function() {
    return this.getToken(TibboBasicParser.WORD, 0);
};

BaseTypeContext.prototype.DWORD = function() {
    return this.getToken(TibboBasicParser.DWORD, 0);
};

BaseTypeContext.prototype.FLOAT = function() {
    return this.getToken(TibboBasicParser.FLOAT, 0);
};

BaseTypeContext.prototype.REAL = function() {
    return this.getToken(TibboBasicParser.REAL, 0);
};

BaseTypeContext.prototype.BOOLEAN = function() {
    return this.getToken(TibboBasicParser.BOOLEAN, 0);
};

BaseTypeContext.prototype.BYTE = function() {
    return this.getToken(TibboBasicParser.BYTE, 0);
};

BaseTypeContext.prototype.INTEGER = function() {
    return this.getToken(TibboBasicParser.INTEGER, 0);
};

BaseTypeContext.prototype.LONG = function() {
    return this.getToken(TibboBasicParser.LONG, 0);
};

BaseTypeContext.prototype.STRING = function() {
    return this.getToken(TibboBasicParser.STRING, 0);
};

BaseTypeContext.prototype.MULT = function() {
    return this.getToken(TibboBasicParser.MULT, 0);
};

BaseTypeContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BaseTypeContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.WS);
    } else {
        return this.getToken(TibboBasicParser.WS, i);
    }
};


BaseTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterBaseType(this);
	}
};

BaseTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitBaseType(this);
	}
};

BaseTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitBaseType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.BaseTypeContext = BaseTypeContext;

TibboBasicParser.prototype.baseType = function() {

    var localctx = new BaseTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, TibboBasicParser.RULE_baseType);
    var _la = 0; // Token type
    try {
        this.state = 711;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TibboBasicParser.CHAR:
            this.enterOuterAlt(localctx, 1);
            this.state = 690;
            this.match(TibboBasicParser.CHAR);
            break;
        case TibboBasicParser.SHORT:
            this.enterOuterAlt(localctx, 2);
            this.state = 691;
            this.match(TibboBasicParser.SHORT);
            break;
        case TibboBasicParser.WORD:
            this.enterOuterAlt(localctx, 3);
            this.state = 692;
            this.match(TibboBasicParser.WORD);
            break;
        case TibboBasicParser.DWORD:
            this.enterOuterAlt(localctx, 4);
            this.state = 693;
            this.match(TibboBasicParser.DWORD);
            break;
        case TibboBasicParser.FLOAT:
            this.enterOuterAlt(localctx, 5);
            this.state = 694;
            this.match(TibboBasicParser.FLOAT);
            break;
        case TibboBasicParser.REAL:
            this.enterOuterAlt(localctx, 6);
            this.state = 695;
            this.match(TibboBasicParser.REAL);
            break;
        case TibboBasicParser.BOOLEAN:
            this.enterOuterAlt(localctx, 7);
            this.state = 696;
            this.match(TibboBasicParser.BOOLEAN);
            break;
        case TibboBasicParser.BYTE:
            this.enterOuterAlt(localctx, 8);
            this.state = 697;
            this.match(TibboBasicParser.BYTE);
            break;
        case TibboBasicParser.INTEGER:
            this.enterOuterAlt(localctx, 9);
            this.state = 698;
            this.match(TibboBasicParser.INTEGER);
            break;
        case TibboBasicParser.LONG:
            this.enterOuterAlt(localctx, 10);
            this.state = 699;
            this.match(TibboBasicParser.LONG);
            break;
        case TibboBasicParser.STRING:
            this.enterOuterAlt(localctx, 11);
            this.state = 700;
            this.match(TibboBasicParser.STRING);
            this.state = 709;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
            if(la_===1) {
                this.state = 702;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TibboBasicParser.WS) {
                    this.state = 701;
                    this.match(TibboBasicParser.WS);
                }

                this.state = 704;
                this.match(TibboBasicParser.MULT);
                this.state = 706;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TibboBasicParser.WS) {
                    this.state = 705;
                    this.match(TibboBasicParser.WS);
                }

                this.state = 708;
                this.expression(0);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComplexTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_complexType;
    return this;
}

ComplexTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComplexTypeContext.prototype.constructor = ComplexTypeContext;

ComplexTypeContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.IDENTIFIER);
    } else {
        return this.getToken(TibboBasicParser.IDENTIFIER, i);
    }
};


ComplexTypeContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.DOT);
    } else {
        return this.getToken(TibboBasicParser.DOT, i);
    }
};


ComplexTypeContext.prototype.BANG = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.BANG);
    } else {
        return this.getToken(TibboBasicParser.BANG, i);
    }
};


ComplexTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterComplexType(this);
	}
};

ComplexTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitComplexType(this);
	}
};

ComplexTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitComplexType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.ComplexTypeContext = ComplexTypeContext;

TibboBasicParser.prototype.complexType = function() {

    var localctx = new ComplexTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, TibboBasicParser.RULE_complexType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 713;
        this.match(TibboBasicParser.IDENTIFIER);
        this.state = 718;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TibboBasicParser.DOT || _la===TibboBasicParser.BANG) {
            this.state = 714;
            _la = this._input.LA(1);
            if(!(_la===TibboBasicParser.DOT || _la===TibboBasicParser.BANG)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 715;
            this.match(TibboBasicParser.IDENTIFIER);
            this.state = 720;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldLengthContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_fieldLength;
    return this;
}

FieldLengthContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldLengthContext.prototype.constructor = FieldLengthContext;

FieldLengthContext.prototype.MULT = function() {
    return this.getToken(TibboBasicParser.MULT, 0);
};

FieldLengthContext.prototype.INTEGERLITERAL = function() {
    return this.getToken(TibboBasicParser.INTEGERLITERAL, 0);
};

FieldLengthContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

FieldLengthContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterFieldLength(this);
	}
};

FieldLengthContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitFieldLength(this);
	}
};

FieldLengthContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitFieldLength(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.FieldLengthContext = FieldLengthContext;

TibboBasicParser.prototype.fieldLength = function() {

    var localctx = new FieldLengthContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, TibboBasicParser.RULE_fieldLength);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 721;
        this.match(TibboBasicParser.MULT);
        this.state = 722;
        _la = this._input.LA(1);
        if(!(_la===TibboBasicParser.INTEGERLITERAL || _la===TibboBasicParser.IDENTIFIER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LineLabelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_lineLabel;
    return this;
}

LineLabelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LineLabelContext.prototype.constructor = LineLabelContext;

LineLabelContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

LineLabelContext.prototype.COLON = function() {
    return this.getToken(TibboBasicParser.COLON, 0);
};

LineLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterLineLabel(this);
	}
};

LineLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitLineLabel(this);
	}
};

LineLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitLineLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.LineLabelContext = LineLabelContext;

TibboBasicParser.prototype.lineLabel = function() {

    var localctx = new LineLabelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, TibboBasicParser.RULE_lineLabel);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 724;
        this.match(TibboBasicParser.IDENTIFIER);
        this.state = 725;
        this.match(TibboBasicParser.COLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.HEXLITERAL = function() {
    return this.getToken(TibboBasicParser.HEXLITERAL, 0);
};

LiteralContext.prototype.BINLITERAL = function() {
    return this.getToken(TibboBasicParser.BINLITERAL, 0);
};

LiteralContext.prototype.INTEGERLITERAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.INTEGERLITERAL);
    } else {
        return this.getToken(TibboBasicParser.INTEGERLITERAL, i);
    }
};


LiteralContext.prototype.DOT = function() {
    return this.getToken(TibboBasicParser.DOT, 0);
};

LiteralContext.prototype.PLUS = function() {
    return this.getToken(TibboBasicParser.PLUS, 0);
};

LiteralContext.prototype.MINUS = function() {
    return this.getToken(TibboBasicParser.MINUS, 0);
};

LiteralContext.prototype.STRINGLITERAL = function() {
    return this.getToken(TibboBasicParser.STRINGLITERAL, 0);
};

LiteralContext.prototype.TemplateStringLiteral = function() {
    return this.getToken(TibboBasicParser.TemplateStringLiteral, 0);
};

LiteralContext.prototype.TRUE = function() {
    return this.getToken(TibboBasicParser.TRUE, 0);
};

LiteralContext.prototype.FALSE = function() {
    return this.getToken(TibboBasicParser.FALSE, 0);
};

LiteralContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitLiteral(this);
	}
};

LiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.LiteralContext = LiteralContext;

TibboBasicParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, TibboBasicParser.RULE_literal);
    var _la = 0; // Token type
    try {
        this.state = 746;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TibboBasicParser.HEXLITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 727;
            this.match(TibboBasicParser.HEXLITERAL);
            break;
        case TibboBasicParser.BINLITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 728;
            this.match(TibboBasicParser.BINLITERAL);
            break;
        case TibboBasicParser.INTEGERLITERAL:
        case TibboBasicParser.MINUS:
        case TibboBasicParser.PLUS:
            this.enterOuterAlt(localctx, 3);
            this.state = 730;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TibboBasicParser.MINUS || _la===TibboBasicParser.PLUS) {
                this.state = 729;
                _la = this._input.LA(1);
                if(!(_la===TibboBasicParser.MINUS || _la===TibboBasicParser.PLUS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 738;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
            if(la_===1) {
                this.state = 733; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 732;
                    this.match(TibboBasicParser.INTEGERLITERAL);
                    this.state = 735; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===TibboBasicParser.INTEGERLITERAL);
                this.state = 737;
                this.match(TibboBasicParser.DOT);

            }
            this.state = 740;
            this.match(TibboBasicParser.INTEGERLITERAL);
            break;
        case TibboBasicParser.STRINGLITERAL:
            this.enterOuterAlt(localctx, 4);
            this.state = 741;
            this.match(TibboBasicParser.STRINGLITERAL);
            break;
        case TibboBasicParser.TemplateStringLiteral:
            this.enterOuterAlt(localctx, 5);
            this.state = 742;
            this.match(TibboBasicParser.TemplateStringLiteral);
            break;
        case TibboBasicParser.TRUE:
            this.enterOuterAlt(localctx, 6);
            this.state = 743;
            this.match(TibboBasicParser.TRUE);
            break;
        case TibboBasicParser.FALSE:
            this.enterOuterAlt(localctx, 7);
            this.state = 744;
            this.match(TibboBasicParser.FALSE);
            break;
        case TibboBasicParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 8);
            this.state = 745;
            this.match(TibboBasicParser.IDENTIFIER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_arrayLiteral;
    return this;
}

ArrayLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayLiteralContext.prototype.constructor = ArrayLiteralContext;

ArrayLiteralContext.prototype.L_CURLY_BRACKET = function() {
    return this.getToken(TibboBasicParser.L_CURLY_BRACKET, 0);
};

ArrayLiteralContext.prototype.R_CURLY_BRACKET = function() {
    return this.getToken(TibboBasicParser.R_CURLY_BRACKET, 0);
};

ArrayLiteralContext.prototype.literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LiteralContext);
    } else {
        return this.getTypedRuleContext(LiteralContext,i);
    }
};

ArrayLiteralContext.prototype.arrayLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArrayLiteralContext);
    } else {
        return this.getTypedRuleContext(ArrayLiteralContext,i);
    }
};

ArrayLiteralContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TibboBasicParser.COMMA);
    } else {
        return this.getToken(TibboBasicParser.COMMA, i);
    }
};


ArrayLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterArrayLiteral(this);
	}
};

ArrayLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitArrayLiteral(this);
	}
};

ArrayLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitArrayLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.ArrayLiteralContext = ArrayLiteralContext;

TibboBasicParser.prototype.arrayLiteral = function() {

    var localctx = new ArrayLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, TibboBasicParser.RULE_arrayLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 748;
        this.match(TibboBasicParser.L_CURLY_BRACKET);
        this.state = 751;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TibboBasicParser.FALSE:
        case TibboBasicParser.TRUE:
        case TibboBasicParser.STRINGLITERAL:
        case TibboBasicParser.TemplateStringLiteral:
        case TibboBasicParser.HEXLITERAL:
        case TibboBasicParser.BINLITERAL:
        case TibboBasicParser.INTEGERLITERAL:
        case TibboBasicParser.MINUS:
        case TibboBasicParser.PLUS:
        case TibboBasicParser.IDENTIFIER:
            this.state = 749;
            this.literal();
            break;
        case TibboBasicParser.L_CURLY_BRACKET:
            this.state = 750;
            this.arrayLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 760;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,99,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 753;
                this.match(TibboBasicParser.COMMA);
                this.state = 756;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TibboBasicParser.FALSE:
                case TibboBasicParser.TRUE:
                case TibboBasicParser.STRINGLITERAL:
                case TibboBasicParser.TemplateStringLiteral:
                case TibboBasicParser.HEXLITERAL:
                case TibboBasicParser.BINLITERAL:
                case TibboBasicParser.INTEGERLITERAL:
                case TibboBasicParser.MINUS:
                case TibboBasicParser.PLUS:
                case TibboBasicParser.IDENTIFIER:
                    this.state = 754;
                    this.literal();
                    break;
                case TibboBasicParser.L_CURLY_BRACKET:
                    this.state = 755;
                    this.arrayLiteral();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 762;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,99,this._ctx);
        }

        this.state = 764;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TibboBasicParser.COMMA) {
            this.state = 763;
            this.match(TibboBasicParser.COMMA);
        }

        this.state = 766;
        this.match(TibboBasicParser.R_CURLY_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.baseType = function() {
    return this.getTypedRuleContext(BaseTypeContext,0);
};

TypeContext.prototype.complexType = function() {
    return this.getTypedRuleContext(ComplexTypeContext,0);
};

TypeContext.prototype.LPAREN = function() {
    return this.getToken(TibboBasicParser.LPAREN, 0);
};

TypeContext.prototype.RPAREN = function() {
    return this.getToken(TibboBasicParser.RPAREN, 0);
};

TypeContext.prototype.IDENTIFIER = function() {
    return this.getToken(TibboBasicParser.IDENTIFIER, 0);
};

TypeContext.prototype.INTEGERLITERAL = function() {
    return this.getToken(TibboBasicParser.INTEGERLITERAL, 0);
};

TypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterType(this);
	}
};

TypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitType(this);
	}
};

TypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.TypeContext = TypeContext;

TibboBasicParser.prototype.type = function() {

    var localctx = new TypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, TibboBasicParser.RULE_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 770;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TibboBasicParser.BOOLEAN:
        case TibboBasicParser.REAL:
        case TibboBasicParser.BYTE:
        case TibboBasicParser.CHAR:
        case TibboBasicParser.DWORD:
        case TibboBasicParser.FLOAT:
        case TibboBasicParser.INTEGER:
        case TibboBasicParser.LONG:
        case TibboBasicParser.SHORT:
        case TibboBasicParser.STRING:
        case TibboBasicParser.WORD:
            this.state = 768;
            this.baseType();
            break;
        case TibboBasicParser.IDENTIFIER:
            this.state = 769;
            this.complexType();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 775;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
        if(la_===1) {
            this.state = 772;
            this.match(TibboBasicParser.LPAREN);
            this.state = 773;
            _la = this._input.LA(1);
            if(!(_la===TibboBasicParser.INTEGERLITERAL || _la===TibboBasicParser.IDENTIFIER)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 774;
            this.match(TibboBasicParser.RPAREN);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VisibilityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TibboBasicParser.RULE_visibility;
    return this;
}

VisibilityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VisibilityContext.prototype.constructor = VisibilityContext;

VisibilityContext.prototype.PUBLIC = function() {
    return this.getToken(TibboBasicParser.PUBLIC, 0);
};

VisibilityContext.prototype.enterRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.enterVisibility(this);
	}
};

VisibilityContext.prototype.exitRule = function(listener) {
    if(listener instanceof TibboBasicParserListener ) {
        listener.exitVisibility(this);
	}
};

VisibilityContext.prototype.accept = function(visitor) {
    if ( visitor instanceof TibboBasicParserVisitor ) {
        return visitor.visitVisibility(this);
    } else {
        return visitor.visitChildren(this);
    }
};




TibboBasicParser.VisibilityContext = VisibilityContext;

TibboBasicParser.prototype.visibility = function() {

    var localctx = new VisibilityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, TibboBasicParser.RULE_visibility);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 777;
        this.match(TibboBasicParser.PUBLIC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


TibboBasicParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 38:
			return this.expression_sempred(localctx, predIndex);
	case 41:
			return this.postfixExpression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

TibboBasicParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 6);
		case 1:
			return this.precpred(this._ctx, 5);
		case 2:
			return this.precpred(this._ctx, 4);
		case 3:
			return this.precpred(this._ctx, 3);
		case 4:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

TibboBasicParser.prototype.postfixExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 5:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.TibboBasicParser = TibboBasicParser;
